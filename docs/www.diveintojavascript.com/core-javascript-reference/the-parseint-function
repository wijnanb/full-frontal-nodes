<!doctype html><html><head><meta charset="utf-8" /><meta name="description" content="The JavaScript parseInt() global function parses the string representation of a variable and returns an integer using the specified base." /><title>The JavaScript parseInt Function - Dive Into JavaScript</title><link rel="stylesheet" media="screen" type="text/css" href="http://static.diveintojavascript.com/theme/v2/style/default.css" /></head><body><div id="d"><div id="p" class="ac"><div id="lc"><div id="c"><div id="h"><h3 id="sn"><a href="../index.html">Dive Into JavaScript</a></h3></div><div id="b"><h1>The JavaScript <span class="code">parseInt</span> Function</h1><p>The <strong>JavaScript <span class="code">parseInt</span> global function</strong> returns the integer value of a variable. It parses the string representation of that variable and returns an integer using the specified base.</p><h2>Syntax</h2><pre>var int_val = parseInt(<i>value [, base]</i>);</pre><h2>Parameters</h2><dl><dt><tt>value</tt></dt><dd>Represents the value to be parsed</dd><dt><tt>base</tt></dt><dd>An integer representing the <strong>base</strong> or <strong>radix</strong> of the string to be parsed</p></dl><p>Examples:</p><pre>parseInt(&quot;11&quot;); // returns 11
parseInt(&quot;11&quot;, 2); // returns 3
parseInt(&quot;11&quot;, 8); // returns 9
parseInt(&quot;11&quot;, 16); // returns 17</pre><p>If the variable cannot be converted to a string, the <code>parseInt()</code> function returns <code>NaN</code>. However it is possible to convert compound types such as arrays and objects to numbers, provided that their <code>toString</code> methods return numeric strings:</p><pre>function Foo(arg) {
	this.x = arg;
}
Foo.prototype.toString = function() {
	return this.x;
}
var f = new Foo(42);
parseInt(f); // returns 42</pre><p>The <i>base</i> argument must be an integer between 2 and 36, otherwise <code>parseInt()</code> returns <code>NaN</code>. If <i>base</i> is <code>undefined</code>, <code>null</code> or <code>0</code>, JavaScript assumes the following:</p><ul><li>If the subject string begins with <tt>0x</tt>, the base is 16 (hexadecimal)</li><li>If the subject string begins with <tt>0</tt>, the base is 8 (octal)</li><li>If the subject string begins with any other value, the base is 10 (decimal)</li></ul><h2>Description</h2><p>The <strong><span class="code">parseInt</span> function</strong> walks through the characters of the string until it finds a character that is not a numeral in the specified base. The value parsed up to that point is then converted to an integer. Consequently, the result of the <code>parseInt()</code> function depends on the leftmost characters of the string.</p><p>If the first character of the string cannot be converted to a number, <code>parseInt</code> returns <code>NaN</code>.</p><p>The base defines which characters are used to represent numbers. As pointed out earlier, the base determines when the <code>parseInt()</code> function should stop parsing.</p><p>For example, the decimal system uses the digits from <tt>0</tt> through <tt>9</tt>. On the other hand, the hexatridecimal system (base 36) uses the digits from <tt>0</tt> through <tt>9</tt> plus the letters <tt>A</tt> through <tt>Z</tt>. As a result, a radix of 10 will cause the <code>parseInt()</code> function to stop when it encounters a letter. On the contrary, when using base 36, <code>parseInt</code> will not stop until it encounters a non alphanumeric value.</p><p>The following examples illustrate this:</p><pre>parseInt(&quot;12a&quot;); // base 10 (implied), returns 12
parseInt(&quot;12a&quot;, 10); // base 10, returns 12
parseInt(&quot;12a&quot;, 36); // base 36, returns 1378
parseInt(&quot;12a?&quot;, 36); // base 36, returns 1378</pre><p>The <a href="the-isnan-function"><code>isNaN()</code></a> function can be used to determine if the result of the <code>parseInt()</code> function is <code>NaN</code>.</p><h2>Base Conversion</h2><p>Using the <code>parseInt()</code> function together with the <code>Number.toString()</code> method we can create a small function to <strong>convert a number from one base to another</strong>:</p><pre>function base_convert(number, from_base, to_base) {
    return parseInt(number, from_base || 10).toString(to_base || 10);
}</pre><p>Both <i>from_base</i> and <i>to_base</i> have to be integers between 2 and 36.</p><p>Base conversion examples:</p><pre>base_convert(222, 8, 36); // 42
base_convert(10101, 2, 10); // 21
base_convert(0xfc); // 252</pre><h2>See also</h2><ul><li><a href="the-parsefloat-function">The <code>parseFloat()</code> function</a></li><li><a href="the-nan-property">The <code>NaN</code> property</a></li><li><a href="the-isnan-function">The <code>isNaN()</code> function</a></li><li><a href="the-number-object">The <code>Number</code> object</a></li></ul><div class="contact-note"><p>If you see a typo, want to make a suggestion or have anything in particular you'd like to know more about, please drop us an e-mail at <a href="mailto:hello at diveintojavascript dot com">hello at diveintojavascript dot com</a>.</p></div></div><div id="f"><div class="copy-notice"><p>Copyright &copy; 2010-2011 Dive Into JavaScript</p></div></div></div></div><div id="rc"><div id="s"><script>google_ad_client="pub-4089529313925168";google_ad_slot="5129818829";google_ad_width=300;google_ad_height=250;</script><script src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script><div class="block"><div class="head"><h3>JavaScript Tools</h3></div><div class="body"><ul><!--li><a href="/tools/javascript-minifier-packer-compressor-compiler">JavaScript Minifier/Packer/Compressor/Compiler</a></li--><li><a href="../tools/javascript-regular-expressions-toolkit">JavaScript Regular Expressions Toolkit</a></li></ul></div></div><div class="block"><div class="head"><h3>Projects</h3></div><div class="body"><ul><li><a href="../projects/javascript-sprintf">JavaScript sprintf()</a></li><li><a href="../projects/sidjs-load-javascript-and-stylesheets-on-demand">SidJS - JavaScript and CSS Lazy Loader</a></li></ul></div></div><div class="block"><div class="head"><h3>Articles</h3></div><div class="body"><ul><li><a href="../articles/javascript-regular-expressions">JavaScript Regular Expressions</a></li><li><a href="../articles/javascript-boolean-objects-vs-boolean-primitives">JavaScript Boolean objects vs. boolean primitives</a></li></ul></div></div><div class="block"><div class="head"><h3>Tutorials</h3></div><div class="body"><ul><li><a href="../tutorials/web-storage-tutorial-creating-an-address-book-application">JavaScript Web Storage Tutorial: Creating an Address Book Application</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript APIs</h3></div><div class="body"><ul><li><a href="../javascript-apis/web-storage-dom-storage">Web Storage (DOM Storage)</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript Core Reference</h3></div><div class="body"><h4>Global objects</h4><ul><li><a href="the-array-object">Array</a></li><li><a href="the-boolean-object">Boolean</a></li><li>Date</li><li>Error</li><li>Function</li><li><a href="the-math-object">Math</a></li><li><a href="the-number-object">Number</a></li><li><a href="the-object-object">Object</a></li><li><a href="the-regexp-object">RegExp</a></li><li><a href="the-string-object">String</a></li></ul><h4>Global properties</h4><ul><li><a href="the-infinity-property">Infinity</a></li><li><a href="the-nan-property">NaN</a></li><li><a href="the-undefined-property">undefined</a></li></ul><h4>Global functions</h4><ul><li><a href="the-decodeuri-function">decodeURI</a></li><li><a href="the-decodeuricomponent-function">decodeURIComponent</a></li><li><a href="the-encodeuri-function">encodeURI</a></li><li><a href="the-encodeuricomponent-function">encodeURIComponent</a></li><li>eval</li><li><a href="the-isfinite-function">isFinite</a></li><li><a href="the-isnan-function">isNaN</a></li><li><a href="the-parsefloat-function">parseFloat</a></li><li><a href="the-parseint-function">parseInt</a></li></ul></div></div><div class="block"><div class="body"><div style="text-align: center;"><a href="http://www.webfaction.com/?affiliate=alexei"><img src="http://www.webfaction.com/banners/webfaction-240x60-agile-hosting-bg.png" alt="WebFaction - Agile hosting, fast and reliable servers" class="banner" /></a></div></div></div></div></div></div></div><script>var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-16425630-1']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script></body></html>
