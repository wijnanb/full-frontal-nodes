<!doctype html><html><head><meta charset="utf-8" /><meta name="description" content="Regular expressions are a powerful tool for matching strings. JavaScript provides convenient methods for searching and replacing strings using regular expressions patterns, highly useful for validating and manipulating user entered text." /><title>Regular expressions in JavaScript - Dive Into JavaScript</title><link rel="stylesheet" media="screen" type="text/css" href="http://static.diveintojavascript.com/theme/v2/style/default.css" /></head><body><div id="d"><div id="p" class="ac"><div id="lc"><div id="c"><div id="h"><h3 id="sn"><a href="../index.html">Dive Into JavaScript</a></h3></div><div id="b"><h1>Regular expressions in JavaScript</h1><h1></h1><div class="entry-intro"><p>Regular expressions are a powerful tool for matching strings. JavaScript provides convenient methods for searching and replacing strings using regular expressions patterns, highly useful for validating and manipulating user entered text.</p></div><p>A <strong>regular expression</strong> is a specific kind of string used to <strong>search and manipulate</strong> textual content based on <strong>patterns</strong>. Often referred to as <strong>regex</strong> or <strong>regexp</strong>, a regular expression or pattern is an expression that describes a <strong>set of strings</strong>. Thus, we refer to <strong>pattern matching</strong> as the process of finding specific sets of strings described by regular expressions.</p><p>Regular expressions are written in a <strong>formal language</strong> interpreted by a <strong>regular expressions engine</strong>. The language provides a <em>concise way</em> to describe sets of strings through a combination of <strong>normal characters</strong> and <strong>metacharacters</strong>. Normal characters are treated as <strong>literals</strong> that have <em>no special meaning</em> and only <em>match themselves</em>. On the other hand, metacharacters or metasequences are characters or sequences of characters that are interpreted in a special way and represent things such as <strong>quantity</strong>, <strong>location</strong>, <strong>types and ranges of characters</strong>. If <em>metadata</em> are data about data, then <em>metacharacters</em> are <em>data about characters</em>.</p><p>Most programming languages support regular expressions one way or the other and in some languages such as Perl they are built into their syntax. JavaScript is no exception and has built-in support for regular expressions since version 1.2. It uses a Perl-like syntax.</p><h2>Regular expressions cheat sheet</h2><h3>Modifiers or flags</h3><p>In JavaScript, there are three optional flags that allow you to change how the regular expressions engine will perform the actual matching:</p><dl><dt><code>g</code></dt><dd><strong>Global match</strong> &mdash; find all matches rather than only the first one</dd><dt><code>i</code></dt><dd><strong>Ignore case</strong> &mdash; match both lower and upper case letters</dd><dt><code>m</code></dt><dd><strong>Multi-line match</strong> &mdash; tells the engine to treat the subject string as multiple lines. <code>^</code> and <code>$</code> match next to <code>\n</code> instead of the start or end of the entire string</dd></dl><h3>Special characters and character classes</h3><dl><dt><code>.</code></dt><dd>Matches <strong>any single character</strong> except the newline character. Example: <code>.at</code> matches <code>bat</code>, <code>cat</code>, <code>rat</code> and also <code>.at</code>, <code>1at</code><br />Equivalent to <code>[^\x0A\x0D\u2028\u2029]</code></dd><dt><code>[...]</code></dt><dd>The <strong>bracket expression</strong> specifies a <strong>character class</strong> and matches any single character contained within the brackets or range of characters. Example: <code>[abc]</code> matches <code>a</code>, <code>b</code> and/or <code>c</code>, in any order.<br />A <strong>range of characters</strong> is specified using the <code>-</code>, for example <code>[a-z]</code> matches any lowercase ASCII letter from <code>a</code> to <code>z</code>. Other examples include <code>[A-F]</code> which matches any uppercase ASCII letter from <code>A</code> to <code>F</code>, and <code>[4-7]</code> which matches any number from <code>4</code> to <code>7</code>. The <code>-</code> character is treated as a literal character if it's listed first, last or escaped: <code>[-]</code> matches <code>-</code>, <code>[a-]</code> matches <code>a</code> and/or <code>-</code>, <code>[a\-z]</code> matches <code>a</code>, <code>-</code> and/or <code>z</code>.<br />Additionally, listed characters can be mixed with ranges of characters. Example: <code>[0-9a-fA-F]</code> matches any number and also letters from <code>a</code> to <code>z</code> irrespective of their case, <code>[02468aeiouy-]</code> matches even numbers, vowels and the <code>-</code> character.<br />Brackets inside bracket expressions are treated as literals if they are escaped. Example: <code>[\[\]]</code> matches <code>[</code> and/or <code>]</code>. The <code>[</code> doesn't need to be escaped if it's listed first: <code>[[]</code> matches <code>[</code></dd><dt><code>[^...]</code></dt><dd>The <strong>negated bracket expression</strong> or <strong>negated character class</strong> matches any single character <b>not</b> contained within the brackets or range of characters. Same as above, except that the <code>^</code> negates the expression. Example: <code>[0-9]</code> matches any character that's not a number.<br />Although the <code>^</code> character is a special character, it doesn't need to be escaped within the brackets in order to be treated as a literal. Example: <code>[^]</code> matches anything, <code>[^^]</code> matches anything except the <code>^</code> character.</dd><dt><code>\w</code></dt><dd><strong>Word character</strong><br />Equivalent to <code>[A-Za-z0-9_]</code></dd><dt><code>\W</code></dt><dd><strong>Non-word character</strong><br />Equivalent to <code>[^A-Za-z0-9_]</code></dd><dt><code>\d</code></dt><dd><strong>Digit character</strong><br />Equivalent to <code>[0-9]</code></dd><dt><code>\D</code></dt><dd><strong>Non-digit character</strong><br />Equivalent to <code>[^0-9]</code></dd><dt><code>\s</code></dt><dd><strong>Whitespace character</strong><br />Equivalent to <code>[\f\n\r\t\v\u00A0\u2028\u2029]</code> (<code>\u00A0</code> means &quot;no-break space&quot;, <code>\u2028</code> means &quot;line separator&quot;, <code>\u2029</code> means &quot;paragraph separator&quot;)</dd><dt><code>\S</code></dt><dd><strong>Non-whitespace character</strong><br />Equivalent to <code>[^\f\n\r\t\v\u00A0\u2028\u2029]</code></dd><dt><code>\b</code></dt><dd><strong>Backspace</strong> (<code>\x08</code>)</dd><dt><code>\f</code></dt><dd><strong>Form-feed</strong> (<code>\x0C</code>)</dd><dt><code>\n</code></dt><dd><strong>Linefeed</strong> or <strong>newline</strong> (<code>\x0A</code>)</dd><dt><code>\r</code></dt><dd><strong>Carriage return</strong> (<code>\x0D</code>)</dd><dt><code>\t</code></dt><dd><strong>Tab</strong> (<code>\x09</code>)</dd><dt><code>\v</code></dt><dd><strong>Vertical tab</strong> (<code>\x0B</code>)</dd><dt><code>\0</code></dt><dd><strong>Null character</strong> (<code>\x00</code>)</dd><dt><code>\x<i>hh</i></code></dt><dd>Character with hexadecimal code <code><i>hh</i></code>.</dd><dt><code>\u<i>hhhh</i></code></dt><dd>Character with hexadecimal code <code><i>hhhh</i></code>.</dd></dl><h3>Quantifiers</h3><p>Repetition is specified by quantifiers:</p><dl><dt><code>?</code></dt><dd>Match <b>0 or 1</b> times. Example: <code>ab?</code> matches <code>a</code> and <code>ab</code></dd><dt><code>*</code></dt><dd>Match <b>0 or more</b> times. Example: <code>ab*</code> matches <code>a</code>, <code>ab</code>, <code>abb</code>, <code>abbb</code> etc.</dd><dt><code>+</code></dt><dd>Match <b>1 or more</b> times. Example: <code>ab+</code> matches <code>ab</code>, <code>abb</code>, <code>abbb</code> etc.</dd><dt><code>{n}</code></dt><dd>Match <b>exactly <code>n</code></b> times. Example: <code>ab{2}</code> matches <code>abb</code></dd><dt><code>{n,}</code></dt><dd>Match <b><code>n</code> or more</b> times. Example:  <code>ab{2,}</code> matches <code>abb</code>, <code>abbb</code>, <code>abbbb</code> etc.</dd><dt><code>{n,m}</code></dt><dd>Match <b>at least <code>n</code></b> times, but <b>no more than <code>m</code></b> times. Example: <code>ab{2,3}</code> matches <code>abb</code> and <code>abbb</code></dd><dt><code>??</code></dt><dd>Match <b>0 or 1</b> times, but <b>as few times as possible</b>. Example: <code>ab??</code> against <code>abbbbb</code> matches <code>a</code></dd><dt><code>*?</code></dt><dd>Match <b>0 or more</b> times, but <b>as few times as possible</b>. Example: <code>ab*?</code> against <code>abbbbb</code> matches <code>a</code></dd><dt><code>+?</code></dt><dd>Match <b>1 or more</b> times, but <b>as few times as possible</b>. Example: <code>ab+?</code> against <code>abbbbb</code> matches <code>ab</code></dd><dt><code>{n}?</code></dt><dd>Match <b><code>n</code> or more</b> times, but <b>as few times as possible</b>. Example: <code>ab{2}?</code> against <code>abbbbb</code> matches <code>abb</code></dd><dt><code>{n,m}?</code></dt><dd>Match <b>at least <code>n</code></b> times, <b>no more than <code>m</code></b> times, but <b>as few times as possible</b>. Example: <code>ab{2,3}?</code> against <code>abbbbb</code> matches <code>abb</code></dd></dl><h3>Subpatterns and alternative patterns</h3><dl><dt><code>(...)</code></dt><dd><strong>Capturing group</strong> - group subpattern and capture the match. Example: <code>(foo)bar</code> matches <code>foobar</code> and captures <code>foo</code></dd><dt><code>(?:...)</code></dt><dd><strong>Non-capturing group</strong> - group subpattern, but don't capture the match. Example: <code>(?:foo)bar</code> matches <code>foobar</code> and doesn't capture anything</dd><dt><code>...|...</code></dt><dd><strong>Alternation operator</strong> - matches one of the alternative subppatterns. Example: <code>foo|bar|baz</code> matches either <code>foo</code>, <code>bar</code> or <code>baz</code></dd></dl><h3>Anchor points</h3><p>Anchors match positions in the subject string:</p><dl><dt><code>^</code></dt><dd><strong>Start of search string</strong>, or after any newline in multi-line mode <code>m</code>. Example: <code>^The</code> matches <code>The</code> at the beginning of every line</dd><dt><code>$</code></dt><dd><strong>End of search string</strong>, before a newline, or before any newline in multi-line mode <code>m</code>. Example: <code>!$</code> matches <code>!</code> at the end of every line</dd><dt><code>\b</code></dt><dd><strong>Word boundary</strong> &mdash; position before or after a word. Example: <code>\bipsum</code> matches <code>ipsum</code> against <code>lorem ipsum</code> but doesn't match anything against <code>lipsum</code>. Word boundaries need not be spaces. For example: <code>\w+\b</code> matches both <code>yeah</code> and <code>whatever</code> against <code>yeah, whatever!</code></dd><dt><code>\B</code></dt><dd><strong>Non-word</strong> or <strong>not-word boundary</strong> &mdash; position between word boundaries (i.e. inside a word). Example: <code>\Bipsum</code> matches <code>ipsum</code> against <code>lipsum</code> but doesn't match anything against <code>lorem ipsum</code></dd><dt><code>(?=...)</code></dt><dd><strong>Positive lookahead</strong> &mdash; matches something followed by something else. Example: <code>ab(?=c)</code> matches <code>ab</code> against <code>abc</code> but doesn't match anything against <code>ab</code> or <code>aba</code></dd><dt><code>(?!...)</code></dt><dd><strong>Negative lookahead</strong> &mdash; matches something not followed by something else. Example: <code>ab(?!c)</code> matches <code>ab</code> against <code>ab</code> or <code>aba</code> but doesn't match anything against <code>abc</code></dd></dl><p><b>Note:</b> lookbehind is not supported in JavaScript</p><h2>Regular expressions objects and methods</h2><p>JavaScript provides two objects for dealing with regular expressions:</p><h2>The RegExp object</h2><p><code>RegExp</code> is a global object in JavaScript used to create regular expressions objects. A <code>RegExp</code> object can be defined through an object constructor:</p><p><code>new RegExp(pattern [, flags])</code></p><p>or as a literal:</p><p><code>/pattern/flags</code></p><p>The advantage of the constructor function is that the pattern can be constructed dynamically at any time.</p><p>They are handled the same way, no matter how you define them.</p><h3>Parameters</h3><dl><dt><code>pattern</code></dt><dd>Specifies the text of the regular expression</dd><dt><code>flags</code></dt><dd>Flags are optional and they specify how the regular expression should behave</dd></dl><h3>Methods</h3><p>The <code>RegExp</code> objects provides two methods for working with regular expressions:</p><dl><dt><code>test(<i>text</i>)</code></dt><dd>The <code>test(<i>text</i>)</code> method tests for a match in the input string. It searches the string for the specified pattern and returns <code>true</code> if the pattern matches the string or <code>false</code> otherwise.</dd><dt><code>exec(<i>text</i>)</code></dt><dd>The <code>exec(<i>text</i>)</code> method executes the specified pattern on the input string and returns an array of matched strings if it succeeds or <code>null</code> if it fails. The first element of the array contains the text matched by the entire pattern while the other elements correspond to text that matched captured subpatterns.</dd></dl><h2>The String object</h2><p>The <code>String</code> global object may also be used to search and manipulate strings in JavaScript. It offers four methods for matching and manipulating strings.</p><h3>Methods</h3><dl><dt><code><i>str</i>.match(<i>pattern</i>)</code></dt><dd>Match <code><i>pattern</i></code> against the input string. With the <code>g</code> (global search) flag it returns an array containing all matches. Without the <code>g</code> flag it returns only the first match. If there are no matches it returns <code>null</code>.</dd><dt><code><i>str</i>.search(<i>pattern</i>)</code></dt><dd>Searches the input string for the given pattern and returns the index of the start of the match. If no match is found, it returns -1.</dd><dt><code><i>str</i>.replace(<i>pattern</i>, <i>replacement</i>)</code></dt><dd>Performs a search and replace operation on the input string. It replaces the matches with the <code><i>replacement</i></code> string. Returns the nre string. The subject string may remain unchanged if there are no matches.</dd><dt><code><i>str</i>.split(<i>pattern</i> [, <i>limit</i>])</code></dt><dd>Splits the input string by a regular expression and returns an array. The optional <code><i>limit</i></code> specifies a limit on the number of splits.</dd></dl><h2>See also</h2><ul><li><a href="../core-javascript-reference/the-regexp-object">The JavaScript <code>RegExp</code> Object</a></li><li><a href="../core-javascript-reference/the-string-object">The JavaScript <code>String</code> Object</a></li><li><a href="../tools/javascript-regular-expressions-toolkit">JavaScript Regular Expressions Toolkit</a></li></ul><div class="contact-note"><p>If you see a typo, want to make a suggestion or have anything in particular you'd like to know more about, please drop us an e-mail at <a href="mailto:hello at diveintojavascript dot com">hello at diveintojavascript dot com</a>.</p></div></div><div id="f"><div class="copy-notice"><p>Copyright &copy; 2010-2011 Dive Into JavaScript</p></div></div></div></div><div id="rc"><div id="s"><script>google_ad_client="pub-4089529313925168";google_ad_slot="5129818829";google_ad_width=300;google_ad_height=250;</script><script src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script><div class="block"><div class="head"><h3>JavaScript Tools</h3></div><div class="body"><ul><!--li><a href="/tools/javascript-minifier-packer-compressor-compiler">JavaScript Minifier/Packer/Compressor/Compiler</a></li--><li><a href="../tools/javascript-regular-expressions-toolkit">JavaScript Regular Expressions Toolkit</a></li></ul></div></div><div class="block"><div class="head"><h3>Projects</h3></div><div class="body"><ul><li><a href="../projects/javascript-sprintf">JavaScript sprintf()</a></li><li><a href="../projects/sidjs-load-javascript-and-stylesheets-on-demand">SidJS - JavaScript and CSS Lazy Loader</a></li></ul></div></div><div class="block"><div class="head"><h3>Articles</h3></div><div class="body"><ul><li><a href="javascript-regular-expressions">JavaScript Regular Expressions</a></li><li><a href="javascript-boolean-objects-vs-boolean-primitives">JavaScript Boolean objects vs. boolean primitives</a></li></ul></div></div><div class="block"><div class="head"><h3>Tutorials</h3></div><div class="body"><ul><li><a href="../tutorials/web-storage-tutorial-creating-an-address-book-application">JavaScript Web Storage Tutorial: Creating an Address Book Application</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript APIs</h3></div><div class="body"><ul><li><a href="../javascript-apis/web-storage-dom-storage">Web Storage (DOM Storage)</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript Core Reference</h3></div><div class="body"><h4>Global objects</h4><ul><li><a href="../core-javascript-reference/the-array-object">Array</a></li><li><a href="../core-javascript-reference/the-boolean-object">Boolean</a></li><li>Date</li><li>Error</li><li>Function</li><li><a href="../core-javascript-reference/the-math-object">Math</a></li><li><a href="../core-javascript-reference/the-number-object">Number</a></li><li><a href="../core-javascript-reference/the-object-object">Object</a></li><li><a href="../core-javascript-reference/the-regexp-object">RegExp</a></li><li><a href="../core-javascript-reference/the-string-object">String</a></li></ul><h4>Global properties</h4><ul><li><a href="../core-javascript-reference/the-infinity-property">Infinity</a></li><li><a href="../core-javascript-reference/the-nan-property">NaN</a></li><li><a href="../core-javascript-reference/the-undefined-property">undefined</a></li></ul><h4>Global functions</h4><ul><li><a href="../core-javascript-reference/the-decodeuri-function">decodeURI</a></li><li><a href="../core-javascript-reference/the-decodeuricomponent-function">decodeURIComponent</a></li><li><a href="../core-javascript-reference/the-encodeuri-function">encodeURI</a></li><li><a href="../core-javascript-reference/the-encodeuricomponent-function">encodeURIComponent</a></li><li>eval</li><li><a href="../core-javascript-reference/the-isfinite-function">isFinite</a></li><li><a href="../core-javascript-reference/the-isnan-function">isNaN</a></li><li><a href="../core-javascript-reference/the-parsefloat-function">parseFloat</a></li><li><a href="../core-javascript-reference/the-parseint-function">parseInt</a></li></ul></div></div><div class="block"><div class="body"><div style="text-align: center;"><a href="http://www.webfaction.com/?affiliate=alexei"><img src="http://www.webfaction.com/banners/webfaction-240x60-django-rails-wp-bg.png" alt="WebFaction - Agile hosting, fast and reliable servers" class="banner" /></a></div></div></div></div></div></div></div><script>var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-16425630-1']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script></body></html>
