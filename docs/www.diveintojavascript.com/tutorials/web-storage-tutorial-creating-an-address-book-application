<!doctype html><html><head><meta charset="utf-8" /><title>JavaScript Web Storage Tutorial: Creating an Address Book Application - Dive Into JavaScript</title><link rel="stylesheet" media="screen" type="text/css" href="http://static.diveintojavascript.com/theme/v2/style/default.css" /></head><body><div id="d"><div id="p" class="ac"><div id="lc"><div id="c"><div id="h"><h3 id="sn"><a href="../index.html">Dive Into JavaScript</a></h3></div><div id="b"><h1>JavaScript Web Storage Tutorial: Creating an Address Book Application</h1><p><strong>Web Storage</strong> (or <strong>DOM Storage</strong>) represents a mechanism for persisting data on the client. This hands-on tutorial describes how to use the <a href="../javascript-apis/web-storage-dom-storage">Web Storage API</a> by creating a simple address book application.</p><p>The application consists of a table to list all the entries and a form to add new entries or edit existing entries stored in the local storage area. Below is a screenshot of the completed application as it appears in a browser:</p><p><img src="http://static.diveintojavascript.com/files/tutorials/web-storage-contacts/scr-1.jpg" width="557" height="290" /></p><p>Each contact entry consists of three fields, first name, last name and e-mail address, and is identified by an unique ID. Below is an example of such an object using the JavaScript literal notation:</p><pre><code>{
    id: 1,
    first_name: &quot;John&quot;,
    last_name: &quot;Smith&quot;,
    email: &quot;john@example.com&quot;
}</code></pre><h2>The Markup</h2><p>We'll begin by creating the necessary markup for the table and the form. The form will be used for both adding and editing, thus we need a hidden field to store the current object's ID (initialized to 0). The table has an extra column for the actions links.</p><pre><code>&lt;h1&gt;Contacts&lt;/h1&gt;
&lt;table id=&quot;contacts-table&quot;&gt;
    &lt;tr id=&quot;contacts-head&quot;&gt;
        &lt;th&gt;ID&lt;/th&gt;
        &lt;th&gt;First name&lt;/th&gt;
        &lt;th&gt;Last name&lt;/th&gt;
        &lt;th&gt;Email&lt;/th&gt;
        &lt;th&gt;Actions&lt;/th&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;form id=&quot;contacts-form&quot;&gt;
    &lt;div class=&quot;item text&quot;&gt;
        &lt;label&gt;First name:&lt;/label&gt;
        &lt;div class=&quot;field&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;first_name&quot; /&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item text&quot;&gt;
        &lt;label&gt;Last name:&lt;/label&gt;
        &lt;div class=&quot;field&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;last_name&quot; /&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;item text&quot;&gt;
        &lt;label&gt;Email:&lt;/label&gt;
        &lt;div class=&quot;field&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;button-wrapper&quot;&gt;
        &lt;div class=&quot;item button&quot;&gt;
            &lt;div class=&quot;field&quot;&gt;&lt;input type=&quot;button&quot; id=&quot;contacts-op-discard&quot; value=&quot;Discard&quot; /&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&quot;item button button-default&quot;&gt;
            &lt;div class=&quot;field&quot;&gt;&lt;input type=&quot;submit&quot; id=&quot;contacts-op-save&quot; value=&quot;Save&quot; /&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;id_entry&quot; value=&quot;0&quot; /&gt;
&lt;/form&gt;</code></pre><h2></h2><p>To build the application, we'll encapsulate the logic inside an object and expose only specific properties and methods, such as for adding or removing entries to and from the data store or the table:</p><pre><code>var Contacts = {
    index: 1,

    init: function() {},

    storeAdd: function(entry) {},
    storeEdit: function(entry) {},
    storeRemove: function(entry) {},

    tableAdd: function(entry) {},
    tableEdit: function(entry) {},
    tableRemove: function(entry) {}
};
Contacts.init();</code></pre><p>The <code>init()</code> method initializes the application. The <code>storeAdd()</code>, <code>storeEdit()</code> and <code>storeRemove()</code> methods are used for adding, editing and removing entries to and from the storage area, while the <code>tableAdd()</code>, <code>tableEdit()</code> and <code>tableRemove()</code> are used to add, update and remove entries to and from the table.</p><p>Before implementing these methods, let's take a look at the way our entries will be stored in the local storage:</p><ul><li>each entry is uniquely identified by an ID generated using an auto incrementing field named <code>index</code> that will also be stored in the local storage for use in later sessions</li><li>keys are prefixed with the word &quot;Contacts&quot; to avoid naming conflicts with other applications/scripts that store information in the local storage on the same domain</li><li>entries are stored as strings serialized in the JSON format</li></ul><p>The following table illustrates this:</p><table cellspacing="0"><tr><th>Key:</th><th>Value:</th></tr><tr><td><tt>Contacts:1</tt></td><td><tt>{&quot;id&quot;:1,&quot;first_name&quot;:&quot;John&quot;,&quot;last_name&quot;:&quot;Smith&quot;,&quot;email&quot;:&quot;john@example.com&quot;}</tt></td></tr><tr><td><tt>Contacts:index</tt></td><td><tt>2</tt></td></tr></table><p>The initial value of the <code>index</code> property is set to 1. By incrementing it after adding a new entry, we will generate a unique identity for the next entry. In other words, the <code>index</code> property holds the ID of the next entry.</p><h2>Initializing The Application</h2><p>The <code>Contact.init()</code> method initializes the storage index, sets up the form and populates the table with existing entries:</p><pre><code>var Contacts = {
    index: window.localStorage.getItem(&quot;Contacts:index&quot;),
    $table: document.getElementById(&quot;contacts-table&quot;),
    $form: document.getElementById(&quot;contacts-form&quot;),
    $button_save: document.getElementById(&quot;contacts-op-save&quot;),
    $button_discard: document.getElementById(&quot;contacts-op-discard&quot;),

    init: function() {
        // initialize the storage index
        if (!Contacts.index) {
            window.localStorage.setItem(&quot;Contacts:index&quot;, Contacts.index = 1);
        }

        // initialize the form
        ...

        // initialize the table
        ...
    },
    ...
};</code></pre><h3>Setting up the form</h3><p>Initializing the form simply means adding event listeners to the <tt>Discard</tt> and <tt>Save</tt> buttons:</p><pre><code>var Contacts = {
    ...
    init: function() {
        ...
        // initialize the form
        Contacts.$form.reset();
        Contacts.$button_discard.addEventListener(&quot;click&quot;, function(event) {
        	Contacts.$form.reset();
        	Contacts.$form.id_entry.value = 0;
        }, true);
        Contacts.$form.addEventListener(&quot;submit&quot;, function(event) {
            var entry = {
                id: parseInt(this.id_entry.value),
                first_name: this.first_name.value,
                last_name: this.last_name.value,
                email: this.email.value
            };
            if (entry.id == 0) { // add
                Contacts.storeAdd(entry);
                Contacts.tableAdd(entry);
            }
            else { // edit
                Contacts.storeEdit(entry);
                Contacts.tableEdit(entry);
            }

            this.reset();
            this.id_entry.value = 0;
            event.preventDefault();
        }, true);
        ...
    },
    ...
};</code></pre><p>Since we're using the form for both adding and editing, every time a user submits the form we need to check whether we're dealing with new or existing entries. Every time we add a new entry or edit an existing one, we need to update both the local storage area and the table.</p><h3>Populating the table</h3><p>To populate the table with entries, we simply iterate over each item in the <code>localStorage</code> object, test if their key is valid and finally add new rows to the table:</p><pre><code>var Contacts = {
    ...
    init: function() {
        ...
        // initialize the table
        if (window.localStorage.length - 1) {
            var contacts_list = [], i, key;
            for (i = 0; i &lt; window.localStorage.length; i++) {
                key = window.localStorage.key(i);
                if (/Contacts:\d+/.test(key)) {
                    contacts_list.push(JSON.parse(window.localStorage.getItem(key)));
                }
            }

            if (contacts_list.length) {
                contacts_list
                    .sort(function(a, b) {
                        return a.id &lt; b.id ? -1 : (a.id &gt; b.id ? 1 : 0);
                    })
                    .forEach(Contacts.tableAdd);
            }
        }
    },
    ...
};</code></pre><p>A valid key is a key that starts with <i>Contacts:</i> and ends with an integer. Items identified by keys that don't match that pattern are ignored.</p><p>Keys in the <code>localStorage</code> are retrieved by their index using the <code>key()</code> method. Values associated with those keys are returned by the <code>getItem()</code> method.</p><h2>Adding new entries</h2><p>Now that the application is initialised, let's add some entries to both the local storage and the table:</p><pre><code>var Contacts = {
    ...
    storeAdd: function(entry) {
        entry.id = Contacts.index;
        window.localStorage.setItem(&quot;Contacts:&quot;+ entry.id, JSON.stringify(entry));
        window.localStorage.setItem(&quot;Contacts:index&quot;, ++Contacts.index);
    },
    ...

    tableAdd: function(entry) {
        var $tr = document.createElement(&quot;tr&quot;), $td, key;
        for (key in entry) {
            if (entry.hasOwnProperty(key)) {
                $td = document.createElement(&quot;td&quot;);
                $td.appendChild(document.createTextNode(entry[key]));
                $tr.appendChild($td);
            }
        }
        $td = document.createElement(&quot;td&quot;);
        $td.innerHTML = '&lt;a data-op=&quot;edit&quot; data-id=&quot;'+ entry.id +'&quot;&gt;Edit&lt;/a&gt; | &lt;a data-op=&quot;remove&quot; data-id=&quot;'+ entry.id +'&quot;&gt;Remove&lt;/a&gt;';
        $tr.appendChild($td);
        $tr.setAttribute(&quot;id&quot;, &quot;entry-&quot;+ entry.id);
        Contacts.$table.appendChild($tr);
    },
    ...
};</code></pre><p>The <code>storeAdd()</code> method saves the entry in the local storage area by calling the <code>setItem()</code> method of the <code>localStorage</code> object. The <code>tableAdd()</code> method creates a new table row and appends it to the table.</p><h2>Updating and deleting entries</h2><p>The <i>Edit</i> and <i>Remove</i> links are added in the last column. Instead of adding event listeners for each action link, we're going to add an event listener on the table and then determine in the callback function which action was triggered. This is a technique known as <strong>event delegation</strong>:</p><pre><code>var Contacts = {
    ...
    init: function() {
        ...
        // initialize the table
        ...
        Contacts.$table.addEventListener(&quot;click&quot;, function(event) {
            var op = event.target.getAttribute(&quot;data-op&quot;);
            if (/edit|remove/.test(op)) {
                var entry = JSON.parse(window.localStorage.getItem(&quot;Contacts:&quot;+ event.target.getAttribute(&quot;data-id&quot;)));
                if (op == &quot;edit&quot;) {
                    Contacts.$form.first_name.value = entry.first_name;
                    Contacts.$form.last_name.value = entry.last_name;
                    Contacts.$form.email.value = entry.email;
                    Contacts.$form.id_entry.value = entry.id;
                }
                else if (op == &quot;remove&quot;) {
                    if (confirm('Are you sure you want to remove &quot;'+ entry.first_name +' '+ entry.last_name +'&quot; from your contacts?')) {
                        Contacts.storeRemove(entry);
                        Contacts.tableRemove(entry);
                    }
                }
                event.preventDefault();
            }
        }, true);
    },
    ...
};</code></pre><p>To determine what action to perform and on what entry, we're relying on the <code>data-op</code> and <code>data-id</code> attributes of the action links.</p><h3>Updating Existing Entries</h3><pre><code>var Contacts = {
    ...
    storeEdit: function(entry) {
        window.localStorage.setItem(&quot;Contacts:&quot;+ entry.id, JSON.stringify(entry));
    },
    ...

    tableEdit: function(entry) {
        var $tr = document.getElementById(&quot;entry-&quot;+ entry.id), $td, key;
        $tr.innerHTML = &quot;&quot;;
        for (key in entry) {
            if (entry.hasOwnProperty(key)) {
                $td = document.createElement(&quot;td&quot;);
                $td.appendChild(document.createTextNode(entry[key]));
                $tr.appendChild($td);
            }
        }
        $td = document.createElement(&quot;td&quot;);
        $td.innerHTML = '&lt;a data-op=&quot;edit&quot; data-id=&quot;'+ entry.id +'&quot;&gt;Edit&lt;/a&gt; | &lt;a data-op=&quot;remove&quot; data-id=&quot;'+ entry.id +'&quot;&gt;Remove&lt;/a&gt;';
        $tr.appendChild($td);
    },
    ...
};</code></pre><p>The <code>storeEdit()</code> method saves the new entry over the existing one using the <code>setItem()</code> method of the <code>localStorage</code> object. Note that the <code>setItem()</code> method simply sets a key/value combination. If the key already exists, the associated value is replaced with the new value.</p><p>The <code>tableEdit()</code> method empties the existing table row and creates new cells with the new values.</p><h3>Deleting Existing Entries</h3><p>Finally, entry removal is accomplished by removing the corresponding item from the <code>localStorage</code> and the corresponding table row:</p><pre><code>var Contacts = {
    ...
    storeRemove: function(entry) {
        window.localStorage.removeItem(&quot;Contacts:&quot;+ entry.id);
    },
    ...

    tableRemove: function(entry) {
        Contacts.$table.removeChild(document.getElementById(&quot;entry-&quot;+ entry.id));
    }
};</code></pre><p>The <code>removeItem()</code> method of the <code>localStorage</code> object removes the item with the specified key.</p><p>And that's it! You can see the complete application <a href="http://static.diveintojavascript.com/files/tutorials/web-storage-contacts/contacts.html">here</a>.</p><h2>See also</h2><ul><li><a href="../javascript-apis/web-storage-dom-storage">Web Storage (DOM Storage)</a></li></ul><div class="contact-note"><p>If you see a typo, want to make a suggestion or have anything in particular you'd like to know more about, please drop us an e-mail at <a href="mailto:hello at diveintojavascript dot com">hello at diveintojavascript dot com</a>.</p></div></div><div id="f"><div class="copy-notice"><p>Copyright &copy; 2010-2011 Dive Into JavaScript</p></div></div></div></div><div id="rc"><div id="s"><script>google_ad_client="pub-4089529313925168";google_ad_slot="5129818829";google_ad_width=300;google_ad_height=250;</script><script src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script><div class="block"><div class="head"><h3>JavaScript Tools</h3></div><div class="body"><ul><!--li><a href="/tools/javascript-minifier-packer-compressor-compiler">JavaScript Minifier/Packer/Compressor/Compiler</a></li--><li><a href="../tools/javascript-regular-expressions-toolkit">JavaScript Regular Expressions Toolkit</a></li></ul></div></div><div class="block"><div class="head"><h3>Projects</h3></div><div class="body"><ul><li><a href="../projects/javascript-sprintf">JavaScript sprintf()</a></li><li><a href="../projects/sidjs-load-javascript-and-stylesheets-on-demand">SidJS - JavaScript and CSS Lazy Loader</a></li></ul></div></div><div class="block"><div class="head"><h3>Articles</h3></div><div class="body"><ul><li><a href="../articles/javascript-regular-expressions">JavaScript Regular Expressions</a></li><li><a href="../articles/javascript-boolean-objects-vs-boolean-primitives">JavaScript Boolean objects vs. boolean primitives</a></li></ul></div></div><div class="block"><div class="head"><h3>Tutorials</h3></div><div class="body"><ul><li><a href="web-storage-tutorial-creating-an-address-book-application">JavaScript Web Storage Tutorial: Creating an Address Book Application</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript APIs</h3></div><div class="body"><ul><li><a href="../javascript-apis/web-storage-dom-storage">Web Storage (DOM Storage)</a></li></ul></div></div><div class="block"><div class="head"><h3>JavaScript Core Reference</h3></div><div class="body"><h4>Global objects</h4><ul><li><a href="../core-javascript-reference/the-array-object">Array</a></li><li><a href="../core-javascript-reference/the-boolean-object">Boolean</a></li><li>Date</li><li>Error</li><li>Function</li><li><a href="../core-javascript-reference/the-math-object">Math</a></li><li><a href="../core-javascript-reference/the-number-object">Number</a></li><li><a href="../core-javascript-reference/the-object-object">Object</a></li><li><a href="../core-javascript-reference/the-regexp-object">RegExp</a></li><li><a href="../core-javascript-reference/the-string-object">String</a></li></ul><h4>Global properties</h4><ul><li><a href="../core-javascript-reference/the-infinity-property">Infinity</a></li><li><a href="../core-javascript-reference/the-nan-property">NaN</a></li><li><a href="../core-javascript-reference/the-undefined-property">undefined</a></li></ul><h4>Global functions</h4><ul><li><a href="../core-javascript-reference/the-decodeuri-function">decodeURI</a></li><li><a href="../core-javascript-reference/the-decodeuricomponent-function">decodeURIComponent</a></li><li><a href="../core-javascript-reference/the-encodeuri-function">encodeURI</a></li><li><a href="../core-javascript-reference/the-encodeuricomponent-function">encodeURIComponent</a></li><li>eval</li><li><a href="../core-javascript-reference/the-isfinite-function">isFinite</a></li><li><a href="../core-javascript-reference/the-isnan-function">isNaN</a></li><li><a href="../core-javascript-reference/the-parsefloat-function">parseFloat</a></li><li><a href="../core-javascript-reference/the-parseint-function">parseInt</a></li></ul></div></div><div class="block"><div class="body"><div style="text-align: center;"><a href="http://www.webfaction.com/?affiliate=alexei"><img src="http://www.webfaction.com/banners/webfaction-240x60-django-rails-wp-bg.png" alt="WebFaction - Agile hosting, fast and reliable servers" class="banner" /></a></div></div></div></div></div></div></div><script>var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-16425630-1']);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script></body></html>
