[
	{
		"url": "http://www.w3.org/TR/xpath-functions/",
		"title": "XPath",
		"html": "<div class = \"head\">\n<p><a href = \"http://www.w3.org/\"><img src = \"http://www.w3.org/Icons/w3c_home\" alt = \"W3C\" height = \"48\" width = \"72\"/></a></p>\n<h1><a name = \"title\" id = \"title\"></a>XQuery 1.0 and XPath 2.0\nFunctions and Operators (Second Edition)</h1>\n<h2><a name = \"w3c-doctype\" id = \"w3c-doctype\"></a>W3C Recommendation\n14 December 2010</h2>\n<dl>\n<dt>This version:</dt>\n<dd><a href = \"http://www.w3.org/TR/2010/REC-xpath-functions-20101214/\">http://www.w3.org/TR/2010/REC-xpath-functions-20101214/</a></dd>\n<dt>Latest version:</dt>\n<dd><a href = \"http://www.w3.org/TR/xpath-functions/\">http://www.w3.org/TR/xpath-functions/</a></dd>\n<dt>Previous versions:</dt>\n<dd><a href = \"http://www.w3.org/TR/2009/PER-xpath-functions-20090421/\">http://www.w3.org/TR/2009/PER-xpath-functions-20090421/,</a>\n<a href = \"http://www.w3.org/TR/2007/REC-xpath-functions-20070123/\">http://www.w3.org/TR/2007/REC-xpath-functions-20070123/</a></dd>\n<dt>Editors:</dt>\n<dd>Ashok Malhotra, Oracle Corporation <a href = \"mailto:ashok.malhotra@alum.mit.edu\">&lt;ashok.malhotra@alum.mit.edu&gt;</a></dd>\n<dd>Jim Melton, Oracle Corporation <a href = \"mailto:jim.melton@oracle.com\">&lt;jim.melton@oracle.com&gt;</a></dd>\n<dd>Norman Walsh, Mark Logic <a href = \"mailto:Norman.Walsh@marklogic.com\">&lt;Norman.Walsh@marklogic.com&gt;</a></dd>\n<dd>Michael Kay, Saxonica <a href = \"http://www.saxonica.com/\">&lt;http://www.saxonica.com/&gt;</a> -\nSecond Edition</dd>\n</dl>\n<p>Please refer to the <a href = \"http://www.w3.org/XML/2010/qt-errata/xpath-functions-errata2e.html\">\n<strong>errata</strong></a> for this document, which may include\nsome normative corrections.</p>\n<p>See also <a href = \"http://www.w3.org/2003/03/Translations/byTechnology?technology=xpath-functions\">\n<strong>translations</strong></a>.</p>\n<p>This document is also available in these non-normative formats:\n<a href = \"http://www.w3.org/TR/2010/REC-xpath-functions-20101214/xpath-functions-20101214.xml\">\nXML</a> and&#160;<a href = \"http://www.w3.org/TR/2010/REC-xpath-functions-20101214/xpath-functions-diff-from-REC20070123.html\">Change\nmarkings relative to first edition</a>.</p>\n<p class = \"copyright\"><a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#Copyright\">Copyright</a>&#160;©&#160;2010&#160;<a href = \"http://www.w3.org/\"><acronym title = \"World Wide Web Consortium\">W3C</acronym></a><sup>®</sup>\n(<a href = \"http://www.csail.mit.edu/\"><acronym title = \"Massachusetts Institute of Technology\">MIT</acronym></a>, <a href = \"http://www.ercim.eu/\"><acronym title = \"European Research Consortium for Informatics and Mathematics\">ERCIM</acronym></a>,\n<a href = \"http://www.keio.ac.jp/\">Keio</a>), All Rights Reserved.\nW3C <a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer\">liability</a>,\n<a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks\">trademark</a>\nand <a href = \"http://www.w3.org/Consortium/Legal/copyright-documents\">document\nuse</a> rules apply.</p>\n</div><hr/><div>\n<h2><a name = \"abstract\" id = \"abstract\"></a>Abstract</h2>\n<p>This document defines constructor functions, operators and\nfunctions on the datatypes defined in <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> and the datatypes\ndefined in <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0\nData Model]</a>. It also discusses functions and operators on nodes\nand node sequences as defined in the <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a>. These\nfunctions and operators are defined for use in <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>, <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> and <a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a> and other\nrelated XML standards. The signatures and summaries of functions\ndefined in this document are available at: <a href = \"http://www.w3.org/2005/xpath-functions/\">http://www.w3.org/2005/xpath-functions/</a>.</p>\n</div><div>\n<h2><a name = \"status\" id = \"status\"></a>Status of this Document</h2>\n<p><em>This section describes the status of this document at the\ntime of its publication. Other documents may supersede this\ndocument. A list of current W3C publications and the latest\nrevision of this technical report can be found in the <a href = \"http://www.w3.org/TR/\">W3C technical reports index</a> at\nhttp://www.w3.org/TR/.</em></p>\n<p>This is one document in a set of eight documents that are being\nprogressed to Edited Recommendation together (XPath 2.0, XQuery\n1.0, XQueryX 1.0, XSLT 2.0, Data Model (XDM), Functions and\nOperators, Formal Semantics, Serialization).</p>\n<p>This document, published on 14 December 2010, is an Edited\n<a href = \"http://www.w3.org/2004/02/Process-20040205/tr.html#RecsW3C\">Recommendation</a>\nof the W3C. This second edition is not a new version of this\nspecification; its purpose is to clarify a number of issues that\nhave become apparent since the first edition was published. All of\nthese clarifications (excepting trivial editorial fixes) have been\npublished in a separate errata document, and published in a\n<a href = \"http://www.w3.org/2004/02/Process-20040205/tr.html#ProposedEditedRec\">\nProposed Edited Recommendation</a> in April, 2009. The changes are\nsummarized in an appendix.</p>\n<p>This document has been jointly developed by the W3C <a href = \"http://www.w3.org/XML/Query/\">XML Query Working Group</a> and the\nW3C <a href = \"http://www.w3.org/Style/XSL/\">XSL Working Group</a>,\neach of which is part of the <a href = \"http://www.w3.org/XML/Activity\">XML Activity</a>.</p>\n<p>This document has been reviewed by W3C Members, by software\ndevelopers, and by other W3C groups and interested parties, and is\nendorsed by the Director as a W3C Recommendation. It is a stable\ndocument and may be used as reference material or cited from\nanother document. W3C's role in making the Recommendation is to\ndraw attention to the specification and to promote its widespread\ndeployment. This enhances the functionality and interoperability of\nthe Web.</p>\n<p>This document incorporates changes made against the <a href = \"http://www.w3.org/2004/02/Process-20040205/tr.html#RecsW3C\">Recommendation</a>\nof 23 January 2007 that resolve all errata known at the date of\npublication. A list of the errata that have been applied, with\nlinks to the Bugzilla database, is provided in <a href = \"#changes-since-edition-1\"><b>F Changes since the First\nEdition</b></a>. The version of this document with change\nhighlighting indicates where the textual changes have been made,\nand cross-references each textual change to the erratum where it\noriginated. This document supersedes the <a href = \"http://www.w3.org/TR/2007/REC-xpath-functions-20070123/\">first\nedition</a>.</p>\n<p>This specification is designed to be referred to normatively\nfrom other specifications defining a host language for it; it is\nnot intended to be implemented outside a host language. The\nimplementability of this specification has been tested in the\ncontext of its normative inclusion in host languages defined by the\n<a href = \"http://www.w3.org/TR/xquery/\">XQuery 1.0</a> and <a href = \"http://www.w3.org/TR/xslt20/\">XSLT 2.0</a> specifications; see the\n<a href = \"http://www.w3.org/XML/Query/test-suite/XQTSReport.html\">XQuery 1.0\nimplementation report</a> and the <a href = \"http://www.w3.org/XML/Group/xslt20-test/Documentation/reportSummary.html\">\nXSLT 2.0 implementation report</a> (member-only) for details.</p>\n<p>Please report errors in and submit comments on this document\nusing W3C's <a href = \"http://www.w3.org/Bugs/Public/\">public\nBugzilla system</a> (instructions can be found at <a href = \"http://www.w3.org/XML/2005/04/qt-bugzilla\">http://www.w3.org/XML/2005/04/qt-bugzilla</a>).\nIf access to that system is not feasible, you may send your\ncomments to the W3C XSLT/XPath/XQuery public comments mailing list,\n<a href = \"mailto:public-qt-comments@w3.org\">public-qt-comments@w3.org</a>.\nIt will be very helpful if you include the string \"[FO]\" in the\nsubject line of your report, whether made in Bugzilla or in email.\nEach Bugzilla entry and email message should contain only one error\nreport. Archives of the comments and responses are available at\n<a href = \"http://lists.w3.org/Archives/Public/public-qt-comments/\">http://lists.w3.org/Archives/Public/public-qt-comments/</a>.</p>\n<p>This document was produced by groups operating under the\n<a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/\">5\nFebruary 2004 W3C Patent Policy</a>. W3C maintains a <a href = \"http://www.w3.org/2004/01/pp-impl/18797/status#disclosures\">public\nlist of any patent disclosures</a> made in connection with the\ndeliverables of the XML Query Working Group and also maintains a\n<a href = \"http://www.w3.org/2004/01/pp-impl/19552/status#disclosures\">public\nlist of any patent disclosures</a> made in connection with the\ndeliverables of the XSL Working Group; those pages also include\ninstructions for disclosing a patent. An individual who has actual\nknowledge of a patent which the individual believes contains\n<a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential\">\nEssential Claim(s)</a> must disclose the information in accordance\nwith <a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure\">\nsection 6 of the W3C Patent Policy</a>.</p>\n</div><div class = \"toc\">\n<h2><a name = \"contents\" id = \"contents\"></a>Table of Contents</h2>\n<p class = \"toc\">1 <a href = \"#intro\">Introduction</a><br/>\n&#160;&#160;&#160;&#160;1.1 <a href = \"#conformance\">Conformance</a><br/>\n&#160;&#160;&#160;&#160;1.2 <a href = \"#namespace-prefixes\">Namespaces and Prefixes</a><br/>\n&#160;&#160;&#160;&#160;1.3 <a href = \"#func-overloading\">Function\nOverloading</a><br/>\n&#160;&#160;&#160;&#160;1.4 <a href = \"#func-signatures\">Function\nSignatures and Descriptions</a><br/>\n&#160;&#160;&#160;&#160;1.5 <a href = \"#namespace-terminology\">Namespace Terminology</a><br/>\n&#160;&#160;&#160;&#160;1.6 <a href = \"#datatypes\">Type\nHierarchy</a><br/>\n&#160;&#160;&#160;&#160;1.7 <a href = \"#terminology\">Terminology</a><br/>\n2 <a href = \"#accessors\">Accessors</a><br/>\n&#160;&#160;&#160;&#160;2.1 <a href = \"#XPath_func-node-name\">fn:node-name</a><br/>\n&#160;&#160;&#160;&#160;2.2 <a href = \"#XPath_func-nilled\">fn:nilled</a><br/>\n&#160;&#160;&#160;&#160;2.3 <a href = \"#XPath_func-string\">fn:string</a><br/>\n&#160;&#160;&#160;&#160;2.4 <a href = \"#XPath_func-data\">fn:data</a><br/>\n&#160;&#160;&#160;&#160;2.5 <a href = \"#XPath_func-base-uri\">fn:base-uri</a><br/>\n&#160;&#160;&#160;&#160;2.6 <a href = \"#XPath_func-document-uri\">fn:document-uri</a><br/>\n3 <a href = \"#XPath_func-error\">The Error Function</a><br/>\n&#160;&#160;&#160;&#160;3.1 <a href = \"#func-error-examples\">Examples</a><br/>\n4 <a href = \"#XPath_func-trace\">The Trace Function</a><br/>\n&#160;&#160;&#160;&#160;4.1 <a href = \"#func-trace-examples\">Examples</a><br/>\n5 <a href = \"#constructor-functions\">Constructor Functions</a><br/>\n&#160;&#160;&#160;&#160;5.1 <a href = \"#constructor-functions-for-xsd-types\">Constructor Functions for\nXML Schema Built-in Types</a><br/>\n&#160;&#160;&#160;&#160;5.2 <a href = \"#XPath_func-dateTime\">A Special\nConstructor Function for xs:dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.2.1 <a href = \"#func-dateTime-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;5.3 <a href = \"#constructor-qname-notation\">Constructor Functions for xs:QName\nand xs:NOTATION</a><br/>\n&#160;&#160;&#160;&#160;5.4 <a href = \"#constructor-functions-for-user-defined-types\">Constructor\nFunctions for User-Defined Types</a><br/>\n6 <a href = \"#numeric-functions\">Functions and Operators on\nNumerics</a><br/>\n&#160;&#160;&#160;&#160;6.1 <a href = \"#numeric-types\">Numeric\nTypes</a><br/>\n&#160;&#160;&#160;&#160;6.2 <a href = \"#op.numeric\">Operators on\nNumeric Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.1 <a href = \"#XPath_func-numeric-add\">op:numeric-add</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.2 <a href = \"#XPath_func-numeric-subtract\">op:numeric-subtract</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.3 <a href = \"#XPath_func-numeric-multiply\">op:numeric-multiply</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.4 <a href = \"#XPath_func-numeric-divide\">op:numeric-divide</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.5 <a href = \"#XPath_func-numeric-integer-divide\">op:numeric-integer-divide</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.6 <a href = \"#XPath_func-numeric-mod\">op:numeric-mod</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.7 <a href = \"#XPath_func-numeric-unary-plus\">op:numeric-unary-plus</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.2.8 <a href = \"#XPath_func-numeric-unary-minus\">op:numeric-unary-minus</a><br/>\n&#160;&#160;&#160;&#160;6.3 <a href = \"#comp.numeric\">Comparison\nOperators on Numeric Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.3.1 <a href = \"#XPath_func-numeric-equal\">op:numeric-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.3.2 <a href = \"#XPath_func-numeric-less-than\">op:numeric-less-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.3.3 <a href = \"#XPath_func-numeric-greater-than\">op:numeric-greater-than</a><br/>\n&#160;&#160;&#160;&#160;6.4 <a href = \"#numeric-value-functions\">Functions on Numeric Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.4.1 <a href = \"#XPath_func-abs\">fn:abs</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.4.2 <a href = \"#XPath_func-ceiling\">fn:ceiling</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.4.3 <a href = \"#XPath_func-floor\">fn:floor</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.4.4 <a href = \"#XPath_func-round\">fn:round</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;6.4.5 <a href = \"#XPath_func-round-half-to-even\">fn:round-half-to-even</a><br/>\n7 <a href = \"#string-functions\">Functions on Strings</a><br/>\n&#160;&#160;&#160;&#160;7.1 <a href = \"#string-types\">String\nTypes</a><br/>\n&#160;&#160;&#160;&#160;7.2 <a href = \"#func-assemble-disassemble-string\">Functions to Assemble and\nDisassemble Strings</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.2.1 <a href = \"#XPath_func-codepoints-to-string\">fn:codepoints-to-string</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.2.2 <a href = \"#XPath_func-string-to-codepoints\">fn:string-to-codepoints</a><br/>\n&#160;&#160;&#160;&#160;7.3 <a href = \"#string-compare\">Equality and\nComparison of Strings</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.3.1 <a href = \"#collations\">Collations</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.3.2 <a href = \"#XPath_func-compare\">fn:compare</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.3.3 <a href = \"#XPath_func-codepoint-equal\">fn:codepoint-equal</a><br/>\n&#160;&#160;&#160;&#160;7.4 <a href = \"#string-value-functions\">Functions on String Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.1 <a href = \"#XPath_func-concat\">fn:concat</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.2 <a href = \"#XPath_func-string-join\">fn:string-join</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.3 <a href = \"#XPath_func-substring\">fn:substring</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.4 <a href = \"#XPath_func-string-length\">fn:string-length</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.5 <a href = \"#XPath_func-normalize-space\">fn:normalize-space</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.6 <a href = \"#XPath_func-normalize-unicode\">fn:normalize-unicode</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.7 <a href = \"#XPath_func-upper-case\">fn:upper-case</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.8 <a href = \"#XPath_func-lower-case\">fn:lower-case</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.9 <a href = \"#XPath_func-translate\">fn:translate</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.10 <a href = \"#XPath_func-encode-for-uri\">fn:encode-for-uri</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.11 <a href = \"#XPath_func-iri-to-uri\">fn:iri-to-uri</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.4.12 <a href = \"#XPath_func-escape-html-uri\">fn:escape-html-uri</a><br/>\n&#160;&#160;&#160;&#160;7.5 <a href = \"#substring.functions\">Functions Based on Substring\nMatching</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.5.1 <a href = \"#XPath_func-contains\">fn:contains</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.5.2 <a href = \"#XPath_func-starts-with\">fn:starts-with</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.5.3 <a href = \"#XPath_func-ends-with\">fn:ends-with</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.5.4 <a href = \"#XPath_func-substring-before\">fn:substring-before</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.5.5 <a href = \"#XPath_func-substring-after\">fn:substring-after</a><br/>\n&#160;&#160;&#160;&#160;7.6 <a href = \"#string.match\">String\nFunctions that Use Pattern Matching</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.6.1 <a href = \"#regex-syntax\">Regular Expression Syntax</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.6.2 <a href = \"#XPath_func-matches\">fn:matches</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.6.3 <a href = \"#XPath_func-replace\">fn:replace</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;7.6.4 <a href = \"#XPath_func-tokenize\">fn:tokenize</a><br/>\n8 <a href = \"#anyURI-functions\">Functions on anyURI</a><br/>\n&#160;&#160;&#160;&#160;8.1 <a href = \"#XPath_func-resolve-uri\">fn:resolve-uri</a><br/>\n9 <a href = \"#boolean-functions\">Functions and Operators on Boolean\nValues</a><br/>\n&#160;&#160;&#160;&#160;9.1 <a href = \"#boolean-constructors\">Additional Boolean Constructor\nFunctions</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.1.1 <a href = \"#XPath_func-true\">fn:true</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.1.2 <a href = \"#XPath_func-false\">fn:false</a><br/>\n&#160;&#160;&#160;&#160;9.2 <a href = \"#op.boolean\">Operators on\nBoolean Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.2.1 <a href = \"#XPath_func-boolean-equal\">op:boolean-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.2.2 <a href = \"#XPath_func-boolean-less-than\">op:boolean-less-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.2.3 <a href = \"#XPath_func-boolean-greater-than\">op:boolean-greater-than</a><br/>\n&#160;&#160;&#160;&#160;9.3 <a href = \"#boolean-value-functions\">Functions on Boolean Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;9.3.1 <a href = \"#XPath_func-not\">fn:not</a><br/>\n10 <a href = \"#durations-dates-times\">Functions and Operators on\nDurations, Dates and Times</a><br/>\n&#160;&#160;&#160;&#160;10.1 <a href = \"#duration-date-time-types\">Duration, Date and Time Types</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.1.1 <a href = \"#date-time-duration-conformance\">Limits and Precision</a><br/>\n&#160;&#160;&#160;&#160;10.2 <a href = \"#date-time-values\">Date/time\ndatatype values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.2.1 <a href = \"#date-time-lexical-mapping\">Examples</a><br/>\n&#160;&#160;&#160;&#160;10.3 <a href = \"#duration-subtypes\">Two\nTotally Ordered Subtypes of Duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.3.1 <a href = \"#dt-yearMonthDuration\">xs:yearMonthDuration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.3.2 <a href = \"#dt-dayTimeDuration\">xs:dayTimeDuration</a><br/>\n&#160;&#160;&#160;&#160;10.4 <a href = \"#comp.duration.datetime\">Comparison Operators on Duration, Date\nand Time Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.1 <a href = \"#XPath_func-yearMonthDuration-less-than\">op:yearMonthDuration-less-than</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.2 <a href = \"#XPath_func-yearMonthDuration-greater-than\">op:yearMonthDuration-greater-than</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.3 <a href = \"#XPath_func-dayTimeDuration-less-than\">op:dayTimeDuration-less-than</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.4 <a href = \"#XPath_func-dayTimeDuration-greater-than\">op:dayTimeDuration-greater-than</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.5 <a href = \"#XPath_func-duration-equal\">op:duration-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.6 <a href = \"#XPath_func-dateTime-equal\">op:dateTime-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.7 <a href = \"#XPath_func-dateTime-less-than\">op:dateTime-less-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.8 <a href = \"#XPath_func-dateTime-greater-than\">op:dateTime-greater-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.9 <a href = \"#XPath_func-date-equal\">op:date-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.10 <a href = \"#XPath_func-date-less-than\">op:date-less-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.11 <a href = \"#XPath_func-date-greater-than\">op:date-greater-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.12 <a href = \"#XPath_func-time-equal\">op:time-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.13 <a href = \"#XPath_func-time-less-than\">op:time-less-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.14 <a href = \"#XPath_func-time-greater-than\">op:time-greater-than</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.15 <a href = \"#XPath_func-gYearMonth-equal\">op:gYearMonth-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.16 <a href = \"#XPath_func-gYear-equal\">op:gYear-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.17 <a href = \"#XPath_func-gMonthDay-equal\">op:gMonthDay-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.18 <a href = \"#XPath_func-gMonth-equal\">op:gMonth-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.4.19 <a href = \"#XPath_func-gDay-equal\">op:gDay-equal</a><br/>\n&#160;&#160;&#160;&#160;10.5 <a href = \"#component-extraction-functions\">Component Extraction Functions on\nDurations, Dates and Times</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.1 <a href = \"#XPath_func-years-from-duration\">fn:years-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.2 <a href = \"#XPath_func-months-from-duration\">fn:months-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.3 <a href = \"#XPath_func-days-from-duration\">fn:days-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.4 <a href = \"#XPath_func-hours-from-duration\">fn:hours-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.5 <a href = \"#XPath_func-minutes-from-duration\">fn:minutes-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.6 <a href = \"#XPath_func-seconds-from-duration\">fn:seconds-from-duration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.7 <a href = \"#XPath_func-year-from-dateTime\">fn:year-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.8 <a href = \"#XPath_func-month-from-dateTime\">fn:month-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.9 <a href = \"#XPath_func-day-from-dateTime\">fn:day-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.10 <a href = \"#XPath_func-hours-from-dateTime\">fn:hours-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.11 <a href = \"#XPath_func-minutes-from-dateTime\">fn:minutes-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.12 <a href = \"#XPath_func-seconds-from-dateTime\">fn:seconds-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.13 <a href = \"#XPath_func-timezone-from-dateTime\">fn:timezone-from-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.14 <a href = \"#XPath_func-year-from-date\">fn:year-from-date</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.15 <a href = \"#XPath_func-month-from-date\">fn:month-from-date</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.16 <a href = \"#XPath_func-day-from-date\">fn:day-from-date</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.17 <a href = \"#XPath_func-timezone-from-date\">fn:timezone-from-date</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.18 <a href = \"#XPath_func-hours-from-time\">fn:hours-from-time</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.19 <a href = \"#XPath_func-minutes-from-time\">fn:minutes-from-time</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.20 <a href = \"#XPath_func-seconds-from-time\">fn:seconds-from-time</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.5.21 <a href = \"#XPath_func-timezone-from-time\">fn:timezone-from-time</a><br/>\n&#160;&#160;&#160;&#160;10.6 <a href = \"#duration-arithmetic\">Arithmetic Operators on Durations</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.1 <a href = \"#XPath_func-add-yearMonthDurations\">op:add-yearMonthDurations</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.2 <a href = \"#XPath_func-subtract-yearMonthDurations\">op:subtract-yearMonthDurations</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.3 <a href = \"#XPath_func-multiply-yearMonthDuration\">op:multiply-yearMonthDuration</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.4 <a href = \"#XPath_func-divide-yearMonthDuration\">op:divide-yearMonthDuration</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.5 <a href = \"#XPath_func-divide-yearMonthDuration-by-yearMonthDuration\">op:divide-yearMonthDuration-by-yearMonthDuration</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.6 <a href = \"#XPath_func-add-dayTimeDurations\">op:add-dayTimeDurations</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.7 <a href = \"#XPath_func-subtract-dayTimeDurations\">op:subtract-dayTimeDurations</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.8 <a href = \"#XPath_func-multiply-dayTimeDuration\">op:multiply-dayTimeDuration</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.9 <a href = \"#XPath_func-divide-dayTimeDuration\">op:divide-dayTimeDuration</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.6.10 <a href = \"#XPath_func-divide-dayTimeDuration-by-dayTimeDuration\">op:divide-dayTimeDuration-by-dayTimeDuration</a><br/>\n\n&#160;&#160;&#160;&#160;10.7 <a href = \"#timezone.functions\">Timezone\nAdjustment Functions on Dates and Time Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.7.1 <a href = \"#XPath_func-adjust-dateTime-to-timezone\">fn:adjust-dateTime-to-timezone</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.7.2 <a href = \"#XPath_func-adjust-date-to-timezone\">fn:adjust-date-to-timezone</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.7.3 <a href = \"#XPath_func-adjust-time-to-timezone\">fn:adjust-time-to-timezone</a><br/>\n\n&#160;&#160;&#160;&#160;10.8 <a href = \"#dateTime-arithmetic\">Arithmetic Operators on Durations, Dates and\nTimes</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.1 <a href = \"#XPath_func-subtract-dateTimes\">op:subtract-dateTimes</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.2 <a href = \"#XPath_func-subtract-dates\">op:subtract-dates</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.3 <a href = \"#XPath_func-subtract-times\">op:subtract-times</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.4 <a href = \"#XPath_func-add-yearMonthDuration-to-dateTime\">op:add-yearMonthDuration-to-dateTime</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.5 <a href = \"#XPath_func-add-dayTimeDuration-to-dateTime\">op:add-dayTimeDuration-to-dateTime</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.6 <a href = \"#XPath_func-subtract-yearMonthDuration-from-dateTime\">op:subtract-yearMonthDuration-from-dateTime</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.7 <a href = \"#XPath_func-subtract-dayTimeDuration-from-dateTime\">op:subtract-dayTimeDuration-from-dateTime</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.8 <a href = \"#XPath_func-add-yearMonthDuration-to-date\">op:add-yearMonthDuration-to-date</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.9 <a href = \"#XPath_func-add-dayTimeDuration-to-date\">op:add-dayTimeDuration-to-date</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.10 <a href = \"#XPath_func-subtract-yearMonthDuration-from-date\">op:subtract-yearMonthDuration-from-date</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.11 <a href = \"#XPath_func-subtract-dayTimeDuration-from-date\">op:subtract-dayTimeDuration-from-date</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.12 <a href = \"#XPath_func-add-dayTimeDuration-to-time\">op:add-dayTimeDuration-to-time</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.8.13 <a href = \"#XPath_func-subtract-dayTimeDuration-from-time\">op:subtract-dayTimeDuration-from-time</a><br/>\n\n11 <a href = \"#QName-funcs\">Functions Related to QNames</a><br/>\n&#160;&#160;&#160;&#160;11.1 <a href = \"#QName-constructors\">Additional Constructor Functions for\nQNames</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.1 <a href = \"#XPath_func-resolve-QName\">fn:resolve-QName</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.2 <a href = \"#XPath_func-QName\">fn:QName</a><br/>\n&#160;&#160;&#160;&#160;11.2 <a href = \"#QName-functions\">Functions\nand Operators Related to QNames</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.1 <a href = \"#XPath_func-QName-equal\">op:QName-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.2 <a href = \"#XPath_func-prefix-from-QName\">fn:prefix-from-QName</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.3 <a href = \"#XPath_func-local-name-from-QName\">fn:local-name-from-QName</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.4 <a href = \"#XPath_func-namespace-uri-from-QName\">fn:namespace-uri-from-QName</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.5 <a href = \"#XPath_func-namespace-uri-for-prefix\">fn:namespace-uri-for-prefix</a><br/>\n\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.6 <a href = \"#XPath_func-in-scope-prefixes\">fn:in-scope-prefixes</a><br/>\n12 <a href = \"#binary-functions\">Operators on base64Binary and\nhexBinary</a><br/>\n&#160;&#160;&#160;&#160;12.1 <a href = \"#binary-value-comparisons\">Comparisons of base64Binary and\nhexBinary Values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;12.1.1 <a href = \"#XPath_func-hexBinary-equal\">op:hexBinary-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;12.1.2 <a href = \"#XPath_func-base64Binary-equal\">op:base64Binary-equal</a><br/>\n13 <a href = \"#NOTATION-functions\">Operators on NOTATION</a><br/>\n&#160;&#160;&#160;&#160;13.1 <a href = \"#op.NOTATION\">Operators on\nNOTATION</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;13.1.1 <a href = \"#XPath_func-NOTATION-equal\">op:NOTATION-equal</a><br/>\n14 <a href = \"#node-functions\">Functions and Operators on\nNodes</a><br/>\n&#160;&#160;&#160;&#160;14.1 <a href = \"#XPath_func-name\">fn:name</a><br/>\n&#160;&#160;&#160;&#160;14.2 <a href = \"#XPath_func-local-name\">fn:local-name</a><br/>\n&#160;&#160;&#160;&#160;14.3 <a href = \"#XPath_func-namespace-uri\">fn:namespace-uri</a><br/>\n&#160;&#160;&#160;&#160;14.4 <a href = \"#XPath_func-number\">fn:number</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.4.1 <a href = \"#func-number-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;14.5 <a href = \"#XPath_func-lang\">fn:lang</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.5.1 <a href = \"#func-lang-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;14.6 <a href = \"#XPath_func-is-same-node\">op:is-same-node</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.6.1 <a href = \"#func-is-same-node-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;14.7 <a href = \"#XPath_func-node-before\">op:node-before</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.7.1 <a href = \"#func-node-before-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;14.8 <a href = \"#XPath_func-node-after\">op:node-after</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.8.1 <a href = \"#func-node-after-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;14.9 <a href = \"#XPath_func-root\">fn:root</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;14.9.1 <a href = \"#func-root-examples\">Examples</a><br/>\n15 <a href = \"#sequence-functions\">Functions and Operators on\nSequences</a><br/>\n&#160;&#160;&#160;&#160;15.1 <a href = \"#general-seq-funcs\">General\nFunctions and Operators on Sequences</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.1 <a href = \"#XPath_func-boolean\">fn:boolean</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.2 <a href = \"#XPath_func-concatenate\">op:concatenate</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.3 <a href = \"#XPath_func-index-of\">fn:index-of</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.4 <a href = \"#XPath_func-empty\">fn:empty</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.5 <a href = \"#XPath_func-exists\">fn:exists</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.6 <a href = \"#XPath_func-distinct-values\">fn:distinct-values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.7 <a href = \"#XPath_func-insert-before\">fn:insert-before</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.8 <a href = \"#XPath_func-remove\">fn:remove</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.9 <a href = \"#XPath_func-reverse\">fn:reverse</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.10 <a href = \"#XPath_func-subsequence\">fn:subsequence</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.1.11 <a href = \"#XPath_func-unordered\">fn:unordered</a><br/>\n&#160;&#160;&#160;&#160;15.2 <a href = \"#cardinality-functions\">Functions That Test the Cardinality of\nSequences</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.2.1 <a href = \"#XPath_func-zero-or-one\">fn:zero-or-one</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.2.2 <a href = \"#XPath_func-one-or-more\">fn:one-or-more</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.2.3 <a href = \"#XPath_func-exactly-one\">fn:exactly-one</a><br/>\n&#160;&#160;&#160;&#160;15.3 <a href = \"#union-intersection-except\">Equals, Union, Intersection and\nExcept</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.3.1 <a href = \"#XPath_func-deep-equal\">fn:deep-equal</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.3.2 <a href = \"#XPath_func-union\">op:union</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.3.3 <a href = \"#XPath_func-intersect\">op:intersect</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.3.4 <a href = \"#XPath_func-except\">op:except</a><br/>\n&#160;&#160;&#160;&#160;15.4 <a href = \"#aggregate-functions\">Aggregate Functions</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.4.1 <a href = \"#XPath_func-count\">fn:count</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.4.2 <a href = \"#XPath_func-avg\">fn:avg</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.4.3 <a href = \"#XPath_func-max\">fn:max</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.4.4 <a href = \"#XPath_func-min\">fn:min</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.4.5 <a href = \"#XPath_func-sum\">fn:sum</a><br/>\n&#160;&#160;&#160;&#160;15.5 <a href = \"#fns-that-generate-sequences\">Functions and Operators that\nGenerate Sequences</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.1 <a href = \"#XPath_func-to\">op:to</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.2 <a href = \"#XPath_func-id\">fn:id</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.3 <a href = \"#XPath_func-idref\">fn:idref</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.4 <a href = \"#XPath_func-doc\">fn:doc</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.5 <a href = \"#XPath_func-doc-available\">fn:doc-available</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.6 <a href = \"#XPath_func-collection\">fn:collection</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;15.5.7 <a href = \"#XPath_func-element-with-id\">fn:element-with-id</a><br/>\n16 <a href = \"#context\">Context Functions</a><br/>\n&#160;&#160;&#160;&#160;16.1 <a href = \"#XPath_func-position\">fn:position</a><br/>\n&#160;&#160;&#160;&#160;16.2 <a href = \"#XPath_func-last\">fn:last</a><br/>\n&#160;&#160;&#160;&#160;16.3 <a href = \"#XPath_func-current-dateTime\">fn:current-dateTime</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.3.1 <a href = \"#func-current-dateTime-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;16.4 <a href = \"#XPath_func-current-date\">fn:current-date</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.4.1 <a href = \"#func-current-date-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;16.5 <a href = \"#XPath_func-current-time\">fn:current-time</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.5.1 <a href = \"#func-current-time-examples\">Examples</a><br/>\n&#160;&#160;&#160;&#160;16.6 <a href = \"#XPath_func-implicit-timezone\">fn:implicit-timezone</a><br/>\n&#160;&#160;&#160;&#160;16.7 <a href = \"#XPath_func-default-collation\">fn:default-collation</a><br/>\n&#160;&#160;&#160;&#160;16.8 <a href = \"#XPath_func-static-base-uri\">fn:static-base-uri</a><br/>\n17 <a href = \"#casting\">Casting</a><br/>\n&#160;&#160;&#160;&#160;17.1 <a href = \"#casting-from-primitive-to-primitive\">Casting from primitive types\nto primitive types</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.1 <a href = \"#casting-from-strings\">Casting from xs:string and\nxs:untypedAtomic</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.2 <a href = \"#casting-to-string\">Casting to xs:string and\nxs:untypedAtomic</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.3 <a href = \"#casting-to-numerics\">Casting to numeric types</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.4 <a href = \"#casting-to-durations\">Casting to duration types</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.5 <a href = \"#casting-to-datetimes\">Casting to date and time types</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.6 <a href = \"#casting-boolean\">Casting to xs:boolean</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.7 <a href = \"#casting-to-binary\">Casting to xs:base64Binary and\nxs:hexBinary</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.1.8 <a href = \"#casting-to-anyuri\">Casting to xs:anyURI</a><br/>\n&#160;&#160;&#160;&#160;17.2 <a href = \"#casting-to-derived-types\">Casting to derived types</a><br/>\n&#160;&#160;&#160;&#160;17.3 <a href = \"#casting-from-derived-to-parent\">Casting from derived types to\nparent types</a><br/>\n&#160;&#160;&#160;&#160;17.4 <a href = \"#casting-within-branch\">Casting within a branch of the type\nhierarchy</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;17.4.1 <a href = \"#casting-to-ENTITY\">Casting to xs:ENTITY</a><br/>\n&#160;&#160;&#160;&#160;17.5 <a href = \"#casting-across-hierarchy\">Casting across the type\nhierarchy</a><br/></p>\n<h3><a name = \"appendices\" id = \"appendices\"></a>Appendices</h3>\n<p class = \"toc\">A <a href = \"#biblio\">References</a><br/>\n&#160;&#160;&#160;&#160;A.1 <a href = \"#normative-biblio\">Normative\nReferences</a><br/>\n&#160;&#160;&#160;&#160;A.2 <a href = \"#non-normative-biblio\">Non-normative References</a><br/>\nB <a href = \"#error-summary\">Error Summary</a><br/>\nC <a href = \"#xpath1-compatibility\">Compatibility with XPath 1.0</a>\n(Non-Normative)<br/>\nD <a href = \"#examples\">Illustrative User-written Functions</a>\n(Non-Normative)<br/>\n&#160;&#160;&#160;&#160;D.1 <a href = \"#if-empty-if-absent\">eg:if-empty and eg:if-absent</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D.1.1 <a href = \"#if-empty\">eg:if-empty</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D.1.2 <a href = \"#if-absent\">eg:if-absent</a><br/>\n&#160;&#160;&#160;&#160;D.2 <a href = \"#union-intersect-except-on-values\">union, intersect and except on\nsequences of values</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D.2.1 <a href = \"#value-union\">eg:value-union</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D.2.2 <a href = \"#value-intersect\">eg:value-intersect</a><br/>\n&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D.2.3 <a href = \"#value-except\">eg:value-except</a><br/>\n&#160;&#160;&#160;&#160;D.3 <a href = \"#index-of-node\">eg:index-of-node</a><br/>\n&#160;&#160;&#160;&#160;D.4 <a href = \"#string-pad\">eg:string-pad</a><br/>\n&#160;&#160;&#160;&#160;D.5 <a href = \"#func-distinct-nodes-stable\">eg:distinct-nodes-stable</a><br/>\nE <a href = \"#impl-def\">Checklist of Implementation-Defined\nFeatures</a> (Non-Normative)<br/>\nF <a href = \"#changes-since-edition-1\">Changes since the First\nEdition</a> (Non-Normative)<br/>\nG <a href = \"#quickref\">Function and Operator Quick Reference</a>\n(Non-Normative)<br/>\n&#160;&#160;&#160;&#160;G.1 <a href = \"#quickref-section\">Functions\nand Operators by Section</a><br/>\n&#160;&#160;&#160;&#160;G.2 <a href = \"#quickref-alpha\">Functions and\nOperators Alphabetically</a><br/></p>\n</div><hr/><div class = \"body\">\n<div class = \"div1\">\n<h2><a name = \"intro\" id = \"intro\"></a>1 Introduction</h2>\n<p>The purpose of this document is to catalog the functions and\noperators required for XPath 2.0, XML Query 1.0 and XSLT 2.0. The\nexact syntax used to invoke these functions and operators is\nspecified in <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a>, <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a>\nand <a href = \"#xslt20\">[XSL Transformations (XSLT) Version\n2.0]</a>.</p>\n<p>This document defines constructor functions and functions that\ntake typed values as arguments. Some of the functions define the\nsemantics of operators discussed in <a href = \"#xquery\">[XQuery 1.0:\nAn XML Query Language]</a>.</p>\n<p><a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> defines a number of primitive and derived datatypes,\ncollectively known as built-in datatypes. This document defines\nfunctions and operations on these datatypes as well as the\ndatatypes defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> of the <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a>. These\nfunctions and operations are defined for use in <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>, <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> and <a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a> and related\nXML standards. This document also discusses functions and operators\non nodes and node sequences as defined in the <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a> for\nuse in <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>,\n<a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> and\n<a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a> and\nother related XML standards.</p>\n<p>References to specific sections of some of the above documents\nare indicated by cross-document links in this document. Each such\nlink consists of a pointer to a specific section followed a\nsuperscript specifying the linked document. The superscripts have\nthe following meanings: 'XQ' <a href = \"#xquery\">[XQuery 1.0: An XML\nQuery Language]</a>, 'XT' <a href = \"#xslt20\">[XSL Transformations\n(XSLT) Version 2.0]</a>, 'XP' <a href = \"#xpath20\">[XML Path Language\n(XPath) 2.0]</a>, 'DM' <a href = \"#xpath-datamodel\">[XQuery 1.0 and\nXPath 2.0 Data Model]</a> and 'FS' <a href = \"#xquery-semantics\">[XQuery 1.0 and XPath 2.0 Formal\nSemantics]</a>.</p>\n<div class = \"div2\">\n<h3><a name = \"conformance\" id = \"conformance\"></a>1.1 Conformance</h3>\n<p>The Functions and Operators specification is intended primarily\nas a component that can be used by other specifications. Therefore,\nFunctions and Operators relies on specifications that use it (such\nas <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>, <a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a> and <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a>) to specify\nconformance criteria for their respective environments.</p>\n<p>Authors of conformance criteria for the use of the Functions and\nOperators should pay particular attention to the following\nfeatures:</p>\n<ul>\n<li>\n<p>It is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> which version of Unicode is supported, but it\nis recommended that the most recent version of Unicode be used.</p>\n</li>\n<li>\n<p>Support for XML 1.0 and XML 1.1 by the datatypes used in\nFunctions and Operators.</p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>At the time of writing there is no published version of XML\nSchema that references the XML 1.1 specifications. This means that\ndatatypes such as <code>xs:NCName</code> and <code>xs:ID</code> are\nconstrained by the XML 1.0 rules. Authors of conformance\nrequirements for the use of Functions and Operators should state\nclearly the implications for conformance of any changes to the\nrules in later versions of XML Schema.</p>\n</div>\n<p>In this document, text labeled as an example or as a Note is\nprovided for explanatory purposes and is not normative.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"namespace-prefixes\" id = \"namespace-prefixes\"></a>1.2\nNamespaces and Prefixes</h3>\n<p>The functions and operators discussed in this document are\ncontained in one of three namespaces (see <a href = \"#REC-xml-names\">[Namespaces in XML]</a>) and referenced using an\n<code>xs:QName</code>. The datatypes and constructor functions for\nthe built-in datatypes defined in <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> and in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> of <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a> and\ndiscussed in <a href = \"#constructor-functions\"><b>5 Constructor\nFunctions</b></a> are in the XML Schema namespace,\n<code>http://www.w3.org/2001/XMLSchema</code>, and named in this\ndocument using the <code>xs</code> prefix. The namespace prefix\nused in this document for functions that are available to users is\n<code>fn</code>. Operator functions are named with the prefix\n<code>op</code>.</p>\n<p>This document uses the prefix <code>err</code> to represent the\nnamespace URI <code>http://www.w3.org/2005/xqt-errors</code>, which\nis the namespace for all XPath and XQuery error codes and messages.\nThis namespace prefix is not predeclared and its use in this\ndocument is not normative.</p>\n<p>The namespace prefix used for the functions, datatypes and\nerrors can vary, as long as the prefix is bound to the correct\nURI.</p>\n<p>The URIs of the namespaces and the default prefixes associated\nwith them are:</p>\n<ul>\n<li>\n<p><code>http://www.w3.org/2001/XMLSchema</code> for constructors\n-- associated with <code>xs</code>.</p>\n</li>\n<li>\n<p><code>http://www.w3.org/2005/xpath-functions</code> for\nfunctions -- associated with <code>fn</code>.</p>\n</li>\n<li>\n<p><code>http://www.w3.org/2005/xqt-errors</code> -- associated\nwith <code>err</code>.</p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The namespace URI associated with the <code>err</code> prefix is\nnot expected to change from one version of this document to\nanother. The contents of this namespace may be extended to allow\nadditional errors to be returned.</p>\n</div>\n<p>The functions defined with an <code>fn</code> prefix are\ncallable by the user. Functions defined with the <code>op</code>\nprefix are described here to underpin the definitions of the\noperators in <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a>, <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a>\nand <a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a>.\nThese functions are not available directly to users, and there is\nno requirement that implementations should actually provide these\nfunctions. For this reason, no namespace is associated with the\n<code>op</code> prefix. For example, multiplication is generally\nassociated with the <code>*</code> operator, but it is described as\na function in this document:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-multiply</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">numeric</code></div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"func-overloading\" id = \"func-overloading\"></a>1.3\nFunction Overloading</h3>\n<p>In general, the specifications named above do not support\nfunction overloading in the sense that functions that have multiple\nsignatures with the same name and the same number of parameters are\nnot supported. Consequently, there are no such overloaded functions\nin this document except for legacy <a href = \"#xpath\">[XML Path\nLanguage (XPath) Version 1.0]</a> functions such as <a href = \"#XPath_func-string\"><code>fn:string()</code></a>, which accepts a single\nparameter of a variety of types. In addition, it should be noted\nthat the functions defined in <a href = \"#numeric-functions\"><b>6\nFunctions and Operators on Numerics</b></a> that accept\n<code>numeric</code> parameters accept arguments of type\n<code>xs:integer</code>, <code>xs:decimal</code>,\n<code>xs:float</code> or <code>xs:double</code>. See <a href = \"#func-signatures\"><b>1.4 Function Signatures and\nDescriptions</b></a>. Operators such as \"+\" may be overloaded. This\ndocument does define some functions with more than one signature\nwith the same name and different number of parameters. User-defined\nfunctions with more than one signature with the same name and\ndifferent number of parameters are also supported.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"func-signatures\" id = \"func-signatures\"></a>1.4 Function\nSignatures and Descriptions</h3>\n<p>Each function is defined by specifying its signature, a\ndescription of the return type and each of the parameters and its\nsemantics. For many functions, examples are included to illustrate\ntheir use.</p>\n<p>Each function's signature is presented in a form like this:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:function-name</code>(<code class = \"arg\">$parameter-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">parameter-type</code>,\n<span class = \"varargs\">...</span>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">return-type</code></div>\n</div>\n<p>In this notation, <b>function-name</b>, in bold-face, is the\nname of the function whose signature is being specified. If the\nfunction takes no parameters, then the name is followed by an empty\nparameter list: \"<code>()</code>\"; otherwise, the name is followed\nby a parenthesized list of parameter declarations, each declaration\nspecifies the static type of the parameter, in italics, and a\ndescriptive, but non-normative, name. If there are two or more\nparameter declarations, they are separated by a comma. The\n<em><code>return-type</code></em> , also in italics, specifies the\nstatic type of the value returned by the function. The dynamic type\nreturned by the function is the same as its static type or derived\nfrom the static type. All parameter types and return types are\nspecified using the SequenceType notation defined in <a href = \"http://www.w3.org/TR/xpath20/#id-sequencetype-syntax\">Section\n2.5.3 SequenceType Syntax</a><sup><small>XP</small></sup>.</p>\n<p>In some cases the word \" <code>numeric</code> \" is used in\nfunction signatures as a shorthand to indicate the four numeric\ntypes: <code>xs:integer</code>, <code>xs:decimal</code>,\n<code>xs:float</code> and <code>xs:double</code>. For example, a\nfunction with the signature:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:numeric-function</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">...</code></div>\n</div>\n<p>represents the following four function signatures:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:numeric-function</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">...</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:numeric-function</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:decimal</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">...</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:numeric-function</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:float</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">...</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:numeric-function</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">...</code></div>\n</div>\n<p>For most functions there is an initial paragraph describing what\nthe function does followed by semantic rules. These rules are meant\nto be followed in the order that they appear in this document.</p>\n<p>In some cases, the static type returned by a function depends on\nthe type(s) of its argument(s). These special functions are\nindicated by using <em><b>bold italics</b></em> for the return\ntype. The semantic rules specifying the type of the value returned\nare documented in the function definition. The rules are described\nmore formally in <a href = \"http://www.w3.org/TR/xquery-semantics/#function_rules\">Section 7.2\nStandard functions with specific static typing\nrules</a><sup><small>FS</small></sup>.</p>\n<p>The function name is a <code>QName</code> as defined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nand must adhere to its syntactic conventions. Following <a href = \"#xpath\">[XML Path Language (XPath) Version 1.0]</a>, function\nnames are composed of English words separated by hyphens,\"-\". If a\nfunction name contains a <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a> datatype name, it may have\nintercapitalized spelling and is used in the function name as such.\nFor example, <a href = \"#XPath_func-timezone-from-dateTime\"><code>fn:timezone-from-dateTime</code></a>.</p>\n<p>Rules for passing parameters to operators are described in the\nrelevant sections of <a href = \"#xquery\">[XQuery 1.0: An XML Query\nLanguage]</a> and <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a>. For example, the rules for passing parameters to\narithmetic operators are described in <a href = \"http://www.w3.org/TR/xpath20/#id-arithmetic\">Section 3.4\nArithmetic Expressions</a><sup><small>XP</small></sup>.\nSpecifically, rules for parameters of type\n<code>xs:untypedAtomic</code> and the empty sequence are specified\nin this section.</p>\n<p>As is customary, the parameter type name indicates that the\nfunction or operator accepts arguments of that type, or types\nderived from it, in that position. This is called <em>subtype\nsubstitution</em> (See <a href = \"http://www.w3.org/TR/xpath20/#id-sequencetype-matching\">Section\n2.5.4 SequenceType Matching</a><sup><small>XP</small></sup>). In\naddition, numeric type instances and instances of type\n<code>xs:anyURI</code> can be promoted to produce an argument of\nthe required type. (See <a href = \"http://www.w3.org/TR/xpath20/#promotion\">Section B.1 Type\nPromotion</a><sup><small>XP</small></sup>).</p>\n<ol class = \"enumar\">\n<li>\n<p><em>Subtype Substitution</em>: A derived type may substitute for\nits base type. In particular, <code>xs:integer</code> may be used\nwhere <code>xs:decimal</code> is expected.</p>\n</li>\n<li>\n<p><em>Numeric Type Promotion</em>: <code>xs:decimal</code> may be\npromoted to <code>xs:float</code> or <code>xs:double</code>.\nPromotion to <code>xs:double</code> should be done directly, not\nvia <code>xs:float</code>, to avoid loss of precision.</p>\n</li>\n<li>\n<p><em>anyURI Type Promotion</em>: A value of type\n<code>xs:anyURI</code> can be promoted to the type\n<code>xs:string</code>.</p>\n</li>\n</ol>\n<p>Some functions accept a single value or the empty sequence as an\nargument and some may return a single value or the empty sequence.\nThis is indicated in the function signature by following the\nparameter or return type name with a question mark:\n\"<code>?</code>\", indicating that either a single value or the\nempty sequence must appear. See below.</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:function-name</code>(<code class = \"arg\">$parameter-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">parameter-type?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">return-type?</code></div>\n</div>\n<p>Note that this function signature is different from a signature\nin which the parameter is omitted. See, for example, the two\nsignatures for <a href = \"#XPath_func-string\"><code>fn:string()</code></a>.\nIn the first signature, the parameter is omitted and the argument\ndefaults to the context item, referred to as \".\". In the second\nsignature, the argument must be present but may be the empty\nsequence, referred to as \"().\"</p>\n<p>Some functions accept a sequence of zero or more values as an\nargument. This is indicated by following the name of type of the\nitems in the sequence with <code>*</code>. The sequence may contain\nzero or more items of the named type. For example, the function\nbelow accepts a sequence of <code>xs:double</code> and returns a\n<code>xs:double</code> or the empty sequence.</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:median</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double?</code></div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"namespace-terminology\" id = \"namespace-terminology\"></a>1.5 Namespace Terminology</h3>\n<p>This document uses the phrase \"namespace URI\" to identify the\nconcept identified in <a href = \"#REC-xml-names\">[Namespaces in\nXML]</a> as \"namespace name\", and the phrase \"local name\" to\nidentify the concept identified in <a href = \"#REC-xml-names\">[Namespaces in XML]</a> as \"local part\".</p>\n<p>It also uses the term \"expanded-QName\" defined below.</p>\n<dl>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"expanded-Qname\" id = \"expanded-Qname\"></a>[Definition]\n<b>Expanded-QName</b></span></dt>\n<dd>\n<p>An expanded-QName is a pair of values consisting of a namespace\nURI and a local name. They belong to the value space of the\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> datatype <code>xs:QName</code>. When this document\nrefers to <code>xs:QName</code> we always mean the value space,\ni.e. a namespace URI, local name pair (and not the lexical space\nreferring to constructs of the form prefix:local-name).</p>\n</dd>\n</dl>\n</div>\n<div class = \"div2\">\n<h3><a name = \"datatypes\" id = \"datatypes\"></a>1.6 Type Hierarchy</h3>\n<p>The diagram below shows the types for which functions are\ndefined in this document. These include the built-in types defined\nby <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> (shown on the right) as well as types defined in\n<a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data\nModel]</a> (shown on the left). Solid lines connect a base datatype\nabove to a derived datatype.<code>xs:IDREFS</code>,\n<code>xs:NMTOKENS</code>, <code>xs:ENTITIES</code> and\n<code>user-defined list and union types</code> are special types in\nthat these types are lists or unions rather than true subtypes.\nDashed lines connect a union type above with its component types\nbelow.</p>\n<img src = \"http://www.w3.org/TR/xpath-functions/type-hierarchy.png\" alt = \"Type hierarchy graphic\"/>\n<p>The information in the above diagram is reproduced below in\ntabular form. For ease of presentation the information is divided\ninto three tables. The first table shows the top three layers of\nthe hierarchy starting at <code>xs:anyType</code>. The second table\nshows the types derived from <code>xs:anyAtomicType</code>. The\nthird table shows the types defined in <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a></p>\n<p>Each type whose name is indented is derived from the type whose\nname appears nearest above it with one less level of\nindentation.</p>\n<table class = \"hierarchy\" summary = \"Type summary\" border = \"0\">\n<tbody>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:anyType</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">user-defined\ncomplex types</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:untyped</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:anySimpleType</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">user-defined\nlist and union types</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:IDREFS</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NMTOKENS</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:ENTITIES</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:anyAtomicType</td>\n</tr>\n</tbody>\n</table>\n<p>The table below shows the datatypes derived from\n<code>xs:anyAtomicType</code>. This includes all the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nbuilt-in datatypes as well as the two totally ordered subtypes of\nduration defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup>.</p>\n<p>Each type whose name is indented is derived from the type whose\nname appears nearest above it with one less level of\nindentation.</p>\n<table class = \"hierarchy\" summary = \"Type summary\" border = \"0\">\n<tbody>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:untypedAtomic</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:dateTime</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:date</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:time</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:duration</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:yearMonthDuration</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:dayTimeDuration</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:float</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:double</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:decimal</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:integer</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:nonPositiveInteger</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:negativeInteger</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:long</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:int</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:short</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:byte</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:nonNegativeInteger</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:unsignedLong</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:unsignedInt</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:unsignedShort</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:unsignedByte</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:positiveInteger</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:gYearMonth</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:gYear</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:gMonthDay</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:gDay</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:gMonth</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:string</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:normalizedString</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:token</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:language</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NMTOKEN</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:Name</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NCName</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:ID</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:IDREF</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:ENTITY</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:boolean</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:base64Binary</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:hexBinary</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:anyURI</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:QName</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NOTATION</td>\n</tr>\n</tbody>\n</table>\n<p>The table below shows the type hierarchy for the types\nintroduced in <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0\nData Model]</a>. For these types, each type whose name is indented\nis a component of the union type whose name appears nearest above\nwith one less level of indentation.</p>\n<table class = \"hierarchy\" summary = \"Type summary\" border = \"0\">\n<tbody>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">item</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:anyAtomicType</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">node</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">attribute</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">user-defined\nattribute types</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">comment</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">document</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">user-defined\ndocument types</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">element</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">user-defined\nelement types</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nprocessing-instruction</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">text</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class = \"div2\">\n<h3><a name = \"terminology\" id = \"terminology\"></a>1.7 Terminology</h3>\n<p>The terminology used to describe the functions and operators on\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> is defined in the body of this specification. The\nterms defined in the following list are used in building those\ndefinitions:</p>\n<dl>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"compatibility\" id = \"compatibility\"></a>[Definition] <b>for\ncompatibility</b></span></dt>\n<dd>\n<p>A feature of this specification included to ensure that\nimplementations that use this feature remain compatible with\n<a href = \"#xpath\">[XML Path Language (XPath) Version 1.0]</a></p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"may\" id = \"may\"></a>[Definition] <b>may</b></span></dt>\n<dd>\n<p>Conforming documents and processors are permitted to, but need\nnot, behave as described.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"must\" id = \"must\"></a>[Definition] <b>must</b></span></dt>\n<dd>\n<p>Conforming documents and processors are required to behave as\ndescribed; otherwise, they are either non-conformant or else in\nerror.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"implementation-defined\" id = \"implementation-defined\"></a>[Definition]\n<b>implementation-defined</b></span></dt>\n<dd>\n<p>Possibly differing between implementations, but specified and\ndocumented by the implementor for each particular\nimplementation.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"implementation-dependent\" id = \"implementation-dependent\"></a>[Definition]\n<b>implementation-dependent</b></span></dt>\n<dd>\n<p>Possibly differing between implementations, but not specified by\nthis or other W3C specification, and not required to be specified\nby the implementor for any particular implementation.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"execution-scope\" id = \"execution-scope\"></a>[Definition] <b>execution\nscope</b></span></dt>\n<dd>\n<p>The scope over which any two calls on a function would be\nexecuted. In XSLT, it applies to any two calls on the function\nexecuted during the same transformation. In XQuery, it applies to\nany two calls executed during the evaluation of a top-level\nexpression i.e. an expression not contained in any other\nexpression. In other contexts, the scope is specified by the host\nenvironment that invokes the function library.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"stable\" id = \"stable\"></a>[Definition] <b>stable</b></span></dt>\n<dd>\n<p>Most of the functions in the core library have the property that\ncalling the same function twice within an <a title = \"execution scope\" class = \"termref\" href = \"#execution-scope\"><span class = \"arrow\">·</span>execution\nscope<span class = \"arrow\">·</span></a> with the same arguments\nreturns the same result: these functions are said to be\n<b>stable</b>. This category includes a number of functions such as\n<a href = \"#XPath_func-doc\"><code>fn:doc()</code></a>, <a href = \"#XPath_func-collection\"><code>fn:collection()</code></a>, <a href = \"#XPath_func-current-dateTime\"><code>fn:current-dateTime()</code></a>,\n<a href = \"#XPath_func-current-date\"><code>fn:current-date</code></a> and\n<a href = \"#XPath_func-current-time\"><code>fn:current-time()</code></a>\nwhose result depends on the external environment. Where the\nfunction returns nodes, stability means that the returned nodes are\nidentical, not merely equal and are returned in the same order.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>in the case of <a href = \"#XPath_func-collection\"><code>fn:collection()</code></a> and <a href = \"#XPath_func-doc\"><code>fn:doc()</code></a>, the requirement for\nstability may be relaxed: see the function definitions for\ndetails.</p>\n</div>\n<p>Some other functions, for example <a href = \"#XPath_func-position\"><code>fn:position()</code></a> and <a href = \"#XPath_func-last\"><code>fn:last()</code></a>, depend on the dynamic\ncontext and may, therefore, produce different results each time\nthey are called. These functions are said to be\n<b>contextual</b>.</p>\n</dd>\n<dt class = \"label\"><span class = \"termdef\"><a name = \"uri\" id = \"uri\"></a>[Definition] <b>URI and URI reference</b></span></dt>\n<dd>\n<p>Within this specification, the term \"URI\" refers to Universal\nResource Identifiers as defined in <a href = \"#rfc3986\">[RFC\n3986]</a> and extended in <a href = \"#rfc3987\">[RFC 3987]</a> with a\nnew name \"IRI\". The term \"URI Reference\", unless otherwise stated,\nrefers to a string in the lexical space of the\n<code>xs:anyURI</code> datatype as defined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>.\nNote that this means, in practice, that where this specification\nrequires a \"URI Reference\", an IRI as defined in <a href = \"#rfc3987\">[RFC 3987]</a> will be accepted, provided that other\nrelevant specifications also permit an IRI. The term URI has been\nretained in preference to IRI to avoid introducing new names for\nconcepts such as \"Base URI\" that are defined or referenced across\nthe whole family of XML specifications. Note also that the\ndefinition of <code>xs:anyURI</code> is a wider definition than the\ndefinition in <a href = \"#rfc3987\">[RFC 3987]</a>; for example it\ndoes not require non-ASCII characters to be escaped.</p>\n</dd>\n</dl>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"accessors\" id = \"accessors\"></a>2 Accessors</h2>\n<p>Accessors and their semantics are described in <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a>. Some\nof these accessors are exposed to the user through the functions\ndescribed below.</p>\n<table summary = \"Function summary\" border = \"1\" width = \"80%\">\n<col width = \"25%\" span = \"1\"/>\n<col width = \"25%\" span = \"1\"/>\n<col width = \"25%\" span = \"1\"/>\n<col width = \"25%\" span = \"1\"/>\n<thead>\n<tr>\n<th>Function</th>\n<th>Accessor</th>\n<th>Accepts</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-node-name\"><code>fn:node-name</code></a></td>\n<td><code>node-name</code></td>\n<td>an optional node</td>\n<td>zero or one <code>xs:QName</code></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-nilled\"><code>fn:nilled</code></a></td>\n<td><code>nilled</code></td>\n<td>a node</td>\n<td>an optional <code>xs:boolean</code></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-string\"><code>fn:string</code></a></td>\n<td><code>string-value</code></td>\n<td>an optional item or no argument</td>\n<td><code>xs:string</code></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-data\"><code>fn:data</code></a></td>\n<td><code>typed-value</code></td>\n<td>zero or more items</td>\n<td>a sequence of atomic values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-base-uri\"><code>fn:base-uri</code></a></td>\n<td><code>base-uri</code></td>\n<td>an optional node or no argument</td>\n<td>zero or one <code>xs:anyURI</code></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-document-uri\"><code>fn:document-uri</code></a></td>\n<td><code>document-uri</code></td>\n<td>an optional node</td>\n<td>zero or one <code>xs:anyURI</code></td>\n</tr>\n</tbody>\n</table>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-node-name\" id = \"XPath_func-node-name\"></a>2.1\nfn:node-name</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:node-name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:QName?</code></div>\n</div>\n<p>Summary: Returns an expanded-QName for node kinds that can have\nnames. For other kinds of nodes it returns the empty sequence. If\n<code>$arg</code> is the empty sequence, the empty sequence is\nreturned.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-nilled\" id = \"XPath_func-nilled\"></a>2.2 fn:nilled</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:nilled</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:boolean</code> indicating whether\nthe argument node is \"nilled\". If the argument is not an element\nnode, returns the empty sequence. If the argument is the empty\nsequence, returns the empty sequence.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-string\" id = \"XPath_func-string\"></a>2.3 fn:string</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:string</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\"><code class = \"function\">fn:string</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> represented as a\n<code>xs:string</code>. If no argument is supplied, the context\nitem (<code>.</code>) is used as the default argument. The behavior\nof the function if the argument is omitted is exactly the same as\nif the context item had been passed as the argument.</p>\n<p>If the context item is undefined, error [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup> is\nraised.</p>\n<p>If <code>$arg</code> is the empty sequence, the zero-length\nstring is returned.</p>\n<p>If <code>$arg</code> is a node, the function returns the\nstring-value of the node, as obtained using the\n<code>dm:string-value</code> accessor defined in the <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-string-value\">Section\n5.13 string-value Accessor</a><sup><small>DM</small></sup>.</p>\n<p>If <code>$arg</code> is an atomic value, then the function\nreturns the same string as is returned by the expression \"\n<code>$arg</code> cast as <code>xs:string</code> \" (see <a href = \"#casting\"><b>17 Casting</b></a>).</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-data\" id = \"XPath_func-data\"></a>2.4 fn:data</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:data</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType*</code></div>\n</div>\n<p>Summary: <code>fn:data</code> takes a sequence of items and\nreturns a sequence of atomic values.</p>\n<p>The result of <code>fn:data</code> is the sequence of atomic\nvalues produced by applying the following rules to each item in\n<code>$arg</code>:</p>\n<ul>\n<li>\n<p>If the item is an atomic value, it is returned.</p>\n</li>\n<li>\n<p>If the item is a node:</p>\n<ul>\n<li>\n<p>If the node does not have a typed value an error is raised\n[<a href = \"#ERRFOTY0012\" title = \"err:FOTY0012\">err:FOTY0012</a>].</p>\n</li>\n<li>\n<p>Otherwise, <code>fn:data()</code> returns the typed value of the\nnode as defined by the accessor function\n<code>dm:typed-value</code> in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-typed-value\">Section 5.15\ntyped-value Accessor</a><sup><small>DM</small></sup>.</p>\n</li>\n</ul>\n</li>\n</ul>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-base-uri\" id = \"XPath_func-base-uri\"></a>2.5\nfn:base-uri</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:base-uri</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:base-uri</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<p>Summary: Returns the value of the base-uri URI property for\n<code>$arg</code> as defined by the accessor function\n<code>dm:base-uri()</code> for that kind of node in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-base-uri\">Section 5.2\nbase-uri Accessor</a><sup><small>DM</small></sup>. If\n<code>$arg</code> is not specified, the behavior is identical to\ncalling the function with the context item (<code>.</code>) as\nargument. The following errors may be raised: if the context item\nis undefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned.</p>\n<p>Document, element and processing-instruction nodes have a\nbase-uri property which may be empty. The base-uri property of all\nother node types is the empty sequence. The value of the base-uri\nproperty is returned if it exists and is not empty. Otherwise, if\nthe node has a parent, the value of <code>dm:base-uri()</code>\napplied to its parent is returned, recursively. If the node does\nnot have a parent, or if the recursive ascent up the ancestor chain\nencounters a node whose base-uri property is empty and it does not\nhave a parent, the empty sequence is returned.</p>\n<p>See also <a href = \"#XPath_func-static-base-uri\"><code>fn:static-base-uri</code></a>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-document-uri\" id = \"XPath_func-document-uri\"></a>2.6\nfn:document-uri</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:document-uri</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<p>Summary: Returns the value of the document-uri property for\n<code>$arg</code> as defined by the <code>dm:document-uri</code>\naccessor function defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#DocumentNodeAccessors\">Section\n6.1.2 Accessors</a><sup><small>DM</small></sup>.</p>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned.</p>\n<p>Returns the empty sequence if the node is not a document node.\nOtherwise, returns the value of the <code>dm:document-uri</code>\naccessor of the document node.</p>\n<p>In the case of a document node <code>$D</code> returned by the\n<a href = \"#XPath_func-doc\"><code>fn:doc</code></a> function, or a document\nnode at the root of a tree containing a node returned by the\n<a href = \"#XPath_func-collection\"><code>fn:collection</code></a> function,\nit will always be true that either <code>fn:document-uri($D)</code>\nreturns the empty sequence, or that the following expression is\ntrue: <a href = \"#XPath_func-doc\"><code>fn:doc(fn:document-uri($D))</code></a> is\n<code>$D</code>. It is implementation-defined whether this\nguarantee also holds for document nodes obtained by other means,\nfor example a document node passed as the initial context node of a\nquery or transformation.</p>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"XPath_func-error\" id = \"XPath_func-error\"></a>3 The Error\nFunction</h2>\n<p>In this document, as well as in <a href = \"#xquery\">[XQuery 1.0:\nAn XML Query Language]</a>, <a href = \"#xpath20\">[XML Path Language\n(XPath) 2.0]</a>, and <a href = \"#xquery-semantics\">[XQuery 1.0 and\nXPath 2.0 Formal Semantics]</a>, the phrase \"an error is raised\" is\nused. Raising an error is equivalent to invoking the\n<code>fn:error</code> function defined in this section with the\nprovided error code.</p>\n<p>The above phrase is normally accompanied by specification of a\nspecific error, to wit: \"an error is raised [<em>error code</em>]\".\nEach error defined in this document is identified by an\n<code>xs:QName</code> that is in the\n<code>http://www.w3.org/2005/xqt-errors</code> namespace,\nrepresented in this document by the <code>err</code> prefix. It is\nthis <code>xs:QName</code> that is actually passed as an argument\nto the <code>fn:error</code> function invocation. Invocation of\nthis function raises an error. For a more detailed treatment of\nerror handing, see <a href = \"http://www.w3.org/TR/xpath20/#id-handling-dynamic\">Section 2.3.3\nHandling Dynamic Errors</a><sup><small>XP</small></sup> and\n<a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fnerror\">Section\n7.2.9 The fn:error function</a><sup><small>FS</small></sup>.</p>\n<p>The <code>fn:error</code> function is a general function that\nmay be invoked as above but may also be invoked from <a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> or <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a> applications with,\nfor example, an <code>xs:QName</code> argument.</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:error</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">none</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:error</code>(<code class = \"arg\">$error</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">none</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:error</code>(<code class = \"arg\">$error</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName?</code>,\n<code class = \"arg\">$description</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">none</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:error</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$error</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$description</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$error-object</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">none</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: The <code>fn:error</code> function raises an error.\nWhile this function never returns a value, an error is returned to\nthe external processing environment as an <code>xs:anyURI</code> or\nan <code>xs:QName</code>. The error <code>xs:anyURI</code> is\nderived from the error <code>xs:QName</code>. An error\n<code>xs:QName</code> with namespace URI NS and local part LP will\nbe returned as the <code>xs:anyURI</code> NS#LP. The method by\nwhich the <code>xs:anyURI</code> or <code>xs:QName</code> is\nreturned to the external processing environment is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>If an invocation provides <code>$description</code> and\n<code>$error-object</code>, then these values may also be returned\nto the external processing environment. The method by which these\nvalues are provided to the external environment is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The value of the <code>$description</code> parameter may need to\nbe localized.</p>\n</div>\n<p>Note that \"none\" is a special type defined in <a href = \"#xquery-semantics\">[XQuery 1.0 and XPath 2.0 Formal Semantics]</a>\nand is not available to the user. It indicates that the function\nnever returns and ensures that it has the correct static type.</p>\n<p>If <code>fn:error</code> is invoked with no arguments, then its\nbehavior is the same as the invocation of the following\nexpression:</p>\n<div class = \"exampleInner\">\n<pre>\n fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')) \n</pre></div>\n<p>If the first argument in the third or fourth signature is the\nempty sequence it is assumed to be the <code>xs:QName</code>\nconstructed by:</p>\n<div class = \"exampleInner\">\n<pre>\n fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000')\n</pre></div>\n<div class = \"div2\">\n<h3><a name = \"func-error-examples\" id = \"func-error-examples\"></a>3.1\nExamples</h3>\n<ul>\n<li>\n<p><code>fn:error()</code> returns\n<code>http://www.w3.org/2005/xqt-errors#FOER0000</code> (or the\ncorresponding <code>xs:QName</code>) to the external processing\nenvironment.</p>\n</li>\n<li>\n<p><code>fn:error(fn:QName('http://www.example.com/HR',\n'myerr:toohighsal'), 'Does not apply because salary is too\nhigh')</code> returns\n<code>http://www.example.com/HR#toohighsal</code> and the\n<code>xs:string</code> <code>\"Does not apply because salary is too\nhigh\"</code> (or the corresponding <code>xs:QName</code>) to the\nexternal processing environment.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"XPath_func-trace\" id = \"XPath_func-trace\"></a>4 The Trace\nFunction</h2>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:trace</code>(<code class = \"arg\">$value</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,\n<code class = \"arg\">$label</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n</div>\n<p>Summary: Provides an execution trace intended to be used in\ndebugging queries.</p>\n<p>The input <code>$value</code> is returned, unchanged, as the\nresult of the function. In addition, the inputs\n<code>$value</code>, converted to an <code>xs:string</code>, and\n<code>$label</code> may be directed to a trace data set. The\ndestination of the trace output is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. The format of the trace output is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>. The ordering of output from invocations of\nthe <code>fn:trace()</code> function is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<div class = \"div2\">\n<h3><a name = \"func-trace-examples\" id = \"func-trace-examples\"></a>4.1\nExamples</h3>\n<ul>\n<li>\n<p>Consider a situation in which a user wants to investigate the\nactual value passed to a function. Assume that in a particular\nexecution, <code>$v</code> is an <code>xs:decimal</code> with value\n<code>124.84</code>. Writing <code>fn:trace($v, 'the value of $v\nis:')</code> will put the strings <code>\"124.84\"</code> and\n<code>\"the value of $v is:\"</code> in the trace data set in\nimplementation dependent order.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"constructor-functions\" id = \"constructor-functions\"></a>5 Constructor Functions</h2>\n<div class = \"div2\">\n<h3><a name = \"constructor-functions-for-xsd-types\" id = \"constructor-functions-for-xsd-types\"></a>5.1 Constructor Functions\nfor XML Schema Built-in Types</h3>\n<p>Every built-in atomic type that is defined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>,\nexcept <code>xs:anyAtomicType</code> and <code>xs:NOTATION</code>,\nhas an associated constructor function.\n<code>xs:untypedAtomic</code>, defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> and the two derived types\n<code>xs:yearMonthDuration</code> and\n<code>xs:dayTimeDuration</code> defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> also have associated\nconstructor functions.</p>\n<p>A constructor function is not defined for\n<code>xs:anyAtomicType</code> as there are no atomic values with\ntype annotation <code>xs:anyAtomicType</code> at runtime, although\nthis can be a statically inferred type. A constructor function is\nnot defined for <code>xs:NOTATION</code> since it is defined as an\nabstract type in <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a>. If the static context (See <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section 2.1.1 Static\nContext</a><sup><small>XP</small></sup>) contains a type derived\nfrom <code>xs:NOTATION</code> then a constructor function is\ndefined for it. See <a href = \"#constructor-functions-for-user-defined-types\"><b>5.4 Constructor\nFunctions for User-Defined Types</b></a>.</p>\n<p>The form of the constructor function for a type\n<em>prefix:TYPE</em> is:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">prefix:TYPE</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">prefix:TYPE?</code></div>\n</div>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned. For example, the signature of the constructor function\ncorresponding to the <code>xs:unsignedInt</code> type defined in\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> is:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">xs:unsignedInt</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:unsignedInt?</code></div>\n</div>\n<p>Invoking the constructor function\n<code>xs:unsignedInt(12)</code> returns the\n<code>xs:unsignedInt</code> value 12. Another invocation of that\nconstructor function that returns the same\n<code>xs:unsignedInt</code> value is\n<code>xs:unsignedInt(\"12\")</code>. The same result would also be\nreturned if the constructor function were to be invoked with a node\nthat had a typed value equal to the <code>xs:unsignedInt</code> 12.\nThe standard features described in <a href = \"http://www.w3.org/TR/xpath20/#id-atomization\">Section 2.4.2\nAtomization</a><sup><small>XP</small></sup> would 'atomize' the\nnode to extract its typed value and then call the constructor with\nthat value. If the value passed to a constructor is illegal for the\ndatatype to be constructed, an error is raised [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>].</p>\n<p>The semantics of the constructor function \"\n<code>xs:TYPE(arg)</code> \" are identical to the semantics of \"\n<code>arg</code> cast as <code>xs:TYPE?</code> \". See <a href = \"#casting\"><b>17 Casting</b></a>.</p>\n<p>If the argument to a constructor function is a literal, the\nresult of the function may be evaluated statically; if an error is\nfound during such evaluation, it may be reported as a static\nerror.</p>\n<p>Special rules apply to constructor functions for\n<code>xs:QName</code> and types derived from <code>xs:QName</code>\nand <code>xs:NOTATION</code>. See <a href = \"#constructor-qname-notation\"><b>5.3 Constructor Functions for\nxs:QName and xs:NOTATION</b></a>.</p>\n<p>The following constructor functions for the built-in types are\nsupported:</p>\n<ul>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:string</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:boolean</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:decimal</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:float</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:float?</code></div>\n<p>Implementations <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> return negative zero for\n<code>xs:float(\"-0.0E0\")</code>. <a href = \"#xmlschema-2\">[XML Schema\nPart 2: Datatypes Second Edition]</a> does not distinguish between\nthe values positive zero and negative zero.</p>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:double</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double?</code></div>\n<p>Implementations <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> return negative zero for\n<code>xs:double(\"-0.0E0\").</code> <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> does not distinguish\nbetween the values positive zero and negative zero.</p>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:duration?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:time</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:date</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:gYearMonth</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:gYearMonth?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:gYear</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:gYear?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:gMonthDay</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:gMonthDay?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:gDay</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:gDay?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:gMonth</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:gMonth?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:hexBinary</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:hexBinary?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:base64Binary</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:base64Binary?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:anyURI</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:QName</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:QName?</code></div>\n<p>See <a href = \"#constructor-qname-notation\"><b>5.3 Constructor\nFunctions for xs:QName and xs:NOTATION</b></a> for special\nrules.</p>\n</li>\n</ul>\n<ul>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:normalizedString</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:normalizedString?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:token</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:token?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:language</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:language?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:NMTOKEN</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:NMTOKEN?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:Name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:Name?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:NCName</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:NCName?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:ID</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:ID?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:IDREF</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:IDREF?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:ENTITY</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:ENTITY?</code></div>\n<p>See <a href = \"#casting-to-ENTITY\"><b>17.4.1 Casting to\nxs:ENTITY</b></a> for rules related to constructing values of type\n<code>xs:ENTITY</code> and types derived from it.</p>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:integer</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:nonPositiveInteger</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:nonPositiveInteger?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:negativeInteger</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:negativeInteger?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:long</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:long?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:int</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:int?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:short</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:short?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:byte</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:byte?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:nonNegativeInteger</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:nonNegativeInteger?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:unsignedLong</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:unsignedLong?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:unsignedInt</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:unsignedInt?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:unsignedShort</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:unsignedShort?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:unsignedByte</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:unsignedByte?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:positiveInteger</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:positiveInteger?</code></div>\n</li>\n</ul>\n<ul>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:yearMonthDuration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:yearMonthDuration?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:dayTimeDuration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration?</code></div>\n</li>\n<li>\n<div class = \"proto\"><code class = \"function\">xs:untypedAtomic</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:untypedAtomic?</code></div>\n</li>\n</ul>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-dateTime\" id = \"XPath_func-dateTime\"></a>5.2 A Special\nConstructor Function for xs:dateTime</h3>\n<p>A special constructor function is provided for constructing a\n<code>xs:dateTime</code> value from a <code>xs:date</code> value\nand a <code>xs:time</code> value.</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:dateTime</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime?</code></div>\n</div>\n<p>The result <code>xs:dateTime</code> has a date component whose\nvalue is equal to <code>$arg1</code> and a time component whose\nvalue is equal to <code>$arg2</code>. The result is the empty\nsequence if either of the parameters is the empty sequence.</p>\n<p>The timezone of the result is computed as follows:</p>\n<ul>\n<li>\n<p>If neither argument has a timezone, the result has no\ntimezone.</p>\n</li>\n<li>\n<p>If exactly one of the arguments has a timezone, or if both\narguments have the same timezone, the result has this timezone.</p>\n</li>\n<li>\n<p>If the two arguments have different timezones, an error is\nraised:[<a href = \"#ERRFORG0008\" title = \"err:FORG0008\">err:FORG0008</a>]</p>\n</li>\n</ul>\n<div class = \"div3\">\n<h4><a name = \"func-dateTime-examples\" id = \"func-dateTime-examples\"></a>5.2.1 Examples</h4>\n<ul>\n<li>\n<p><code>fn:dateTime(xs:date(\"1999-12-31\"),\nxs:time(\"12:00:00\"))</code> returns\n<code>xs:dateTime(\"1999-12-31T12:00:00\").</code></p>\n</li>\n<li>\n<p><code>fn:dateTime(xs:date(\"1999-12-31\"),\nxs:time(\"24:00:00\"))</code> returns\n<code>xs:dateTime(\"1999-12-31T00:00:00\")</code> because\n<code>\"24:00:00\"</code> is an alternate lexical form for\n<code>\"00:00:00\".</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"constructor-qname-notation\" id = \"constructor-qname-notation\"></a>5.3 Constructor Functions for\nxs:QName and xs:NOTATION</h3>\n<p>Special rules apply to constructor functions for the types\n<code>xs:QName</code> and <code>xs:NOTATION</code>, for two\nreasons:</p>\n<ul>\n<li>\n<p>The lexical representation of these types uses namespace\nprefixes, whose meaning is context-dependent.</p>\n</li>\n<li>\n<p>Values cannot belong directly to the type\n<code>xs:NOTATION</code>, only to its subtypes.</p>\n</li>\n</ul>\n<p>These constraints result in the following restrictions:</p>\n<ul>\n<li>\n<p>Conversion from an <code>xs:string</code> to a value of type\n<code>xs:QName</code>, a type derived from <code>xs:QName</code> or\na type derived from <code>xs:NOTATION</code> is permitted only if\nthe <code>xs:string</code> is written as a string literal. This\napplies whether the conversion is expressed using a constructor\nfunction or using the \"cast as\" syntax. Such a conversion can be\nregarded as a pseudo-function, which is always evaluated\nstatically. It is also permitted for these constructors and casts\nto take a dynamically-supplied argument in the normal manner, but\nas the casting table (see <a href = \"#casting-from-primitive-to-primitive\"><b>17.1 Casting from\nprimitive types to primitive types</b></a>) indicates, the only\narguments that are supported in this case are values of type\n<code>xs:QName</code> or <code>xs:NOTATION</code> respectively.</p>\n</li>\n<li>\n<p>There is no constructor function for <code>xs:NOTATION</code>.\nConstructors are defined, however, for <code>xs:QName</code>, for\ntypes derived from <code>xs:QName</code>, and for types derived\nfrom <code>xs:NOTATION</code>.</p>\n</li>\n</ul>\n<p>When converting from an <code>xs:string</code>, the prefix\nwithin the lexical <code>xs:QName</code> supplied as the argument\nis resolved to a namespace URI using the statically known\nnamespaces from the static context. If the lexical\n<code>xs:QName</code> has no prefix, the namespace URI of the\nresulting expanded-QName is the default element/type namespace from\nthe static context. Components of the static context are discussed\nin <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section\n2.1.1 Static Context</a><sup><small>XP</small></sup>. A static\nerror is raised [<a href = \"#ERRFONS0004\" title = \"err:FONS0004\">err:FONS0004</a>] if the prefix is not bound in the\nstatic context. As described in <a href = \"http://www.w3.org/TR/xpath-datamodel/#terminology\">Section 2.1\nTerminology</a><sup><small>DM</small></sup>, the supplied prefix is\nretained as part of the expanded-QName value.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"constructor-functions-for-user-defined-types\" id = \"constructor-functions-for-user-defined-types\"></a>5.4 Constructor\nFunctions for User-Defined Types</h3>\n<p>For every atomic type in the static context (See <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section 2.1.1 Static\nContext</a><sup><small>XP</small></sup>) that is derived from a\nprimitive type, there is a constructor function (whose name is the\nsame as the name of the type) whose effect is to create a value of\nthat type from the supplied argument. The rules for constructing\nuser-defined types are defined in the same way as the rules for\nconstructing built-in derived types discussed in <a href = \"#constructor-functions-for-xsd-types\"><b>5.1 Constructor Functions\nfor XML Schema Built-in Types</b></a>.</p>\n<p>Special rules apply to constructor functions for types derived\nfrom <code>xs:QName</code> and <code>xs:NOTATION</code>. See\n<a href = \"#constructor-qname-notation\"><b>5.3 Constructor Functions\nfor xs:QName and xs:NOTATION</b></a>.</p>\n<p>Consider a situation where the static context contains a type\ncalled <code>hatSize</code> defined in a schema whose target\nnamespace is bound to the prefix <code>my</code>. In such a case\nthe constructor function:</p>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">my:hatSize</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">my:hatSize?</code></div>\n</div>\n<p>is available to users.</p>\n<p>To construct an instance of an atomic type that is not in a\nnamespace, it is necessary to use a cast expression or undeclare\nthe default function namespace. For example, if the user-defined\ntype <code>apple</code> is derived from <code>xs:integer</code> but\nis not in a namespace, an instance of this type can be constructed\nas follows using a cast expression (this requires that the default\nelement/type namespace is no namespace):</p>\n<div class = \"exampleInner\">\n<pre>\n17 cast as apple\n</pre></div>\n<p>The following shows the use of the constructor function:</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare default function namespace \"\"; apple(17)\n</pre></div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"numeric-functions\" id = \"numeric-functions\"></a>6\nFunctions and Operators on Numerics</h2>\n<p>This section discusses arithmetic operators on the numeric\ndatatypes defined in <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a>. It uses an approach that permits\nlightweight implementation whenever possible.</p>\n<div class = \"div2\">\n<h3><a name = \"numeric-types\" id = \"numeric-types\"></a>6.1 Numeric\nTypes</h3>\n<p>The operators described in this section are defined on the\nfollowing numeric types. Each type whose name is indented is\nderived from the type whose name appears nearest above with one\nless level of indentation.</p>\n<table class = \"hierarchy\" summary = \"Numeric types\" border = \"0\" width = \"288\">\n<tbody>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:decimal</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:integer</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:float</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:double</td>\n</tr>\n</tbody>\n</table>\n<p>They also apply to types derived by restriction from the above\ntypes.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This specification uses <a href = \"#ieee754\">[IEEE 754-1985]</a>\narithmetic for <code>xs:float</code> and <code>xs:double</code>\nvalues. This differs from <a href = \"#xmlschema-2\">[XML Schema Part\n2: Datatypes Second Edition]</a> which defines <code>NaN</code> as\nbeing equal to itself and defines only a single zero in the value\nspace while <a href = \"#ieee754\">[IEEE 754-1985]</a> arithmetic\ntreats <code>NaN</code> as unequal to all other values including\nitself and can produce distinct results of positive zero and\nnegative zero. (These are two different machine representations for\nthe same <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a> value.) The text accompanying several functions\ndiscusses behaviour for both positive and negative zero inputs and\noutputs in the interest of alignment with <a href = \"#ieee754\">[IEEE\n754-1985]</a>.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"op.numeric\" id = \"op.numeric\"></a>6.2 Operators on\nNumeric Values</h3>\n<p>The following functions define the semantics of operators\ndefined in <a href = \"#xquery\">[XQuery 1.0: An XML Query\nLanguage]</a> and <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a> on these numeric types.</p>\n<table summary = \"Operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Operators</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-numeric-add\"><code>op:numeric-add</code></a></td>\n<td>Addition</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-subtract\"><code>op:numeric-subtract</code></a></td>\n<td>Subtraction</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-multiply\"><code>op:numeric-multiply</code></a></td>\n<td>Multiplication</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a></td>\n<td>Division</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-integer-divide\"><code>op:numeric-integer-divide</code></a></td>\n<td>Integer division</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-mod\"><code>op:numeric-mod</code></a></td>\n<td>Modulus</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-unary-plus\"><code>op:numeric-unary-plus</code></a></td>\n<td>Unary plus</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-unary-minus\"><code>op:numeric-unary-minus</code></a></td>\n<td>Unary minus (negation)</td>\n</tr>\n</tbody>\n</table>\n<p>The parameters and return types for the above operators are the\nbasic numeric types: <code>xs:integer</code>,\n<code>xs:decimal</code>, <code>xs:float</code> and\n<code>xs:double</code>, and types derived from them. The word\n\"<code>numeric</code>\" in function signatures signifies these four\ntypes. For simplicity, each operator is defined to operate on\noperands of the same type and return the same type. The exceptions\nare <a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a>, which\nreturns an <code>xs:decimal</code> if called with two\n<code>xs:integer</code> operands and <a href = \"#XPath_func-numeric-integer-divide\"><code>op:numeric-integer-divide</code></a>\nwhich always returns an <code>xs:integer</code>.</p>\n<p>If the two operands are not of the same type, <em>subtype\nsubstitution</em> and <em>numeric type promotion</em> are used to\nobtain two operands of the same type. <a href = \"http://www.w3.org/TR/xpath20/#promotion\">Section B.1 Type\nPromotion</a><sup><small>XP</small></sup> and <a href = \"http://www.w3.org/TR/xpath20/#mapping\">Section B.2 Operator\nMapping</a><sup><small>XP</small></sup> describe the semantics of\nthese operations in detail.</p>\n<p>The result type of operations depends on their argument\ndatatypes and is defined in the following table:</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<col width = \"50%\" span = \"1\"/>\n<col width = \"50%\" span = \"1\"/>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Returns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>op:operation(xs:integer, xs:integer)</code></td>\n<td><code>xs:integer</code> (except for <a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide(integer,\ninteger)</code></a>, which returns <code>xs:decimal</code>)</td>\n</tr>\n<tr>\n<td><code>op:operation(xs:decimal, xs:decimal)</code></td>\n<td><code>xs:decimal</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:float, xs:float)</code></td>\n<td><code>xs:float</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:double, xs:double)</code></td>\n<td><code>xs:double</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:integer)</code></td>\n<td><code>xs:integer</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:decimal)</code></td>\n<td><code>xs:decimal</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:float)</code></td>\n<td><code>xs:float</code></td>\n</tr>\n<tr>\n<td><code>op:operation(xs:double)</code></td>\n<td><code>xs:double</code></td>\n</tr>\n</tbody>\n</table>\n<p>These rules define any operation on any pair of arithmetic\ntypes. Consider the following example:</p>\n<div class = \"exampleInner\">\n<pre>\nop:operation(xs:int, xs:double) =&gt; op:operation(xs:double, xs:double)\n</pre></div>\n<p>For this operation, <code>xs:int</code> must be converted to\n<code>xs:double</code>. This can be done, since by the rules above:\n<code>xs:int</code> can be substituted for <code>xs:integer</code>,\n<code>xs:integer</code> can be substituted for\n<code>xs:decimal</code>, <code>xs:decimal</code> can be promoted to\n<code>xs:double</code>. As far as possible, the promotions should\nbe done in a single step. Specifically, when an\n<code>xs:decimal</code> is promoted to an <code>xs:double</code>,\nit should not be converted to an <code>xs:float</code> and then to\n<code>xs:double</code>, as this risks loss of precision.</p>\n<p>As another example, a user may define <code>height</code> as a\nderived type of <code>xs:integer</code> with a minimum value of 20\nand a maximum value of 100. He may then derive\n<code>fenceHeight</code> using an enumeration to restrict the\npermitted set of values to, say, 36, 48 and 60.</p>\n<div class = \"exampleInner\">\n<pre>\nop:operation(fenceHeight, xs:integer) =&gt; op:operation(xs:integer, xs:integer)\n</pre></div>\n<p><code>fenceHeight</code> can be substituted for its base type\n<code>height</code> and <code>height</code> can be substituted for\nits base type <code>xs:integer</code>.</p>\n<p>On overflow and underflow situations during arithmetic\noperations conforming implementations <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> behave as follows:</p>\n<ul>\n<li>\n<p>For <code>xs:float</code> and <code>xs:double</code> operations,\noverflow behavior <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be conformant with <a href = \"#ieee754\">[IEEE\n754-1985]</a>. This specification allows the following options:</p>\n<ul>\n<li>\n<p>Raising an error [<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>] via an overflow trap.</p>\n</li>\n<li>\n<p>Returning <code>INF</code> or <code>-INF</code>.</p>\n</li>\n<li>\n<p>Returning the largest (positive or negative) non-infinite\nnumber.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>For <code>xs:float</code> and <code>xs:double</code> operations,\nunderflow behavior <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be conformant with <a href = \"#ieee754\">[IEEE\n754-1985]</a>. This specification allows the following options:</p>\n<ul>\n<li>\n<p>Raising an error [<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>] via an underflow trap.</p>\n</li>\n<li>\n<p>Returning <code>0.0E0</code> or <code>+/- 2**Emin</code> or a\ndenormalized value; where <code>Emin</code> is the smallest\npossible <code>xs:float</code> or <code>xs:double</code>\nexponent.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>For <code>xs:decimal</code> operations, overflow behavior\n<a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> raise an error\n[<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>]. On\nunderflow, <code>0.0</code> must be returned.</p>\n</li>\n<li>\n<p>For <code>xs:integer</code> operations, implementations that\nsupport limited-precision integer operations <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> select from the following options:</p>\n<ul>\n<li>\n<p>They <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> choose to\nalways raise an error [<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>].</p>\n</li>\n<li>\n<p>They <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> provide an\n<a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> mechanism that allows users to choose between\nraising an error and returning a result that is modulo the largest\nrepresentable integer value. See <a href = \"#ISO10967\">[ISO\n10967]</a>.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>The functions <a href = \"#XPath_func-numeric-add\"><code>op:numeric-add</code></a>, <a href = \"#XPath_func-numeric-subtract\"><code>op:numeric-subtract</code></a>,\n<a href = \"#XPath_func-numeric-multiply\"><code>op:numeric-multiply</code></a>,\n<a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a>,\n<a href = \"#XPath_func-numeric-integer-divide\"><code>op:numeric-integer-divide</code></a>\nand <a href = \"#XPath_func-numeric-mod\"><code>op:numeric-mod</code></a> are\neach defined for pairs of numeric operands, each of which has the\nsame type:<code>xs:integer</code>, <code>xs:decimal</code>,\n<code>xs:float</code>, or <code>xs:double</code>. The functions\n<a href = \"#XPath_func-numeric-unary-plus\"><code>op:numeric-unary-plus</code></a>\nand <a href = \"#XPath_func-numeric-unary-minus\"><code>op:numeric-unary-minus</code></a>\nare defined for a single operand whose type is one of those same\nnumeric types.</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> arguments,\nif either argument is <code>NaN</code>, the result is\n<code>NaN</code>.</p>\n<p>For <code>xs:decimal</code> values the number of digits of\nprecision returned by the numeric operators is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. If the number of digits in the result exceeds\nthe number of digits that the implementation supports, the result\nis truncated or rounded in an <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> manner.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-add\" id = \"XPath_func-numeric-add\"></a>6.2.1\nop:numeric-add</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-add</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the \"+\" operator and returns the arithmetic\nsum of its operands: (<code>$arg1 + $arg2</code>).</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>For <code>xs:float</code> or <code>xs:double</code> values, if\none of the operands is a zero or a finite number and the other is\n<code>INF</code> or <code>-INF</code>, <code>INF</code> or\n<code>-INF</code> is returned. If both operands are\n<code>INF</code>, <code>INF</code> is returned. If both operands\nare <code>-INF</code>, <code>-INF</code> is returned. If one of the\noperands is <code>INF</code> and the other is <code>-INF</code>,\n<code>NaN</code> is returned.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-subtract\" id = \"XPath_func-numeric-subtract\"></a>6.2.2 op:numeric-subtract</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-subtract</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the \"-\" operator and returns the arithmetic\ndifference of its operands: (<code>$arg1 - $arg2</code>).</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>For <code>xs:float</code> or <code>xs:double</code> values, if\none of the operands is a zero or a finite number and the other is\n<code>INF</code> or <code>-INF</code>, an infinity of the\nappropriate sign is returned. If both operands are <code>INF</code>\nor <code>-INF</code>, <code>NaN</code> is returned. If one of the\noperands is <code>INF</code> and the other is <code>-INF</code>, an\ninfinity of the appropriate sign is returned.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-multiply\" id = \"XPath_func-numeric-multiply\"></a>6.2.3 op:numeric-multiply</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-multiply</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the \"*\" operator and returns the arithmetic\nproduct of its operands: (<code>$arg1 * $arg2</code>).</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>For <code>xs:float</code> or <code>xs:double</code> values, if\none of the operands is a zero and the other is an infinity,\n<code>NaN</code> is returned. If one of the operands is a non-zero\nnumber and the other is an infinity, an infinity with the\nappropriate sign is returned.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-divide\" id = \"XPath_func-numeric-divide\"></a>6.2.4 op:numeric-divide</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-divide</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the \"div\" operator and returns the arithmetic\nquotient of its operands: (<code>$arg1 div $arg2</code>).</p>\n<p>As a special case, if the types of both <code>$arg1</code> and\n<code>$arg2</code> are <code>xs:integer</code>, then the return\ntype is <code>xs:decimal</code>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>For <code>xs:decimal</code> and <code>xs:integer</code>\noperands, if the divisor is (positive or negative) zero, an error\nis raised [<a href = \"#ERRFOAR0001\" title = \"err:FOAR0001\">err:FOAR0001</a>]. For <code>xs:float</code> and\n<code>xs:double</code> operands, floating point division is\nperformed as specified in <a href = \"#ieee754\">[IEEE\n754-1985]</a>.</p>\n<p>For <code>xs:float</code> or <code>xs:double</code> values, a\npositive number divided by positive zero returns <code>INF</code>.\nA negative number divided by positive zero returns\n<code>-INF</code>. Division by negative zero returns\n<code>-INF</code> and <code>INF</code>, respectively. Positive or\nnegative zero divided by positive or negative zero returns\n<code>NaN</code>. Also, <code>INF</code> or <code>-INF</code>\ndivided by <code>INF</code> or <code>-INF</code> returns\n<code>NaN</code>.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-integer-divide\" id = \"XPath_func-numeric-integer-divide\"></a>6.2.5\nop:numeric-integer-divide</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-integer-divide</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<p>Summary: This function backs up the \"idiv\" operator by\nperforming an integer division.</p>\n<p>If <code>$arg2</code> is (positive or negative) zero, then an\nerror is raised [<a href = \"#ERRFOAR0001\" title = \"err:FOAR0001\">err:FOAR0001</a>]. If either operand is\n<code>NaN</code> or if <code>$arg1</code> is <code>INF</code> or\n<code>-INF</code> then an error is raised [<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>]. If <code>$arg2</code> is\n<code>INF</code> or <code>-INF</code> (and <code>$arg1</code> is\nnot) then the result is zero.</p>\n<p>Otherwise, subject to limits of precision and overflow/underflow\nconditions, the result is the largest (furthest from zero)\n<code>xs:integer</code> value <code>$N</code> such that <a href = \"#XPath_func-abs\"><code>fn:abs($N * $arg2) le fn:abs($arg1) and\nfn:compare($N * $arg2, 0) eq fn:compare($arg1, 0)</code></a>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The second term in this condition ensures that the result has\nthe correct sign.</p>\n</div>\n<p>The implementation may adopt a different algorithm provided that\nit is equivalent to this formulation in all cases where <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation-dependent<span class = \"arrow\">·</span></a> or <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> behavior does not affect the outcome, for\nexample, the implementation-defined precision of the result of\n<code>xs:decimal</code> division.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Except in situations involving errors, loss of precision, or\noverflow/underflow, the result of <code>$a idiv $b</code> is the\nsame as <code>($a div $b) cast as xs:integer</code>.</p>\n</div>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The semantics of this function are different from integer\ndivision as defined in programming languages such as Java and\nC++.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-numeric-integer-divide-examples\" id = \"func-numeric-integer-divide-examples\"></a>6.2.5.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:numeric-integer-divide(10,3)</code> returns\n<code>3</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(3,-2)</code> returns\n<code>-1</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(-3,2)</code> returns\n<code>-1</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(-3,-2)</code> returns\n<code>1</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(9.0,3)</code> returns\n<code>3</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(-3.5,3)</code> returns\n<code>-1</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(3.0,4)</code> returns\n<code>0</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(3.1E1,6)</code> returns\n<code>5</code></p>\n</li>\n<li>\n<p><code>op:numeric-integer-divide(3.1E1,7)</code> returns\n<code>4</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-mod\" id = \"XPath_func-numeric-mod\"></a>6.2.6\nop:numeric-mod</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-mod</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the \"mod\" operator. Informally, this function\nreturns the remainder resulting from dividing <code>$arg1</code>,\nthe dividend, by <code>$arg2</code>, the divisor. The operation\n<code>a mod b</code> for operands that are <code>xs:integer</code>\nor <code>xs:decimal</code>, or types derived from them, produces a\nresult such that <code>(a idiv b)*b+(a mod b)</code> is equal to\n<code>a</code> and the magnitude of the result is always less than\nthe magnitude of <code>b</code>. This identity holds even in the\nspecial case that the dividend is the negative integer of largest\npossible magnitude for its type and the divisor is -1 (the\nremainder is 0). It follows from this rule that the sign of the\nresult is the sign of the dividend.</p>\n<p>For <code>xs:integer</code> and <code>xs:decimal</code>\noperands, if <code>$arg2</code> is zero, then an error is raised\n[<a href = \"#ERRFOAR0001\" title = \"err:FOAR0001\">err:FOAR0001</a>].</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> operands\nthe following rules apply:</p>\n<ul>\n<li>\n<p>If either operand is <code>NaN</code>, the result is\n<code>NaN</code>.</p>\n</li>\n<li>\n<p>If the dividend is positive or negative infinity, or the divisor\nis positive or negative zero (0), or both, the result is\n<code>NaN</code>.</p>\n</li>\n<li>\n<p>If the dividend is finite and the divisor is an infinity, the\nresult equals the dividend.</p>\n</li>\n<li>\n<p>If the dividend is positive or negative zero and the divisor is\nfinite, the result is the same as the dividend.</p>\n</li>\n<li>\n<p>In the remaining cases, where neither positive or negative\ninfinity, nor positive or negative zero, nor <code>NaN</code> is\ninvolved, the result obeys <code>(a idiv b)*b+(a mod b)</code> =\n<code>a</code>. Division is truncating division, analogous to\ninteger division, not <a href = \"#ieee754\">[IEEE 754-1985]</a>\nrounding division i.e. additional digits are truncated, not rounded\nto the required precision.</p>\n</li>\n</ul>\n<div class = \"div4\">\n<h5><a name = \"func-numeric-mod-examples\" id = \"func-numeric-mod-examples\"></a>6.2.6.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:numeric-mod(10,3)</code> returns <code>1</code>.</p>\n</li>\n<li>\n<p><code>op:numeric-mod(6,-2)</code> returns <code>0</code>.</p>\n</li>\n<li>\n<p><code>op:numeric-mod(4.5,1.2)</code> returns\n<code>0.9</code>.</p>\n</li>\n<li>\n<p><code>op:numeric-mod(1.23E2, 0.6E1)</code> returns\n<code>3.0E0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-unary-plus\" id = \"XPath_func-numeric-unary-plus\"></a>6.2.7 op:numeric-unary-plus</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-unary-plus</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the unary \"+\" operator and returns its operand\nwith the sign unchanged: (+ <code>$arg</code>).</p>\n<p>The returned value is equal to <code>$arg</code>, and is an\ninstance of <code>xs:integer</code>, <code>xs:decimal</code>,\n<code>xs:double</code>, or <code>xs:float</code> depending on the\ntype of <code>$arg</code>.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-unary-minus\" id = \"XPath_func-numeric-unary-minus\"></a>6.2.8 op:numeric-unary-minus</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-unary-minus</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric</code></div>\n</div>\n<p>Summary: Backs up the unary \"-\" operator and returns its operand\nwith the sign reversed: (- <code>$arg</code>).</p>\n<p>The returned value is an instance of <code>xs:integer</code>,\n<code>xs:decimal</code>, <code>xs:double</code>, or\n<code>xs:float</code> depending on the type of\n<code>$arg</code>.</p>\n<p>For <code>xs:integer</code> and <code>xs:decimal</code>\narguments, <code>0</code> and <code>0.0</code> return\n<code>0</code> and <code>0.0</code>, respectively. For\n<code>xs:float</code> and <code>xs:double</code> arguments,\n<code>NaN</code> returns <code>NaN</code>, <code>0.0E0</code>\nreturns <code>-0.0E0</code> and vice versa. <code>INF</code>\nreturns <code>-INF</code>. <code>-INF</code> returns\n<code>INF</code>.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"comp.numeric\" id = \"comp.numeric\"></a>6.3 Comparison\nOperators on Numeric Values</h3>\n<p>This specification defines the following comparison operators on\nnumeric values. Comparisons take two arguments of the same type. If\nthe arguments are of different types, one argument is promoted to\nthe type of the other as described above in <a href = \"#op.numeric\"><b>6.2 Operators on Numeric Values</b></a>. Each\ncomparison operator returns a boolean value. If either, or both,\noperands are <code>NaN</code>, <code>false</code> is returned.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-numeric-equal\"><code>op:numeric-equal</code></a></td>\n<td>Equality comparison</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-less-than\"><code>op:numeric-less-than</code></a></td>\n<td>Less-than comparison</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-numeric-greater-than\"><code>op:numeric-greater-than</code></a></td>\n<td>Greater-than comparison</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-equal\" id = \"XPath_func-numeric-equal\"></a>6.3.1\nop:numeric-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns true if and only if the value of\n<code>$arg1</code> is equal to the value of <code>$arg2</code>. For\n<code>xs:float</code> and <code>xs:double</code> values, positive\nzero and negative zero compare equal. <code>INF</code> equals\n<code>INF</code> and <code>-INF</code> equals <code>-INF</code>.\n<code>NaN</code> does not equal itself.</p>\n<p>This function backs up the \"eq\", \"ne\", \"le\" and \"ge\" operators\non numeric values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-less-than\" id = \"XPath_func-numeric-less-than\"></a>6.3.2 op:numeric-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-less-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is less than <code>$arg2</code>. For\n<code>xs:float</code> and <code>xs:double</code> values, positive\ninfinity is greater than all other non-<code>NaN</code> values;\nnegative infinity is less than all other non-<code>NaN</code>\nvalues. If <code>$arg1</code> or <code>$arg2</code> is\n<code>NaN</code>, the function returns <code>false</code>.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on numeric\nvalues.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-numeric-greater-than\" id = \"XPath_func-numeric-greater-than\"></a>6.3.3 op:numeric-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:numeric-greater-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is greater than <code>$arg2</code>. For\n<code>xs:float</code> and <code>xs:double</code> values, positive\ninfinity is greater than all other non-<code>NaN</code> values;\nnegative infinity is less than all other non-<code>NaN</code>\nvalues. If <code>$arg1</code> or <code>$arg2</code> is\n<code>NaN</code>, the function returns <code>false</code>.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on numeric\nvalues.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"numeric-value-functions\" id = \"numeric-value-functions\"></a>6.4 Functions on Numeric Values</h3>\n<p>The following functions are defined on numeric types. Each\nfunction returns a value of the same type as the type of its\nargument.</p>\n<ul>\n<li>\n<p>If the argument is the empty sequence, the empty sequence is\nreturned.</p>\n</li>\n<li>\n<p>For <code>xs:float</code> and <code>xs:double</code> arguments,\nif the argument is \"NaN\", \"NaN\" is returned.</p>\n</li>\n<li>\n<p>Except for <a href = \"#XPath_func-abs\"><code>fn:abs()</code></a>, for\n<code>xs:float</code> and <code>xs:double</code> arguments, if the\nargument is positive or negative infinity, positive or negative\ninfinity is returned.</p>\n</li>\n</ul>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-abs\"><code>fn:abs</code></a></td>\n<td>Returns the absolute value of the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-ceiling\"><code>fn:ceiling</code></a></td>\n<td>Returns the smallest number with no fractional part that is\ngreater than or equal to the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-floor\"><code>fn:floor</code></a></td>\n<td>Returns the largest number with no fractional part that is less\nthan or equal to the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-round\"><code>fn:round</code></a></td>\n<td>Rounds to the nearest number with no fractional part.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-round-half-to-even\"><code>fn:round-half-to-even</code></a></td>\n<td>Takes a number and a precision and returns a number rounded to\nthe given precision. If the fractional part is exactly half, the\nresult is the number whose least significant digit is even.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-abs\" id = \"XPath_func-abs\"></a>6.4.1 fn:abs</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:abs</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<p>Summary: Returns the absolute value of <code>$arg</code>. If\n<code>$arg</code> is negative returns <code>-$arg</code> otherwise\nreturns <code>$arg</code>. If type of <code>$arg</code> is one of\nthe four numeric types <code>xs:float</code>,\n<code>xs:double</code>, <code>xs:decimal</code> or\n<code>xs:integer</code> the type of the result is the same as the\ntype of <code>$arg</code>. If the type of <code>$arg</code> is a\ntype derived from one of the numeric types, the result is an\ninstance of the base numeric type.</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> arguments,\nif the argument is positive zero or negative zero, then positive\nzero is returned. If the argument is positive or negative infinity,\npositive infinity is returned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_abs_ceil_floor_round\">\nSection 7.2.3 The fn:abs, fn:ceiling, fn:floor, fn:round, and\nfn:round-half-to-even functions</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-abs-examples\" id = \"func-abs-examples\"></a>6.4.1.1\nExamples</h5>\n<ul>\n<li>\n<p><code>fn:abs(10.5)</code> returns <code>10.5</code>.</p>\n</li>\n<li>\n<p><code>fn:abs(-10.5)</code> returns <code>10.5</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-ceiling\" id = \"XPath_func-ceiling\"></a>6.4.2\nfn:ceiling</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:ceiling</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<p>Summary: Returns the smallest (closest to negative infinity)\nnumber with no fractional part that is not less than the value of\n<code>$arg</code>. If type of <code>$arg</code> is one of the four\nnumeric types <code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> the type of the\nresult is the same as the type of <code>$arg</code>. If the type of\n<code>$arg</code> is a type derived from one of the numeric types,\nthe result is an instance of the base numeric type.</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> arguments,\nif the argument is positive zero, then positive zero is returned.\nIf the argument is negative zero, then negative zero is returned.\nIf the argument is less than zero and greater than -1, negative\nzero is returned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_abs_ceil_floor_round\">\nSection 7.2.3 The fn:abs, fn:ceiling, fn:floor, fn:round, and\nfn:round-half-to-even functions</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-ceiling-examples\" id = \"func-ceiling-examples\"></a>6.4.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:ceiling(10.5)</code> returns <code>11</code>.</p>\n</li>\n<li>\n<p><code>fn:ceiling(-10.5)</code> returns <code>-10</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-floor\" id = \"XPath_func-floor\"></a>6.4.3 fn:floor</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:floor</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<p>Summary: Returns the largest (closest to positive infinity)\nnumber with no fractional part that is not greater than the value\nof <code>$arg</code>. If type of <code>$arg</code> is one of the\nfour numeric types <code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> the type of the\nresult is the same as the type of <code>$arg</code>. If the type of\n<code>$arg</code> is a type derived from one of the numeric types,\nthe result is an instance of the base numeric type.</p>\n<p>For <code>float</code> and <code>double</code> arguments, if the\nargument is positive zero, then positive zero is returned. If the\nargument is negative zero, then negative zero is returned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_abs_ceil_floor_round\">\nSection 7.2.3 The fn:abs, fn:ceiling, fn:floor, fn:round, and\nfn:round-half-to-even functions</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-floor-examples\" id = \"func-floor-examples\"></a>6.4.3.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:floor(10.5)</code> returns <code>10</code>.</p>\n</li>\n<li>\n<p><code>fn:floor(-10.5)</code> returns <code>-11</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-round\" id = \"XPath_func-round\"></a>6.4.4 fn:round</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:round</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<p>Summary: Returns the number with no fractional part that is\nclosest to the argument. If there are two such numbers, then the\none that is closest to positive infinity is returned. If type of\n<code>$arg</code> is one of the four numeric types\n<code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> the type of the\nresult is the same as the type of <code>$arg</code>. If the type of\n<code>$arg</code> is a type derived from one of the numeric types,\nthe result is an instance of the base numeric type.</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> arguments,\nif the argument is positive infinity, then positive infinity is\nreturned. If the argument is negative infinity, then negative\ninfinity is returned. If the argument is positive zero, then\npositive zero is returned. If the argument is negative zero, then\nnegative zero is returned. If the argument is less than zero, but\ngreater than or equal to -0.5, then negative zero is returned. In\nthe cases where positive zero or negative zero is returned,\nnegative zero or positive zero may be returned as <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ndoes not distinguish between the values positive zero and negative\nzero.</p>\n<p>For the last two cases, note that the result is not the same as\n<a href = \"#XPath_func-floor\"><code>fn:floor(x+0.5)</code></a>.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_abs_ceil_floor_round\">\nSection 7.2.3 The fn:abs, fn:ceiling, fn:floor, fn:round, and\nfn:round-half-to-even functions</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-round-examples\" id = \"func-round-examples\"></a>6.4.4.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:round(2.5)</code> returns <code>3.</code></p>\n</li>\n<li>\n<p><code>fn:round(2.4999)</code> returns <code>2</code>.</p>\n</li>\n<li>\n<p><code>fn:round(-2.5)</code> returns <code>-2</code> (not the\npossible alternative, <code>-3</code>).</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-round-half-to-even\" id = \"XPath_func-round-half-to-even\"></a>6.4.5 fn:round-half-to-even</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:round-half-to-even</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:round-half-to-even</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>, <code class = \"arg\">$precision</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</div>\n<p>Summary: The value returned is the nearest (that is, numerically\nclosest) value to <code>$arg</code> that is a multiple of ten to\nthe power of minus <code>$precision</code>. If two such values are\nequally near (e.g. if the fractional part in <code>$arg</code> is\nexactly .500...), the function returns the one whose least\nsignificant digit is even.</p>\n<p>If the type of <code>$arg</code> is one of the four numeric\ntypes <code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> the type of the\nresult is the same as the type of <code>$arg</code>. If the type of\n<code>$arg</code> is a type derived from one of the numeric types,\nthe result is an instance of the base numeric type.</p>\n<p>The first signature of this function produces the same result as\nthe second signature with <code>$precision=0</code>.</p>\n<p>For arguments of type <code>xs:float</code> and\n<code>xs:double</code>, if the argument is <code>NaN</code>,\npositive or negative zero, or positive or negative infinity, then\nthe result is the same as the argument. In all other cases, the\nargument is cast to <code>xs:decimal</code>, the function is\napplied to this <code>xs:decimal</code> value, and the resulting\n<code>xs:decimal</code> is cast back to <code>xs:float</code> or\n<code>xs:double</code> as appropriate to form the function result.\nIf the resulting <code>xs:decimal</code> value is zero, then\npositive or negative zero is returned according to the sign of the\noriginal argument.</p>\n<p>Note that the process of casting to <code>xs:decimal</code> may\nresult in an error [<a href = \"#ERRFOCA0001\" title = \"err:FOCA0001\">err:FOCA0001</a>].</p>\n<p>If <code>$arg</code> is of type <code>xs:float</code> or\n<code>xs:double</code>, rounding occurs on the value of the\nmantissa computed with exponent = 0.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_abs_ceil_floor_round\">\nSection 7.2.3 The fn:abs, fn:ceiling, fn:floor, fn:round, and\nfn:round-half-to-even functions</a><sup><small>FS</small></sup></p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This function is typically used in financial applications where\nthe argument is of type <code>xs:decimal</code>. For arguments of\ntype <code>xs:float</code> and <code>xs:double</code> the results\nmay be counterintuitive. For example, consider\n<code>round-half-to-even(xs:float(150.0150), 2)</code>.</p>\n<p>An implementation that supports 18 digits for\n<code>xs:decimal</code> will convert the argument to the\n<code>xs:decimal</code> 150.014999389... which will then be rounded\nto the <code>xs:decimal</code> 150.01 which will be converted back\nto the <code>xs:float</code> whose exact value is 150.0099945068...\nwhereas <code>round-half-to-even(xs:decimal(150.0150), 2)</code>\nwill result in the <code>xs:decimal</code> whose exact value is\n150.02.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-round-half-to-even-examples\" id = \"func-round-half-to-even-examples\"></a>6.4.5.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:round-half-to-even(0.5)</code> returns\n<code>0</code>.</p>\n</li>\n<li>\n<p><code>fn:round-half-to-even(1.5)</code> returns\n<code>2</code>.</p>\n</li>\n<li>\n<p><code>fn:round-half-to-even(2.5)</code> returns\n<code>2</code>.</p>\n</li>\n<li>\n<p><code>fn:round-half-to-even(3.567812E+3, 2)</code> returns\n<code>3567.81E0</code>.</p>\n</li>\n<li>\n<p><code>fn:round-half-to-even(4.7564E-3, 2)</code> returns\n<code>0.0E0</code>.</p>\n</li>\n<li>\n<p><code>fn:round-half-to-even(35612.25, -2)</code> returns\n<code>35600</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"string-functions\" id = \"string-functions\"></a>7\nFunctions on Strings</h2>\n<p>This section discusses functions and operators on the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\n<code>xs:string</code> datatype and the datatypes derived from\nit.</p>\n<div class = \"div2\">\n<h3><a name = \"string-types\" id = \"string-types\"></a>7.1 String\nTypes</h3>\n<p>The operators described in this section are defined on the\nfollowing types. Each type whose name is indented is derived from\nthe type whose name appears nearest above with one less level of\nindentation.</p>\n<table class = \"hierarchy\" summary = \"Type summary\" border = \"0\">\n<tbody>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:string</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">\nxs:normalizedString</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:token</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:language</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NMTOKEN</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:Name</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:NCName</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:ID</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:IDREF</td>\n</tr>\n<tr>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\"></td>\n<td class = \"castOther\" align = \"left\" valign = \"middle\">xs:ENTITY</td>\n</tr>\n</tbody>\n</table>\n<p>They also apply to user-defined types derived by restriction\nfrom the above types.</p>\n<p>It is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> which version of <a href = \"#Unicode4\">[The\nUnicode Standard]</a> is supported, but it is recommended that the\nmost recent version of Unicode be used.</p>\n<p>Unless explicitly stated, the <code>xs:string</code> values\nreturned by the functions in this document are not normalized in\nthe sense of <a href = \"#charmod\">[Character Model for the World Wide\nWeb 1.0: Fundamentals]</a>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>This document uses the term \"code point\", sometimes spelt\n\"codepoint\" (also known as \"character number\" or \"code position\")\nto mean a non-negative integer that represents a character in some\nencoding. See <a href = \"#charmod\">[Character Model for the World\nWide Web 1.0: Fundamentals]</a>. The use of the word \"character\" in\nthis document is in the sense of production [2] of <a href = \"#REC-xml\">[Extensible Markup Language (XML) 1.0 Recommendation\n(Third Edition)]</a>. <a href = \"#Unicode4\">[The Unicode\nStandard]</a>, defines code points that range from #x0000 to\n#x10FFFF inclusive and may include code points that have not yet\nbeen assigned to characters.</p>\n<p>In functions that involve character counting such as <a href = \"#XPath_func-substring\"><code>fn:substring</code></a>, <a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a> and\n<a href = \"#XPath_func-translate\"><code>fn:translate</code></a>, what is\ncounted is the number of XML characters in the string (or\nequivalently, the number of Unicode code points). Some\nimplementations may represent a code point above xFFFF using two\n16-bit values known as a surrogate. A surrogate counts as one\ncharacter, not two.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"func-assemble-disassemble-string\" id = \"func-assemble-disassemble-string\"></a>7.2 Functions to Assemble\nand Disassemble Strings</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-codepoints-to-string\"><code>fn:codepoints-to-string</code></a></td>\n<td>Creates an <code>xs:string</code> from a sequence of Unicode\ncode points.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-string-to-codepoints\"><code>fn:string-to-codepoints</code></a></td>\n<td>Returns the sequence of Unicode code points that constitute an\n<code>xs:string</code>.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-codepoints-to-string\" id = \"XPath_func-codepoints-to-string\"></a>7.2.1 fn:codepoints-to-string</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:codepoints-to-string</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Creates an <code>xs:string</code> from a sequence of\n<a href = \"#Unicode4\">[The Unicode Standard]</a> code points. Returns\nthe zero-length string if <code>$arg</code> is the empty sequence.\nIf any of the code points in <code>$arg</code> is not a legal XML\ncharacter, an error is raised [<a href = \"#ERRFOCH0001\" title = \"err:FOCH0001\">err:FOCH0001</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-codepoints-to-string-examples\" id = \"func-codepoints-to-string-examples\"></a>7.2.1.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:codepoints-to-string((2309, 2358, 2378, 2325))</code>\nreturns \"अशॊक\"</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-string-to-codepoints\" id = \"XPath_func-string-to-codepoints\"></a>7.2.2 fn:string-to-codepoints</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:string-to-codepoints</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer*</code></div>\n</div>\n<p>Summary: Returns the sequence of <a href = \"#Unicode4\">[The\nUnicode Standard]</a> code points that constitute an\n<code>xs:string</code>. If <code>$arg</code> is a zero-length\nstring or the empty sequence, the empty sequence is returned.</p>\n<div class = \"div4\">\n<h5><a name = \"func-string-to-codepoints-examples\" id = \"func-string-to-codepoints-examples\"></a>7.2.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:string-to-codepoints(\"Thérèse\")</code> returns the\nsequence (84, 104, 233, 114, 232, 115, 101)</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"string-compare\" id = \"string-compare\"></a>7.3 Equality\nand Comparison of Strings</h3>\n<div class = \"div3\">\n<h4><a name = \"collations\" id = \"collations\"></a>7.3.1 Collations</h4>\n<p>A collation is a specification of the manner in which character\nstrings are compared and, by extension, ordered. When values whose\ntype is <code>xs:string</code> or a type derived from\n<code>xs:string</code> are compared (or, equivalently, sorted), the\ncomparisons are inherently performed according to some collation\n(even if that collation is defined entirely on code point values).\nThe <a href = \"#charmod\">[Character Model for the World Wide Web 1.0:\nFundamentals]</a> observes that some applications may require\ndifferent comparison and ordering behaviors than other\napplications. Similarly, some users having particular linguistic\nexpectations may require different behaviors than other users.\nConsequently, the collation must be taken into account when\ncomparing strings in any context. Several functions in this and the\nfollowing section make use of a collation.</p>\n<p>Collations can indicate that two different code points are, in\nfact, equal for comparison purposes (e.g., \"v\" and \"w\" are\nconsidered equivalent in Swedish). Strings can be compared\ncodepoint-by-codepoint or in a linguistically appropriate manner,\nas defined by the collation.</p>\n<p>Some collations, especially those based on the <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a> can be\n\"tailored\" for various purposes. This document does not discuss\nsuch tailoring, nor does it provide a mechanism to perform\ntailoring. Instead, it assumes that the collation argument to the\nvarious functions below is a tailored and named collation. A\nspecific collation with a distinguished name,\n<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>,\nprovides the ability to compare strings based on code point values.\nEvery implementation of XQuery/XPath must support the collation\nbased on code point values.</p>\n<p>In the ideal case, a collation should treat two strings as equal\nif the two strings are identical after Unicode normalization. Thus,\nthe <a href = \"#charmod-normalization\">[Character Model for the World\nWide Web 1.0: Normalization]</a> recommends that all strings be\nsubjected to early Unicode normalization and some collations will\nraise runtime errors if they encounter strings that are not\nproperly normalized. However, it is not possible to guarantee that\nall strings in all XML documents are, in fact, normalized, or that\nthey are normalized in the same manner. In order to maximize\ninteroperability of operations on XML documents in general, there\nmay be collations that operate on unnormalized strings and other\ncollations that implicitly normalize strings before comparing them.\nApplications may choose the kind of collation best suited for their\nneeds. Note that collations based on the Unicode collation\nalgorithm implicitly normalize strings before comparison and\nproduce equivalent results regardless of a string's\nnormalization.</p>\n<p>This specification assumes that collations are named and that\nthe collation name may be provided as an argument to string\nfunctions. Functions that allow specification of a collation do so\nwith an argument whose type is <code>xs:string</code> but whose\nlexical form must conform to an <code>xs:anyURI</code>. If the\ncollation is specified using a relative URI, it is assumed to be\nrelative to the value of the base-uri property in the static\ncontext. This specification also defines the manner in which a\ndefault collation is determined if the collation argument is not\nspecified in invocations of functions that use a collation but\nallow it to be omitted.</p>\n<p>This specification does not define whether or not the collation\nURI is dereferenced. The collation URI may be an abstract\nidentifier, or it may refer to an actual resource describing the\ncollation. If it refers to a resource, this specification does not\ndefine the nature of that resource. One possible candidate is that\nthe resource is a locale description expressed using the Locale\nData Markup Language: see <a href = \"#LDML\">[Locale Data Markup\nLanguage]</a>.</p>\n<p>Functions such as <a href = \"#XPath_func-compare\"><code>fn:compare</code></a> and <a href = \"#XPath_func-max\"><code>fn:max</code></a> that compare\n<code>xs:string</code> values use a single collation URI to\nidentify all aspects of the collation rules. This means that any\nparameters such as the strength of the collation must be specified\nas part of the collation URI. For example, suppose there is a\ncollation \" <code>http://www.example.com/collations/French</code> \"\nthat refers to a French collation that compares on the basis of\nbase characters. Collations that use the same basic rules, but with\nhigher strengths, for example, base characters and accents, or base\ncharacters, accents and case, would need to be given different\nnames, say \" <code>http://www.example.com/collations/French1</code>\n\" and \" <code>http://www.example.com/collations/French2</code> \".\nNote that some specifications use the term collation to refer to an\nalgorithm that can be parameterized, but in this specification,\neach possible parameterization is considered to be a distinct\ncollation.</p>\n<p>The XQuery/XPath static context includes a provision for a\ndefault collation that can be used for string comparisons and\nordering operations. See the description of the static context in\n<a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section\n2.1.1 Static Context</a><sup><small>XP</small></sup>. If the\ndefault collation is not specified by the user or the system, the\ndefault collation is the Unicode code point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>\n<p>The decision of which collation to use for a given comparison or\nordering function is determined by the following algorithm:</p>\n<ol class = \"enumar\">\n<li>\n<p>If the function specifies an explicit collation, CollationA\n(e.g., if the optional collation argument is specified in an\ninvocation of the <a href = \"#XPath_func-compare\"><code>fn:compare()</code></a> function), then:</p>\n<ul>\n<li>\n<p>If CollationA is supported by the implementation, then\nCollationA is used.</p>\n</li>\n<li>\n<p>Otherwise, an error is raised [<a href = \"#ERRFOCH0002\" title = \"err:FOCH0002\">err:FOCH0002</a>].</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If no collation is explicitly specified for the function and the\ndefault collation in the XQuery/XPath static context is CollationB,\nthen:</p>\n<ul>\n<li>\n<p>If CollationB is supported by the implementation, then\nCollationB is used.</p>\n</li>\n<li>\n<p>Otherwise, an error is raised [<a href = \"#ERRFOCH0002\" title = \"err:FOCH0002\">err:FOCH0002</a>].</p>\n</li>\n</ul>\n</li>\n</ol>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>XML allows elements to specify the <code>xml:lang</code>\nattribute to indicate the language associated with the content of\nsuch an element. This specification does not use\n<code>xml:lang</code> to identify the default collation because\nusing <code>xml:lang</code> does not produce desired effects when\nthe two strings to be compared have different <code>xml:lang</code>\nvalues or when a string is multilingual.</p>\n</div>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-compare\"><code>fn:compare</code></a></td>\n<td>Returns -1, 0, or 1, depending on whether the value of the\nfirst argument is respectively less than, equal to, or greater than\nthe value of the second argument, according to the rules of the\ncollation that is used.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-codepoint-equal\"><code>fn:codepoint-equal</code></a></td>\n<td>Returns <code>true</code> if the two arguments are equal using\nthe Unicode code point collation.</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-compare\" id = \"XPath_func-compare\"></a>7.3.2\nfn:compare</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:compare</code>(<code class = \"arg\">$comparand1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$comparand2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:compare</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$comparand1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$comparand2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns -1, 0, or 1, depending on whether the value of\nthe <code>$comparand1</code> is respectively less than, equal to,\nor greater than the value of <code>$comparand2</code>, according to\nthe rules of the collation that is used.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>.</p>\n<p>If either argument is the empty sequence, the result is the\nempty sequence.</p>\n<p>This function, invoked with the first signature, backs up the\n\"eq\", \"ne\", \"gt\", \"lt\", \"le\" and \"ge\" operators on string\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-compare-examples\" id = \"func-compare-examples\"></a>7.3.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:compare('abc', 'abc')</code> returns 0.</p>\n</li>\n<li>\n<p><code>fn:compare('Strasse', 'Straße')</code> returns 0 if and\nonly if the default collation includes provisions that equate \"ss\"\nand the (German) character \"ß\" (\"sharp-s\"). (Otherwise, the\nreturned value depends on the semantics of the default\ncollation.)</p>\n</li>\n<li>\n<p><code>fn:compare('Strasse', 'Straße', 'deutsch')</code> returns\n0 if the collation identified by the relative URI constructed from\nthe <code>string</code> value \"deutsch\" includes provisions that\nequate \"ss\" and the (German) character \"ß\" (\"sharp-s\"). (Otherwise,\nthe returned value depends on the semantics of that collation.)</p>\n</li>\n<li>\n<p><code>fn:compare('Strassen', 'Straße')</code> returns 1 if the\ndefault collation includes provisions that treat differences\nbetween \"ss\" and the (German) character \"ß\" (\"sharp-s\") with less\nstrength than the differences between the base characters, such as\nthe final \"n\".</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-codepoint-equal\" id = \"XPath_func-codepoint-equal\"></a>7.3.3 fn:codepoint-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:codepoint-equal</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$comparand1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$comparand2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> or <code>false</code>\ndepending on whether the value of <code>$comparand1</code> is equal\nto the value of <code>$comparand2</code>, according to the Unicode\ncode point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>\n<p>If either argument is the empty sequence, the result is the\nempty sequence.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This function allows <code>xs:anyURI</code> values to be\ncompared without having to specify the Unicode code point\ncollation.</p>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"string-value-functions\" id = \"string-value-functions\"></a>7.4 Functions on String Values</h3>\n<p>The following functions are defined on values of type\n<code>xs:string</code> and types derived from it.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-concat\"><code>fn:concat</code></a></td>\n<td>Concatenates two or more <code>xs:anyAtomicType</code>\narguments cast to <code>xs:string</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-string-join\"><code>fn:string-join</code></a></td>\n<td>Returns the <code>xs:string</code> produced by concatenating a\nsequence of <code>xs:string</code>s using an optional\nseparator.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-substring\"><code>fn:substring</code></a></td>\n<td>Returns the <code>xs:string</code> located at a specified place\nwithin an argument <code>xs:string</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a></td>\n<td>Returns the length of the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-normalize-space\"><code>fn:normalize-space</code></a></td>\n<td>Returns the whitespace-normalized value of the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a></td>\n<td>Returns the normalized value of the first argument in the\nnormalization form specified by the second argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-upper-case\"><code>fn:upper-case</code></a></td>\n<td>Returns the upper-cased value of the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-lower-case\"><code>fn:lower-case</code></a></td>\n<td>Returns the lower-cased value of the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-translate\"><code>fn:translate</code></a></td>\n<td>Returns the first <code>xs:string</code> argument with\noccurrences of characters contained in the second argument replaced\nby the character at the corresponding position in the third\nargument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-encode-for-uri\"><code>fn:encode-for-uri</code></a></td>\n<td>Returns the <code>xs:string</code> argument with certain\ncharacters escaped to enable the resulting string to be used as a\npath segment in a URI.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-iri-to-uri\"><code>fn:iri-to-uri</code></a></td>\n<td>Returns the <code>xs:string</code> argument with certain\ncharacters escaped to enable the resulting string to be used as\n(part of) a URI.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-escape-html-uri\"><code>fn:escape-html-uri</code></a></td>\n<td>Returns the <code>xs:string</code> argument with certain\ncharacters escaped in the manner that html user agents handle\nattribute values that expect URIs.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>When the above operators and functions are applied to datatypes\nderived from <code>xs:string</code>, they are guaranteed to return\nlegal <code>xs:string</code>s, but they might not return a legal\nvalue for the particular subtype to which they were applied.</p>\n<p>The strings returned by <a href = \"#XPath_func-concat\"><code>fn:concat</code></a> and <a href = \"#XPath_func-string-join\"><code>fn:string-join</code></a> are not\nguaranteed to be normalized. But see note in <a href = \"#XPath_func-concat\"><code>fn:concat</code></a>.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-concat\" id = \"XPath_func-concat\"></a>7.4.1 fn:concat</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:concat</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><span class = \"varargs\">...</span></td>\n<td valign = \"baseline\">)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Accepts two or more <code>xs:anyAtomicType</code>\narguments and casts them to <code>xs:string</code>. Returns the\n<code>xs:string</code> that is the concatenation of the values of\nits arguments after conversion. If any of the arguments is the\nempty sequence, the argument is treated as the zero-length\nstring.</p>\n<p>The <code>fn:concat</code> function is specified to allow two or\nmore arguments, which are concatenated together. This is the only\nfunction specified in this document that allows a variable number\nof arguments. This capability is retained for compatibility with\n<a href = \"#xpath\">[XML Path Language (XPath) Version 1.0]</a>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>As mentioned in <a href = \"#string-types\"><b>7.1 String\nTypes</b></a> Unicode normalization is not automatically applied to\nthe result of <code>fn:concat</code>. If a normalized result is\nrequired, <a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a> can\nbe applied to the <code>xs:string</code> returned by\n<code>fn:concat</code>. The following XQuery:</p>\n<div class = \"exampleInner\">\n<pre>\nlet $v1 := \"I plan to go to Mu\"\nlet $v2 := \"?nchen in September\"\nreturn concat($v1, $v2)\n</pre></div>\n<p>where the \"?\" represents either the actual Unicode character\nCOMBINING DIARESIS (Unicode codepoint U+0308) or \"&amp;#x0308;\",\nwill return:</p>\n<p>\"I plan to go to Mu?nchen in September\"</p>\n<p>where the \"?\" represents either the actual Unicode character\nCOMBINING DIARESIS (Unicode codepoint U+0308) or \"&amp;#x0308;\". It\nis worth noting that the returned value is not normalized in NFC;\nhowever, it is normalized in NFD. .</p>\n<p>However, the following XQuery:</p>\n<div class = \"exampleInner\">\n<pre>\nlet $v1 := \"I plan to go to Mu\"\nlet $v2 := \"?nchen in September\"\nreturn normalize-unicode(concat($v1, $v2))\n</pre></div>\n<p>where the \"?\" represents either the actual Unicode character\nCOMBINING DIARESIS (Unicode codepoint U+0308) or \"&amp;#x0308;\",\nwill return:</p>\n<p>\"I plan to go to München in September\"</p>\n<p>This returned result is normalized in NFC.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-concat-examples\" id = \"func-concat-examples\"></a>7.4.1.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:concat('un', 'grateful')</code> returns\n<code>\"ungrateful\"</code>.</p>\n</li>\n<li>\n<p><code>fn:concat('Thy ', (), 'old ', \"groans\", \"\", ' ring', '\nyet', ' in', ' my', ' ancient',' ears.')</code> returns <code>\"Thy\nold groans ring yet in my ancient ears.\"</code>.</p>\n</li>\n<li>\n<p><code>fn:concat('Ciao!',())</code> returns\n<code>\"Ciao!\"</code>.</p>\n</li>\n<li>\n<p><code>fn:concat('Ingratitude, ', 'thou ', 'marble-hearted', '\nfiend!')</code> returns <code>\"Ingratitude, thou marble-hearted\nfiend!\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-string-join\" id = \"XPath_func-string-join\"></a>7.4.2\nfn:string-join</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:string-join</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns a <code>xs:string</code> created by\nconcatenating the members of the <code>$arg1</code> sequence using\n<code>$arg2</code> as a separator. If the value of\n<code>$arg2</code> is the zero-length string, then the members of\n<code>$arg1</code> are concatenated without a separator.</p>\n<p>If the value of <code>$arg1</code> is the empty sequence, the\nzero-length string is returned.</p>\n<div class = \"div4\">\n<h5><a name = \"func-string-join-examples\" id = \"func-string-join-examples\"></a>7.4.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:string-join(('Now', 'is', 'the', 'time', '...'), '\n')</code> returns <code>\"Now is the time ...\"</code>.</p>\n</li>\n<li>\n<p><code>fn:string-join(('Blow, ', 'blow, ', 'thou ', 'winter ',\n'wind!'), '')</code> returns <code>\"Blow, blow, thou winter\nwind!\"</code>.</p>\n</li>\n<li>\n<p><code>fn:string-join((), 'separator')</code> returns\n<code>\"\"</code>.</p>\n</li>\n<li>\n<p>Assume a document:</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;doc&gt;\n  &lt;chap&gt;\n    &lt;section&gt;\n    &lt;/section&gt;\n  &lt;/chap&gt;\n&lt;/doc&gt;\n</pre></div>\n<p>with the <code>&lt;section&gt;</code> as the context node, the\n<a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>\nexpression:</p>\n<p><code>fn:string-join(for $n in ancestor-or-self::* return\nname($n), '/')</code></p>\n<p>returns <code>\"doc/chap/section\"</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-substring\" id = \"XPath_func-substring\"></a>7.4.3\nfn:substring</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:substring</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$sourceString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$startingLoc</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$sourceString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$startingLoc</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$length</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the portion of the value of\n<code>$sourceString</code> beginning at the position indicated by\nthe value of <code>$startingLoc</code> and continuing for the\nnumber of characters indicated by the value of\n<code>$length</code>. The characters returned do not extend beyond\n<code>$sourceString</code>. If <code>$startingLoc</code> is zero or\nnegative, only those characters in positions greater than zero are\nreturned.</p>\n<p>More specifically, the three argument version of the function\nreturns the characters in <code>$sourceString</code> whose position\n<code>$p</code> obeys:</p>\n<p><a href = \"#XPath_func-round\"><code>fn:round($startingLoc) &lt;= $p &lt;\nfn:round($startingLoc) + fn:round($length)</code></a></p>\n<p>The two argument version of the function assumes that\n<code>$length</code> is infinite and returns the characters in\n<code>$sourceString</code> whose position <code>$p</code>\nobeys:</p>\n<p><a href = \"#XPath_func-round\"><code>fn:round($startingLoc) &lt;= $p &lt;\nfn:round(INF)</code></a></p>\n<p>In the above computations, the rules for <a href = \"#XPath_func-numeric-less-than\"><code>op:numeric-less-than()</code></a>\nand <a href = \"#XPath_func-numeric-greater-than\"><code>op:numeric-greater-than()</code></a>\napply.</p>\n<p>If the value of <code>$sourceString</code> is the empty\nsequence, the zero-length string is returned.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The first character of a string is located at position 1, not\nposition 0.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-substring-examples\" id = \"func-substring-examples\"></a>7.4.3.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:substring(\"motor car\", 6)</code> returns <code>\"\ncar\"</code>.</p>\n<p>Characters starting at position 6 to the end of\n<code>$sourceString</code> are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"metadata\", 4, 3)</code> returns\n<code>\"ada\"</code>.</p>\n<p>Characters at positions greater than or equal to 4 and less than\n7 are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", 1.5, 2.6)</code> returns\n<code>\"234\"</code>.</p>\n<p>Characters at positions greater than or equal to 2 and less than\n5 are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", 0, 3)</code> returns\n<code>\"12\"</code>.</p>\n<p>Characters at positions greater than or equal to 0 and less than\n3 are selected. Since the first position is 1, these are the\ncharacters at positions 1 and 2.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", 5, -3)</code> returns\n<code>\"\"</code>.</p>\n<p>Characters at positions greater than or equal to 5 and less than\n2 are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", -3, 5)</code> returns\n<code>\"1\"</code>.</p>\n<p>Characters at positions greater than or equal to -3 and less\nthan 2 are selected. Since the first position is 1, this is the\ncharacter at position 1.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", 0 div 0E0, 3)</code> returns\n<code>\"\"</code>.</p>\n<p>Since <code>0 div 0E0</code> returns <code>NaN</code>, and\n<code>NaN</code> compared to any other number returns\n<code>false</code>, no characters are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", 1, 0 div 0E0)</code> returns\n<code>\"\"</code>.</p>\n<p>As above.</p>\n</li>\n<li>\n<p><code>fn:substring((), 1, 3)</code> returns <code>\"\"</code>.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", -42, 1 div 0E0)</code> returns\n<code>\"12345\"</code>.</p>\n<p>Characters at positions greater than or equal to -42 and less\nthan INF are selected.</p>\n</li>\n<li>\n<p><code>fn:substring(\"12345\", -1 div 0E0, 1 div 0E0)</code>\nreturns <code>\"\"</code>.</p>\n<p>Since <code>-INF + INF</code> returns <code>NaN</code>, no\ncharacters are selected.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-string-length\" id = \"XPath_func-string-length\"></a>7.4.4\nfn:string-length</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:string-length</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:string-length</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> equal to the length\nin characters of the value of <code>$arg</code>.</p>\n<p>If the value of <code>$arg</code> is the empty sequence, the\n<code>xs:integer</code> 0 is returned.</p>\n<p>If no argument is supplied, <code>$arg</code> defaults to the\nstring value (calculated using <a href = \"#XPath_func-string\"><code>fn:string()</code></a>) of the context item\n(<code>.</code>). If no argument is supplied and the context item\nis undefined an error is raised: [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-string-length-examples\" id = \"func-string-length-examples\"></a>7.4.4.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:string-length(\"Harp not on that string, madam; that is\npast.\")</code> returns <code>45</code>.</p>\n</li>\n<li>\n<p><code>fn:string-length(())</code> returns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-normalize-space\" id = \"XPath_func-normalize-space\"></a>7.4.5 fn:normalize-space</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:normalize-space</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:normalize-space</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> with whitespace\nnormalized by stripping leading and trailing whitespace and\nreplacing sequences of one or more than one whitespace character\nwith a single space, <code>#x20</code>.</p>\n<p>The whitespace characters are defined in the metasymbol S\n(Production 3) of <a href = \"#REC-xml\">[Extensible Markup Language\n(XML) 1.0 Recommendation (Third Edition)]</a>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The definition of the metasymbol S (Production 3), is unchanged\nin <a href = \"#xml11\">[Extensible Markup Language (XML) 1.1\nRecommendation]</a>.</p>\n</div>\n<p>If the value of <code>$arg</code> is the empty sequence, returns\nthe zero-length string.</p>\n<p>If no argument is supplied, then <code>$arg</code> defaults to\nthe string value (calculated using <a href = \"#XPath_func-string\"><code>fn:string()</code></a>) of the context item\n(<code>.</code>). If no argument is supplied and the context item\nis undefined an error is raised: [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-normalize-space-examples\" id = \"func-normalize-space-examples\"></a>7.4.5.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:normalize-space(\" The &#160;wealthy curled darlings of\n&#160;&#160;our &#160;nation. \")</code> returns <code>\"The wealthy\ncurled darlings of our nation.\"</code>.</p>\n</li>\n<li>\n<p><code>fn:normalize-space(())</code> returns \"\".</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-normalize-unicode\" id = \"XPath_func-normalize-unicode\"></a>7.4.6 fn:normalize-unicode</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:normalize-unicode</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:normalize-unicode</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$normalizationForm</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> normalized\naccording to the normalization criteria for a normalization form\nidentified by the value of <code>$normalizationForm</code>. The\neffective value of the <code>$normalizationForm</code> is computed\nby removing leading and trailing blanks, if present, and converting\nto upper case.</p>\n<p>If the value of <code>$arg</code> is the empty sequence, returns\nthe zero-length string.</p>\n<p>See <a href = \"#charmod-normalization\">[Character Model for the\nWorld Wide Web 1.0: Normalization]</a> for a description of the\nnormalization forms.</p>\n<p>If the <code>$normalizationForm</code> is absent, as in the\nfirst format above, it shall be assumed to be \"NFC\"</p>\n<ul>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is\n\"NFC\", then the value returned by the function is the value of\n<code>$arg</code> in Unicode Normalization Form C (NFC).</p>\n</li>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is\n\"NFD\", then the value returned by the function is the value of\n<code>$arg</code> in Unicode Normalization Form D (NFD).</p>\n</li>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is\n\"NFKC\", then the value returned by the function is the value of\n<code>$arg</code> in Unicode Normalization Form KC (NFKC).</p>\n</li>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is\n\"NFKD\", then the value returned by the function is the value of\n<code>$arg</code> in Unicode Normalization Form KD (NFKD).</p>\n</li>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is\n\"FULLY-NORMALIZED\", then the value returned by the function is the\nvalue of <code>$arg</code> in the fully normalized form.</p>\n</li>\n<li>\n<p>If the effective value of <code>$normalizationForm</code> is the\nzero-length string, no normalization is performed and\n<code>$arg</code> is returned.</p>\n</li>\n</ul>\n<p>Conforming implementations <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> support normalization form \"NFC\" and <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> support\nnormalization forms \"NFD\", \"NFKC\", \"NFKD\", \"FULLY-NORMALIZED\". They\n<a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> also support\nother normalization forms with <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> semantics. If the effective value of the\n<code>$normalizationForm</code> is other than one of the values\nsupported by the implementation, then an error is raised [<a href = \"#ERRFOCH0003\" title = \"err:FOCH0003\">err:FOCH0003</a>].</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-upper-case\" id = \"XPath_func-upper-case\"></a>7.4.7\nfn:upper-case</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:upper-case</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> after\ntranslating every character to its upper-case correspondent as\ndefined in the appropriate case mappings section in the Unicode\nstandard <a href = \"#Unicode4\">[The Unicode Standard]</a>. For\nversions of Unicode beginning with the 2.1.8 update, only\nlocale-insensitive case mappings should be applied. Beginning with\nversion 3.2.0 (and likely future versions) of Unicode, precise\nmappings are described in default case operations, which are full\ncase mappings in the absence of tailoring for particular languages\nand environments. Every lower-case character that does not have an\nupper-case correspondent, as well as every upper-case character, is\nincluded in the returned value in its original form.</p>\n<p>If the value of <code>$arg</code> is the empty sequence, the\nzero-length string is returned.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Case mappings may change the length of a string. In general, the\ntwo functions are not inverses of each other <a href = \"#XPath_func-lower-case\"><code>fn:lower-case(fn:upper-case($arg))</code></a>\nis not guaranteed to return <code>$arg</code>, nor is\n<code>fn:upper-case(fn:lower-case($arg))</code>. The Latin small\nletter dotless i (as used in Turkish) is perhaps the most prominent\nlower-case letter which will not round-trip. The Latin capital\nletter i with dot above is the most prominent upper-case letter\nwhich will not round trip; there are others.</p>\n<p>These functions may not always be linguistically appropriate\n(e.g. Turkish i without dot) or appropriate for the application\n(e.g. titlecase). In cases such as Turkish, a simple translation\nshould be used first.</p>\n<p>Results may violate user expectations (in Quebec, for example,\nthe standard uppercase equivalent of \"è\" is \"È\", while in\nmetropolitan France it is more commonly \"E\"; only one of these is\nsupported by the functions as defined).</p>\n<p>Many characters of class Ll lack uppercase equivalents in the\nUnicode case mapping tables; many characters of class Lu lack\nlowercase equivalents.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-upper-case-examples\" id = \"func-upper-case-examples\"></a>7.4.7.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:upper-case(\"abCd0\")</code> returns\n<code>\"ABCD0\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-lower-case\" id = \"XPath_func-lower-case\"></a>7.4.8\nfn:lower-case</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:lower-case</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> after\ntranslating every character to its lower-case correspondent as\ndefined in the appropriate case mappings section in the Unicode\nstandard <a href = \"#Unicode4\">[The Unicode Standard]</a>. For\nversions of Unicode beginning with the 2.1.8 update, only\nlocale-insensitive case mappings should be applied. Beginning with\nversion 3.2.0 (and likely future versions) of Unicode, precise\nmappings are described in default case operations, which are full\ncase mappings in the absence of tailoring for particular languages\nand environments. Every upper-case character that does not have a\nlower-case correspondent, as well as every lower-case character, is\nincluded in the returned value in its original form.</p>\n<p>If the value of <code>$arg</code> is the empty sequence, the\nzero-length string is returned.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Case mappings may change the length of a string. In general, the\ntwo functions are not inverses of each other\n<code>fn:lower-case(fn:upper-case($arg))</code> is not guaranteed\nto return <code>$arg</code>, nor is <a href = \"#XPath_func-upper-case\"><code>fn:upper-case(fn:lower-case($arg))</code></a>.\nThe Latin small letter dotless i (as used in Turkish) is perhaps\nthe most prominent lower-case letter which will not round-trip. The\nLatin capital letter i with dot above is the most prominent\nupper-case letter which will not round trip; there are others.</p>\n<p>These functions may not always be linguistically appropriate\n(e.g. Turkish i without dot) or appropriate for the application\n(e.g. titlecase). In cases such as Turkish, a simple translation\nshould be used first.</p>\n<p>Results may violate user expectations (in Quebec, for example,\nthe standard uppercase equivalent of \"è\" is \"È\", while in\nmetropolitan France it is more commonly \"E\"; only one of these is\nsupported by the functions as defined).</p>\n<p>Many characters of class Ll lack uppercase equivalents in the\nUnicode case mapping tables; many characters of class Lu lack\nlowercase equivalents.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-lower-case-examples\" id = \"func-lower-case-examples\"></a>7.4.8.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:lower-case(\"ABc!D\")</code> returns\n<code>\"abc!d\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-translate\" id = \"XPath_func-translate\"></a>7.4.9\nfn:translate</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:translate</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$mapString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$transString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the value of <code>$arg</code> modified so that\nevery character in the value of <code>$arg</code> that occurs at\nsome position <em>N</em> in the value of <code>$mapString</code>\nhas been replaced by the character that occurs at position\n<em>N</em> in the value of <code>$transString</code>.</p>\n<p>If the value of <code>$arg</code> is the empty sequence, the\nzero-length string is returned.</p>\n<p>Every character in the value of <code>$arg</code> that does not\nappear in the value of <code>$mapString</code> is unchanged.</p>\n<p>Every character in the value of <code>$arg</code> that appears\nat some position <em>M</em> in the value of\n<code>$mapString</code>, where the value of\n<code>$transString</code> is less than <em>M</em> characters in\nlength, is omitted from the returned value. If\n<code>$mapString</code> is the zero-length string <code>$arg</code>\nis returned.</p>\n<p>If a character occurs more than once in <code>$mapString</code>,\nthen the first occurrence determines the replacement character. If\n<code>$transString</code> is longer than <code>$mapString</code>,\nthe excess characters are ignored.</p>\n<div class = \"div4\">\n<h5><a name = \"func-translate-examples\" id = \"func-translate-examples\"></a>7.4.9.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:translate(\"bar\",\"abc\",\"ABC\")</code> returns\n<code>\"BAr\"</code></p>\n</li>\n<li>\n<p><code>fn:translate(\"--aaa--\",\"abc-\",\"ABC\")</code> returns\n<code>\"AAA\"</code>.</p>\n</li>\n<li>\n<p><code>fn:translate(\"abcdabc\", \"abc\", \"AB\")</code> returns\n<code>\"ABdAB\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-encode-for-uri\" id = \"XPath_func-encode-for-uri\"></a>7.4.10 fn:encode-for-uri</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:encode-for-uri</code>(<code class = \"arg\">$uri-part</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: This function encodes reserved characters in an\n<code>xs:string</code> that is intended to be used in the path\nsegment of a URI. It is invertible but not idempotent. This\nfunction applies the URI escaping rules defined in section 2 of\n<a href = \"#rfc3986\">[RFC 3986]</a> to the <code>xs:string</code>\nsupplied as <code>$uri-part</code>. The effect of the function is\nto escape reserved characters. Each such character in the string is\nreplaced with its percent-encoded form as described in <a href = \"#rfc3986\">[RFC 3986]</a>.</p>\n<p>If <code>$uri-part</code> is the empty sequence, returns the\nzero-length string.</p>\n<p>All characters are escaped except those identified as\n\"unreserved\" by <a href = \"#rfc3986\">[RFC 3986]</a>, that is the\nupper- and lower-case letters A-Z, the digits 0-9, HYPHEN-MINUS\n(\"-\"), LOW LINE (\"_\"), FULL STOP \".\", and TILDE \"~\".</p>\n<p>Note that this function escapes URI delimiters and therefore\ncannot be used indiscriminately to encode \"invalid\" characters in a\npath segment.</p>\n<p>Since <a href = \"#rfc3986\">[RFC 3986]</a> recommends that, for\nconsistency, URI producers and normalizers should use uppercase\nhexadecimal digits for all percent-encodings, this function must\nalways generate hexadecimal values using the upper-case letters\nA-F.</p>\n<div class = \"div4\">\n<h5><a name = \"func-encode-for-uri-examples\" id = \"func-encode-for-uri-examples\"></a>7.4.10.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:encode-for-uri(\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\")</code>\nreturns\n<code>\"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean\"</code>.\nThis is probably not what the user intended because all of the\ndelimiters have been encoded.</p>\n</li>\n<li>\n<p><code>concat(\"http://www.example.com/\",\nencode-for-uri(\"~bébé\"))</code> returns\n<code>\"http://www.example.com/~b%C3%A9b%C3%A9\"</code>.</p>\n</li>\n<li>\n<p><code>concat(\"http://www.example.com/\", encode-for-uri(\"100%\norganic\"))</code> returns\n<code>\"http://www.example.com/100%25%20organic\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-iri-to-uri\" id = \"XPath_func-iri-to-uri\"></a>7.4.11\nfn:iri-to-uri</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:iri-to-uri</code>(<code class = \"arg\">$iri</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: This function converts an <code>xs:string</code>\ncontaining an IRI into a URI according to the rules spelled out in\nSection 3.1 of <a href = \"#rfc3987\">[RFC 3987]</a>. It is idempotent\nbut not invertible.</p>\n<p>If <code>$iri</code> contains a character that is invalid in an\nIRI, such as the space character (see note below), the invalid\ncharacter is replaced by its percent-encoded form as described in\n<a href = \"#rfc3986\">[RFC 3986]</a> before the conversion is\nperformed.</p>\n<p>If <code>$iri</code> is the empty sequence, returns the\nzero-length string.</p>\n<p>Since <a href = \"#rfc3986\">[RFC 3986]</a> recommends that, for\nconsistency, URI producers and normalizers should use uppercase\nhexadecimal digits for all percent-encodings, this function must\nalways generate hexadecimal values using the upper-case letters\nA-F.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>This function does not check whether <code>$iri</code> is a\nlegal IRI. It treats it as an <code>xs:string</code> and operates\non the characters in the <code>xs:string</code>.</p>\n<p>The following printable ASCII characters are invalid in an IRI:\n\"&lt;\", \"&gt;\", \" \" \" (double quote), space, \"{\", \"}\", \"|\", \"\\\",\n\"^\", and \"`\". Since these characters should not appear in an IRI,\nif they do appear in <code>$iri</code> they will be\npercent-encoded. In addition, characters outside the range\nx20-<span>x7E</span> will be percent-encoded because they are\ninvalid in a URI.</p>\n<p>Since this function does not escape the PERCENT SIGN \"%\" and\nthis character is not allowed in data within a URI, users wishing\nto convert character strings, such as file names, that include \"%\"\nto a URI should manually escape \"%\" by replacing it with \"%25\".</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-iri-to-uri-examples\" id = \"func-iri-to-uri-examples\"></a>7.4.11.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:iri-to-uri\n(\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\")</code>\nreturns\n<code>\"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean\"</code>.</p>\n</li>\n<li>\n<p><code>fn:iri-to-uri (\"http://www.example.com/~bébé\")</code>\nreturns <code>\"http://www.example.com/~b%C3%A9b%C3%A9\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-escape-html-uri\" id = \"XPath_func-escape-html-uri\"></a>7.4.12 fn:escape-html-uri</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:escape-html-uri</code>(<code class = \"arg\">$uri</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: This function escapes all characters except printable\ncharacters of the US-ASCII coded character set, specifically the\noctets ranging from 32 to 126 (decimal). The effect of the function\nis to escape a URI in the manner html user agents handle attribute\nvalues that expect URIs. Each character in <code>$uri</code> to be\nescaped is replaced by an escape sequence, which is formed by\nencoding the character as a sequence of octets in UTF-8, and then\nrepresenting each of these octets in the form %HH, where HH is the\nhexadecimal representation of the octet. This function must always\ngenerate hexadecimal values using the upper-case letters A-F.</p>\n<p>If <code>$uri</code> is the empty sequence, returns the\nzero-length string.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The behavior of this function corresponds to the recommended\nhandling of non-ASCII characters in URI attribute values as\ndescribed in <a href = \"#HTML40\">[HTML 4.0]</a> Appendix B.2.1.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-escape-html-uri-examples\" id = \"func-escape-html-uri-examples\"></a>7.4.12.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:escape-html-uri\n(\"http://www.example.com/00/Weather/CA/Los Angeles#ocean\")</code>\nreturns <code>\"http://www.example.com/00/Weather/CA/Los\nAngeles#ocean\"</code>.</p>\n</li>\n<li>\n<p><code>fn:escape-html-uri (\"javascript:if\n(navigator.browserLanguage == 'fr')\nwindow.open('http://www.example.com/~bébé');\") returns\n\"javascript:if (navigator.browserLanguage == 'fr')\nwindow.open('http://www.example.com/~b%C3%A9b%C3%A9');\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"substring.functions\" id = \"substring.functions\"></a>7.5\nFunctions Based on Substring Matching</h3>\n<p>The functions described in the section examine a string\n<code>$arg1</code> to see whether it contains another string\n<code>$arg2</code> as a substring. The result depends on whether\n<code>$arg2</code> is a substring of <code>$arg1</code>, and if so,\non the range of characters in <code>$arg1</code> which\n<code>$arg2</code> matches.</p>\n<p>When the Unicode code point collation is used, this simply\ninvolves determining whether <code>$arg1</code> contains a\ncontiguous sequence of characters whose code points are the same,\none for one, with the code points of the characters in\n<code>$arg2</code>.</p>\n<p>When a collation is specified, the rules are more complex.</p>\n<p>All collations support the capability of deciding whether two\nstrings are considered equal, and if not, which of the strings\nshould be regarded as preceding the other. For functions such as\n<a href = \"#XPath_func-compare\"><code>fn:compare()</code></a>, this is all\nthat is required. For other functions, such as <a href = \"#XPath_func-contains\"><code>fn:contains()</code></a>, the collation\nneeds to support an additional property: it must be able to\ndecompose the string into a sequence of collation units, each unit\nconsisting of one or more characters, such that two strings can be\ncompared by pairwise comparison of these units. (\"collation unit\"\nis equivalent to \"collation element\" as defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.) The\nstring <code>$arg1</code> is then considered to contain\n<code>$arg2</code> as a substring if the sequence of collation\nunits corresponding to <code>$arg2</code> is a subsequence of the\nsequence of the collation units corresponding to\n<code>$arg1</code>. The characters in <code>$arg1</code> that match\nare the characters corresponding to these collation units.</p>\n<p>This rule may occasionally lead to surprises. For example,\nconsider a collation that treats \"Jaeger\" and \"Jäger\" as equal. It\nmight do this by treating \"ä\" as representing two collation units,\nin which case the expression <a href = \"#XPath_func-contains\"><code>fn:contains(\"Jäger\", \"eg\")</code></a> will\nreturn <code>true</code>. Alternatively, a collation might treat\n\"ae\" as a single collation unit, in which case the expression\n<a href = \"#XPath_func-contains\"><code>fn:contains(\"Jaeger\",\n\"eg\")</code></a> will return <code>false</code>. The results of\nthese functions thus depend strongly on the properties of the\ncollation that is used. In addition, collations may specify that\nsome collation units should be ignored during matching.</p>\n<p>In the definitions below, we refer to the terms <b>match</b> and\n<b>minimal match</b> as defined in definitions DS2 and DS4 of\n<a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>. In\napplying these definitions:</p>\n<ul>\n<li>\n<p><var>C</var> is the collation; that is, the value of the\n<code>$collation</code> argument if specified, otherwise the\ndefault collation.</p>\n</li>\n<li>\n<p><var>P</var> is the (candidate) substring <code>$arg2</code></p>\n</li>\n<li>\n<p><var>Q</var> is the (candidate) containing string\n<code>$arg1</code></p>\n</li>\n<li>\n<p>The boundary condition <var>B</var> is satisfied at the start\nand end of a string, and between any two characters that belong to\ndifferent collation units (collation elements in the language of\n<a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>).\nIt is not satisfied between two characters that belong to the same\ncollation unit.</p>\n</li>\n</ul>\n<p>It is possible to define collations that do not have the ability\nto decompose a string into units suitable for substring matching.\nAn argument to a function defined in this section may be a URI that\nidentifies a collation that is able to compare two strings, but\nthat does not have the capability to split the string into\ncollation units. Such a collation may cause the function to fail,\nor to give unexpected results or it may be rejected as an\nunsuitable argument. The ability to decompose strings into\ncollation units is an <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> property of the collation.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-contains\"><code>fn:contains</code></a></td>\n<td>Indicates whether one <code>xs:string</code> contains another\n<code>xs:string</code>. A collation may be specified.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-starts-with\"><code>fn:starts-with</code></a></td>\n<td>Indicates whether the value of one <code>xs:string</code>\nbegins with the collation units of another <code>xs:string</code>.\nA collation may be specified.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-ends-with\"><code>fn:ends-with</code></a></td>\n<td>Indicates whether the value of one <code>xs:string</code> ends\nwith the collation units of another <code>xs:string</code>. A\ncollation may be specified.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-substring-before\"><code>fn:substring-before</code></a></td>\n<td>Returns the collation units of one <code>xs:string</code> that\nprecede in that <code>xs:string</code> the collation units of\nanother <code>xs:string</code>. A collation may be specified.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-substring-after\"><code>fn:substring-after</code></a></td>\n<td>Returns the collation units of <code>xs:string</code> that\nfollow in that <code>xs:string</code> the collation units of\nanother <code>xs:string</code>. A collation may be specified.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-contains\" id = \"XPath_func-contains\"></a>7.5.1\nfn:contains</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:contains</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:contains</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns an <code>xs:boolean</code> indicating whether\nor not the value of <code>$arg1</code> contains (at the beginning,\nat the end, or anywhere within) at least one sequence of collation\nunits that provides a minimal match to the collation units in the\nvalue of <code>$arg2</code>, according to the collation that is\nused.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Minimal match\" is defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.</p>\n</div>\n<p>If the value of <code>$arg1</code> or <code>$arg2</code> is the\nempty sequence, or contains only ignorable collation units, it is\ninterpreted as the zero-length string.</p>\n<p>If the value of <code>$arg2</code> is the zero-length string,\nthen the function returns <code>true</code>.</p>\n<p>If the value of <code>$arg1</code> is the zero-length string,\nthe function returns <code>false</code>.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>. If the specified collation does not support\ncollation units an error <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be raised [<a href = \"#ERRFOCH0004\" title = \"err:FOCH0004\">err:FOCH0004</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-contains-examples\" id = \"func-contains-examples\"></a>7.5.1.1 Examples</h5>\n<p>CollationA used in these examples is a collation in which both\n\"-\" and \"*\" are ignorable collation units.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Ignorable collation unit\" is equivalent to \"ignorable collation\nelement\" in <a href = \"#Unicode-Collations\">[Unicode Collation\nAlgorithm]</a>.</p>\n</div>\n<ul>\n<li>\n<p><code>fn:contains ( \"tattoo\", \"t\")</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:contains ( \"tattoo\", \"ttt\")</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:contains ( \"\", ())</code> returns <code>true</code>.\nThe first rule is applied, followed by the second rule.</p>\n</li>\n<li>\n<p><code>fn:contains ( \"abcdefghi\", \"-d-e-f-\", \"CollationA\")</code>\nreturns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:contains ( \"a*b*c*d*e*f*g*h*i*\", \"d-ef-\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:contains ( \"abcd***e---f*--*ghi\", \"def\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:contains ( (), \"--***-*---\", \"CollationA\")</code>\nreturns <code>true</code>. The second argument contains only\nignorable collation units and is equivalent to the zero-length\nstring.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-starts-with\" id = \"XPath_func-starts-with\"></a>7.5.2\nfn:starts-with</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:starts-with</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:starts-with</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns an <code>xs:boolean</code> indicating whether\nor not the value of <code>$arg1</code> starts with a sequence of\ncollation units that provides a <span>match</span> to the collation\nunits of <code>$arg2</code> according to the collation that is\nused.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p><span>\"Match\"</span> is defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.</p>\n</div>\n<p>If the value of <code>$arg1</code> or <code>$arg2</code> is the\nempty sequence, or contains only ignorable collation units, it is\ninterpreted as the zero-length string.</p>\n<p>If the value of <code>$arg2</code> is the zero-length string,\nthen the function returns <code>true</code>. If the value of\n<code>$arg1</code> is the zero-length string and the value of\n<code>$arg2</code> is not the zero-length string, then the function\nreturns <code>false</code>.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>. If the specified collation does not support\ncollation units an error <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be raised [<a href = \"#ERRFOCH0004\" title = \"err:FOCH0004\">err:FOCH0004</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-starts-with-examples\" id = \"func-starts-with-examples\"></a>7.5.2.1 Examples</h5>\n<p>CollationA used in these examples is a collation in which both\n\"-\" and \"*\" are ignorable collation units.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Ignorable collation unit\" is equivalent to \"ignorable collation\nelement\" in <a href = \"#Unicode-Collations\">[Unicode Collation\nAlgorithm]</a>.</p>\n</div>\n<ul>\n<li>\n<p><code>fn:starts-with(\"tattoo\", \"tat\")</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( \"tattoo\", \"att\")</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ((), ())</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( \"abcdefghi\", \"-a-b-c-\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( \"a*b*c*d*e*f*g*h*i*\", \"a-bc-\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( \"abcd***e---f*--*ghi\", \"abcdef\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( (), \"--***-*---\", \"CollationA\")</code>\nreturns <code>true</code>. The second argument contains only\nignorable collation units and is equivalent to the zero-length\nstring.</p>\n</li>\n<li>\n<p><code>fn:starts-with ( \"-abcdefghi\", \"-abc\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-ends-with\" id = \"XPath_func-ends-with\"></a>7.5.3\nfn:ends-with</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:ends-with</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:ends-with</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns an <code>xs:boolean</code> indicating whether\nor not the value of <code>$arg1</code> starts with a sequence of\ncollation units that provides a <span>match</span> to the collation\nunits of <code>$arg2</code> according to the collation that is\nused.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p><span>\"Match\"</span> is defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.</p>\n</div>\n<p>If the value of <code>$arg1</code> or <code>$arg2</code> is the\nempty sequence, or contains only ignorable collation units, it is\ninterpreted as the zero-length string.</p>\n<p>If the value of <code>$arg2</code> is the zero-length string,\nthen the function returns <code>true</code>. If the value of\n<code>$arg1</code> is the zero-length string and the value of\n<code>$arg2</code> is not the zero-length string, then the function\nreturns <code>false</code>.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>. If the specified collation does not support\ncollation units an error <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be raised [<a href = \"#ERRFOCH0004\" title = \"err:FOCH0004\">err:FOCH0004</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-ends-with-examples\" id = \"func-ends-with-examples\"></a>7.5.3.1 Examples</h5>\n<p>CollationA used in these examples is a collation in which both\n\"-\" and \"*\" are ignorable collation units.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Ignorable collation unit\" is equivalent to \"ignorable collation\nelement\" in <a href = \"#Unicode-Collations\">[Unicode Collation\nAlgorithm]</a>.</p>\n</div>\n<ul>\n<li>\n<p><code>fn:ends-with ( \"tattoo\", \"tattoo\")</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( \"tattoo\", \"atto\")</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ((), ())</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( \"abcdefghi\", \"-g-h-i-\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( \"abcd***e---f*--*ghi\", \"defghi\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( \"abcd***e---f*--*ghi\", \"defghi\",\n\"CollationA\")</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( (), \"--***-*---\", \"CollationA\")</code>\nreturns <code>true</code>. The second argument contains only\nignorable collation units and is equivalent to the zero-length\nstring.</p>\n</li>\n<li>\n<p><code>fn:ends-with ( \"abcdefghi\", \"ghi-\", \"CollationA\")</code>\nreturns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-substring-before\" id = \"XPath_func-substring-before\"></a>7.5.4 fn:substring-before</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:substring-before</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring-before</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the substring of the value of\n<code>$arg1</code> that precedes in the value of <code>$arg1</code>\nthe first occurrence of a sequence of collation units that provides\na minimal match to the collation units of <code>$arg2</code>\naccording to the collation that is used.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Minimal match\" is defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.</p>\n</div>\n<p>If the value of <code>$arg1</code> or <code>$arg2</code> is the\nempty sequence, or contains only ignorable collation units, it is\ninterpreted as the zero-length string.</p>\n<p>If the value of <code>$arg2</code> is the zero-length string,\nthen the function returns the zero-length string.</p>\n<p>If the value of <code>$arg1</code> does not contain a string\nthat is equal to the value of <code>$arg2</code>, then the function\nreturns the zero-length string.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a> If the specified collation does not support\ncollation units an error <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be raised [<a href = \"#ERRFOCH0004\" title = \"err:FOCH0004\">err:FOCH0004</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-substring-before-example\" id = \"func-substring-before-example\"></a>7.5.4.1 Examples</h5>\n<p>CollationA used in these examples is a collation in which both\n\"-\" and \"*\" are ignorable collation units.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Ignorable collation unit\" is equivalent to \"ignorable collation\nelement\" in <a href = \"#Unicode-Collations\">[Unicode Collation\nAlgorithm]</a>.</p>\n</div>\n<ul>\n<li>\n<p><code>fn:substring-before ( \"tattoo\", \"attoo\")</code> returns\n\"<code>t</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ( \"tattoo\", \"tatto\")</code> returns\n\"\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ((), ())</code> returns \"\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ( \"abcdefghi\", \"--d-e-\",\n\"CollationA\")</code> returns \"<code>abc</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ( \"abc--d-e-fghi\", \"--d-e-\",\n\"CollationA\")</code> returns \"<code>abc--</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ( \"a*b*c*d*e*f*g*h*i*\", \"***cde\",\n\"CollationA\")</code> returns \"<code>a*b*</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-before ( \"Eureka!\", \"--***-*---\",\n\"CollationA\")</code> returns \"\". The second argument contains only\nignorable collation units and is equivalent to the zero-length\nstring.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-substring-after\" id = \"XPath_func-substring-after\"></a>7.5.5 fn:substring-after</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:substring-after</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring-after</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the substring of the value of\n<code>$arg1</code> that follows in the value of <code>$arg1</code>\nthe first occurrence of a sequence of collation units that provides\na minimal match to the collation units of <code>$arg2</code>\naccording to the collation that is used.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Minimal match\" is defined in <a href = \"#Unicode-Collations\">[Unicode Collation Algorithm]</a>.</p>\n</div>\n<p>If the value of <code>$arg1</code> or <code>$arg2</code> is the\nempty sequence, or contains only ignorable collation units, it is\ninterpreted as the zero-length string.</p>\n<p>If the value of <code>$arg2</code> is the zero-length string,\nthen the function returns the value of <code>$arg1</code>.</p>\n<p>If the value of <code>$arg1</code> does not contain a string\nthat is equal to the value of <code>$arg2</code>, then the function\nreturns the zero-length string.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a> If the specified collation does not support\ncollation units an error <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be raised [<a href = \"#ERRFOCH0004\" title = \"err:FOCH0004\">err:FOCH0004</a>].</p>\n<div class = \"div4\">\n<h5><a name = \"func-substring-after-examples\" id = \"func-substring-after-examples\"></a>7.5.5.1 Examples</h5>\n<p>CollationA used in these examples is a collation in which both\n\"-\" and \"*\" are ignorable collation units.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>\"Ignorable collation unit\" is equivalent to \"ignorable collation\nelement\" in <a href = \"#Unicode-Collations\">[Unicode Collation\nAlgorithm]</a>.</p>\n</div>\n<ul>\n<li>\n<p><code>fn:substring-after(\"tattoo\", \"tat\")</code> returns\n\"<code>too</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-after ( \"tattoo\", \"tattoo\")</code> returns\n\"\".</p>\n</li>\n<li>\n<p><code>fn:substring-after ((), ())</code> returns \"\".</p>\n</li>\n<li>\n<p><code>fn:substring-after ( \"abcdefghi\", \"--d-e-\",\n\"CollationA\")</code> returns \"<code>fghi</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-after ( \"abc--d-e-fghi\", \"--d-e-\",\n\"CollationA\")</code> returns \"<code>-fghi</code> \".</p>\n</li>\n<li>\n<p><code>fn:substring-after ( \"a*b*c*d*e*f*g*h*i*\", \"***cde***\",\n\"CollationA\")</code> returns \"<code>*f*g*h*i*</code>\".</p>\n</li>\n<li>\n<p><code>fn:substring-after ( \"Eureka!\", \"--***-*---\",\n\"CollationA\")</code> returns \"<code>Eureka!</code>\". The second\nargument contains only ignorable collation units and is equivalent\nto the zero-length string.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"string.match\" id = \"string.match\"></a>7.6 String\nFunctions that Use Pattern Matching</h3>\n<p>The three functions described in this section make use of a\nregular expression syntax for pattern matching. This is described\nbelow.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-matches\"><code>fn:matches</code></a></td>\n<td>Returns an <code>xs:boolean</code> value that indicates whether\nthe value of the first argument is matched by the regular\nexpression that is the value of the second argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-replace\"><code>fn:replace</code></a></td>\n<td>Returns the value of the first argument with every substring\nmatched by the regular expression that is the value of the second\nargument replaced by the replacement string that is the value of\nthe third argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-tokenize\"><code>fn:tokenize</code></a></td>\n<td>Returns a sequence of one or more <code>xs:string</code>s whose\nvalues are substrings of the value of the first argument separated\nby substrings that match the regular expression that is the value\nof the second argument.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"regex-syntax\" id = \"regex-syntax\"></a>7.6.1 Regular\nExpression Syntax</h4>\n<p>The regular expression syntax used by these functions is defined\nin terms of the regular expression syntax specified in XML Schema\n(see <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a>), which in turn is based on the established\nconventions of languages such as Perl. However, because XML Schema\nuses regular expressions only for validity checking, it omits some\nfacilities that are widely-used with languages such as Perl. This\nsection, therefore, describes extensions to the XML Schema regular\nexpressions syntax that reinstate these capabilities.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>It is recommended that implementers consult <a href = \"#Unicode-Regex\">[Unicode Regular Expressions]</a> for information\non using regular expression processing on Unicode characters.</p>\n</div>\n<p>The regular expression syntax and semantics are identical to\nthose defined in <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a> with the following additions:</p>\n<ul>\n<li>\n<p>Two meta-characters, <code>^</code> and <code>$</code> are\nadded. By default, the meta-character <code>^</code> matches the\nstart of the entire string, while <code>$</code> matches the end of\nthe entire string. In multi-line mode, <code>^</code> matches the\nstart of any line (that is, the start of the entire string, and the\nposition immediately after a newline character), while\n<code>$</code> matches the end of any line (that is, the end of the\nentire string, and the position immediately before a newline\ncharacter). Newline here means the character <code>#x0A</code>\nonly.</p>\n<p>This means that the production in <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a>:</p>\n<p><code>[10] Char ::= [^.\\?*+()|#x5B#x5D]</code></p>\n<p>is modified to read:</p>\n<p><code>[10] Char ::= [^.\\?*+{}()|^$#x5B#x5D]</code></p>\n<p>The characters <code>#x5B</code> and <code>#x5D</code>\ncorrespond to \"<code>[</code>\" and \"<code>]</code>\"\nrespectively.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The definition of Char (production [10]) in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nhas a known error in which it omits the left brace (\"{\") and right\nbrace (\"}\"). That error is corrected here.</p>\n</div>\n<p>The following production:</p>\n<p><code>[11] charClass ::= charClassEsc | charClassExpr |\nWildCardEsc</code></p>\n<p>is modified to read:</p>\n<p><code>[11] charClass ::= charClassEsc | charClassExpr |\nWildCardEsc | \"^\" | \"$\"</code></p>\n</li>\n<li>\n<p><em>Reluctant quantifiers</em> are supported. They are indicated\nby a \" <code>?</code> \" following a quantifier. Specifically:</p>\n<ul>\n<li>\n<p><code>X??</code> matches X, once or not at all</p>\n</li>\n<li>\n<p><code>X*?</code> matches X, zero or more times</p>\n</li>\n<li>\n<p><code>X+?</code> matches X, one or more times</p>\n</li>\n<li>\n<p><code>X{n}?</code> matches X, exactly n times</p>\n</li>\n<li>\n<p><code>X{n,}?</code> matches X, at least n times</p>\n</li>\n<li>\n<p><code>X{n,m}?</code> matches X, at least n times, but not more\nthan m times</p>\n</li>\n</ul>\n<p>The effect of these quantifiers is that the regular expression\nmatches the <em>shortest</em> possible substring consistent with\nthe match as a whole succeeding. Without the \" <code>?</code> \",\nthe regular expression matches the <em>longest</em> possible\nsubstring.</p>\n<p>To achieve this, the production in <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a>:</p>\n<p><code>[4] quantifier ::= [?*+] | ( '{' quantity '}' )</code></p>\n<p>is changed to:</p>\n<p><code>[4] quantifier ::= ( [?*+] | ( '{' quantity '}' ) )\n'?'?</code></p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Reluctant quantifiers have no effect on the results of the\nboolean <a href = \"#XPath_func-matches\"><code>fn:matches</code></a>\nfunction, since this function is only interested in discovering\nwhether a match exists, and not where it exists.</p>\n</div>\n</li>\n<li>\n<p>Sub-expressions (groups) within the regular expression are\nrecognized. The regular expression syntax defined by <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nallows a regular expression to contain parenthesized\nsub-expressions, but attaches no special significance to them. The\n<a href = \"#XPath_func-replace\"><code>fn:replace()</code></a> function\ndescribed below allows access to the parts of the input string that\nmatched a sub-expression (called captured substrings). The\nsub-expressions are numbered according to the position of the\nopening parenthesis in left-to-right order within the top-level\nregular expression: the first opening parenthesis identifies\ncaptured substring 1, the second identifies captured substring 2,\nand so on. 0 identifies the substring captured by the entire\nregular expression. If a sub-expression matches more than one\nsubstring (because it is within a construct that allows\nrepetition), then only the <em>last</em> substring that it matched\nwill be captured.</p>\n</li>\n<li>\n<p>Back-references are allowed <span>outside a character class\nexpression. A back-reference is an additional kind of atom.</span>\nThe construct <code>\\N</code> where <code>N</code> is a single\ndigit is always recognized as a back-reference; if this is followed\nby further digits, these digits are taken to be part of the\nback-reference if and only if <span>the resulting number\n<code>NN</code> is such that the back-reference is preceded by\n<code>NN</code> or more unescaped opening parentheses. The regular\nexpression is invalid if a back-reference refers to a subexpression\nthat does not exist or whose closing right parenthesis occurs after\nthe back-reference.</span></p>\n<p>A back-reference matches the string that was matched by the\n<code>N</code>th capturing subexpression within the regular\nexpression, that is, the parenthesized subexpression whose opening\nleft parenthesis is the <code>N</code>th unescaped left parenthesis\nwithin the regular expression. For example, the regular expression\n<code>('|\").*\\1</code> matches a sequence of characters delimited\neither by an apostrophe at the start and end, or by a quotation\nmark at the start and end.</p>\n<p>If no string is matched by the <code>N</code>th capturing\nsubexpression, the back-reference is interpreted as matching a\nzero-length string.</p>\n<p>Back-references change the following production:</p>\n<p><span><code>[9] atom ::= Char | charClass | ( '(' regExp ')'\n)</code></span></p>\n<p>to</p>\n<p><span><code>[9] atom ::= Char | charClass | ( '(' regExp ')' ) |\nbackReference</code></span></p>\n<p><span><code>[9a] backReference ::= \"\\\"\n[1-9][0-9]*</code></span></p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p><span>Within a character class expression, <code>\\</code>\nfollowed by a digit is invalid. Some other regular expression\nlanguages interpret this as an octal character\nreference.</span></p>\n</div>\n</li>\n<li>\n<p>Single character escapes are extended to allow the\n<code>$</code> character to be escaped. The following production is\nchanged:</p>\n<p><code>[24]SingleCharEsc ::= '\\'\n[nrt\\|.?*+(){}#x2D#x5B#x5D#x5E]</code></p>\n<p>to</p>\n<p><code>[24]SingleCharEsc ::= '\\'\n[nrt\\|.?*+(){}$#x2D#x5B#x5D#x5E]</code></p>\n</li>\n</ul>\n<div class = \"div4\">\n<h5><a name = \"flags\" id = \"flags\"></a>7.6.1.1 Flags</h5>\n<p>All these functions provide an optional parameter,\n<code>$flags</code>, to set options for the interpretation of the\nregular expression. The parameter accepts a <code>xs:string</code>,\nin which individual letters are used to set options. The presence\nof a letter within the string indicates that the option is on; its\nabsence indicates that the option is off. Letters may appear in any\norder and may be repeated. If there are characters present that are\nnot defined here as flags, then an error is raised [<a href = \"#ERRFORX0001\" title = \"err:FORX0001\">err:FORX0001</a>].</p>\n<p>The following options are defined:</p>\n<ul>\n<li>\n<p><code>s</code>: If present, the match operates in \"dot-all\"\nmode. (Perl calls this the single-line mode.) If the <code>s</code>\nflag is not specified, the meta-character <code>.</code> matches\nany character except a newline (<code>#x0A</code>) character. In\ndot-all mode, the meta-character <code>.</code> matches any\ncharacter whatsoever. Suppose the input contains \"hello\" and\n\"world\" on two lines. This will not be matched by the regular\nexpression \"hello.*world\" unless dot-all mode is enabled.</p>\n</li>\n<li>\n<p><code>m</code>: If present, the match operates in multi-line\nmode. By default, the meta-character <code>^</code> matches the\nstart of the entire string, while $ matches the end of the entire\nstring. In multi-line mode, <code>^</code> matches the start of any\nline (that is, the start of the entire string, and the position\nimmediately after a newline character <span>other than a newline\nthat appears as the last character in the string</span>), while\n<code>$</code> matches the end of any line <span>(that is, the\nposition immediately before a newline character, and the end of the\nentire string if there is no newline character at the end of the\nstring).</span> Newline here means the character <code>#x0A</code>\nonly.</p>\n</li>\n<li>\n<p><code>i</code>: If present, the match operates in\ncase-insensitive mode. The detailed rules are as follows. In these\nrules, a character C2 is considered to be a <em>case-variant</em>\nof another character C1 if the following XPath expression returns\n<code>true</code> when the two characters are considered as strings\nof length one, and the Unicode codepoint collation is used:</p>\n<p><a href = \"#XPath_func-lower-case\"><code>fn:lower-case(C1) eq\nfn:lower-case(C2)</code></a></p>\n<p>or</p>\n<p><a href = \"#XPath_func-upper-case\"><code>fn:upper-case(C1) eq\nfn:upper-case(C2)</code></a></p>\n<p>Note that the case-variants of a character under this definition\nare always single characters.</p>\n<ol class = \"enumar\">\n<li>\n<p>When a normal character (<code>Char</code>) is used as an atom,\nit represents the set containing that character and all its\ncase-variants. For example, the regular expression \"z\" will match\nboth \"z\" and \"Z\".</p>\n</li>\n<li>\n<p>A character range (<code>charRange</code>) represents the set\ncontaining all the characters that it would match in the absence of\nthe \"<code>i</code>\" flag, together with their case-variants. For\nexample, the regular expression \"[A-Z]\" will match all the letters\nA-Z and all the letters a-z. It will also match certain other\ncharacters such as <code>#x212A</code> (KELVIN SIGN), since\n<a href = \"#XPath_func-lower-case\"><code>fn:lower-case(\"#x212A\")</code></a>\nis \"k\".</p>\n<p>This rule applies also to a character range used in a character\nclass subtraction (<code>charClassSub</code>): thus [A-Z-[IO]] will\nmatch characters such as \"A\", \"B\", \"a\", and \"b\", but will not match\n\"I\", \"O\", \"i\", or \"o\".</p>\n<p>The rule also applies to a character range used as part of a\nnegative character group: thus [^Q] will match every character\nexcept \"Q\" and \"q\" (these being the only case-variants of \"Q\" in\nUnicode).</p>\n</li>\n<li>\n<p>A back-reference is compared using case-blind comparison: that\nis, each character must either be the same as the corresponding\ncharacter of the previously matched string, or must be a\ncase-variant of that character. For example, the strings \"Mum\",\n\"mom\", \"Dad\", and \"DUD\" all match the regular expression\n\"([md])[aeiou]\\1\" when the \"<code>i</code>\" flag is used.</p>\n</li>\n<li>\n<p>All other constructs are unaffected by the \"<code>i</code>\"\nflag. For example, \"\\p{Lu}\" continues to match upper-case letters\nonly.</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>x</code>: If present, whitespace characters (#x9, #xA, #xD\nand #x20) in the regular expression are removed prior to matching\nwith one exception: whitespace characters within character class\nexpressions (<code>charClassExpr</code>) are not removed. This flag\ncan be used, for example, to break up long regular expressions into\nreadable lines.</p>\n<p>Examples:</p>\n<p><a href = \"#XPath_func-matches\"><code>fn:matches(\"helloworld\", \"hello\nworld\", \"x\")</code></a> returns <code>true</code></p>\n<p><a href = \"#XPath_func-matches\"><code>fn:matches(\"helloworld\", \"hello[\n]world\", \"x\")</code></a> returns <code>false</code></p>\n<p><a href = \"#XPath_func-matches\"><code>fn:matches(\"hello world\", \"hello\\\nsworld\", \"x\")</code></a> returns <code>true</code></p>\n<p><a href = \"#XPath_func-matches\"><code>fn:matches(\"hello world\", \"hello\nworld\", \"x\")</code></a> returns <code>false</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-matches\" id = \"XPath_func-matches\"></a>7.6.2\nfn:matches</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:matches</code>(<code class = \"arg\">$input</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$pattern</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:matches</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$input</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$pattern</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$flags</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: The function returns <code>true</code> if\n<code>$input</code> matches the regular expression supplied as\n<code>$pattern</code> as influenced by the value of\n<code>$flags</code>, if present; otherwise, it returns\n<code>false</code>.</p>\n<p>The effect of calling the first version of this function\n(omitting the argument <code>$flags</code>) is the same as the\neffect of calling the second version with the <code>$flags</code>\nargument set to a zero-length string. Flags are defined in <a href = \"#flags\"><b>7.6.1.1 Flags</b></a>.</p>\n<p>If <code>$input</code> is the empty sequence, it is interpreted\nas the zero-length string.</p>\n<p>Unless the metacharacters <code>^</code> and <code>$</code> are\nused as anchors, the string is considered to match the pattern if\nany substring matches the pattern. But if anchors are used, the\nanchors must match the start/end of the string (in string mode), or\nthe start/end of a line (in multiline mode).</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This is different from the behavior of patterns in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>,\nwhere regular expressions are <em>implicitly</em> anchored.</p>\n</div>\n<p>An error is raised [<a href = \"#ERRFORX0002\" title = \"err:FORX0002\">err:FORX0002</a>] if the value of\n<code>$pattern</code> is invalid according to the rules described\nin section <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<p>An error is raised [<a href = \"#ERRFORX0001\" title = \"err:FORX0001\">err:FORX0001</a>] if the value of\n<code>$flags</code> is invalid according to the rules described in\nsection <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-matches-examples\" id = \"func-matches-examples\"></a>7.6.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:matches(\"abracadabra\", \"bra\")</code> returns true</p>\n</li>\n<li>\n<p><code>fn:matches(\"abracadabra\", \"^a.*a$\")</code> returns\ntrue</p>\n</li>\n<li>\n<p><code>fn:matches(\"abracadabra\", \"^bra\")</code> returns false</p>\n</li>\n</ul>\n<p>Given the source document:</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;poem author=\"Wilhelm Busch\"&gt; \nKaum hat dies der Hahn gesehen,\nFängt er auch schon an zu krähen:\n«Kikeriki! Kikikerikih!!»\nTak, tak, tak! - da kommen sie.\n&lt;/poem&gt;\n</pre></div>\n<p>the following function calls produce the following results, with\nthe <code>poem</code> element as the context node:</p>\n<ul>\n<li>\n<p><code>fn:matches(., \"Kaum.*krähen\")</code> returns\n<code>false</code></p>\n</li>\n<li>\n<p><code>fn:matches(., \"Kaum.*krähen\", \"s\")</code> returns\n<code>true</code></p>\n</li>\n<li>\n<p><code>fn:matches(., \"^Kaum.*gesehen,$\", \"m\")</code> returns\n<code>true</code></p>\n</li>\n<li>\n<p><code>fn:matches(., \"^Kaum.*gesehen,$\")</code> returns\n<code>false</code></p>\n</li>\n<li>\n<p><code>fn:matches(., \"kiki\", \"i\")</code> returns\n<code>true</code></p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Regular expression matching is defined on the basis of Unicode\ncode points; it takes no account of collations.</p>\n</div>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-replace\" id = \"XPath_func-replace\"></a>7.6.3\nfn:replace</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:replace</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$input</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$pattern</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$replacement</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"4\"><code class = \"function\">fn:replace</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$input</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$pattern</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$replacement</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$flags</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: The function returns the <code>xs:string</code> that is\nobtained by replacing each non-overlapping substring of\n<code>$input</code> that matches the given <code>$pattern</code>\nwith an occurrence of the <code>$replacement</code> string.</p>\n<p>The effect of calling the first version of this function\n(omitting the argument <code>$flags</code>) is the same as the\neffect of calling the second version with the <code>$flags</code>\nargument set to a zero-length string. Flags are defined in <a href = \"#flags\"><b>7.6.1.1 Flags</b></a>.</p>\n<p>The <code>$flags</code> argument is interpreted in the same\nmanner as for the <a href = \"#XPath_func-matches\"><code>fn:matches()</code></a> function.</p>\n<p>If <code>$input</code> is the empty sequence, it is interpreted\nas the zero-length string.</p>\n<p>If two overlapping substrings of <code>$input</code> both match\nthe <code>$pattern</code>, then only the first one (that is, the\none whose first character comes first in the <code>$input</code>\nstring) is replaced.</p>\n<p>Within the <code>$replacement</code> string, a variable\n<code>$N</code> may be used to refer to the substring captured by\nthe Nth parenthesized sub-expression in the regular expression. For\neach match of the pattern, these variables are assigned the value\nof the content matched by the relevant sub-expression, and the\nmodified replacement string is then substituted for the characters\nin <code>$input</code> that matched the pattern. <code>$0</code>\nrefers to the substring captured by the regular expression as a\nwhole.</p>\n<p>More specifically, the rules are as follows, where\n<code>S</code> is the number of parenthesized sub-expressions in\nthe regular expression, and <code>N</code> is the decimal number\nformed by taking all the digits that consecutively follow the\n<code>$</code> character:</p>\n<ol class = \"enumar\">\n<li>\n<p>If <code>N</code>=<code>0</code>, then the variable is replaced\nby the substring matched by the regular expression as a whole.</p>\n</li>\n<li>\n<p>If <code>1</code>&lt;=<code>N</code>&lt;=<code>S</code>, then\nthe variable is replaced by the substring captured by the Nth\nparenthesized sub-expression. If the <code>Nth</code> parenthesized\nsub-expression was not matched, then the variable is replaced by\nthe zero-length string.</p>\n</li>\n<li>\n<p>If <code>S</code>&lt;<code>N</code>&lt;=<code>9</code>, then the\nvariable is replaced by the zero-length string.</p>\n</li>\n<li>\n<p>Otherwise (if <code>N</code>&gt;<code>S</code> and\n<code>N</code>&gt;<code>9</code>), the last digit of <code>N</code>\nis taken to be a literal character to be included \"as is\" in the\nreplacement string, and the rules are reapplied using the number\n<code>N</code> formed by stripping off this last digit.</p>\n</li>\n</ol>\n<p>For example, if the replacement string is \"<code>$23</code>\" and\nthere are 5 substrings, the result contains the value of the\nsubstring that matches the second sub-expression, followed by the\ndigit \"<code>3</code>\".</p>\n<p>A literal \"<code>$</code>\" symbol must be written as\n\"<code>\\$</code>\".</p>\n<p>A literal \"<code>\\</code>\" symbol must be written as\n\"<code>\\\\</code>\".</p>\n<p>If two alternatives within the pattern both match at the same\nposition in the <code>$input</code>, then the match that is chosen\nis the one matched by the first alternative. For example:</p>\n<div class = \"exampleInner\">\n<pre>\n fn:replace(\"abcd\", \"(ab)|(a)\", \"[1=$1][2=$2]\") returns \"[1=ab][2=]cd\"\n</pre></div>\n<p>An error is raised [<a href = \"#ERRFORX0002\" title = \"err:FORX0002\">err:FORX0002</a>] if the value of\n<code>$pattern</code> is invalid according to the rules described\nin section <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<p>An error is raised [<a href = \"#ERRFORX0001\" title = \"err:FORX0001\">err:FORX0001</a>] if the value of\n<code>$flags</code> is invalid according to the rules described in\nsection <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<p>An error is raised [<a href = \"#ERRFORX0003\" title = \"err:FORX0003\">err:FORX0003</a>] if the pattern matches a\nzero-length string, that is, if the expression <a href = \"#XPath_func-matches\"><code>fn:matches(\"\", $pattern, $flags)</code></a>\nreturns <code>true</code>. It is not an error, however, if a\ncaptured substring is zero-length.</p>\n<p>An error is raised [<a href = \"#ERRFORX0004\" title = \"err:FORX0004\">err:FORX0004</a>] if the value of\n<code>$replacement</code> contains a \"<code>$</code>\" character\nthat is not immediately followed by a digit <code>0-9</code> and\nnot immediately preceded by a \"\\\".</p>\n<p>An error is raised [<a href = \"#ERRFORX0004\" title = \"err:FORX0004\">err:FORX0004</a>] if the value of\n<code>$replacement</code> contains a \"<code>\\</code>\" character\nthat is not part of a \"<code>\\\\</code>\" pair, unless it is\nimmediately followed by a \"<code>$</code>\" character.</p>\n<div class = \"div4\">\n<h5><a name = \"func-replace-examples\" id = \"func-replace-examples\"></a>7.6.3.1 Examples</h5>\n<ul>\n<li>\n<p><code>replace(\"abracadabra\", \"bra\", \"*\")</code> returns\n<code>\"a*cada*\"</code></p>\n</li>\n<li>\n<p><code>replace(\"abracadabra\", \"a.*a\", \"*\")</code> returns\n<code>\"*\"</code></p>\n</li>\n<li>\n<p><code>replace(\"abracadabra\", \"a.*?a\", \"*\")</code> returns\n<code>\"*c*bra\"</code></p>\n</li>\n<li>\n<p><code>replace(\"abracadabra\", \"a\", \"\")</code> returns\n<code>\"brcdbr\"</code></p>\n</li>\n<li>\n<p><code>replace(\"abracadabra\", \"a(.)\", \"a$1$1\")</code> returns\n<code>\"abbraccaddabbra\"</code></p>\n</li>\n<li>\n<p><code>replace(\"abracadabra\", \".*?\", \"$1\")</code> raises an\nerror, because the pattern matches the zero-length string</p>\n</li>\n<li>\n<p><code>replace(\"AAAA\", \"A+\", \"b\")</code> returns\n<code>\"b\"</code></p>\n</li>\n<li>\n<p><code>replace(\"AAAA\", \"A+?\", \"b\")</code> returns\n<code>\"bbbb\"</code></p>\n</li>\n<li>\n<p><code>replace(\"darted\", \"^(.*?)d(.*)$\", \"$1c$2\")</code> returns\n<code>\"carted\"</code>. The first <code>d</code> is replaced.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-tokenize\" id = \"XPath_func-tokenize\"></a>7.6.4\nfn:tokenize</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:tokenize</code>(<code class = \"arg\">$input</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$pattern</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string*</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:tokenize</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$input</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$pattern</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$flags</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: This function breaks the <code>$input</code> string\ninto a sequence of strings, treating any substring that matches\n<code>$pattern</code> as a separator. The separators themselves are\nnot returned.</p>\n<p>The effect of calling the first version of this function\n(omitting the argument <code>$flags</code>) is the same as the\neffect of calling the second version with the <code>$flags</code>\nargument set to a zero-length string. Flags are defined in <a href = \"#flags\"><b>7.6.1.1 Flags</b></a>.</p>\n<p>The <code>$flags</code> argument is interpreted in the same way\nas for the <a href = \"#XPath_func-matches\"><code>fn:matches()</code></a>\nfunction.</p>\n<p>If <code>$input</code> is the empty sequence, or if\n<code>$input</code> is the zero-length string, the result is the\nempty sequence.</p>\n<p>If the supplied <code>$pattern</code> matches a zero-length\nstring, that is, if <a href = \"#XPath_func-matches\"><code>fn:matches(\"\",\n$pattern, $flags)</code></a> returns <code>true</code>, then an\nerror is raised: [<a href = \"#ERRFORX0003\" title = \"err:FORX0003\">err:FORX0003</a>].</p>\n<p>If a separator occurs at the start of the <code>$input</code>\nstring, the result sequence will start with a zero-length string.\nZero-length strings will also occur in the result sequence if a\nseparator occurs at the end of the <code>$input</code> string, or\nif two adjacent substrings match the supplied\n<code>$pattern</code>.</p>\n<p>If two alternatives within the supplied <code>$pattern</code>\nboth match at the same position in the <code>$input</code> string,\nthen the match that is chosen is the first. For example:</p>\n<div class = \"exampleInner\">\n<pre>\n fn:tokenize(\"abracadabra\", \"(ab)|(a)\") returns (\"\", \"r\", \"c\", \"d\", \"r\", \"\")\n</pre></div>\n<p>An error is raised [<a href = \"#ERRFORX0002\" title = \"err:FORX0002\">err:FORX0002</a>] if the value of\n<code>$pattern</code> is invalid according to the rules described\nin section <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<p>An error is raised [<a href = \"#ERRFORX0001\" title = \"err:FORX0001\">err:FORX0001</a>] if the value of\n<code>$flags</code> is invalid according to the rules described in\nsection <a href = \"#regex-syntax\"><b>7.6.1 Regular Expression\nSyntax</b></a>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-tokenize-examples\" id = \"func-tokenize-examples\"></a>7.6.4.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:tokenize(\"The cat sat on the mat\", \"\\s+\")</code>\nreturns <code>(\"The\", \"cat\", \"sat\", \"on\", \"the\", \"mat\")</code></p>\n</li>\n<li>\n<p><code>fn:tokenize(\"1, 15, 24, 50\", \",\\s*\")</code> returns\n<code>(\"1\", \"15\", \"24\", \"50\")</code></p>\n</li>\n<li>\n<p><code>fn:tokenize(\"1,15,,24,50,\", \",\")</code> returns\n<code>(\"1\", \"15\", \"\", \"24\", \"50\", \"\")</code></p>\n</li>\n<li>\n<p><code>fn:tokenize(\"abba\", \".?\")</code> raises the error\n[<a href = \"#ERRFORX0003\" title = \"err:FORX0003\">err:FORX0003</a>].</p>\n</li>\n<li>\n<p><code>fn:tokenize(\"Some unparsed &lt;br&gt; HTML &lt;BR&gt;\ntext\", \"\\s*&lt;br&gt;\\s*\", \"i\")</code> returns <code>(\"Some\nunparsed\", \"HTML\", \"text\")</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"anyURI-functions\" id = \"anyURI-functions\"></a>8\nFunctions on anyURI</h2>\n<p>This section specifies functions that take anyURI as\narguments.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a></td>\n<td>Returns an <code>xs:anyURI</code> representing an absolute\n<code>xs:anyURI</code> given a base URI and a relative URI.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-resolve-uri\" id = \"XPath_func-resolve-uri\"></a>8.1\nfn:resolve-uri</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:resolve-uri</code>(<code class = \"arg\">$relative</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:resolve-uri</code>(<code class = \"arg\">$relative</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$base</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<p>Summary: <span>This function enables a relative URI\nreference</span> to be resolved against an absolute URI.</p>\n<p>The first form of this function resolves <code>$relative</code>\nagainst the value of the base-uri property from the static context.\nIf the base-uri property is not initialized in the static context\nan error is raised [<a href = \"#ERRFONS0005\" title = \"err:FONS0005\">err:FONS0005</a>].</p>\n<p>If <code>$relative</code> is a relative URI reference, it is\nresolved against <code>$base</code>, or against the base-uri\nproperty from the static context, using an algorithm such as those\ndescribed in <a href = \"#rfc2396\">[RFC 2396]</a> or <a href = \"#rfc3986\">[RFC 3986]</a>, and the resulting absolute URI reference\nis returned.</p>\n<p>If <code>$relative</code> is an absolute URI reference, it is\nreturned unchanged.</p>\n<p>If <code>$relative</code> is the empty sequence, the empty\nsequence is returned.</p>\n<p><span>If <code>$relative</code> is not a valid URI according to\nthe rules of the <code>xs:anyURI</code> data type, or if it is not\na suitable relative reference to use as input to the chosen\nresolution algorithm, then an error is raised [<a href = \"#ERRFORG0002\" title = \"err:FORG0002\">err:FORG0002</a>].</span></p>\n<p><span>If <code>$base</code> is not a valid URI according to the\nrules of the <code>xs:anyURI</code> data type, if it is not a\nsuitable URI to use as input to the chosen resolution algorithm\n(for example, if it is a relative URI reference, if it is a\nnon-hierarchic URI, or if it contains a fragment identifier), then\nan error is raised [<a href = \"#ERRFORG0002\" title = \"err:FORG0002\">err:FORG0002</a>].</span></p>\n<p><span>If the chosen resolution algorithm fails for any other\nreason then an error is raised [<a href = \"#ERRFORG0009\" title = \"err:FORG0009\">err:FORG0009</a>].</span></p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Resolving a URI does not dereference it. This is merely a\nsyntactic operation on two character strings.</p>\n</div>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p><span>The algorithms in the cited RFCs include some variations\nthat are optional or recommended rather than mandatory; they also\ndescribe some common practices that are not recommended, but which\nare permitted for backwards compatibility. Where the cited RFCs\npermit variations in behavior, so does this\nspecification.</span></p>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"boolean-functions\" id = \"boolean-functions\"></a>9\nFunctions and Operators on Boolean Values</h2>\n<p>This section defines functions and operators on the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nboolean datatype.</p>\n<div class = \"div2\">\n<h3><a name = \"boolean-constructors\" id = \"boolean-constructors\"></a>9.1 Additional Boolean Constructor\nFunctions</h3>\n<p>The following additional constructor functions are defined on\nthe boolean type.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-true\"><code>fn:true</code></a></td>\n<td>Constructs the xs:boolean value 'true'.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-false\"><code>fn:false</code></a></td>\n<td>Constructs the xs:boolean value 'false'.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-true\" id = \"XPath_func-true\"></a>9.1.1 fn:true</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:true</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns the <code>xs:boolean</code> value\n<code>true</code>. Equivalent to <code>xs:boolean(\"1\")</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-true-examples\" id = \"func-true-examples\"></a>9.1.1.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:true()</code> returns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-false\" id = \"XPath_func-false\"></a>9.1.2 fn:false</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:false</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns the <code>xs:boolean</code> value\n<code>false</code>. Equivalent to <code>xs:boolean(\"0\")</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-false-examples\" id = \"func-false-examples\"></a>9.1.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:false()</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"op.boolean\" id = \"op.boolean\"></a>9.2 Operators on\nBoolean Values</h3>\n<p>The following functions define the semantics of operators on\nboolean values in <a href = \"#xquery\">[XQuery 1.0: An XML Query\nLanguage]</a> and <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a>:</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-boolean-equal\"><code>op:boolean-equal</code></a></td>\n<td>Equality of <code>xs:boolean</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-boolean-less-than\"><code>op:boolean-less-than</code></a></td>\n<td>A less-than operator on <code>xs:boolean</code> values:\n<code>false</code> is less than <code>true</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-boolean-greater-than\"><code>op:boolean-greater-than</code></a></td>\n<td>A greater-than operator on <code>xs:boolean</code> values:\n<code>true</code> is greater than <code>false</code>.</td>\n</tr>\n</tbody>\n</table>\n<p>The ordering operators <a href = \"#XPath_func-boolean-less-than\"><code>op:boolean-less-than</code></a> and\n<a href = \"#XPath_func-boolean-greater-than\"><code>op:boolean-greater-than</code></a>\nare provided for application purposes and for compatibility with\n<a href = \"#xpath\">[XML Path Language (XPath) Version 1.0]</a>. The\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> datatype <code>xs:boolean</code> is not ordered.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-boolean-equal\" id = \"XPath_func-boolean-equal\"></a>9.2.1\nop:boolean-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:boolean-equal</code>(<code class = \"arg\">$value1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>,\n<code class = \"arg\">$value2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if both arguments are\n<code>true</code> or if both arguments are <code>false</code>.\nReturns <code>false</code> if one of the arguments is\n<code>true</code> and the other argument is <code>false</code>.</p>\n<p>This function backs up the \"eq\" operator on\n<code>xs:boolean</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-boolean-less-than\" id = \"XPath_func-boolean-less-than\"></a>9.2.2 op:boolean-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:boolean-less-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if <code>$arg1</code> is\n<code>false</code> and <code>$arg2</code> is <code>true</code>.\nOtherwise, returns <code>false</code>.</p>\n<p>This function backs up the \"lt\" and \"ge\" operators on\n<code>xs:boolean</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-boolean-greater-than\" id = \"XPath_func-boolean-greater-than\"></a>9.2.3 op:boolean-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:boolean-greater-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:boolean</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if <code>$arg1</code> is\n<code>true</code> and <code>$arg2</code> is <code>false</code>.\nOtherwise, returns <code>false</code>.</p>\n<p>This function backs up the \"gt\" and \"le\" operators on\n<code>xs:boolean</code> values.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"boolean-value-functions\" id = \"boolean-value-functions\"></a>9.3 Functions on Boolean Values</h3>\n<p>The following functions are defined on boolean values:</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-not\"><code>fn:not</code></a></td>\n<td>Inverts the <code>xs:boolean</code> value of the argument.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-not\" id = \"XPath_func-not\"></a>9.3.1 fn:not</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:not</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: <code>$arg</code> is first reduced to an effective\nboolean value by applying the <a href = \"#XPath_func-boolean\"><code>fn:boolean()</code></a> function. Returns\n<code>true</code> if the effective boolean value is\n<code>false</code>, and <code>false</code> if the effective boolean\nvalue is <code>true</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-not-examples\" id = \"func-not-examples\"></a>9.3.1.1\nExamples</h5>\n<ul>\n<li>\n<p><code>fn:not(fn:true())</code> returns <code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:not(\"false\")</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"durations-dates-times\" id = \"durations-dates-times\"></a>10 Functions and Operators on\nDurations, Dates and Times</h2>\n<p>This section discusses operations on the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ndate and time types. It also discusses operations on two subtypes\nof <code>xs:duration</code> that are defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup>. See <a href = \"#duration-subtypes\"><b>10.3 Two Totally Ordered Subtypes of\nDuration</b></a>.</p>\n<p>See <a href = \"#Working-With-Timezones\">[Working With\nTimezones]</a> for a disquisition on working with date and time\nvalues with and without timezones.</p>\n<div class = \"div2\">\n<h3><a name = \"duration-date-time-types\" id = \"duration-date-time-types\"></a>10.1 Duration, Date and Time\nTypes</h3>\n<p>The operators described in this section are defined on the\nfollowing date and time types:</p>\n<ul>\n<li>\n<p>xs:dateTime</p>\n</li>\n<li>\n<p>xs:date</p>\n</li>\n<li>\n<p>xs:time</p>\n</li>\n<li>\n<p>xs:gYearMonth</p>\n</li>\n<li>\n<p>xs:gYear</p>\n</li>\n<li>\n<p>xs:gMonthDay</p>\n</li>\n<li>\n<p>xs:gMonth</p>\n</li>\n<li>\n<p>xs:gDay</p>\n</li>\n</ul>\n<p>Note that only equality is defined on\n<code>xs:gYearMonth</code>, <code>xs:gYear</code>,\n<code>xs:gMonthDay</code>, <code>xs:gMonth</code> and\n<code>xs:gDay</code> values.</p>\n<p>In addition, operators are defined on:</p>\n<ul>\n<li>\n<p>xs:duration</p>\n</li>\n</ul>\n<p>and on the <a href = \"#duration-subtypes\"><b>10.3 Two Totally\nOrdered Subtypes of Duration</b></a>:</p>\n<ul>\n<li>\n<p>xs:yearMonthDuration</p>\n</li>\n<li>\n<p>xs:dayTimeDuration</p>\n</li>\n</ul>\n<p>Note that no ordering relation is defined on\n<code>xs:duration</code> values.Two <code>xs:duration</code> values\nmay however be compared for equality. Operations on durations\n(including equality comparison, casting to string, and extraction\nof components) all treat the duration as normalized. This means\nthat the seconds and minutes components will always be less than\n60, the hours component less than 24, and the months component less\nthan 12. Thus, for example, a duration of 120 seconds always gives\nthe same result as a duration of two minutes.</p>\n<div class = \"div3\">\n<h4><a name = \"date-time-duration-conformance\" id = \"date-time-duration-conformance\"></a>10.1.1 Limits and\nPrecision</h4>\n<p>For a number of the above datatypes <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> extends the basic\n<a href = \"#ISO8601\">[ISO 8601]</a> lexical representations, such as\nYYYY-MM-DDThh:mm:ss.s for dateTime, by allowing a preceding minus\nsign, more than four digits to represent the year field — no\nmaximum is specified — and an unlimited number of digits for\nfractional seconds. Leap seconds are not supported.</p>\n<p>All <em>minimally conforming</em> processors <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> support\npositive year values with a minimum of 4 digits (i.e., YYYY) and a\nminimum fractional second precision of 1 millisecond or three\ndigits (i.e., s.sss). However, <em>conforming</em> processors\n<a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> set larger\n<a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> limits on the maximum number of digits they\nsupport in these two situations. Processors <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> also choose to support the year 0000 and years\nwith negative values. The results of operations on dates that cross\nthe year 0000 are <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>.</p>\n<p>A processor that limits the number of digits in date and time\ndatatype representations may encounter overflow and underflow\nconditions when it tries to execute the functions in <a href = \"#dateTime-arithmetic\"><b>10.8 Arithmetic Operators on Durations,\nDates and Times</b></a>. In these situations, the processor\n<a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> return P0M or\nPT0S in case of duration underflow and 00:00:00 in case of time\nunderflow. It <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> raise an error [<a href = \"#ERRFODT0001\" title = \"err:FODT0001\">err:FODT0001</a>] in case of overflow.</p>\n<p>The value spaces of the two totally ordered subtypes of\n<code>xs:duration</code> described in <a href = \"#duration-subtypes\"><b>10.3 Two Totally Ordered Subtypes of\nDuration</b></a> are <code>xs:integer</code> months for\n<code>xs:yearMonthDuration</code> and <code>xs:decimal</code>\nseconds for <code>xs:dayTimeDuration</code>. If a processor limits\nthe number of digits allowed in the representation of\n<code>xs:integer</code> and <code>xs:decimal</code> then overflow\nand underflow situations can arise when it tries to execute the\nfunctions in <a href = \"#duration-arithmetic\"><b>10.6 Arithmetic\nOperators on Durations</b></a>. In these situations the processor\n<a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> return zero in\ncase of numeric underflow and P0M or PT0S in case of duration\nunderflow. It <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> raise an error [<a href = \"#ERRFODT0002\" title = \"err:FODT0002\">err:FODT0002</a>] in case of overflow.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"date-time-values\" id = \"date-time-values\"></a>10.2\nDate/time datatype values</h3>\n<p>As defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dates-and-times\">Section\n3.3.2 Dates and Times</a><sup><small>DM</small></sup>,\n<code>xs:dateTime</code>, <code>xs:date</code>,\n<code>xs:time</code>, <code>xs:gYearMonth</code>,\n<code>xs:gYear</code>, <code>xs:gMonthDay</code>,\n<code>xs:gMonth</code>, <code>xs:gDay</code> values, referred to\ncollectively as date/time values, are represented as seven\ncomponents or properties: <code>year</code>, <code>month</code>,\n<code>day</code>, <code>hour</code>, <code>minute</code>,\n<code>second</code> and <code>timezone</code>. The value of the\nfirst five components are <code>xs:integer</code>s. The value of\nthe <code>second</code> component is an <code>xs:decimal</code> and\nthe value of the <code>timezone</code> component is an\n<code>xs:dayTimeDuration</code>. For all the date/time datatypes,\nthe <code>timezone</code> property is optional and may or may not\nbe present. Depending on the datatype, some of the remaining six\nproperties must be present and some must be absent. Absent, or\nmissing, properties are represented by the empty sequence. This\nvalue is referred to as the <em>local</em> value in that the value\nis in the given timezone. Before comparing or subtracting\n<code>xs:dateTime</code> values, this local value <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be translated\nor <em>normalized</em> to UTC.</p>\n<p>For <code>xs:time</code>, <code>\"00:00:00\"</code> and\n<code>\"24:00:00\"</code> are alternate lexical forms for the same\nvalue, whose canonical representation is <code>\"00:00:00\"</code>.\nFor <code>xs:dateTime</code>, a time component\n<code>\"24:00:00\"</code> translates to <code>\"00:00:00\"</code> of\nthe following day.</p>\n<div class = \"div3\">\n<h4><a name = \"date-time-lexical-mapping\" id = \"date-time-lexical-mapping\"></a>10.2.1 Examples</h4>\n<ul>\n<li>\n<p>An <code>xs:dateTime</code> with lexical representation\n<code>1999-05-31T05:00:00</code> is represented in the datamodel by\n<code>{1999, 5, 31, 5, 0, 0.0, ()}</code>.</p>\n</li>\n<li>\n<p>An <code>xs:dateTime</code> with lexical representation\n<code>1999-05-31T13:20:00-05:00</code> is represented by\n<code>{1999, 5, 31, 13, 20, 0.0, -PT5H}</code>.</p>\n</li>\n<li>\n<p>An <code>xs:dateTime</code> with lexical representation\n<code>1999-12-31T24:00:00</code> is represented by <code>{2000, 1,\n1, 0, 0, 0.0, ()}</code>.</p>\n</li>\n<li>\n<p>An <code>xs:date</code> with lexical representation\n<code>2005-02-28+8:00</code> is represented by <code>{2005, 2, 28,\n(), (), (), PT8H}</code>.</p>\n</li>\n<li>\n<p>An <code>xs:time</code> with lexical representation\n<code>24:00:00</code> is represented by <code>{(), (), (), 0, 0, 0,\n()}</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"duration-subtypes\" id = \"duration-subtypes\"></a>10.3 Two\nTotally Ordered Subtypes of Duration</h3>\n<p>Two totally ordered subtypes of <code>xs:duration</code> are\ndefined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> specification using the\nmechanisms described in <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a> for defining user-defined types.\nAdditional details about these types is given below.</p>\n<div class = \"div3\">\n<h4><a name = \"dt-yearMonthDuration\" id = \"dt-yearMonthDuration\"></a>10.3.1 xs:yearMonthDuration</h4>\n<p>[Definition] <code>xs:yearMonthDuration</code> is derived from\n<code>xs:duration</code> by restricting its lexical representation\nto contain only the year and month components. The value space of\n<code>xs:yearMonthDuration</code> is the set of\n<code>xs:integer</code> month values. The year and month components\nof <code>xs:yearMonthDuration</code> correspond to the Gregorian\nyear and month components defined in section 5.5.3.2 of <a href = \"#ISO8601\">[ISO 8601]</a>, respectively.</p>\n<div class = \"div4\">\n<h5><a name = \"lexical-yearMonthDuration\" id = \"lexical-yearMonthDuration\"></a>10.3.1.1 Lexical\nrepresentation</h5>\n<p>The lexical representation for <code>xs:yearMonthDuration</code>\nis the <a href = \"#ISO8601\">[ISO 8601]</a> reduced format PnYnM,\nwhere nY represents the number of years and nM the number of\nmonths. The values of the years and months components are not\nrestricted but allow an arbitrary unsigned\n<code>xs:integer</code>.</p>\n<p>An optional preceding minus sign ('-') is allowed to indicate a\nnegative duration. If the sign is omitted a positive duration is\nindicated. To indicate a <code>xs:yearMonthDuration</code> of 1\nyear, 2 months, one would write: P1Y2M. One could also indicate a\n<code>xs:yearMonthDuration</code> of minus 13 months as: -P13M.</p>\n<p>Reduced precision and truncated representations of this format\nare allowed provided they conform to the following:</p>\n<p>If the number of years or months in any expression equals zero\n(0), the number and its corresponding designator <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be omitted.\nHowever, at least one number and its designator <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be present.\nFor example, P1347Y and P1347M are allowed; P-1347M is not allowed,\nalthough -P1347M is allowed. P1Y2MT is not allowed. Also, P24YM is\nnot allowed, nor is PY43M since Y must have at least one preceding\ndigit and M must have one preceding digit.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"calculating-value-yearMonthDuration\" id = \"calculating-value-yearMonthDuration\"></a>10.3.1.2 Calculating the\nvalue from the lexical representation</h5>\n<p>The value of a <code>xs:yearMonthDuration</code> lexical form is\nobtained by multiplying the value of the years component by 12 and\nadding the value of the months component. The value is positive or\nnegative depending on the preceding sign.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"canonical-yearMonthDuration\" id = \"canonical-yearMonthDuration\"></a>10.3.1.3 Canonical\nrepresentation</h5>\n<p>The canonical representation of\n<code>xs:yearMonthDuration</code> restricts the value of the months\ncomponent to <code>xs:integer</code> values between 0 and 11, both\ninclusive. To convert from a non-canonical representation to the\ncanonical representation, the lexical representation is first\nconverted to a value in <code>xs:integer</code> months as defined\nabove. This value is then divided by 12 to obtain the value of the\nyears component of the canonical representation. The remaining\nnumber of months is the value of the months component of the\ncanonical representation. For negative durations, the canonical\nform is calculated using the absolute value of the duration and a\nnegative sign is prepended to it. If a component has the value zero\n(0), then the number and the designator for that component\n<a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be omitted.\nHowever, if the value is zero (0) months, the canonical form is\n\"P0M\".</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"order-yearMonthDuration\" id = \"order-yearMonthDuration\"></a>10.3.1.4 Order relation on\nxs:yearMonthDuration</h5>\n<p>Let the function that calculates the value of an\n<code>xs:yearMonthDuration</code> in the manner described above be\ncalled V(d). Then for two <code>xs:yearMonthDuration</code> values\nx and y, x &gt; y if and only if V(x) &gt; V(y). The order relation\non <code>yearMonthDuration</code> is a total order.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"dt-dayTimeDuration\" id = \"dt-dayTimeDuration\"></a>10.3.2\nxs:dayTimeDuration</h4>\n<p>[Definition] <code>xs:dayTimeDuration</code> is derived from\n<code>xs:duration</code> by restricting its lexical representation\nto contain only the days, hours, minutes and seconds components.\nThe value space of <code>xs:dayTimeDuration</code> is the set of\nfractional second values. The components of\n<code>xs:dayTimeDuration</code> correspond to the day, hour, minute\nand second components defined in Section 5.5.3.2 of <a href = \"#ISO8601\">[ISO 8601]</a>, respectively.</p>\n<div class = \"div4\">\n<h5><a name = \"lexical-dayTimeDuration\" id = \"lexical-dayTimeDuration\"></a>10.3.2.1 Lexical representation</h5>\n<p>The lexical representation for <code>xs:dayTimeDuration</code>\nis the <a href = \"#ISO8601\">[ISO 8601]</a> truncated format\nPnDTnHnMnS, where nD represents the number of days, T is the\ndate/time separator, nH the number of hours, nM the number of\nminutes and nS the number of seconds.</p>\n<p>The values of the days, hours and minutes components are not\nrestricted, but allow an arbitrary unsigned\n<code>xs:integer</code>. Similarly, the value of the seconds\ncomponent allows an arbitrary unsigned <code>xs:decimal</code>. An\noptional minus sign ('-') is allowed to precede the 'P', indicating\na negative duration. If the sign is omitted, the duration is\npositive. See also <a href = \"#ISO8601\">[ISO 8601]</a> Date and Time\nFormats.</p>\n<p>For example, to indicate a duration of 3 days, 10 hours and 30\nminutes, one would write: P3DT10H30M. One could also indicate a\nduration of minus 120 days as: -P120D. Reduced precision and\ntruncated representations of this format are allowed, provided they\nconform to the following:</p>\n<ul>\n<li>\n<p>If the number of days, hours, minutes, or seconds in any\nexpression equals zero (0), the number and its corresponding\ndesignator <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> be omitted.\nHowever, at least one number and its designator <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be\npresent.</p>\n</li>\n<li>\n<p>The seconds part <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> have a decimal fraction.</p>\n</li>\n<li>\n<p>The designator 'T' <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> be absent if and only if all of the time items\nare absent. The designator 'P' <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> always be present.</p>\n</li>\n</ul>\n<p>For example, P13D, PT47H, P3DT2H, -PT35.89S and P4DT251M are all\nallowed. P-134D is not allowed (invalid location of minus sign),\nalthough -P134D is allowed.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"calculating-value-dayTimeDuration\" id = \"calculating-value-dayTimeDuration\"></a>10.3.2.2 Calculating the\nvalue of a xs:dayTimeDuration from the lexical representation</h5>\n<p>The value of a <code>xs:dayTimeDuration</code> lexical form in\nfractional seconds is obtained by converting the days, hours,\nminutes and seconds value to fractional seconds using the\nconversion rules: 24 hours = 1 day, 60 minutes = 1 hour and 60\nseconds = 1 minute.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"canonical-dayTimeDuration\" id = \"canonical-dayTimeDuration\"></a>10.3.2.3 Canonical\nrepresentation</h5>\n<p>The canonical representation of <code>xs:dayTimeDuration</code>\nrestricts the value of the hours component to\n<code>xs:integer</code> values between 0 and 23, both inclusive;\nthe value of the minutes component to <code>xs:integer</code>\nvalues between 0 and 59; both inclusive; and the value of the\nseconds component to <code>xs:decimal</code> valued from 0.0 to\n59.999... (see <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a>, Appendix D).</p>\n<p>To convert from a non-canonical representation to the canonical\nrepresentation, the value of the lexical form in fractional seconds\nis first calculated in the manner described above. The value of the\ndays component in the canonical form is then calculated by dividing\nthe value by 86,400 (24*60*60). The remainder is in fractional\nseconds. The value of the hours component in the canonical form is\ncalculated by dividing this remainder by 3,600 (60*60). The\nremainder is again in fractional seconds. The value of the minutes\ncomponent in the canonical form is calculated by dividing this\nremainder by 60. The remainder in fractional seconds is the value\nof the seconds component in the canonical form. For negative\ndurations, the canonical form is calculated using the absolute\nvalue of the duration and a negative sign is prepended to it. If a\ncomponent has the value zero (0) then the number and the designator\nfor that component must be omitted. However, if all the components\nof the lexical form are zero (0), the canonical form is \"PT0S\".</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"order-dayTimeDuration\" id = \"order-dayTimeDuration\"></a>10.3.2.4 Order relation on\nxs:dayTimeDuration</h5>\n<p>Let the function that calculates the value of a\n<code>xs:dayTimeDuration</code> in the manner described above be\ncalled <em>V(d)</em>. Then for two <code>xs:dayTimeDuration</code>\nvalues <em>x</em> and <em>y, x &gt; y</em> if and only if <em>V(x)\n&gt; V(y)</em>. The order relation on\n<code>xs:dayTimeDuration</code> is a total order.</p>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"comp.duration.datetime\" id = \"comp.duration.datetime\"></a>10.4 Comparison Operators on Duration,\nDate and Time Values</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Operator</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-yearMonthDuration-less-than\"><code>op:yearMonthDuration-less-than</code></a></td>\n<td>Less-than comparison on <code>xs:yearMonthDuration</code>\nvalues</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-yearMonthDuration-greater-than\"><code>op:yearMonthDuration-greater-than</code></a></td>\n<td>Greater-than comparison on <code>xs:yearMonthDuration</code>\nvalues</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-dayTimeDuration-less-than\"><code>op:dayTimeDuration-less-than</code></a></td>\n<td>Less-than comparison on <code>xs:dayTimeDuration</code>\nvalues</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-dayTimeDuration-greater-than\"><code>op:dayTimeDuration-greater-than</code></a></td>\n<td>Greater-than comparison on <code>xs:dayTimeDuration</code>\nvalues</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-duration-equal\"><code>op:duration-equal</code></a></td>\n<td>Equality comparison on <code>xs:duration</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a></td>\n<td>Equality comparison on <code>xs:dateTime</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-dateTime-less-than\"><code>op:dateTime-less-than</code></a></td>\n<td>Less-than comparison on <code>xs:dateTime</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-dateTime-greater-than\"><code>op:dateTime-greater-than</code></a></td>\n<td>Greater-than comparison on <code>xs:dateTime</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-date-equal\"><code>op:date-equal</code></a></td>\n<td>Equality comparison on <code>xs:date</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-date-less-than\"><code>op:date-less-than</code></a></td>\n<td>Less-than comparison on <code>xs:date</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-date-greater-than\"><code>op:date-greater-than</code></a></td>\n<td>Greater-than comparison on <code>xs:date</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-time-equal\"><code>op:time-equal</code></a></td>\n<td>Equality comparison on <code>xs:time</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-time-less-than\"><code>op:time-less-than</code></a></td>\n<td>Less-than comparison on <code>xs:time</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-time-greater-than\"><code>op:time-greater-than</code></a></td>\n<td>Greater-than comparison on <code>xs:time</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-gYearMonth-equal\"><code>op:gYearMonth-equal</code></a></td>\n<td>Equality comparison on <code>xs:gYearMonth</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-gYear-equal\"><code>op:gYear-equal</code></a></td>\n<td>Equality comparison on <code>xs:gYear</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-gMonthDay-equal\"><code>op:gMonthDay-equal</code></a></td>\n<td>Equality comparison on <code>xs:gMonthDay</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-gMonth-equal\"><code>op:gMonth-equal</code></a></td>\n<td>Equality comparison on <code>xs:gMonth</code> values</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-gDay-equal\"><code>op:gDay-equal</code></a></td>\n<td>Equality comparison on <code>xs:gDay</code> values</td>\n</tr>\n</tbody>\n</table>\n<p>The following comparison operators are defined on the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ndate, time and duration datatypes. Each operator takes two operands\nof the same type and returns an <code>xs:boolean</code> result. As\ndiscussed in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a>, the order relation on <code>xs:duration</code>\nis not a total order but, rather, a partial order. For this reason,\nonly equality is defined on <code>xs:duration</code>. A full\ncomplement of comparison and arithmetic functions are defined on\nthe two subtypes of duration described in <a href = \"#duration-subtypes\"><b>10.3 Two Totally Ordered Subtypes of\nDuration</b></a> which do have a total order.</p>\n<p><a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> also states that the order relation on date and time\ndatatypes is not a total order but a partial order because these\ndatatypes may or may not have a timezone. This is handled as\nfollows. If either operand to a comparison function on date or time\nvalues does not have an (explicit) timezone then, for the purpose\nof the operation, an implicit timezone, provided by the dynamic\ncontext <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>, is assumed to be\npresent as part of the value. This creates a total order for all\ndate and time values.</p>\n<p>An <code>xs:dateTime</code> can be considered to consist of\nseven components: <code>year</code>, <code>month</code>,\n<code>day</code>, <code>hour</code>, <code>minute</code>,\n<code>second</code> and <code>timezone</code>. For\n<code>xs:dateTime</code> six components: <code>year</code>,\n<code>month</code>, <code>day</code>, <code>hour</code>,\n<code>minute</code> and <code>second</code> are required and\n<code>timezone</code> is optional. For other date/time values, of\nthe first six components, some are required and others must be\nabsent or missing. <code>Timezone</code> is always optional. For\nexample, for <code>xs:date</code>, the <code>year</code>,\n<code>month</code> and <code>day</code> components are required and\n<code>hour</code>, <code>minute</code> and <code>second</code>\ncomponents must be absent; for <code>xs:time</code> the\n<code>hour</code>, <code>minute</code> and <code>second</code>\ncomponents are required and <code>year</code>, <code>month</code>\nand <code>day</code> are missing; for <code>xs:gDay</code>,\n<code>day</code> is required and <code>year</code>,\n<code>month</code>, <code>hour</code>, <code>minute</code> and\n<code>second</code> are missing.</p>\n<p>Values of the date/time datatypes <code>xs:time</code>,\n<code>xs:gMonthDay</code>, <code>xs:gMonth</code>, and\n<code>xs:gDay</code>, can be considered to represent a sequence of\nrecurring time instants or time periods. An <code>xs:time</code>\noccurs every day. An <code>xs:gMonth</code> occurs every year.\nComparison operators on these datatypes compare the starting\ninstants of equivalent occurrences in the recurring series. These\n<code>xs:dateTime</code> values are calculated as described\nbelow.</p>\n<p>Comparison operators on <code>xs:date</code>,\n<code>xs:gYearMonth</code> and <code>xs:gYear</code> compare their\nstarting instants. These <code>xs:dateTime</code> values are\ncalculated as described below.</p>\n<p>The starting instant of an occurrence of a date/time value is an\n<code>xs:dateTime</code> calculated by filling in the missing\ncomponents of the local value from a reference\n<code>xs:dateTime</code>. If the value filled in for a missing day\ncomponent exceeds the maximum day value for the month, the last day\nof the month is used. Suppose, for example, that the reference\n<code>xs:dateTime</code> is <code>1972-12-31T00:00:00</code> and\nthe <code>xs:date</code> value to be compared is\n<code>1993-03-31</code>. Filling in the time components from the\nreference <code>xs:dateTime</code> we get\n<code>1993-03-31T00:00:00</code> which is the starting instant of\nthat day. Similarly, if the <code>xs:time</code> value\n<code>12:30:00</code> is to be compared, we fill in the missing\ncomponents from the reference <code>xs:dateTime</code> and we get\n<code>1972-12-31T12:30:00</code> which is the time on that day. For\nan <code>xs:gYearMonth</code> value of <code>1976-02</code> we fill\nin the missing components, adjust for the last day in the month and\nget <code>1976-02-29T00:00:00</code>.</p>\n<p>If the <code>xs:time</code> value written as\n<code>24:00:00</code> is to be compared, filling in the missing\ncomponents gives <code>1972-12-31T00:00:00</code>, because\n<code>24:00:00</code> is an alternative representation of\n<code>00:00:00</code> (the lexical value <code>\"24:00:00\"</code> is\nconverted to the time components {0,0,0} before the missing\ncomponents are filled in). This has the consequence that when\nordering <code>xs:time</code> values, <code>24:00:00</code> is\nconsidered to be earlier than <code>23:59:59</code>. However, when\nordering <code>xs:dateTime</code> values, a time component of\n<code>24:00:00</code> is considered equivalent to\n<code>00:00:00</code> on the following day.</p>\n<p>Note that the reference <code>xs:dateTime</code> does not have a\ntimezone. The <code>timezone</code> component is never filled in\nfrom the reference <code>xs:dateTime</code>. In some cases, if the\ndate/time value does not have a timezone, the implicit timezone\nfrom the dynamic context is used as the timezone.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This proposal uses the reference <code>xs:dateTime\n1972-12-31T00:00:00</code> in the description of the comparison\noperators. Implementations are allowed to use other reference\n<code>xs:dateTime</code> values as long as they yield the same\nresults. The reference <code>xs:dateTime</code> used must meet the\nfollowing constraints: when it is used to supply components into\n<code>xs:gMonthDay</code> values, the year must allow for February\n29 and so must be a leap year; when it is used to supply missing\ncomponents into <code>xs:gDay</code> values, the month must allow\nfor 31 days. Different reference <code>xs:dateTime</code> values\nmay be used for different operators.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-yearMonthDuration-less-than\" id = \"XPath_func-yearMonthDuration-less-than\"></a>10.4.1\nop:yearMonthDuration-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:yearMonthDuration-less-than</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is less than <code>$arg2</code>. Returns\n<code>false</code> otherwise.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on\n<code>xs:yearMonthDuration</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-yearMonthDuration-greater-than\" id = \"XPath_func-yearMonthDuration-greater-than\"></a>10.4.2\nop:yearMonthDuration-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:yearMonthDuration-greater-than</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is greater than <code>$arg2</code>. Returns\n<code>false</code> otherwise.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on\n<code>xs:yearMonthDuration</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-dayTimeDuration-less-than\" id = \"XPath_func-dayTimeDuration-less-than\"></a>10.4.3\nop:dayTimeDuration-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:dayTimeDuration-less-than</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is less than <code>$arg2</code>. Returns\n<code>false</code> otherwise.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on\n<code>xs:dayTimeDuration</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-dayTimeDuration-greater-than\" id = \"XPath_func-dayTimeDuration-greater-than\"></a>10.4.4\nop:dayTimeDuration-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:dayTimeDuration-greater-than</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if\n<code>$arg1</code> is greater than <code>$arg2</code>. Returns\n<code>false</code> otherwise.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on\n<code>xs:dayTimeDuration</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-duration-equal\" id = \"XPath_func-duration-equal\"></a>10.4.5 op:duration-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:duration-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the\n<code>xs:yearMonthDuration</code> and the\n<code>xs:dayTimeDuration</code> components of <code>$arg1</code>\nand <code>$arg2</code> compare equal respectively. Returns\n<code>false</code> otherwise.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:duration</code> values.</p>\n<p>Note that this function, like any other, may be applied to\narguments that are derived from the types given in the function\nsignature, including the two subtypes\n<code>xs:dayTimeDuration</code> and\n<code>xs:yearMonthDuration</code>. With the exception of the\nzero-length duration, no instance of\n<code>xs:dayTimeDuration</code> can ever be equal to an instance of\n<code>xs:yearMonthDuration</code>.</p>\n<p>The semantics of this function are:</p>\n<div class = \"exampleInner\">\n<pre>\nxs:yearMonthDuration($arg1) div xs:yearMonthDuration('P1M')  eq\nxs:yearMonthDuration($arg2) div xs:yearMonthDuration('P1M')\n    and\nxs:dayTimeDuration($arg1) div xs:dayTimeDuration('PT1S')  eq\nxs:dayTimeDuration($arg2) div xs:dayTimeDuration('PT1S')\n</pre></div>\n<p>that is, the function returns <code>true</code> if the months\nand seconds values of the two durations are equal.</p>\n<div class = \"div4\">\n<h5><a name = \"func-duration-equal-examples\" id = \"func-duration-equal-examples\"></a>10.4.5.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:duration-equal(xs:duration(\"P1Y\"),\nxs:duration(\"P12M\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:duration(\"PT24H\"),\nxs:duration(\"P1D\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:duration(\"P1Y\"),\nxs:duration(\"P365D\"))</code> returns <code>false</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:yearMonthDuration(\"P0Y\"),\nxs:dayTimeDuration(\"P0D\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:yearMonthDuration(\"P1Y\"),\nxs:dayTimeDuration(\"P365D\"))</code> returns <code>false</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:yearMonthDuration(\"P2Y\"),\nxs:yearMonthDuration(\"P24M\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:dayTimeDuration(\"P10D\"),\nxs:dayTimeDuration(\"PT240H\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:duration(\"P2Y0M0DT0H0M0S\"),\nxs:yearMonthDuration(\"P24M\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:duration-equal(xs:duration(\"P0Y0M10D\"),\nxs:dayTimeDuration(\"PT240H\"))</code> returns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-dateTime-equal\" id = \"XPath_func-dateTime-equal\"></a>10.4.6 op:dateTime-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:dateTime-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> is equal to the value of <code>$arg2</code>\naccording to the algorithm defined in section 3.2.7.4 of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\n\"Order relation on dateTime\" for <code>xs:dateTime</code> values\nwith timezones. Returns <code>false</code> otherwise.</p>\n<p>This function backs up the \"eq\", \"ne\", \"le\" and \"ge\" operators\non <code>xs:dateTime</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-dateTime-equal-examples\" id = \"func-dateTime-equal-examples\"></a>10.4.6.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>.</p>\n<ul>\n<li>\n<p>\n<code>op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00-01:00\"),\nxs:dateTime(\"2002-04-02T17:00:00+04:00\"))</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"),\nxs:dateTime(\"2002-04-02T23:00:00+06:00\"))</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"),\nxs:dateTime(\"2002-04-02T17:00:00\"))</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>op:dateTime-equal(xs:dateTime(\"2002-04-02T12:00:00\"),\nxs:dateTime(\"2002-04-02T12:00:00\"))</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p>\n<code>op:dateTime-equal(xs:dateTime(\"2002-04-02T23:00:00-04:00\"),\nxs:dateTime(\"2002-04-03T02:00:00-01:00\"))</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:dateTime-equal(xs:dateTime(\"1999-12-31T24:00:00\"),\nxs:dateTime(\"2000-01-01T00:00:00\"))</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:dateTime-equal(xs:dateTime(\"2005-04-04T24:00:00\"),\nxs:dateTime(\"2005-04-04T00:00:00\"))</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-dateTime-less-than\" id = \"XPath_func-dateTime-less-than\"></a>10.4.7 op:dateTime-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:dateTime-less-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> is less than the value of <code>$arg2</code>\naccording to the algorithm defined in section 3.2.7.4 of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\n\"Order relation on dateTime\" for <code>xs:dateTime</code> values\nwith timezones. Returns <code>false</code> otherwise.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on\n<code>xs:dateTime</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-dateTime-greater-than\" id = \"XPath_func-dateTime-greater-than\"></a>10.4.8\nop:dateTime-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:dateTime-greater-than</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> is greater than the value of <code>$arg2</code>\naccording to the algorithm defined in section 3.2.7.4 of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\n\"Order relation on dateTime\" for <code>xs:dateTime</code> values\nwith timezones. Returns <code>false</code> otherwise.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on\n<code>xs:dateTime</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-date-equal\" id = \"XPath_func-date-equal\"></a>10.4.9\nop:date-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:date-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the starting\ninstant of <code>$arg1</code> is equal to starting instant of\n<code>$arg2</code>. Returns <code>false</code> otherwise.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at time <code>00:00:00</code> on that\ndate.</p>\n<p>The two starting instants are compared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\", \"ne\", \"le\" and \"ge\" operators\non <code>xs:date</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-date-equal-examples\" id = \"func-date-equal-examples\"></a>10.4.9.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:date-equal(xs:date(\"2004-12-25Z\"),\nxs:date(\"2004-12-25+07:00\"))</code> returns <code>false</code>. The\nstarting instants are\n<code>xs:dateTime(\"2004-12-25T00:00:00Z\")</code> and\n<code>xs:dateTime(\"2004-12-25T00:00:00+07:00\")</code>. These are\nnormalized to <code>xs:dateTime(\"2004-12-25T00:00:00Z\")</code> and\n<code>xs:dateTime(\"2004-12-24T17:00:00Z\")</code>.</p>\n</li>\n<li>\n<p><code>op:date-equal(xs:date(\"2004-12-25-12:00\"),\nxs:date(\"2004-12-26+12:00\"))</code> returns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-date-less-than\" id = \"XPath_func-date-less-than\"></a>10.4.10 op:date-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:date-less-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the starting\ninstant of <code>$arg1</code> is less than the starting instant of\n<code>$arg2</code>. Returns <code>false</code> otherwise.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at time <code>00:00:00</code> on that\ndate.</p>\n<p>The two starting instants are compared using <a href = \"#XPath_func-dateTime-less-than\"><code>op:dateTime-less-than</code></a>.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on\n<code>xs:date</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-date-less-than-examples\" id = \"func-date-less-than-examples\"></a>10.4.10.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:date-less-than(xs:date(\"2004-12-25Z\"),\nxs:date(\"2004-12-25-05:00\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:date-less-than(xs:date(\"2004-12-25-12:00\"),\nxs:date(\"2004-12-26+12:00\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-date-greater-than\" id = \"XPath_func-date-greater-than\"></a>10.4.11 op:date-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:date-greater-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the starting\ninstant of <code>$arg1</code> is greater than the starting instant\nof <code>$arg2</code>. Returns <code>false</code> otherwise.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at time <code>00:00:00</code> on that\ndate.</p>\n<p>The two starting instants are compared using <a href = \"#XPath_func-dateTime-greater-than\"><code>op:dateTime-greater-than</code></a>.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on\n<code>xs:date</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"date-greater-than-examples\" id = \"date-greater-than-examples\"></a>10.4.11.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:date-greater-than(xs:date(\"2004-12-25Z\"),\nxs:date(\"2004-12-25+07:00\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:date-greater-than(xs:date(\"2004-12-25-12:00\"),\nxs:date(\"2004-12-26+12:00\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-time-equal\" id = \"XPath_func-time-equal\"></a>10.4.12\nop:time-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:time-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> converted to an <code>xs:dateTime</code> using\nthe date components from the reference <code>xs:dateTime</code> is\nequal to the value of <code>$arg2</code> converted to an\n<code>xs:dateTime</code> using the date components from the same\nreference <code>xs:dateTime</code>. Returns <code>false</code>\notherwise.</p>\n<p>The two <code>xs:dateTime</code> values are compared using\n<a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\", \"ne\", \"le\" and \"ge\" operators\non <code>xs:time</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-time-equals-examples\" id = \"func-time-equals-examples\"></a>10.4.12.1 Examples</h5>\n<p>Assume that the date components from the reference\n<code>xs:dateTime</code> correspond to <code>1972-12-31</code>.</p>\n<ul>\n<li>\n<p><code>op:time-equal(xs:time(\"08:00:00+09:00\"),\nxs:time(\"17:00:00-06:00\"))</code> returns <code>false</code>. The\n<code>xs:dateTime</code>s calculated using the reference date\ncomponents are <code>1972-12-31T08:00:00+09:00</code> and\n<code>1972-12-31T17:00:00-06:00</code>. These normalize to\n<code>1972-12-30T23:00:00Z</code> and\n<code>1972-12-31T23:00:00</code>.</p>\n</li>\n<li>\n<p><code>op:time-equal(xs:time(\"21:30:00+10:30\"),\nxs:time(\"06:00:00-05:00\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:time-equal(xs:time(\"24:00:00+01:00\"),\nxs:time(\"00:00:00+01:00\"))</code> returns <code>true</code>. This\nnot the result one might expect. For <code>xs:dateTime</code>\nvalues, a time of <code>24:00:00</code> is equivalent to\n<code>00:00:00</code> on the following day. For\n<code>xs:time</code>, the normalization from <code>24:00:00</code>\nto <code>00:00:00</code> happens before the <code>xs:time</code> is\nconverted into an <code>xs:dateTime</code> for the purpose of the\nequality comparison. For <code>xs:time</code>, any operation on\n<code>24:00:00</code> produces the same result as the same\noperation on <code>00:00:00</code> because these are two different\nlexical representations of the same value.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-time-less-than\" id = \"XPath_func-time-less-than\"></a>10.4.13 op:time-less-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:time-less-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> converted to an <code>xs:dateTime</code> using\nthe date components from the reference <code>xs:dateTime</code> is\nless than the normalized value of <code>$arg2</code> converted to\nan <code>xs:dateTime</code> using the date components from the same\nreference <code>xs:dateTime</code>. Returns <code>false</code>\notherwise.</p>\n<p>The two <code>xs:dateTime</code> values are compared using\n<a href = \"#XPath_func-dateTime-less-than\"><code>op:dateTime-less-than</code></a>.</p>\n<p>This function backs up the \"lt\" and \"le\" operators on\n<code>xs:time</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-time-less-than-examples\" id = \"func-time-less-than-examples\"></a>10.4.13.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>.</p>\n<ul>\n<li>\n<p><code>op:time-less-than(xs:time(\"12:00:00\"),\nxs:time(\"23:00:00+06:00\"))</code> returns <code>false</code>.</p>\n</li>\n<li>\n<p><code>op:time-less-than(xs:time(\"11:00:00\"),\nxs:time(\"17:00:00Z\"))</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>op:time-less-than(xs:time(\"23:59:59\"),\nxs:time(\"24:00:00\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-time-greater-than\" id = \"XPath_func-time-greater-than\"></a>10.4.14 op:time-greater-than</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:time-greater-than</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the value of\n<code>$arg1</code> converted to an <code>xs:dateTime</code> using\nthe date components from the reference <code>xs:dateTime</code> is\ngreater than the value of <code>$arg2</code> converted to an\n<code>xs:dateTime</code> using the date components from the same\nreference <code>xs:dateTime</code>. Returns <code>false</code>\notherwise.</p>\n<p>The two <code>xs:dateTime</code> values are compared using\n<a href = \"#XPath_func-dateTime-greater-than\"><code>op:dateTime-greater-than</code></a>.</p>\n<p>This function backs up the \"gt\" and \"ge\" operators on\n<code>xs:time</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-time-greater-than-examples\" id = \"func-time-greater-than-examples\"></a>10.4.14.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:time-greater-than(xs:time(\"08:00:00+09:00\"),\nxs:time(\"17:00:00-06:00\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-gYearMonth-equal\" id = \"XPath_func-gYearMonth-equal\"></a>10.4.15 op:gYearMonth-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:gYearMonth-equal</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gYearMonth</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gYearMonth</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the\n<code>xs:dateTime</code>s representing the starting instants of\n<code>$arg1</code> and <code>$arg2</code> compare equal. The\nstarting instants of <code>$arg1</code> and <code>$arg2</code> are\ncalculated by adding the missing components of <code>$arg1</code>\nand <code>$arg2</code> from the <code>xs:dateTime</code> template\n<code>xxxx-xx-ddT00:00:00</code> where <code>dd</code> represents\nthe last day of the <code>month</code> component in\n<code>$arg1</code> or <code>$arg2</code>. Returns\n<code>false</code> otherwise.</p>\n<p>The two <code>xs:dateTime</code> values representing the\nstarting instants of <code>$arg1</code> and <code>$arg2</code> are\ncompared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:gYearMonth</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-gYearMonth-equal-examples\" id = \"func-gYearMonth-equal-examples\"></a>10.4.15.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>.</p>\n<ul>\n<li>\n<p><code>op:gYearMonth-equal(xs:gYearMonth(\"1976-02\"),\nxs:gYearMonth(\"1976-03Z\"))</code> returns <code>false</code>. The\nstarting instants are <code>1972-02-29T00:00:00-05:00</code> and\n<code>1972-03-31T00:00:00Z</code>, respectively.</p>\n</li>\n<li>\n<p><code>op:gYearMonth-equal(xs:gYearMonth(\"1976-03\"),\nxs:gYearMonth(\"1976-03Z\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-gYear-equal\" id = \"XPath_func-gYear-equal\"></a>10.4.16\nop:gYear-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:gYear-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gYear</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gYear</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the\n<code>xs:dateTime</code>s representing the starting instants of\n<code>$arg1</code> and <code>$arg2</code> compare equal. The\nstarting instants of <code>$arg1</code> and <code>$arg2</code> are\ncalculated by adding the missing components of <code>$arg1</code>\nand <code>$arg2</code> from a <code>xs:dateTime</code> template\nsuch as <code>xxxx-01-01T00:00:00</code>. Returns\n<code>false</code> otherwise.</p>\n<p>The two <code>xs:dateTime</code> values representing the\nstarting instants of <code>$arg1</code> and <code>$arg2</code> are\ncompared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:gYear</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-gYear-equal-examples\" id = \"func-gYear-equal-examples\"></a>10.4.16.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>. Assume, also, that the\n<code>xs:dateTime</code> template is\n<code>xxxx-01-01T00:00:00</code>.</p>\n<ul>\n<li>\n<p><code>op:gYear-equal(xs:gYear(\"2005-12:00\"),\nxs:gYear(\"2005+12:00\"))</code> returns <code>false</code>. The\nstarting instants are <code>2005-01-01T00:00:00-12:00</code> and\n<code>2005-01-01T00:00:00+12:00</code>, respectively, and normalize\nto <span><code>2005-01-01T12:00:00Z</code></span> and\n<code>2004-12-31T12:00:00Z</code>.</p>\n</li>\n<li>\n<p><code>op:gYear-equal(xs:gYear(\"1976-05:00\"),\nxs:gYear(\"1976\"))</code> returns <code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-gMonthDay-equal\" id = \"XPath_func-gMonthDay-equal\"></a>10.4.17 op:gMonthDay-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:gMonthDay-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gMonthDay</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gMonthDay</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p><span>Summary:</span> Returns <code>true</code> if and only if\nthe <code>xs:dateTime</code>s representing the starting instants of\nequivalent occurrences of <code>$arg1</code> and <code>$arg2</code>\ncompare equal. The starting instants of equivalent occurrences of\n<code>$arg1</code> and <code>$arg2</code> are calculated by adding\nthe missing components of <code>$arg1</code> and <code>$arg2</code>\nfrom an <code>xs:dateTime</code> template such as\n<code>1972-xx-xxT00:00:00</code>. Returns <code>false</code>\notherwise.</p>\n<p>The two <code>xs:dateTime</code> values representing the\nstarting instants of equivalent occurrences of <code>$arg1</code>\nand <code>$arg2</code> are compared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:gMonthDay</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-gMonthDay-equal-examples\" id = \"func-gMonthDay-equal-examples\"></a>10.4.17.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>. Assume, also, that the\n<code>xs:dateTime</code> template is\n<code>1976-xx-xxT00:00:00</code>.</p>\n<ul>\n<li>\n<p><code>op:gMonthDay-equal(xs:gMonthDay(\"--12-25-14:00\"),\nxs:gMonthDay(\"--12-26+10:00\"))</code> returns <code>true</code>.\nThe starting instants are <code>1976-12-25T00:00:00-14:00</code>\nand <code>1976-12-26T00:00:00+10:00</code>, respectively, and\nnormalize to <code>1976-12-25T14:00:00Z</code> and\n<code>1976-12-25T14:00:00Z</code>.</p>\n</li>\n<li>\n<p><code>op:gMonthDay-equal(xs:gMonthDay(\"--12-25\"),\nxs:gMonthDay(\"--12-26Z\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-gMonth-equal\" id = \"XPath_func-gMonth-equal\"></a>10.4.18\nop:gMonth-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:gMonth-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gMonth</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gMonth</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the\n<code>xs:dateTime</code>s representing the starting instants of\nequivalent occurrences of <code>$arg1</code> and <code>$arg2</code>\ncompare equal. The starting instants of equivalent occurrences of\n<code>$arg1</code> and <code>$arg2</code> are calculated by adding\nthe missing components of <code>$arg1</code> and <code>$arg2</code>\nfrom an <code>xs:dateTime</code> template such as\n<code>1972-xx-ddT00:00:00</code> where <code>dd</code> represents\nthe last day of the month component in <code>$arg1</code> or\n<code>$arg2</code>. Returns <code>false</code> otherwise.</p>\n<p>The two <code>xs:dateTime</code> values representing the\nstarting instants of equivalent occurrences of <code>$arg1</code>\nand <code>$arg2</code> are compared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:gMonth</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-gMonth-equal-examples\" id = \"func-gMonth-equal-examples\"></a>10.4.18.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>. Assume, also, that the\n<code>xs:dateTime</code> template is\n<code>1972-xx-29T00:00:00</code>.</p>\n<ul>\n<li>\n<p><span><code>op:gMonth-equal(xs:gMonth(\"--12-14:00\"),\nxs:gMonth(\"--12+10:00\"))</code></span> returns <code>false</code>.\nThe starting instants are <code>1972-12-29T00:00:00-14:00</code>\nand <code>1972-12-29T00:00:00+10:00</code>, respectively, and\nnormalize to <code>1972-12-29T14:00:00Z</code> and\n<code>1972-12-28T14:00:00Z</code>.</p>\n</li>\n<li>\n<p><code>op:gMonth-equal(xs:gMonth(\"--12\"),\nxs:gMonth(\"--12Z\"))</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-gDay-equal\" id = \"XPath_func-gDay-equal\"></a>10.4.19\nop:gDay-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:gDay-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gDay</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:gDay</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if and only if the\n<code>xs:dateTime</code>s representing the starting instants of\nequivalent occurrences of <code>$arg1</code> and <code>$arg2</code>\ncompare equal. The starting instants of equivalent occurrences of\n<code>$arg1</code> and <code>$arg2</code> are calculated by adding\nthe missing components of <code>$arg1</code> and <code>$arg2</code>\nfrom an <code>xs:dateTime</code> template such as\n<code>1972-12-xxT00:00:00</code>. Returns <code>false</code>\notherwise.</p>\n<p>The two <code>xs:dateTime</code> values representing the\nstarting instants of equivalent occurrences of <code>$arg1</code>\nand <code>$arg2</code> are compared using <a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:gDay</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-gDay-equal-examples\" id = \"func-gDay-equal-examples\"></a>10.4.19.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>. Assume, also, that the\n<code>xs:dateTime</code> template is\n<code>1976-12-xxT00:00:00</code>.</p>\n<ul>\n<li>\n<p><code>op:gDay-equal(xs:gDay(\"---25-14:00\"),\nxs:gDay(\"---25+10:00\"))</code> returns <code>false</code>. The\nstarting instants are <code>1972-12-25T00:00:00-14:00</code> and\n<code>1972-12-25T00:00:00+10:00</code>, respectively, and normalize\nto <code>1972-12-25T14:00:00Z</code> and\n<code>1972-12-24T14:00:00Z</code>.</p>\n</li>\n<li>\n<p><code>op:gDay-equal(xs:gDay(\"---12\"), xs:gDay(\"---12Z\"))</code>\nreturns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"component-extraction-functions\" id = \"component-extraction-functions\"></a>10.5 Component Extraction\nFunctions on Durations, Dates and Times</h3>\n<p>The duration, date and time datatypes may be considered to be\ncomposite datatypes in that they contain distinct properties or\ncomponents. The extraction functions specified below extract a\nsingle component from a duration, date or time value. For the\ndate/time datatypes the local value is used. For\n<code>xs:duration</code> and its subtypes, including the two\nsubtypes <code>xs:yearMonthDuration</code> and\n<code>xs:dayTimeDuration</code>, the components are normalized:\nthis means that the seconds and minutes components will always be\nless than 60, the hours component less than 24, and the months\ncomponent less than 12.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-years-from-duration\"><code>fn:years-from-duration</code></a></td>\n<td>Returns the year component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-months-from-duration\"><code>fn:months-from-duration</code></a></td>\n<td>Returns the months component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-days-from-duration\"><code>fn:days-from-duration</code></a></td>\n<td>Returns the days component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-hours-from-duration\"><code>fn:hours-from-duration</code></a></td>\n<td>Returns the hours component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-minutes-from-duration\"><code>fn:minutes-from-duration</code></a></td>\n<td>Returns the minutes component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-seconds-from-duration\"><code>fn:seconds-from-duration</code></a></td>\n<td>Returns the seconds component of an <code>xs:duration</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-year-from-dateTime\"><code>fn:year-from-dateTime</code></a></td>\n<td>Returns the year from an <code>xs:dateTime</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-month-from-dateTime\"><code>fn:month-from-dateTime</code></a></td>\n<td>Returns the month from an <code>xs:dateTime</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-day-from-dateTime\"><code>fn:day-from-dateTime</code></a></td>\n<td>Returns the day from an <code>xs:dateTime</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-hours-from-dateTime\"><code>fn:hours-from-dateTime</code></a></td>\n<td>Returns the hours from an <code>xs:dateTime</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-minutes-from-dateTime\"><code>fn:minutes-from-dateTime</code></a></td>\n<td>Returns the minutes from an <code>xs:dateTime</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-seconds-from-dateTime\"><code>fn:seconds-from-dateTime</code></a></td>\n<td>Returns the seconds from an <code>xs:dateTime</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-timezone-from-dateTime\"><code>fn:timezone-from-dateTime</code></a></td>\n<td>Returns the timezone from an <code>xs:dateTime</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-year-from-date\"><code>fn:year-from-date</code></a></td>\n<td>Returns the year from an <code>xs:date</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-month-from-date\"><code>fn:month-from-date</code></a></td>\n<td>Returns the month from an <code>xs:date</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-day-from-date\"><code>fn:day-from-date</code></a></td>\n<td>Returns the day from an <code>xs:date</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-timezone-from-date\"><code>fn:timezone-from-date</code></a></td>\n<td>Returns the timezone from an <code>xs:date</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-hours-from-time\"><code>fn:hours-from-time</code></a></td>\n<td>Returns the hours from an <code>xs:time</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-minutes-from-time\"><code>fn:minutes-from-time</code></a></td>\n<td>Returns the minutes from an <code>xs:time</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-seconds-from-time\"><code>fn:seconds-from-time</code></a></td>\n<td>Returns the seconds from an <code>xs:time</code> value.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-timezone-from-time\"><code>fn:timezone-from-time</code></a></td>\n<td>Returns the timezone from an <code>xs:time</code> value.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-years-from-duration\" id = \"XPath_func-years-from-duration\"></a>10.5.1 fn:years-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:years-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nyears component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:yearMonthDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the years component as described\nin <a href = \"#canonical-yearMonthDuration\"><b>10.3.1.3 Canonical\nrepresentation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:dayTimeDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-years-from-duration-examples\" id = \"func-years-from-duration-examples\"></a>10.5.1.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:years-from-duration(xs:yearMonthDuration(\"P20Y15M\"))</code>\nreturns <code>21</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:years-from-duration(xs:yearMonthDuration(\"-P15M\"))</code>\nreturns <code>-1</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:years-from-duration(xs:dayTimeDuration(\"-P2DT15H\"))</code>\nreturns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-months-from-duration\" id = \"XPath_func-months-from-duration\"></a>10.5.2 fn:months-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:months-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nmonths component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:yearMonthDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the months component as described\nin <a href = \"#canonical-yearMonthDuration\"><b>10.3.1.3 Canonical\nrepresentation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:dayTimeDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-months-from-duration-examples\" id = \"func-months-from-duration-examples\"></a>10.5.2.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:months-from-duration(xs:yearMonthDuration(\"P20Y15M\"))</code>\nreturns <code>3</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:months-from-duration(xs:yearMonthDuration(\"-P20Y18M\"))</code>\nreturns <code>-6</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:months-from-duration(xs:dayTimeDuration(\"-P2DT15H0M0S\"))</code>\nreturns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-days-from-duration\" id = \"XPath_func-days-from-duration\"></a>10.5.3 fn:days-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:days-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\ndays component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:dayTimeDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the days component as described\nin <a href = \"#canonical-dayTimeDuration\"><b>10.3.2.3 Canonical\nrepresentation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:yearMonthDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-days-from-duration-examples\" id = \"func-days-from-duration-examples\"></a>10.5.3.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:days-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code>\nreturns <code>3</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:days-from-duration(xs:dayTimeDuration(\"P3DT55H\"))</code>\nreturns <code>5</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:days-from-duration(xs:yearMonthDuration(\"P3Y5M\"))</code>\nreturns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-hours-from-duration\" id = \"XPath_func-hours-from-duration\"></a>10.5.4 fn:hours-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:hours-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nhours component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:dayTimeDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the hours component as described\nin <a href = \"#canonical-dayTimeDuration\"><b>10.3.2.3 Canonical\nrepresentation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:yearMonthDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-hours-from-duration-examples\" id = \"func-hours-from-duration-examples\"></a>10.5.4.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:hours-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code>\nreturns <code>10</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-duration(xs:dayTimeDuration(\"P3DT12H32M12S\"))</code>\nreturns <code>12</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-duration(xs:dayTimeDuration(\"PT123H\"))</code>\nreturns <code>3</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-duration(xs:dayTimeDuration(\"-P3DT10H\"))</code>\nreturns <code>-10</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-minutes-from-duration\" id = \"XPath_func-minutes-from-duration\"></a>10.5.5\nfn:minutes-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:minutes-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nminutes component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:dayTimeDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the minutes component as\ndescribed in <a href = \"#canonical-dayTimeDuration\"><b>10.3.2.3\nCanonical representation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:yearMonthDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-minutes-from-duration-examples\" id = \"func-minutes-from-duration-examples\"></a>10.5.5.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:minutes-from-duration(xs:dayTimeDuration(\"P3DT10H\"))</code>\nreturns <code>0</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:minutes-from-duration(xs:dayTimeDuration(\"-P5DT12H30M\"))</code>\nreturns <code>-30</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-seconds-from-duration\" id = \"XPath_func-seconds-from-duration\"></a>10.5.6\nfn:seconds-from-duration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:seconds-from-duration</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:duration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:decimal</code> representing the\nseconds component in the value of <code>$arg</code>. The result is\nobtained by casting <code>$arg</code> to an\n<code>xs:dayTimeDuration</code> (see <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration\ntypes</b></a>) and then computing the seconds component as\ndescribed in <a href = \"#canonical-dayTimeDuration\"><b>10.3.2.3\nCanonical representation</b></a>.</p>\n<p>The result may be negative.</p>\n<p>If <code>$arg</code> is an <code>xs:yearMonthDuration</code>\nreturns 0.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-seconds-from-duration-examples\" id = \"func-seconds-from-duration-examples\"></a>10.5.6.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:seconds-from-duration(xs:dayTimeDuration(\"P3DT10H12.5S\"))</code>\nreturns <code>12.5</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:seconds-from-duration(xs:dayTimeDuration(\"-PT256S\"))</code>\nreturns <code>-16.0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-year-from-dateTime\" id = \"XPath_func-year-from-dateTime\"></a>10.5.7 fn:year-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:year-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nyear component in the localized value of <code>$arg</code>. The\nresult may be negative.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-year-from-dateTime-examples\" id = \"func-year-from-dateTime-examples\"></a>10.5.7.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:year-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns <code>1999</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:year-from-dateTime(xs:dateTime(\"1999-05-31T21:30:00-05:00\"))</code>\nreturns <code>1999</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:year-from-dateTime(xs:dateTime(\"1999-12-31T19:20:00\"))</code>\nreturns <code>1999</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:year-from-dateTime(xs:dateTime(\"1999-12-31T24:00:00\"))</code>\nreturns <code>2000</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-month-from-dateTime\" id = \"XPath_func-month-from-dateTime\"></a>10.5.8 fn:month-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:month-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 1 and 12,\nboth inclusive, representing the month component in the localized\nvalue of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-month-from-dateTime-examples\" id = \"func-month-from-dateTime-examples\"></a>10.5.8.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:month-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns <code>5</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:month-from-dateTime(xs:dateTime(\"1999-12-31T19:20:00-05:00\"))</code>\nreturns <code>12</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T19:20:00-05:00\"),\nxs:dayTimeDuration(\"PT0S\")))</code> returns <code>1</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-day-from-dateTime\" id = \"XPath_func-day-from-dateTime\"></a>10.5.9 fn:day-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:day-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 1 and 31,\nboth inclusive, representing the day component in the localized\nvalue of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-day-from-dateTime-examples\" id = \"func-day-from-dateTime-examples\"></a>10.5.9.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:day-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns <code>31</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:day-from-dateTime(xs:dateTime(\"1999-12-31T20:00:00-05:00\"))</code>\nreturns <code>31</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T19:20:00-05:00\"),\nxs:dayTimeDuration(\"PT0S\")))</code> returns <code>1</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-hours-from-dateTime\" id = \"XPath_func-hours-from-dateTime\"></a>10.5.10 fn:hours-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:hours-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 0 and 23,\nboth inclusive, representing the hours component in the localized\nvalue of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-hours-from-dateTime-examples\" id = \"func-hours-from-dateTime-examples\"></a>10.5.10.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:hours-from-dateTime(xs:dateTime(\"1999-05-31T08:20:00-05:00\"))</code>\nreturns <code>8</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T21:20:00-05:00\"))</code>\nreturns <code>21</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(\"1999-12-31T21:20:00-05:00\"),\nxs:dayTimeDuration(\"PT0S\")))</code> returns <code>2</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T12:00:00\"))</code>\nreturns <code>12</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-dateTime(xs:dateTime(\"1999-12-31T24:00:00\"))</code>\nreturns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-minutes-from-dateTime\" id = \"XPath_func-minutes-from-dateTime\"></a>10.5.11\nfn:minutes-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:minutes-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> value between 0 and\n59, both inclusive, representing the minute component in the\nlocalized value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-minutes-from-dateTime-examples\" id = \"func-minutes-from-dateTime-examples\"></a>10.5.11.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns <code>20</code> .</p>\n</li>\n<li>\n<p>\n<code>fn:minutes-from-dateTime(xs:dateTime(\"1999-05-31T13:30:00+05:30\"))</code>\nreturns <code>30</code> .</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-seconds-from-dateTime\" id = \"XPath_func-seconds-from-dateTime\"></a>10.5.12\nfn:seconds-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:seconds-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:decimal</code> value greater than\nor equal to zero and less than 60, representing the seconds and\nfractional seconds in the localized value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-seconds-from-dateTime-examples\" id = \"func-seconds-from-dateTime-examples\"></a>10.5.12.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:seconds-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns <code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-timezone-from-dateTime\" id = \"XPath_func-timezone-from-dateTime\"></a>10.5.13\nfn:timezone-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:timezone-from-dateTime</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration?</code></div>\n</div>\n<p>Summary: Returns the timezone component of <code>$arg</code> if\nany. If <code>$arg</code> has a timezone component, then the result\nis an <code>xs:dayTimeDuration</code> that indicates deviation from\nUTC; its value may range from +14:00 to -14:00 hours, both\ninclusive. Otherwise, the result is the empty sequence.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-timezone-from-dateTime-examples\" id = \"func-timezone-from-dateTime-examples\"></a>10.5.13.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:timezone-from-dateTime(xs:dateTime(\"1999-05-31T13:20:00-05:00\"))</code>\nreturns the <code>xs:dayTimeDuration</code> whose value is\n<code>-PT5H</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:timezone-from-dateTime(xs:dateTime(\"2000-06-12T13:20:00Z\"))</code>\nreturns the <code>xs:dayTimeDuration</code> whose value is\n<code>PT0S</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:timezone-from-dateTime(xs:dateTime(\"2004-08-27T00:00:00\"))</code>\nreturns <code>()</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-year-from-date\" id = \"XPath_func-year-from-date\"></a>10.5.14 fn:year-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:year-from-date</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> representing the\nyear in the localized value of <code>$arg</code>. The value may be\nnegative.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-year-from-date-examples\" id = \"func-year-from-date-examples\"></a>10.5.14.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:year-from-date(xs:date(\"1999-05-31\"))</code> returns\n<code>1999</code>.</p>\n</li>\n<li>\n<p><code>fn:year-from-date(xs:date(\"2000-01-01+05:00\"))</code>\nreturns <code>2000</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-month-from-date\" id = \"XPath_func-month-from-date\"></a>10.5.15 fn:month-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:month-from-date</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 1 and 12,\nboth inclusive, representing the month component in the localized\nvalue of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-month-from-date-examples\" id = \"func-month-from-date-examples\"></a>10.5.15.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:month-from-date(xs:date(\"1999-05-31-05:00\"))</code>\nreturns <code>5</code> .</p>\n</li>\n<li>\n<p><code>fn:month-from-date(xs:date(\"2000-01-01+05:00\"))</code>\nreturns <code>1</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-day-from-date\" id = \"XPath_func-day-from-date\"></a>10.5.16 fn:day-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:day-from-date</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 1 and 31,\nboth inclusive, representing the day component in the localized\nvalue of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-day-from-date-examples\" id = \"func-day-from-date-examples\"></a>10.5.16.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:day-from-date(xs:date(\"1999-05-31-05:00\"))</code>\nreturns <code>31</code>.</p>\n</li>\n<li>\n<p><code>fn:day-from-date(xs:date(\"2000-01-01+05:00\"))</code>\nreturns <code>1</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-timezone-from-date\" id = \"XPath_func-timezone-from-date\"></a>10.5.17 fn:timezone-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:timezone-from-date</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration?</code></div>\n</div>\n<p>Summary: Returns the timezone component of <code>$arg</code> if\nany. If <code>$arg</code> has a timezone component, then the result\nis an <code>xs:dayTimeDuration</code> that indicates deviation from\nUTC; its value may range from +14:00 to -14:00 hours, both\ninclusive. Otherwise, the result is the empty sequence.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-timezone-from-date-examples\" id = \"func-timezone-from-date-examples\"></a>10.5.17.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:timezone-from-date(xs:date(\"1999-05-31-05:00\"))</code>\nreturns the <code>xs:dayTimeDuration</code> whose value is\n<code>-PT5H</code>.</p>\n</li>\n<li>\n<p><code>fn:timezone-from-date(xs:date(\"2000-06-12Z\"))</code>\nreturns the <code>xs:dayTimeDuration</code> with value\n<code>PT0S</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-hours-from-time\" id = \"XPath_func-hours-from-time\"></a>10.5.18 fn:hours-from-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:hours-from-time</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> between 0 and 23,\nboth inclusive, representing the value of the hours component in\nthe localized value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-hours-from-time-examples\" id = \"func-hours-from-time-examples\"></a>10.5.18.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>.</p>\n<ul>\n<li>\n<p><code>fn:hours-from-time(xs:time(\"11:23:00\"))</code> returns\n<code>11</code>.</p>\n</li>\n<li>\n<p><code>fn:hours-from-time(xs:time(\"21:23:00\"))</code> returns\n<code>21</code>.</p>\n</li>\n<li>\n<p><code>fn:hours-from-time(xs:time(\"01:23:00+05:00\"))</code>\nreturns <code>1</code>.</p>\n</li>\n<li>\n<p>\n<code>fn:hours-from-time(fn:adjust-time-to-timezone(xs:time(\"01:23:00+05:00\"),\nxs:dayTimeDuration(\"PT0S\")))</code> returns <code>20</code>.</p>\n</li>\n<li>\n<p><code>fn:hours-from-time(xs:time(\"24:00:00\"))</code> returns\n<code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-minutes-from-time\" id = \"XPath_func-minutes-from-time\"></a>10.5.19 fn:minutes-from-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:minutes-from-time</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:integer</code> value between 0 and\n59, both inclusive, representing the value of the minutes component\nin the localized value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-minutes-from-time-examples\" id = \"func-minutes-from-time-examples\"></a>10.5.19.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:minutes-from-time(xs:time(\"13:00:00Z\"))</code> returns\n<code>0</code> .</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-seconds-from-time\" id = \"XPath_func-seconds-from-time\"></a>10.5.20 fn:seconds-from-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:seconds-from-time</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:decimal</code> value greater than\nor equal to zero and less than 60, representing the seconds and\nfractional seconds in the localized value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-seconds-from-time-examples\" id = \"func-seconds-from-time-examples\"></a>10.5.20.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:seconds-from-time(xs:time(\"13:20:10.5\"))</code> returns\n<code>10.5</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-timezone-from-time\" id = \"XPath_func-timezone-from-time\"></a>10.5.21 fn:timezone-from-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:timezone-from-time</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration?</code></div>\n</div>\n<p>Summary: Returns the timezone component of <code>$arg</code> if\nany. If <code>$arg</code> has a timezone component, then the result\nis an <code>xs:dayTimeDuration</code> that indicates deviation from\nUTC; its value may range from +14:00 to -14:00 hours, both\ninclusive. Otherwise, the result is the empty sequence.</p>\n<p>If <code>$arg</code> is the empty sequence, returns the empty\nsequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-timezone-from-time-examples\" id = \"func-timezone-from-time-examples\"></a>10.5.21.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:timezone-from-time(xs:time(\"13:20:00-05:00\"))</code>\nreturns <code>xs:dayTimeDuration</code> whose value is\n<code>-PT5H</code>.</p>\n</li>\n<li>\n<p><code>fn:timezone-from-time(xs:time(\"13:20:00\"))</code> returns\n<code>()</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"duration-arithmetic\" id = \"duration-arithmetic\"></a>10.6\nArithmetic Operators on Durations</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-add-yearMonthDurations\"><code>op:add-yearMonthDurations</code></a></td>\n<td>Adds two <code>xs:yearMonthDuration</code>s. Returns an\n<code>xs:yearMonthDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-yearMonthDurations\"><code>op:subtract-yearMonthDurations</code></a></td>\n<td>Subtracts one <code>xs:yearMonthDuration</code> from another.\nReturns an <code>xs:yearMonthDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-multiply-yearMonthDuration\"><code>op:multiply-yearMonthDuration</code></a></td>\n<td>Multiplies a <code>xs:yearMonthDuration</code> by an\n<code>xs:double</code>. Returns an\n<code>xs:yearMonthDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-divide-yearMonthDuration\"><code>op:divide-yearMonthDuration</code></a></td>\n<td>Divides an <code>xs:yearMonthDuration</code> by an\n<code>xs:double</code>. Returns an\n<code>xs:yearMonthDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-divide-yearMonthDuration-by-yearMonthDuration\"><code>op:divide-yearMonthDuration-by-yearMonthDuration</code></a></td>\n<td>Divides an <code>xs:yearMonthDuration</code> by an\n<code>xs:yearMonthDuration</code>. Returns an\n<code>xs:decimal</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-dayTimeDurations\"><code>op:add-dayTimeDurations</code></a></td>\n<td>Adds two <code>xs:dayTimeDurations</code>. Returns an\n<code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-dayTimeDurations\"><code>op:subtract-dayTimeDurations</code></a></td>\n<td>Subtracts one <code>xs:dayTimeDuration</code> from another.\nReturns an <code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-multiply-dayTimeDuration\"><code>op:multiply-dayTimeDuration</code></a></td>\n<td>Multiplies an <code>xs:dayTimeDuration</code> by a\n<code>xs:double</code>. Returns an\n<code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-divide-dayTimeDuration\"><code>op:divide-dayTimeDuration</code></a></td>\n<td>Divides an <code>xs:dayTimeDuration</code> by an\n<code>xs:double</code>. Returns an\n<code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-divide-dayTimeDuration-by-dayTimeDuration\"><code>op:divide-dayTimeDuration-by-dayTimeDuration</code></a></td>\n<td>Divides an <code>xs:dayTimeDuration</code> by an\n<code>xs:dayTimeDuration</code>. Returns an\n<code>xs:decimal</code>.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-yearMonthDurations\" id = \"XPath_func-add-yearMonthDurations\"></a>10.6.1\nop:add-yearMonthDurations</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-yearMonthDurations</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:yearMonthDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of adding the value of\n<code>$arg1</code> to the value of <code>$arg2</code>. Backs up the\n\"+\" operator on <code>xs:yearMonthDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-yearMonthDurations-examples\" id = \"func-add-yearMonthDurations-examples\"></a>10.6.1.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:add-yearMonthDurations(xs:yearMonthDuration(\"P2Y11M\"),\nxs:yearMonthDuration(\"P3Y3M\"))</code> returns a\n<code>xs:yearMonthDuration</code> value corresponding to 6 years\nand 2 months.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-yearMonthDurations\" id = \"XPath_func-subtract-yearMonthDurations\"></a>10.6.2\nop:subtract-yearMonthDurations</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-yearMonthDurations</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:yearMonthDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of subtracting the value of\n<code>$arg2</code> from the value of <code>$arg1</code>. Backs up\nthe \"-\" operator on <code>xs:yearMonthDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-yearMonthDurations-examples\" id = \"func-subtract-yearMonthDurations-examples\"></a>10.6.2.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-yearMonthDurations(xs:yearMonthDuration(\"P2Y11M\"),\nxs:yearMonthDuration(\"P3Y3M\"))</code> returns a\n<code>xs:yearMonthDuration</code> value corresponding to negative 4\nmonths.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-multiply-yearMonthDuration\" id = \"XPath_func-multiply-yearMonthDuration\"></a>10.6.3\nop:multiply-yearMonthDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:multiply-yearMonthDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:yearMonthDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of multiplying the value of\n<code>$arg1</code> by <code>$arg2</code>. The result is rounded to\nthe nearest month.</p>\n<p>The result is the <code>xs:yearMonthDuration</code> whose length\nin months is equal to the result of applying the <a href = \"#XPath_func-round\"><code>fn:round</code></a> function to the value\nobtained by multiplying the length in months of <code>$arg1</code>\nby the value of <code>$arg2</code>.</p>\n<p>If <code>$arg2</code> is positive or negative zero, the result\nis a zero-length duration. If <code>$arg2</code> is positive or\nnegative infinity, the result overflows and is handled as discussed\nin <a href = \"#date-time-duration-conformance\"><b>10.1.1 Limits and\nPrecision</b></a>. If <code>$arg2</code> is <code>NaN</code> an\nerror is raised [<a href = \"#ERRFOCA0005\" title = \"err:FOCA0005\">err:FOCA0005</a>]</p>\n<p>Backs up the \"*\" operator on <code>xs:yearMonthDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-multiply-yearMonthDurations-examples\" id = \"func-multiply-yearMonthDurations-examples\"></a>10.6.3.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:multiply-yearMonthDuration(xs:yearMonthDuration(\"P2Y11M\"),\n2.3)</code> returns a <code>xs:yearMonthDuration</code> value\ncorresponding to 6 years and 9 months.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-divide-yearMonthDuration\" id = \"XPath_func-divide-yearMonthDuration\"></a>10.6.4\nop:divide-yearMonthDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:divide-yearMonthDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:yearMonthDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of dividing the value of\n<code>$arg1</code> by <code>$arg2</code>. The result is rounded to\nthe nearest month.</p>\n<p>The result is the <code>xs:yearMonthDuration</code> whose length\nin months is equal to the result of applying the <a href = \"#XPath_func-round\"><code>fn:round</code></a> function to the value\nobtained by dividing the length in months of <code>$arg1</code> by\nthe value of <code>$arg2</code>.</p>\n<p>If <code>$arg2</code> is positive or negative infinity, the\nresult is a zero-length duration. If <code>$arg2</code> is positive\nor negative zero, the result overflows and is handled as discussed\nin <a href = \"#date-time-duration-conformance\"><b>10.1.1 Limits and\nPrecision</b></a>. If <code>$arg2</code> is <code>NaN</code> an\nerror is raised [<a href = \"#ERRFOCA0005\" title = \"err:FOCA0005\">err:FOCA0005</a>]</p>\n<p>Backs up the \"div\" operator on <code>xs:yearMonthDuration</code>\nand numeric values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-divide-yearMonthDurations-examples\" id = \"func-divide-yearMonthDurations-examples\"></a>10.6.4.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:divide-yearMonthDuration(xs:yearMonthDuration(\"P2Y11M\"),\n1.5)</code> returns a <code>xs:yearMonthDuration</code> value\ncorresponding to 1 year and 11 months.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-divide-yearMonthDuration-by-yearMonthDuration\" id = \"XPath_func-divide-yearMonthDuration-by-yearMonthDuration\"></a>10.6.5\nop:divide-yearMonthDuration-by-yearMonthDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:divide-yearMonthDuration-by-yearMonthDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of dividing the value of\n<code>$arg1</code> by <code>$arg2</code>. Since the values of both\noperands are integers, the semantics of the division is identical\nto <a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a> with\n<code>xs:integer</code> operands.</p>\n<p>Backs up the \"div\" operator on <code>xs:yearMonthDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-divide-yearMonthDuration-by-yearMonthDuration-examples\" id = \"func-divide-yearMonthDuration-by-yearMonthDuration-examples\"></a>10.6.5.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration(\"P3Y4M\"),\nxs:yearMonthDuration(\"-P1Y4M\"))</code> returns\n<code>-2.5</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-dayTimeDurations\" id = \"XPath_func-add-dayTimeDurations\"></a>10.6.6 op:add-dayTimeDurations</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-dayTimeDurations</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of adding the value of\n<code>$arg1</code> to the value of <code>$arg2</code>. Backs up the\n\"+\" operator on <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-dayTimeDurations-examples\" id = \"func-add-dayTimeDurations-examples\"></a>10.6.6.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:add-dayTimeDurations(xs:dayTimeDuration(\"P2DT12H5M\"),\nxs:dayTimeDuration(\"P5DT12H\"))</code> returns a\n<code>xs:dayTimeDuration</code> value corresponding to 8 days and 5\nminutes.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dayTimeDurations\" id = \"XPath_func-subtract-dayTimeDurations\"></a>10.6.7\nop:subtract-dayTimeDurations</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-dayTimeDurations</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of subtracting the value of\n<code>$arg2</code> from the value of <code>$arg1</code>. Backs up\nthe \"-\" operator on <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dayTimeDurations-examples\" id = \"func-subtract-dayTimeDurations-examples\"></a>10.6.7.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-dayTimeDurations(xs:dayTimeDuration(\"P2DT12H\"),\nxs:dayTimeDuration(\"P1DT10H30M\"))</code> returns a\n<code>xs:dayTimeDuration</code> value corresponding to 1 day, 1\nhour and 30 minutes.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-multiply-dayTimeDuration\" id = \"XPath_func-multiply-dayTimeDuration\"></a>10.6.8\nop:multiply-dayTimeDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:multiply-dayTimeDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of multiplying the value of\n<code>$arg1</code> by <code>$arg2</code>.</p>\n<p>If <code>$arg2</code> is positive or negative zero, the result\nis a zero-length duration. If <code>$arg2</code> is positive or\nnegative infinity, the result overflows and is handled as discussed\nin <a href = \"#date-time-duration-conformance\"><b>10.1.1 Limits and\nPrecision</b></a>. If <code>$arg2</code> is <code>NaN</code> an\nerror is raised [<a href = \"#ERRFOCA0005\" title = \"err:FOCA0005\">err:FOCA0005</a>]</p>\n<p>Backs up the \"*\" operator on <code>xs:dayTimeDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-multiply-yearMonthDuration-examples\" id = \"func-multiply-yearMonthDuration-examples\"></a>10.6.8.1\nExamples</h5>\n<ul>\n<li>\n<p><code>op:multiply-dayTimeDuration(xs:dayTimeDuration(\"PT2H10M\"),\n2.1)</code> returns a <code>xs:dayTimeDuration</code> value\ncorresponding to 4 hours and 33 minutes.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-divide-dayTimeDuration\" id = \"XPath_func-divide-dayTimeDuration\"></a>10.6.9\nop:divide-dayTimeDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:divide-dayTimeDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of dividing the value of\n<code>$arg1</code> by <code>$arg2</code>.</p>\n<p>If <code>$arg2</code> is positive or negative infinity, the\nresult is a zero-length duration. If <code>$arg2</code> is positive\nor negative zero, the result overflows and is handled as discussed\nin <a href = \"#date-time-duration-conformance\"><b>10.1.1 Limits and\nPrecision</b></a>. If <code>$arg2</code> is <code>NaN</code> an\nerror is raised [<a href = \"#ERRFOCA0005\" title = \"err:FOCA0005\">err:FOCA0005</a>]</p>\n<p>Backs up the \"div\" operator on <code>xs:dayTimeDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-divide-yearMonthDuration-examples\" id = \"func-divide-yearMonthDuration-examples\"></a>10.6.9.1 Examples</h5>\n<ul>\n<li>\n<p>\n<span><code>op:divide-dayTimeDuration(xs:dayTimeDuration(\"P1DT2H30M10.5S\"),\n1.5)</code></span> returns an <code>xs:dayTimeDuration</code> value\ncorresponding to 17 hours, 40 minutes and 7 seconds.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-divide-dayTimeDuration-by-dayTimeDuration\" id = \"XPath_func-divide-dayTimeDuration-by-dayTimeDuration\"></a>10.6.10\nop:divide-dayTimeDuration-by-dayTimeDuration</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:divide-dayTimeDuration-by-dayTimeDuration</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:decimal</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the result of dividing the value of\n<code>$arg1</code> by <code>$arg2</code>. Since the values of both\noperands are decimals, the semantics of the division is identical\nto <a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a> with\n<code>xs:decimal</code> operands.</p>\n<p>Backs up the \"div\" operator on <code>xs:dayTimeDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-divide-dayTimeDuration-by-dayTimeDuration-examples\" id = \"func-divide-dayTimeDuration-by-dayTimeDuration-examples\"></a>10.6.10.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration(\"P2DT53M11S\"),\nxs:dayTimeDuration(\"P1DT10H\"))</code> returns\n<code>1.4378349...</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"timezone.functions\" id = \"timezone.functions\"></a>10.7\nTimezone Adjustment Functions on Dates and Time Values</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone</code></a></td>\n<td>Adjusts an <code>xs:dateTime</code> value to a specific\ntimezone, or to no timezone at all.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-adjust-date-to-timezone\"><code>fn:adjust-date-to-timezone</code></a></td>\n<td>Adjusts an <code>xs:date</code> value to a specific timezone,\nor to no timezone at all.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-adjust-time-to-timezone\"><code>fn:adjust-time-to-timezone</code></a></td>\n<td>Adjusts an <code>xs:time</code> value to a specific timezone,\nor to no timezone at all.</td>\n</tr>\n</tbody>\n</table>\n<p>These functions adjust the timezone component of an\n<code>xs:dateTime</code>, <code>xs:date</code> or\n<code>xs:time</code> value. The <code>$timezone</code> argument to\nthese functions is defined as an <code>xs:dayTimeDuration</code>\nbut must be a valid timezone value.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-adjust-dateTime-to-timezone\" id = \"XPath_func-adjust-dateTime-to-timezone\"></a>10.7.1\nfn:adjust-dateTime-to-timezone</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:adjust-dateTime-to-timezone</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:adjust-dateTime-to-timezone</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$timezone</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Adjusts an <code>xs:dateTime</code> value to a specific\ntimezone, or to no timezone at all. If <code>$timezone</code> is\nthe empty sequence, returns an <code>xs:dateTime</code> without a\ntimezone. Otherwise, returns an <code>xs:dateTime</code> with a\ntimezone.</p>\n<p>If <code>$timezone</code> is not specified, then\n<code>$timezone</code> is the value of the implicit timezone in the\ndynamic context.</p>\n<p>If <code>$arg</code> is the empty sequence, then the result is\nthe empty sequence.</p>\n<p>A dynamic error is raised [<a href = \"#ERRFODT0003\" title = \"err:FODT0003\">err:FODT0003</a>] if <code>$timezone</code> is less\nthan <code>-PT14H</code> or greater than <code>PT14H</code> or if\ndoes not contain an integral number of minutes.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\n<code>$arg</code>.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is not the empty sequence, then the result\nis <code>$arg</code> with <code>$timezone</code> as the timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\nthe localized value of <code>$arg</code> without its timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is not the empty sequence, then the result\nis an <code>xs:dateTime</code> value with a timezone component of\n<code>$timezone</code> that is equal to <code>$arg</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-adjust-dateTime-to-timezone-examples\" id = \"func-adjust-dateTime-to-timezone-examples\"></a>10.7.1.1\nExamples</h5>\n<p>Assume the dynamic context provides an implicit timezone of\n<code>-05:00 (-PT5H0M)</code>.</p>\n<p><code>let $tz := xs:dayTimeDuration(\"-PT10H\")</code></p>\n<ul>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00\"))</code>\nreturns <code>2002-03-07T10:00:00-05:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00-07:00\"))</code>\nreturns <code>2002-03-07T12:00:00-05:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00\"),\n$tz)</code> returns <code>2002-03-07T10:00:00-10:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00-07:00\"),\n$tz)</code> returns <code>2002-03-07T07:00:00-10:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00-07:00\"),\nxs:dayTimeDuration(\"PT10H\"))</code> returns\n<code>2002-03-08T03:00:00+10:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T00:00:00+01:00\"),\nxs:dayTimeDuration(\"-PT8H\"))</code> returns\n<code>2002-03-06T15:00:00-08:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00\"),\n())</code> returns <code>2002-03-07T10:00:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-dateTime-to-timezone(xs:dateTime(\"2002-03-07T10:00:00-07:00\"),\n())</code> returns <code>2002-03-07T10:00:00</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-adjust-date-to-timezone\" id = \"XPath_func-adjust-date-to-timezone\"></a>10.7.2\nfn:adjust-date-to-timezone</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:adjust-date-to-timezone</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:adjust-date-to-timezone</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$timezone</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Adjusts an <code>xs:date</code> value to a specific\ntimezone, or to no timezone at all. If <code>$timezone</code> is\nthe empty sequence, returns an <code>xs:date</code> without a\ntimezone. Otherwise, returns an <code>xs:date</code> with a\ntimezone. For purposes of timezone adjustment, an\n<code>xs:date</code> is treated as an <code>xs:dateTime</code> with\ntime <code>00:00:00</code>.</p>\n<p>If <code>$timezone</code> is not specified, then\n<code>$timezone</code> is the value of the implicit timezone in the\ndynamic context.</p>\n<p>If <code>$arg</code> is the empty sequence, then the result is\nthe empty sequence.</p>\n<p>A dynamic error is raised [<a href = \"#ERRFODT0003\" title = \"err:FODT0003\">err:FODT0003</a>] if <code>$timezone</code> is less\nthan <code>-PT14H</code> or greater than <code>PT14H</code> or if\ndoes not contain an integral number of minutes.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\nthe value of <code>$arg</code>.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is not the empty sequence, then the result\nis <code>$arg</code> with <code>$timezone</code> as the timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\nthe localized value of <code>$arg</code> without its timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is not the empty sequence, then:</p>\n<ul>\n<li>\n<p>Let <code>$srcdt</code> be an <code>xs:dateTime</code> value,\nwith <code>00:00:00</code> for the time component and date and\ntimezone components that are the same as the date and timezone\ncomponents of <code>$arg</code>.</p>\n</li>\n<li>\n<p>Let <code>$r</code> be the result of evaluating <a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone($srcdt,\n$timezone)</code></a></p>\n</li>\n<li>\n<p>The result of this function will be a date value that has date\nand timezone components that are the same as the date and timezone\ncomponents of <code>$r</code>.</p>\n</li>\n</ul>\n<div class = \"div4\">\n<h5><a name = \"func-adjust-date-to-timezone-examples\" id = \"func-adjust-date-to-timezone-examples\"></a>10.7.2.1 Examples</h5>\n<p>Assume the dynamic context provides an implicit timezone of\n<code>-05:00 (-PT5H0M)</code>.</p>\n<p><code>let $tz := xs:dayTimeDuration(\"-PT10H\")</code></p>\n<ul>\n<li>\n<p><code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"))</code>\nreturns <code>2002-03-07-05:00.</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"))</code>\nreturns <code>2002-03-07-05:00</code>. <code>$arg</code> is\nconverted to the <code>xs:dateTime\n\"2002-03-07T00:00:00-07:00\"</code>. This is adjusted to the\nimplicit timezone, giving\n<code>\"2002-03-07T02:00:00-05:00\".</code></p>\n</li>\n<li>\n<p><code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"),\n$tz)</code> returns <code>2002-03-07-10:00</code>.</p>\n</li>\n<li>\n<p><code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"),\n$tz)</code> returns <code>2002-03-06-10:00</code>.\n<code>$arg</code> is converted to the <code>xs:dateTime\n\"2002-03-07T00:00:00-07:00\"</code>. This is adjusted to the given\ntimezone, giving <code>\"2002-03-06T21:00:00-10:00\"</code>.</p>\n</li>\n<li>\n<p><code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07\"),\n())</code> returns <code>2002-03-07.</code></p>\n</li>\n<li>\n<p><code>fn:adjust-date-to-timezone(xs:date(\"2002-03-07-07:00\"),\n())</code> returns <code>2002-03-07.</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-adjust-time-to-timezone\" id = \"XPath_func-adjust-time-to-timezone\"></a>10.7.3\nfn:adjust-time-to-timezone</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:adjust-time-to-timezone</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time?</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:adjust-time-to-timezone</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$timezone</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Adjusts an <code>xs:time</code> value to a specific\ntimezone, or to no timezone at all. If <code>$timezone</code> is\nthe empty sequence, returns an <code>xs:time</code> without a\ntimezone. Otherwise, returns an <code>xs:time</code> with a\ntimezone.</p>\n<p>If <code>$timezone</code> is not specified, then\n<code>$timezone</code> is the value of the implicit timezone in the\ndynamic context.</p>\n<p>If <code>$arg</code> is the empty sequence, then the result is\nthe empty sequence.</p>\n<p>A dynamic error is raised [<a href = \"#ERRFODT0003\" title = \"err:FODT0003\">err:FODT0003</a>] if <code>$timezone</code> is less\nthan <code>-PT14H</code> or greater than <code>PT14H</code> or if\ndoes not contain an integral number of minutes.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\n<code>$arg</code>.</p>\n<p>If <code>$arg</code> does not have a timezone component and\n<code>$timezone</code> is not the empty sequence, then the result\nis <code>$arg</code> with <code>$timezone</code> as the timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is the empty sequence, then the result is\nthe localized value of <code>$arg</code> without its timezone\ncomponent.</p>\n<p>If <code>$arg</code> has a timezone component and\n<code>$timezone</code> is not the empty sequence, then:</p>\n<ul>\n<li>\n<p>Let <code>$srcdt</code> be an <code>xs:dateTime</code> value,\nwith an arbitrary date for the date component and time and timezone\ncomponents that are the same as the time and timezone components of\n<code>$arg</code>.</p>\n</li>\n<li>\n<p>Let <code>$r</code> be the result of evaluating</p>\n<p><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone($srcdt,\n$timezone)</code></a></p>\n</li>\n<li>\n<p>The result of this function will be a time value that has time\nand timezone components that are the same as the time and timezone\ncomponents of <code>$r</code>.</p>\n</li>\n</ul>\n<div class = \"div4\">\n<h5><a name = \"func-adjust-time-to-timezone-examples\" id = \"func-adjust-time-to-timezone-examples\"></a>10.7.3.1 Examples</h5>\n<p>Assume the dynamic context provides an implicit timezone of\n<code>-05:00 (-PT5H0M)</code>.</p>\n<p><code>let $tz := xs:dayTimeDuration(\"-PT10H\")</code></p>\n<ul>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00\"))</code>\nreturns <code>10:00:00-05:00</code></p>\n</li>\n<li>\n<p>\n<code>fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"))</code>\nreturns <code>12:00:00-05:00</code></p>\n</li>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00\"),\n$tz)</code> returns <code>10:00:00-10:00</code></p>\n</li>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"),\n$tz)</code> returns <code>07:00:00-10:00</code></p>\n</li>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00\"), ())</code>\nreturns <code>10:00:00</code></p>\n</li>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"),\n())</code> returns <code>10:00:00</code></p>\n</li>\n<li>\n<p><code>fn:adjust-time-to-timezone(xs:time(\"10:00:00-07:00\"),\nxs:dayTimeDuration(\"PT10H\"))</code> returns\n<code>03:00:00+10:00</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"dateTime-arithmetic\" id = \"dateTime-arithmetic\"></a>10.8\nArithmetic Operators on Durations, Dates and Times</h3>\n<p>These functions support adding or subtracting a duration value\nto or from an <code>xs:dateTime</code>, an <code>xs:date</code> or\nan <code>xs:time</code> value. Appendix E of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ndescribes an algorithm for performing such operations.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-subtract-dateTimes\"><code>op:subtract-dateTimes</code></a></td>\n<td>Returns the difference between two <code>xs:dateTimes</code> as\nan <code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-dates\"><code>op:subtract-dates</code></a></td>\n<td>Returns the difference between two <code>xs:dateTimes</code> as\nan <code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-times\"><code>op:subtract-times</code></a></td>\n<td>Returns the difference between two <code>xs:time</code>s as an\n<code>xs:dayTimeDuration</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-yearMonthDuration-to-dateTime\"><code>op:add-yearMonthDuration-to-dateTime</code></a></td>\n<td>Returns the end of a time period by adding an\n<code>xs:yearMonthDuration</code> to the <code>xs:dateTime</code>\nthat starts the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-dayTimeDuration-to-dateTime\"><code>op:add-dayTimeDuration-to-dateTime</code></a></td>\n<td>Returns the end of a time period by adding an\n<code>xs:dayTimeDuration</code> to the <code>xs:dateTime</code>\nthat starts the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-yearMonthDuration-from-dateTime\"><code>op:subtract-yearMonthDuration-from-dateTime</code></a></td>\n<td>Returns the beginning of a time period by subtracting an\n<code>xs:yearMonthDuration</code> from the <code>xs:dateTime</code>\nthat ends the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-dayTimeDuration-from-dateTime\"><code>op:subtract-dayTimeDuration-from-dateTime</code></a></td>\n<td>Returns the beginning of a time period by subtracting an\n<code>xs:dayTimeDuration</code> from the <code>xs:dateTime</code>\nthat ends the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-yearMonthDuration-to-date\"><code>op:add-yearMonthDuration-to-date</code></a></td>\n<td>Returns the end of a time period by adding an\n<code>xs:yearMonthDuration</code> to the <code>xs:date</code> that\nstarts the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-dayTimeDuration-to-date\"><code>op:add-dayTimeDuration-to-date</code></a></td>\n<td>Returns the end of a time period by adding an\n<code>xs:dayTimeDuration</code> to the <code>xs:date</code> that\nstarts the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-yearMonthDuration-from-date\"><code>op:subtract-yearMonthDuration-from-date</code></a></td>\n<td>Returns the beginning of a time period by subtracting an\n<code>xs:yearMonthDuration</code> from the <code>xs:date</code>\nthat ends the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-dayTimeDuration-from-date\"><code>op:subtract-dayTimeDuration-from-date</code></a></td>\n<td>Returns the beginning of a time period by subtracting an\n<code>xs:dayTimeDuration</code> from the <code>xs:date</code> that\nends the period.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-add-dayTimeDuration-to-time\"><code>op:add-dayTimeDuration-to-time</code></a></td>\n<td>Adds the value of the hours, minutes and seconds components of\nan <code>xs:dayTimeDuration</code> to an <code>xs:time</code>\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subtract-dayTimeDuration-from-time\"><code>op:subtract-dayTimeDuration-from-time</code></a></td>\n<td>Subtracts the value of the hours, minutes and seconds\ncomponents of an <code>xs:dayTimeDuration</code> to an\n<code>xs:time</code> value.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dateTimes\" id = \"XPath_func-subtract-dateTimes\"></a>10.8.1 op:subtract-dateTimes</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-dateTimes</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:dayTimeDuration</code> that\ncorresponds to the difference between the normalized value of\n<code>$arg1</code> and the normalized value of <code>$arg2</code>.\nIf either <code>$arg1</code> or <code>$arg2</code> do not contain\nan explicit timezone then, for the purpose of the operation, the\nimplicit timezone provided by the dynamic context (See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) is assumed to be\npresent as part of the value.</p>\n<p>If the normalized value of <code>$arg1</code> precedes in time\nthe normalized value of <code>$arg2</code>, then the returned value\nis a negative duration.</p>\n<p>Backs up the subtract, \"-\", operator on <code>xs:dateTime</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dateTimes-examples\" id = \"func-subtract-dateTimes-examples\"></a>10.8.1.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>.</p>\n<ul>\n<li>\n<p><code>op:subtract-dateTimes(xs:dateTime(\"2000-10-30T06:12:00\"),\nxs:dateTime(\"1999-11-28T09:00:00Z\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to 337 days, 2\nhours and 12 minutes.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dates\" id = \"XPath_func-subtract-dates\"></a>10.8.2 op:subtract-dates</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:subtract-dates</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></div>\n</div>\n<p>Summary: Returns the <code>xs:dayTimeDuration</code> that\ncorresponds to the difference between the starting instant of\n<code>$arg1</code> and the the starting instant of\n<code>$arg2</code>. If either <code>$arg1</code> or\n<code>$arg2</code> do not contain an explicit timezone then, for\nthe purpose of the operation, the implicit timezone provided by the\ndynamic context (See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) is assumed to be\npresent as part of the value.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at <code>00:00:00</code> on that date.</p>\n<p>The result is the result of subtracting the two starting\ninstants using <a href = \"#XPath_func-subtract-dateTimes\"><code>op:subtract-dateTimes</code></a>.</p>\n<p>If the starting instant of <code>$arg1</code> precedes in time\nthe starting instant of <code>$arg2</code>, then the returned value\nis a negative duration.</p>\n<p>Backs up the subtract, \"-\", operator on <code>xs:date</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dates-examples\" id = \"func-subtract-dates-examples\"></a>10.8.2.1 Examples</h5>\n<ul>\n<li>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>Z</code>.\n<code>op:subtract-dates(xs:date(\"2000-10-30\"),\nxs:date(\"1999-11-28\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to 337 days.\nThe normalized values of the two starting instants are <code>{2000,\n10, 30, 0, 0, 0, PT0S}</code> and <code>{1999, 11, 28, 0, 0, 0,\nPT0S}</code>.</p>\n</li>\n<li>\n<p>If the dynamic context provides an implicit timezone value of\n<code>+05:00</code>, <code>op:subtract-dates(xs:date(\"2000-10-30\"),\nxs:date(\"1999-11-28Z\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to 336 days and\n19 hours. The normalized values of the two starting instants are\n<code>{2000, 10, 29, 19, 0, 0, PT0S}</code> and <code>{1999, 11,\n28, 0, 0, 0, PT0S}</code>.</p>\n</li>\n<li>\n<p><code>op:subtract-dates(xs:date(\"2000-10-15-05:00\"),\nxs:date(\"2000-10-10+02:00\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to lexical form\n\"<code>P5DT7H</code>\".</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-times\" id = \"XPath_func-subtract-times\"></a>10.8.3 op:subtract-times</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:subtract-times</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></div>\n</div>\n<p>Summary: Returns the <code>xs:dayTimeDuration</code> that\ncorresponds to the difference between the value of\n<code>$arg1</code> converted to an <code>xs:dateTime</code> using\nthe date components from the reference <code>xs:dateTime</code> and\nthe value of <code>$arg2</code> converted to an\n<code>xs:dateTime</code> using the date components from the same\nreference <code>xs:dateTime</code> . If either <code>$arg1</code>\nor <code>$arg2</code> do not contain an explicit timezone then, for\nthe purpose of the operation, the implicit timezone provided by the\ndynamic context (See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) is assumed to be\npresent as part of the value.</p>\n<p>The result is the result of subtracting the two\n<code>xs:dateTime</code>s using <a href = \"#XPath_func-subtract-dateTimes\"><code>op:subtract-dateTimes</code></a>.</p>\n<p>If the value of <code>$arg1</code> converted to an\n<code>xs:dateTime</code> using the date components from the\nreference <code>xs:dateTime</code> precedes in time the value of\n<code>$arg2</code> converted to an <code>xs:dateTime</code> using\nthe date components from the same reference\n<code>xs:dateTime</code> , then the returned value is a negative\nduration.</p>\n<p>Backs up the subtract, \"-\", operator on <code>xs:time</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-times-examples\" id = \"func-subtract-times-examples\"></a>10.8.3.1 Examples</h5>\n<p>Assume that the dynamic context provides an implicit timezone\nvalue of <code>-05:00</code>. Assume, also, that the date\ncomponents of the reference <code>xs:dateTime</code> correspond to\n<code>\"1972-12-31\"</code>.</p>\n<ul>\n<li>\n<p><code>op:subtract-times(xs:time(\"11:12:00Z\"),\nxs:time(\"04:00:00\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to 2 hours and\n12 minutes. This is obtained by subtracting from the\n<code>xs:dateTime</code> value <code>{1972, 12, 31, 11, 12, 0,\nPT0S}</code> the <code>xs:dateTime</code> value <code>{1972, 12,\n31, 9, 0, 0, PT0S}</code>.</p>\n</li>\n<li>\n<p><code>op:subtract-times(xs:time(\"11:00:00-05:00\"),\nxs:time(\"21:30:00+05:30\"))</code> returns a zero\n<code>xs:dayTimeDuration</code> value corresponding to the lexical\nrepresentation <code>\"PT0S\"</code>. The two\n<code>xs:dateTime</code> values are <code>{1972, 12, 31, 11, 0, 0,\n-PT5H}</code> and <code>{1972, 12, 31, 21, 30, 0, PT5H30M}</code>.\nThese normalize to <code>{1972, 12, 31, 16, 0, 0, PT0S}</code> and\n<code>{1972, 12, 31, 16, 0, 0, PT0S}</code>.</p>\n</li>\n<li>\n<p><code>op:subtract-times(xs:time(\"17:00:00-06:00\"),\nxs:time(\"08:00:00+09:00\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to one day or\n24 hours. The two normalized <code>xs:dateTime</code> values are\n<code>{1972, 12, 31, 23, 0, 0, PT0S}</code> and <code>{1972, 12,\n30, 23, 0, 0, PT0S}</code>.</p>\n</li>\n<li>\n<p><code>op:subtract-times(xs:time(\"24:00:00\"),\nxs:time(\"23:59:59\"))</code> returns an\n<code>xs:dayTimeDuration</code> value corresponding to\n<code>\"-PT23H59M59S\"</code>. The two normalized\n<code>xs:dateTime</code> values are <code>{1972, 12, 31, 0, 0, 0,\n()}</code> and <code>{1972, 12, 31, 23, 59, 59.0, ()}</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-yearMonthDuration-to-dateTime\" id = \"XPath_func-add-yearMonthDuration-to-dateTime\"></a>10.8.4\nop:add-yearMonthDuration-to-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-yearMonthDuration-to-dateTime</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:dateTime</code> computed by adding\n<code>$arg2</code> to the value of <code>$arg1</code> using the\nalgorithm described in Appendix E of <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> disregarding the rule\nabout leap seconds. If <code>$arg2</code> is negative, then the\nresult <code>xs:dateTime</code> precedes <code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"+\" operator on\n<code>xs:dateTime</code> and <code>xs:yearMonthDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-yearMonthDuration-to-dateTime-examples\" id = \"func-add-yearMonthDuration-to-dateTime-examples\"></a>10.8.4.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:add-yearMonthDuration-to-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"),\nxs:yearMonthDuration(\"P1Y2M\"))</code> returns an\n<code>xs:dateTime</code> value corresponding to the lexical\nrepresentation <code>\"2001-12-30T11:12:00\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-dayTimeDuration-to-dateTime\" id = \"XPath_func-add-dayTimeDuration-to-dateTime\"></a>10.8.5\nop:add-dayTimeDuration-to-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-dayTimeDuration-to-dateTime</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:dateTime</code> computed by adding\n<code>$arg2</code> to the value of <code>$arg1</code> using the\nalgorithm described in Appendix E of <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a> disregarding the rule\nabout leap seconds. If <code>$arg2</code> is negative, then the\nresult <code>xs:dateTime</code> precedes <code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"+\" operator on\n<code>xs:dateTime</code> and <code>xs:dayTimeDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-dayTimeDuration-to-dateTime-examples\" id = \"func-add-dayTimeDuration-to-dateTime-examples\"></a>10.8.5.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:add-dayTimeDuration-to-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"),\nxs:dayTimeDuration(\"P3DT1H15M\"))</code> returns an\n<code>xs:dateTime</code> value corresponding to the lexical\nrepresentation <code>\"2000-11-02T12:27:00\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-yearMonthDuration-from-dateTime\" id = \"XPath_func-subtract-yearMonthDuration-from-dateTime\"></a>10.8.6\nop:subtract-yearMonthDuration-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-yearMonthDuration-from-dateTime</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:dateTime</code> computed by\nnegating <code>$arg2</code> and adding the result to the value of\n<code>$arg1</code> using the algorithm described in Appendix E of\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> disregarding the rule about leap seconds. If\n<code>$arg2</code> is negative, then the <code>xs:dateTime</code>\nreturned follows <code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"-\" operator on\n<code>xs:dateTime</code> and <code>xs:yearMonthDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-yearMonthDuration-from-dateTime-examples\" id = \"func-subtract-yearMonthDuration-from-dateTime-examples\"></a>10.8.6.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-yearMonthDuration-from-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"),\nxs:yearMonthDuration(\"P1Y2M\"))</code> returns an\n<code>xs:dateTime</code> value corresponding to the lexical\nrepresentation <code>\"1999-08-30T11:12:00\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dayTimeDuration-from-dateTime\" id = \"XPath_func-subtract-dayTimeDuration-from-dateTime\"></a>10.8.7\nop:subtract-dayTimeDuration-from-dateTime</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-dayTimeDuration-from-dateTime</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:dateTime</code> computed by\nnegating <code>$arg2</code> and adding the result to the value of\n<code>$arg1</code> using the algorithm described in Appendix E of\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> disregarding the rule about leap seconds. If\n<code>$arg2</code> is negative, then the <code>xs:dateTime</code>\nreturned follows <code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"-\" operator on\n<code>xs:dateTime</code> and <code>xs:dayTimeDuration</code>\nvalues.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dayTimeDuration-from-dateTime-examples\" id = \"func-subtract-dayTimeDuration-from-dateTime-examples\"></a>10.8.7.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-dayTimeDuration-from-dateTime(xs:dateTime(\"2000-10-30T11:12:00\"),\nxs:dayTimeDuration(\"P3DT1H15M\"))</code> returns an\n<code>xs:dateTime</code> value corresponding to the lexical\nrepresentation <code>\"2000-10-27T09:57:00\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-yearMonthDuration-to-date\" id = \"XPath_func-add-yearMonthDuration-to-date\"></a>10.8.8\nop:add-yearMonthDuration-to-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-yearMonthDuration-to-date</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:date</code> computed by adding\n<code>$arg2</code> to the starting instant of <code>$arg1</code>\nusing the algorithm described in Appendix E of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nand discarding the time components from the resulting\n<code>xs:dateTime</code>. If <code>$arg2</code> is negative, then\nthe <code>xs:date</code> returned precedes <code>$arg1</code>.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at time <code>00:00:00</code> on that\ndate.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"+\" operator on <code>xs:date</code>\nand <code>xs:yearMonthDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-yearMonthDuration-to-date-examples\" id = \"func-add-yearMonthDuration-to-date-examples\"></a>10.8.8.1\nExamples</h5>\n<ul>\n<li>\n<p><code>op:add-yearMonthDuration-to-date(xs:date(\"2000-10-30\"),\nxs:yearMonthDuration(\"P1Y2M\"))</code> returns the\n<code>xs:date</code> corresponding to December 30, 2001.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-dayTimeDuration-to-date\" id = \"XPath_func-add-dayTimeDuration-to-date\"></a>10.8.9\nop:add-dayTimeDuration-to-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-dayTimeDuration-to-date</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:date</code> computed by adding\n<code>$arg2</code> to the starting instant of <code>$arg1</code>\nusing the algorithm described in Appendix E of <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nand discarding the time components from the resulting\n<code>xs:dateTime</code>. If <code>$arg2</code> is negative, then\nthe <code>xs:date</code> returned precedes <code>$arg1</code>.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at time <code>00:00:00</code> on that\ndate.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"+\" operator on <code>xs:date</code>\nand <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dayTimeDuration-to-date-examples\" id = \"func-subtract-dayTimeDuration-to-date-examples\"></a>10.8.9.1\nExamples</h5>\n<ul>\n<li>\n<p><code>op:add-dayTimeDuration-to-date(xs:date(\"2004-10-30Z\"),\nxs:dayTimeDuration(\"P2DT2H30M0S\"))</code> returns the\n<code>xs:date</code> November 1, 2004. The starting instant of the\nfirst argument is the <code>xs:dateTime</code> value <code>{2004,\n10, 30, 0, 0, 0, PT0S}</code>. Adding the second argument to this,\ngives the <code>xs:dateTime</code> value <code>{2004, 11, 1, 2, 30,\n0, PT0S}</code>. The time components are then discarded.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-yearMonthDuration-from-date\" id = \"XPath_func-subtract-yearMonthDuration-from-date\"></a>10.8.10\nop:subtract-yearMonthDuration-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-yearMonthDuration-from-date</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:yearMonthDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:date</code> computed by negating\n<code>$arg2</code> and adding the result to the starting instant of\n<code>$arg1</code> using the algorithm described in Appendix E of\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> and discarding the time components from the resulting\n<code>xs:dateTime</code>. If <code>$arg2</code> is positive, then\nthe <code>xs:date</code> returned precedes <code>$arg1</code>.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at <code>00:00:00</code> on that date.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"-\" operator on <code>xs:date</code>\nand <code>xs:yearMonthDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-yearMonthDuration-from-date-examples\" id = \"func-subtract-yearMonthDuration-from-date-examples\"></a>10.8.10.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-yearMonthDuration-from-date(xs:date(\"2000-10-30\"),\nxs:yearMonthDuration(\"P1Y2M\"))</code> returns the\n<code>xs:date</code> August 30, 1999.</p>\n</li>\n<li>\n<p>\n<code>op:subtract-yearMonthDuration-from-date(xs:date(\"2000-02-29Z\"),\nxs:yearMonthDuration(\"P1Y\"))</code> returns the\n<code>xs:date</code> February 28, 1999 in timezone\n<code>Z</code>.</p>\n</li>\n<li>\n<p>\n<code>op:subtract-yearMonthDuration-from-date(xs:date(\"2000-10-31-05:00\"),\nxs:yearMonthDuration(\"P1Y1M\"))</code> returns the\n<code>xs:date</code> September 30, 1999 in timezone\n<code>-05:00</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dayTimeDuration-from-date\" id = \"XPath_func-subtract-dayTimeDuration-from-date\"></a>10.8.11\nop:subtract-dayTimeDuration-from-date</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-dayTimeDuration-from-date</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the <code>xs:date</code> computed by negating\n<code>$arg2</code> and adding the result to the starting instant of\n<code>$arg1</code> using the algorithm described in Appendix E of\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> and discarding the time components from the resulting\n<code>xs:dateTime</code>. If <code>$arg2</code> is positive, then\nthe <code>xs:date</code> returned precedes <code>$arg1</code>.</p>\n<p>The starting instant of an <code>xs:date</code> is the\n<code>xs:dateTime</code> at <code>00:00:00</code> on that date.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"-\" operator on <code>xs:date</code>\nand <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dayTimeDuration-from-date-examples\" id = \"func-subtract-dayTimeDuration-from-date-examples\"></a>10.8.11.1\nExamples</h5>\n<ul>\n<li>\n<p>\n<code>op:subtract-dayTimeDuration-from-date(xs:date(\"2000-10-30\"),\nxs:dayTimeDuration(\"P3DT1H15M\"))</code> returns the\n<code>xs:date</code> October 26, 2000.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-add-dayTimeDuration-to-time\" id = \"XPath_func-add-dayTimeDuration-to-time\"></a>10.8.12\nop:add-dayTimeDuration-to-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:add-dayTimeDuration-to-time</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: First, the days component in the canonical lexical\nrepresentation of <code>$arg2</code> is set to zero (0) and the\nvalue of the resulting <code>xs:dayTimeDuration</code> is\ncalculated. Alternatively, the value of <code>$arg2</code> modulus\n86,400 is used as the second argument. This value is added to the\nvalue of <code>$arg1</code> converted to an\n<code>xs:dateTime</code> using a reference date such as\n<code>1972-12-31</code> and the time components of the result\nreturned. Note that the <code>xs:time</code> returned may occur in\na following or preceding day and may be less than\n<code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"+\" operator on <code>xs:time</code>\nand <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-add-dayTimeDuration-to-time-examples\" id = \"func-add-dayTimeDuration-to-time-examples\"></a>10.8.12.1\nExamples</h5>\n<ul>\n<li>\n<p><code>op:add-dayTimeDuration-to-time(xs:time(\"11:12:00\"),\nxs:dayTimeDuration(\"P3DT1H15M\"))</code> returns the\n<code>xs:time</code> value corresponding to the lexical\nrepresentation \"<code>12:27:00</code>\".</p>\n</li>\n<li>\n<p><code>op:add-dayTimeDuration-to-time(xs:time(\"23:12:00+03:00\"),\nxs:dayTimeDuration(\"P1DT3H15M\"))</code> returns the\n<code>xs:time</code> value corresponding to the lexical\nrepresentation \"<code>02:27:00+03:00</code>\", i.e. <code>{0, 0, 0,\n2, 27, 0, PT3H}</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subtract-dayTimeDuration-from-time\" id = \"XPath_func-subtract-dayTimeDuration-from-time\"></a>10.8.13\nop:subtract-dayTimeDuration-from-time</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:subtract-dayTimeDuration-from-time</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dayTimeDuration</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: The result is calculated by first setting the day\ncomponent in the canonical lexical representation of\n<code>$arg2</code> to zero (0) and calculating the value of the\nresulting <code>xs:dayTimeDuration</code>. Alternatively, the value\nof <code>$arg2</code> modulus 86,400 is used as the second\nargument. This value is subtracted from the value of\n<code>$arg1</code> converted to an <code>xs:dateTime</code> using a\nreference date such as <code>1972-12-31</code> and the time\ncomponents of the result are returned. Note that the\n<code>xs:time</code> returned may occur in a preceding or following\nday and may be greater than <code>$arg1</code>.</p>\n<p>The result has the same timezone as <code>$arg1</code>. If\n<code>$arg1</code> has no timezone, the result has no timezone.</p>\n<p>This functions backs up the \"-\" operator on <code>xs:time</code>\nand <code>xs:dayTimeDuration</code> values.</p>\n<div class = \"div4\">\n<h5><a name = \"func-subtract-dayTimeDuration-from-time-examples\" id = \"func-subtract-dayTimeDuration-from-time-examples\"></a>10.8.13.1\nExamples</h5>\n<ul>\n<li>\n<p><code>op:subtract-dayTimeDuration-from-time(xs:time(\"11:12:00\"),\nxs:dayTimeDuration(\"P3DT1H15M\"))</code> returns an\n<code>xs:time</code> value corresponding to the lexical\nrepresentation <code>\"09:57:00\"</code>.</p>\n</li>\n<li>\n<p>\n<code>op:subtract-dayTimeDuration-from-time(xs:time(\"08:20:00-05:00\"),\nxs:dayTimeDuration(\"P23DT10H10M\"))</code> returns the\n<code>xs:time</code> value corresponding to the lexical\nrepresentation <code>\"22:10:00-05:00\"</code> i.e. <code>{0, 0, 0,\n22, 10, 0, -PT5H}</code></p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"QName-funcs\" id = \"QName-funcs\"></a>11 Functions Related\nto QNames</h2>\n<div class = \"div2\">\n<h3><a name = \"QName-constructors\" id = \"QName-constructors\"></a>11.1\nAdditional Constructor Functions for QNames</h3>\n<p>This section defines additional constructor functions for QName\nas defined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a>. Leading and trailing whitespace, if present,\nis stripped from string arguments before the result is\nconstructed.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-resolve-QName\"><code>fn:resolve-QName</code></a></td>\n<td>Returns an <code>xs:QName</code> with the lexical form given in\nthe first argument. The prefix is resolved using the in-scope\nnamespaces for a given element.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-QName\"><code>fn:QName</code></a></td>\n<td>Returns an <code>xs:QName</code> with the namespace URI given\nin the first argument and the local name and prefix in the second\nargument.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-resolve-QName\" id = \"XPath_func-resolve-QName\"></a>11.1.1\nfn:resolve-QName</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:resolve-QName</code>(<code class = \"arg\">$qname</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$element</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">element()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:QName?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:QName</code> value (that is, an\nexpanded-QName) by taking an <code>xs:string</code> that has the\nlexical form of an <code>xs:QName</code> (a string in the form\n\"prefix:local-name\" or \"local-name\") and resolving it using the\nin-scope namespaces for a given element.</p>\n<p>If <code>$qname</code> does not have the correct lexical form\nfor <code>xs:QName</code> an error is raised [<a href = \"#ERRFOCA0002\" title = \"err:FOCA0002\">err:FOCA0002</a>].</p>\n<p>If <code>$qname</code> is the empty sequence, returns the empty\nsequence.</p>\n<p>More specifically, the function searches the namespace bindings\nof <code>$element</code> for a binding whose name matches the\nprefix of <code>$qname</code>, or the zero-length string if it has\nno prefix, and constructs an expanded-QName whose local name is\ntaken from the supplied <code>$qname</code>, and whose namespace\nURI is taken from the string value of the namespace binding.</p>\n<p>If the <code>$qname</code> has a prefix and if there is no\nnamespace binding for <code>$element</code> that matches this\nprefix, then an error is raised [<a href = \"#ERRFONS0004\" title = \"err:FONS0004\">err:FONS0004</a>].</p>\n<p>If the <code>$qname</code> has no prefix, and there is no\nnamespace binding for <code>$element</code> corresponding to the\ndefault (unnamed) namespace, then the resulting expanded-QName has\nno namespace part.</p>\n<p>The prefix (or absence of a prefix) in the supplied\n<code>$qname</code> argument is retained in the returned\nexpanded-QName, as discussed in <a href = \"http://www.w3.org/TR/xpath-datamodel/#terminology\">Section 2.1\nTerminology</a><sup><small>DM</small></sup>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-resolve-QName-uasge\" id = \"func-resolve-QName-uasge\"></a>11.1.1.1 Usage Note</h5>\n<p>Sometimes the requirement is to construct an\n<code>xs:QName</code> without using the default namespace. This can\nbe achieved by writing:</p>\n<div class = \"exampleInner\">\n<pre>\n if (contains($qname, \":\")) then fn:resolve-QName($qname, $element) else\n                            fn:QName(\"\", $qname)\n</pre></div>\n<p>If the requirement is to construct an <code>xs:QName</code>\nusing the namespaces in the static context, then the\n<code>xs:QName</code> constructor should be used.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-resolve-QName-examples\" id = \"func-resolve-QName-examples\"></a>11.1.1.2 Examples</h5>\n<p>Assume that the element bound to <code>$element</code> has a\nsingle namespace binding bound to the prefix <code>eg</code>.</p>\n<ul>\n<li>\n<p><code>fn:resolve-QName(\"hello\", $element)</code> returns a QName\nwith local name \"hello\" that is in no namespace.</p>\n</li>\n<li>\n<p><code>fn:resolve-QName(\"eg:myFunc\", $element)</code> returns an\n<code>xs:QName</code> whose namespace URI is specified by the\nnamespace binding corresponding to the prefix \"eg\" and whose local\nname is \"myFunc\".</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-QName\" id = \"XPath_func-QName\"></a>11.1.2 fn:QName</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:QName</code>(<code class = \"arg\">$paramURI</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$paramQName</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:QName</code></div>\n</div>\n<p>Summary: Returns an <code>xs:QName</code> with the namespace URI\ngiven in <code>$paramURI</code>. If <code>$paramURI</code> is the\nzero-length string or the empty sequence, it represents \"no\nnamespace\"; in this case, if the value of <code>$paramQName</code>\ncontains a colon (<code>:</code>), an error is raised [<a href = \"#ERRFOCA0002\" title = \"err:FOCA0002\">err:FOCA0002</a>]. The prefix\n(or absence of a prefix) in <code>$paramQName</code> is retained in\nthe returned <code>xs:QName</code> value. The local name in the\nresult is taken from the local part of\n<code>$paramQName</code>.</p>\n<p>If <code>$paramQName</code> does not have the correct lexical\nform for <code>xs:QName</code> an error is raised [<a href = \"#ERRFOCA0002\" title = \"err:FOCA0002\">err:FOCA0002</a>].</p>\n<p>Note that unlike <code>xs:QName</code> this function does not\nrequire a <code>xs:string</code> literal as the argument.</p>\n<div class = \"div4\">\n<h5><a name = \"func-QName-examples\" id = \"func-QName-examples\"></a>11.1.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:QName(\"http://www.example.com/example\",\n\"person\")</code> returns an <code>xs:QName</code> with namespace\nURI = \"http://www.example.com/example\", local name = \"person\" and\nprefix = \"\".</p>\n</li>\n<li>\n<p><code>fn:QName(\"http://www.example.com/example\",\n\"ht:person\")</code> returns an <code>xs:QName</code> with namespace\nURI = \"http://www.example.com/example\", local name = \"person\" and\nprefix = \"ht\".</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"QName-functions\" id = \"QName-functions\"></a>11.2\nFunctions and Operators Related to QNames</h3>\n<p>This section discusses functions on QNames as defined in\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a>.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-QName-equal\"><code>op:QName-equal</code></a></td>\n<td>Returns <code>true</code> if the local names and namespace URIs\nof the two arguments are equal.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-prefix-from-QName\"><code>fn:prefix-from-QName</code></a></td>\n<td>Returns an <code>xs:NCName</code> representing the prefix of\nthe <code>xs:QName</code> argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-local-name-from-QName\"><code>fn:local-name-from-QName</code></a></td>\n<td>Returns an <code>xs:NCName</code> representing the local name\nof the <code>xs:QName</code> argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-namespace-uri-from-QName\"><code>fn:namespace-uri-from-QName</code></a></td>\n<td>Returns the namespace URI for the <code>xs:QName</code>\nargument. If the <code>xs:QName</code> is in no namespace, the\nzero-length string is returned.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-namespace-uri-for-prefix\"><code>fn:namespace-uri-for-prefix</code></a></td>\n<td>Returns the namespace URI of one of the in-scope namespaces for\nthe given element, identified by its namespace prefix.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-in-scope-prefixes\"><code>fn:in-scope-prefixes</code></a></td>\n<td>Returns the prefixes of the in-scope namespaces for the given\nelement.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-QName-equal\" id = \"XPath_func-QName-equal\"></a>11.2.1\nop:QName-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:QName-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if the namespace URIs of\n<code>$arg1</code> and <code>$arg2</code> are equal and the local\nnames of <code>$arg1</code> and <code>$arg2</code> are identical\nbased on the Unicode code point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).\nOtherwise, returns <code>false</code>. Two namespace URIs are\nconsidered equal if they are either both absent or both present and\nidentical based on the Unicode code point collation. The prefix\nparts of <code>$arg1</code> and <code>$arg2</code>, if any, are\nignored.</p>\n<p>Backs up the \"eq\" and \"ne\" operators on values of type\n<code>xs:QName</code>.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-prefix-from-QName\" id = \"XPath_func-prefix-from-QName\"></a>11.2.2 fn:prefix-from-QName</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:prefix-from-QName</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:NCName?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:NCName</code> representing the\nprefix of <code>$arg</code>. The empty sequence is returned if\n<code>$arg</code> is the empty sequence or if the value of\n<code>$arg</code> contains no prefix.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-local-name-from-QName\" id = \"XPath_func-local-name-from-QName\"></a>11.2.3\nfn:local-name-from-QName</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:local-name-from-QName</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:NCName?</code></div>\n</div>\n<p>Summary: Returns an <code>xs:NCName</code> representing the\nlocal part of <code>$arg</code>. If <code>$arg</code> is the empty\nsequence, returns the empty sequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-local-name-from-QName-examples\" id = \"func-local-name-from-QName-examples\"></a>11.2.3.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:local-name-from-QName(fn:QName(\"http://www.example.com/example\",\n\"person\"))</code> returns <code>\"person\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-namespace-uri-from-QName\" id = \"XPath_func-namespace-uri-from-QName\"></a>11.2.4\nfn:namespace-uri-from-QName</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:namespace-uri-from-QName</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:QName?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<p>Summary: Returns the namespace URI for <code>$arg</code> as an\n<code>xs:anyURI</code>. If <code>$arg</code> is the empty sequence,\nthe empty sequence is returned. If <code>$arg</code> is in no\nnamespace, the zero-length <code>xs:anyURI</code> is returned.</p>\n<div class = \"div4\">\n<h5><a name = \"func-namespace-uri-from-QName-examples\" id = \"func-namespace-uri-from-QName-examples\"></a>11.2.4.1 Examples</h5>\n<ul>\n<li>\n<p>\n<code>fn:namespace-uri-from-QName(fn:QName(\"http://www.example.com/example\",\n\"person\"))</code> returns the namespace URI corresponding to\n<code>\"http://www.example.com/example\"</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-namespace-uri-for-prefix\" id = \"XPath_func-namespace-uri-for-prefix\"></a>11.2.5\nfn:namespace-uri-for-prefix</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:namespace-uri-for-prefix</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$prefix</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$element</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">element()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the namespace URI of one of the in-scope\nnamespaces for <code>$element</code>, identified by its namespace\nprefix.</p>\n<p>If <code>$element</code> has an in-scope namespace whose\nnamespace prefix is equal to <code>$prefix</code>, it returns the\nnamespace URI of that namespace. If <code>$prefix</code> is the\nzero-length string or the empty sequence, it returns the namespace\nURI of the default (unnamed) namespace. Otherwise, it returns the\nempty sequence.</p>\n<p>Prefixes are equal only if their Unicode code points match\nexactly.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-in-scope-prefixes\" id = \"XPath_func-in-scope-prefixes\"></a>11.2.6 fn:in-scope-prefixes</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:in-scope-prefixes</code>(<code class = \"arg\">$element</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">element()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string*</code></div>\n</div>\n<p>Summary: Returns the prefixes of the in-scope namespaces for\n<code>$element</code>. For namespaces that have a prefix, it\nreturns the prefix as an <code>xs:NCName</code>. For the default\nnamespace, which has no prefix, it returns the zero-length\nstring.</p>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"binary-functions\" id = \"binary-functions\"></a>12\nOperators on base64Binary and hexBinary</h2>\n<div class = \"div2\">\n<h3><a name = \"binary-value-comparisons\" id = \"binary-value-comparisons\"></a>12.1 Comparisons of base64Binary and\nhexBinary Values</h3>\n<p>The following comparison operators on\n<code>xs:base64Binary</code> and <code>xs:hexBinary</code> values\nare defined. Comparisons take two operands of the same type; that\nis, both operands must be <code>xs:base64Binary</code> or both\noperands may be <code>xs:hexBinary</code>. Each returns a boolean\nvalue.</p>\n<p>A value of type <code>xs:hexBinary</code> can be compared with a\nvalue of type <code>xs:base64Binary</code> by casting one value to\nthe other type. See <a href = \"#casting-to-binary\"><b>17.1.7 Casting\nto xs:base64Binary and xs:hexBinary</b></a>.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-hexBinary-equal\"><code>op:hexBinary-equal</code></a></td>\n<td>Returns <code>true</code> if the two arguments are equal.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-base64Binary-equal\"><code>op:base64Binary-equal</code></a></td>\n<td>Returns <code>true</code> if the two arguments are equal.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-hexBinary-equal\" id = \"XPath_func-hexBinary-equal\"></a>12.1.1 op:hexBinary-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:hexBinary-equal</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$value1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:hexBinary</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$value2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:hexBinary</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if <code>$value1</code> and\n<code>$value2</code> are of the same length, measured in binary\noctets, and contain the same octets in the same order. Otherwise,\nreturns <code>false</code>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:hexBinary</code> values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-base64Binary-equal\" id = \"XPath_func-base64Binary-equal\"></a>12.1.2 op:base64Binary-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">op:base64Binary-equal</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$value1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:base64Binary</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$value2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:base64Binary</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns <code>true</code> if <code>$value1</code> and\n<code>$value2</code> are of the same length, measured in binary\noctets, and contain the same octets in the same order. Otherwise,\nreturns <code>false</code>.</p>\n<p>This function backs up the \"eq\" and \"ne\" operators on\n<code>xs:base64Binary</code> values.</p>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"NOTATION-functions\" id = \"NOTATION-functions\"></a>13\nOperators on NOTATION</h2>\n<div class = \"div2\">\n<h3><a name = \"op.NOTATION\" id = \"op.NOTATION\"></a>13.1 Operators on\nNOTATION</h3>\n<p>This section discusses functions that take NOTATION as\narguments.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-NOTATION-equal\"><code>op:NOTATION-equal</code></a></td>\n<td>Returns <code>true</code> if the two arguments are <a href = \"#XPath_func-QName-equal\"><code>op:QName-equal</code></a>.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-NOTATION-equal\" id = \"XPath_func-NOTATION-equal\"></a>13.1.1 op:NOTATION-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:NOTATION-equal</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:NOTATION</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:NOTATION</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Returns <code>true</code> if the namespace URIs of\n<code>$arg1</code> and <code>$arg2</code> are equal and the local\nnames of <code>$arg1</code> and <code>$arg2</code> are identical\nbased on the Unicode code point collation:\n<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>.\nOtherwise, returns false. Two namespace URIs are considered equal\nif they are either both absent or both present and identical based\non the Unicode code point collation. The prefix parts of\n<code>$arg1</code> and <code>$arg2</code>, if any, are ignored.</p>\n<p>Backs up the \"eq\" and \"ne\" operators on values of type\n<code>xs:NOTATION</code>.</p>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"node-functions\" id = \"node-functions\"></a>14 Functions\nand Operators on Nodes</h2>\n<p>This section discusses functions and operators on nodes. Nodes\nare formally defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#Node\">Section 6\nNodes</a><sup><small>DM</small></sup>.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-name\"><code>fn:name</code></a></td>\n<td>Returns the name of the context node or the specified node as\nan <code>xs:string</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-local-name\"><code>fn:local-name</code></a></td>\n<td>Returns the local name of the context node or the specified\nnode as an <code>xs:NCName</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-namespace-uri\"><code>fn:namespace-uri</code></a></td>\n<td>Returns the namespace URI as an <code>xs:anyURI</code> for the\n<code>xs:QName</code> of the argument node or the context node if\nthe argument is omitted. This may be the URI corresponding to the\nzero-length string if the <code>xs:QName</code> is in no\nnamespace.</td>\n<td></td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-number\"><code>fn:number</code></a></td>\n<td>Returns the value of the context item after atomization or the\nspecified argument converted to an <code>xs:double</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-lang\"><code>fn:lang</code></a></td>\n<td>Returns <code>true</code> or <code>false</code>, depending on\nwhether the language of the given node or the context node, as\ndefined using the xml:lang attribute, is the same as, or a\nsublanguage of, the language specified by the argument.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-is-same-node\"><code>op:is-same-node</code></a></td>\n<td>Returns <code>true</code> if the two arguments have the same\nidentity.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-node-before\"><code>op:node-before</code></a></td>\n<td>Indicates whether one node appears before another node in\ndocument order.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-node-after\"><code>op:node-after</code></a></td>\n<td>Indicates whether one node appears after another node in\ndocument order.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-root\"><code>fn:root</code></a></td>\n<td>Returns the root of the tree to which the node argument\nbelongs.</td>\n</tr>\n</tbody>\n</table>\n<p>For the illustrative examples below assume an XQuery or\ntransformation operating on a PurchaseOrder document containing a\nnumber of line-item elements. Each line-item has child elements\ncalled description, price, quantity, etc. whose content is\ndifferent for each line-item. Quantity has simple content of type\n<code>xs:decimal</code>. Further assume that variables\n<code>$item1</code>, <code>$item2</code>, etc. are each bound to\nsingle line-item element nodes in the document in sequence and that\nthe value of the quantity child of the first line-item is\n<code>5.0</code>.</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;PurchaseOrder&gt;\n  &lt;line-item&gt;\n    &lt;description&gt; ... &lt;/description&gt;\n    &lt;price&gt; ... &lt;/price&gt;\n    &lt;quantity&gt;5.0&lt;/quantity&gt;\n      ...\n  &lt;/line-item&gt;\n  &lt;line-item&gt;\n      ...\n  &lt;/line-item&gt;\n      ...\n&lt;/PurchaseOrder&gt;\n</pre></div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-name\" id = \"XPath_func-name\"></a>14.1 fn:name</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:name</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\"><code class = \"function\">fn:name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the name of a node, as an\n<code>xs:string</code> that is either the zero-length string, or\nhas the lexical form of an <code>xs:QName</code>.</p>\n<p>If the argument is omitted, it defaults to the context item\n(<code>.</code>). The behavior of the function if the argument is\nomitted is exactly the same as if the context item had been passed\nas the argument.</p>\n<p>The following errors may be raised: if the context item is\nundefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>If the argument is supplied and is the empty sequence, the\nfunction returns the zero-length string.</p>\n<p>If the target node has no name (that is, if it is a document\nnode, a comment, a text node, or a namespace binding having no\nname), the function returns the zero-length string.</p>\n<p>Otherwise, the value returned is <a href = \"#XPath_func-string\"><code>fn:string(fn:node-name($arg))</code></a>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-local-name\" id = \"XPath_func-local-name\"></a>14.2\nfn:local-name</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:local-name</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n<div class = \"proto\"><code class = \"function\">fn:local-name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the local part of the name of <code>$arg</code>\nas an <code>xs:string</code> that will either be the zero-length\nstring or will have the lexical form of an\n<code>xs:NCName</code>.</p>\n<p>If the argument is omitted, it defaults to the context item\n(<code>.</code>). The behavior of the function if the argument is\nomitted is exactly the same as if the context item had been passed\nas the argument.</p>\n<p>The following errors may be raised: if the context item is\nundefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>If the argument is supplied and is the empty sequence, the\nfunction returns the zero-length string.</p>\n<p>If the target node has no name (that is, if it is a document\nnode, a comment, or a text node), the function returns the\nzero-length string.</p>\n<p>Otherwise, the value returned will be the local part of the\nexpanded-QName of the target node (as determined by the\n<code>dm:node-name</code> accessor in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-node-name\">Section 5.11\nnode-name Accessor</a><sup><small>DM</small></sup><span>)</span>.\nThis will be an <code>xs:string</code> whose lexical form is an\n<code>xs:NCName</code>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-namespace-uri\" id = \"XPath_func-namespace-uri\"></a>14.3\nfn:namespace-uri</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:namespace-uri</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI</code></div>\n<div class = \"proto\"><code class = \"function\">fn:namespace-uri</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI</code></div>\n</div>\n<p>Summary: Returns the namespace URI part of the name of\n<code>$arg</code>, as an <code>xs:anyURI</code> value.</p>\n<p>If the argument is omitted, it defaults to the context node\n(<code>.</code>). The behavior of the function if the argument is\nomitted is exactly the same as if the context item had been passed\nas the argument.</p>\n<p>The following errors may be raised: if the context item is\nundefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>If <code>$arg</code> is neither an element nor an attribute\nnode, or if it is an element or attribute node whose expanded-QName\n(as determined by the <code>dm:node-name</code> accessor in the\n<a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-node-name\">Section 5.11\nnode-name Accessor</a><sup><small>DM</small></sup>) is in no\nnamespace, then the function returns the <code>xs:anyURI</code>\ncorresponding to the zero-length string.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-number\" id = \"XPath_func-number\"></a>14.4 fn:number</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:number</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double</code></div>\n<div class = \"proto\"><code class = \"function\">fn:number</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double</code></div>\n</div>\n<p>Summary: Returns the value indicated by <code>$arg</code> or, if\n<code>$arg</code> is not specified, the context item after\natomization, converted to an <code>xs:double</code></p>\n<p>Calling the zero-argument version of the function is defined to\ngive the same result as calling the single-argument version with\nthe context item (<code>.</code>). That is,\n<code>fn:number()</code> is equivalent to\n<code>fn:number(.)</code>.</p>\n<p>If <code>$arg</code> is the empty sequence or if\n<code>$arg</code> or the context item cannot be converted to an\n<code>xs:double</code>, the <code>xs:double</code> value\n<code>NaN</code> is returned. If the context item is undefined an\nerror is raised: [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>.</p>\n<p>If <code>$arg</code> is the empty sequence, <code>NaN</code> is\nreturned. Otherwise, <code>$arg</code>, or the context item after\natomization, is converted to an <code>xs:double</code> following\nthe rules of <a href = \"#casting-to-double\"><b>17.1.3.2 Casting to\nxs:double</b></a>. If the conversion to <code>xs:double</code>\nfails, the <code>xs:double</code> value <code>NaN</code> is\nreturned.</p>\n<div class = \"div3\">\n<h4><a name = \"func-number-examples\" id = \"func-number-examples\"></a>14.4.1 Examples</h4>\n<ul>\n<li>\n<p><code>fn:number($item1/quantity)</code> returns\n<code>5.0</code>.</p>\n</li>\n<li>\n<p><code>fn:number($item2/description)</code> returns\n<code>NaN</code> (assuming the <code>description</code> is\nnon-numeric).</p>\n</li>\n<li>\n<p>Assume that the context item is the <code>xs:string</code>\n\"<code>15</code>\". <code>fn:number()</code> returns\n<code>1.5E1</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-lang\" id = \"XPath_func-lang\"></a>14.5 fn:lang</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:lang</code>(<code class = \"arg\">$testlang</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:lang</code>(<code class = \"arg\">$testlang</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: This function tests whether the language of\n<code>$node</code>, or the context item if the second argument is\nomitted, as specified by <code>xml:lang</code> attributes is the\nsame as, or is a sublanguage of, the language specified by\n<code>$testlang</code>. The behavior of the function if the second\nargument is omitted is exactly the same as if the context item\n(<code>.</code>) had been passed as the second argument. The\nlanguage of the argument node, or the context item if the second\nargument is omitted, is determined by the value of the\n<code>xml:lang</code> attribute on the node, or, if the node has no\nsuch attribute, by the value of the <code>xml:lang</code> attribute\non the nearest ancestor of the node that has an\n<code>xml:lang</code> attribute. If there is no such ancestor, then\nthe function returns <code>false</code></p>\n<p>The following errors may be raised: if the context item is\nundefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>If <code>$testlang</code> is the empty sequence it is\ninterpreted as the zero-length string.</p>\n<p>The relevant <code>xml:lang</code> attribute is determined by\nthe value of the XPath expression:</p>\n<div class = \"exampleInner\">\n<pre>\n(ancestor-or-self::*/@xml:lang)[last()]\n</pre></div>\n<p>If this expression returns an empty sequence, the function\nreturns <code>false</code>.</p>\n<p>Otherwise, the function returns <code>true</code> if and only\nif, based on a caseless default match as specified in section 3.13\nof <a href = \"#Unicode4\">[The Unicode Standard]</a>, either:</p>\n<ol class = \"enumar\">\n<li>\n<p><code>$testlang</code> is equal to the string-value of the\nrelevant <code>xml:lang</code> attribute, or</p>\n</li>\n<li>\n<p><code>$testlang</code> is equal to some substring of the\nstring-value of the relevant <code>xml:lang</code> attribute that\nstarts at the start of the string-value and ends immediately before\na hyphen, \"-\" (The character \"-\" is HYPHEN-MINUS, #x002D).</p>\n</li>\n</ol>\n<div class = \"div3\">\n<h4><a name = \"func-lang-examples\" id = \"func-lang-examples\"></a>14.5.1\nExamples</h4>\n<ul>\n<li>\n<p>The expression <code>fn:lang(\"en\")</code> would return\n<code>true</code> if the context node were any of the following\nfour elements:</p>\n<ul>\n<li>\n<p><code>&lt;para xml:lang=\"en\"/&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;div xml:lang=\"en\"&gt;&lt;para&gt;And now, and\nforever!&lt;/para&gt;&lt;/div&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;para xml:lang=\"EN\"/&gt;</code></p>\n</li>\n<li>\n<p><code>&lt;para xml:lang=\"en-us\"/&gt;</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>The expression <code>fn:lang(\"fr\")</code> would return\n<code>false</code> if the context node were <code>&lt;para\nxml:lang=\"EN\"/&gt;</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-is-same-node\" id = \"XPath_func-is-same-node\"></a>14.6\nop:is-same-node</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:is-same-node</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: If the node identified by the value of\n<code>$parameter1</code> is the same node as the node identified by\nthe value of <code>$parameter2</code> (that is, the two nodes have\nthe same identity), then the function returns <code>true</code>;\notherwise, the function returns <code>false</code>. This function\nbacks up the \"is\" operator on nodes.</p>\n<div class = \"div3\">\n<h4><a name = \"func-is-same-node-examples\" id = \"func-is-same-node-examples\"></a>14.6.1 Examples</h4>\n<ul>\n<li>\n<p><code>op:is-same-node($item1, $item1)</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:is-same-node($item1, $item2)</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-node-before\" id = \"XPath_func-node-before\"></a>14.7\nop:node-before</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:node-before</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: If the node identified by the value of\n<code>$parameter1</code> occurs in document order before the node\nidentified by the value of <code>$parameter2</code>, this function\nreturns <code>true</code>; otherwise, it returns\n<code>false</code>. The rules determining the order of nodes within\na single document and in different documents can be found in\n<a href = \"http://www.w3.org/TR/xpath-datamodel/#document-order\">Section 2.4\nDocument Order</a><sup><small>DM</small></sup>. This function backs\nup the \"&lt;&lt;\" operator.</p>\n<div class = \"div3\">\n<h4><a name = \"func-node-before-examples\" id = \"func-node-before-examples\"></a>14.7.1 Examples</h4>\n<ul>\n<li>\n<p><code>op:node-before($item1, $item2)</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>op:node-before($item1, $item1)</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-node-after\" id = \"XPath_func-node-after\"></a>14.8\nop:node-after</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:node-after</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: If the node identified by the value of\n<code>$parameter1</code> occurs in document order after the node\nidentified by the value of <code>$parameter2</code>, this function\nreturns <code>true</code>; otherwise, it returns\n<code>false</code>. The rules determining the order of nodes within\na single document and in different documents can be found in\n<a href = \"http://www.w3.org/TR/xpath-datamodel/#document-order\">Section 2.4\nDocument Order</a><sup><small>DM</small></sup>. This function backs\nup the \"&gt;&gt;\" operator.</p>\n<div class = \"div3\">\n<h4><a name = \"func-node-after-examples\" id = \"func-node-after-examples\"></a>14.8.1 Examples</h4>\n<ul>\n<li>\n<p><code>op:node-after($item1, $item2)</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>op:node-after($item1, $item1)</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>op:node-after($item2, $item1)</code> returns\n<code>true</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-root\" id = \"XPath_func-root\"></a>14.9 fn:root</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:root</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:root</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()?</code></div>\n</div>\n<p>Summary: Returns the root of the tree to which <code>$arg</code>\nbelongs. This will usually, but not necessarily, be a document\nnode.</p>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned.</p>\n<p>If <code>$arg</code> is a document node, <code>$arg</code> is\nreturned.</p>\n<p>If the function is called without an argument, the context item\n(<code>.</code>) is used as the default argument. The behavior of\nthe function if the argument is omitted is exactly the same as if\nthe context item had been passed as the argument.</p>\n<p>The following errors may be raised: if the context item is\nundefined [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>;\nif the context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<div class = \"div3\">\n<h4><a name = \"func-root-examples\" id = \"func-root-examples\"></a>14.9.1\nExamples</h4>\n<p>These examples use some variables which could be defined in\n<a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> as:</p>\n<div class = \"exampleInner\">\n<pre>\nlet $i := &lt;tool&gt;wrench&lt;/tool&gt;\nlet $o := &lt;order&gt; {$i} &lt;quantity&gt;5&lt;/quantity&gt; &lt;/order&gt;\nlet $odoc := document {$o}\nlet $newi := $o/tool\n</pre></div>\n<p>Or they could be defined in <a href = \"#xslt20\">[XSL\nTransformations (XSLT) Version 2.0]</a> as:</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:variable name=\"i\" as=\"element()\"&gt;\n  &lt;tool&gt;wrench&lt;/tool&gt;\n&lt;/xsl:variable&gt;\n\n&lt;xsl:variable name=\"o\" as=\"element()\"&gt;\n  &lt;order&gt;\n    &lt;xsl:copy-of select=\"$i\"/&gt;\n    &lt;quantity&gt;5&lt;/quantity&gt;\n  &lt;/order&gt;\n&lt;/xsl:variable&gt;\n\n&lt;xsl:variable name=\"odoc\"&gt;\n  &lt;xsl:copy-of select=\"$o\"/&gt;\n&lt;/xsl:variable&gt;\n\n&lt;xsl:variable name=\"newi\" select=\"$o/tool\"/&gt;\n</pre></div>\n<ul>\n<li>\n<p><code>fn:root($i)</code> returns <code>$i</code></p>\n</li>\n<li>\n<p><code>fn:root($o/quantity)</code> returns <code>$o</code></p>\n</li>\n<li>\n<p><code>fn:root($odoc//quantity)</code> returns\n<code>$odoc</code></p>\n</li>\n<li>\n<p><code>fn:root($newi)</code> returns <code>$o</code></p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The final three examples could be made type-safe by wrapping\ntheir operands with fn:exactly-one().</p>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"sequence-functions\" id = \"sequence-functions\"></a>15\nFunctions and Operators on Sequences</h2>\n<p>A <code>sequence</code> is an ordered collection of zero or more\n<code>items</code>. An <code>item</code> is either a node or an\natomic value. The terms <code>sequence</code> and <code>item</code>\nare defined formally in <a href = \"#xquery\">[XQuery 1.0: An XML Query\nLanguage]</a> and <a href = \"#xpath20\">[XML Path Language (XPath)\n2.0]</a>.</p>\n<div class = \"div2\">\n<h3><a name = \"general-seq-funcs\" id = \"general-seq-funcs\"></a>15.1\nGeneral Functions and Operators on Sequences</h3>\n<p>The following functions are defined on sequences.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-boolean\"><code>fn:boolean</code></a></td>\n<td>Computes the effective boolean value of the argument\nsequence.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-concatenate\"><code>op:concatenate</code></a></td>\n<td>Concatenates two sequences.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-index-of\"><code>fn:index-of</code></a></td>\n<td>Returns a sequence of <code>xs:integer</code>s, each of which\nis the index of a member of the sequence specified as the first\nargument that is equal to the value of the second argument. If no\nmembers of the specified sequence are equal to the value of the\nsecond argument, the empty sequence is returned.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-empty\"><code>fn:empty</code></a></td>\n<td>Indicates whether or not the provided sequence is empty.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-exists\"><code>fn:exists</code></a></td>\n<td>Indicates whether or not the provided sequence is not\nempty.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-distinct-values\"><code>fn:distinct-values</code></a></td>\n<td>Returns a sequence in which all but one of a set of duplicate\nvalues, based on value equality, have been deleted. The order in\nwhich the distinct values are returned is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-insert-before\"><code>fn:insert-before</code></a></td>\n<td>Inserts an item or sequence of items at a specified position in\na sequence.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-remove\"><code>fn:remove</code></a></td>\n<td>Removes an item from a specified position in a sequence.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-reverse\"><code>fn:reverse</code></a></td>\n<td>Reverses the order of items in a sequence.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-subsequence\"><code>fn:subsequence</code></a></td>\n<td>Returns the subsequence of a given sequence, identified by\nlocation.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-unordered\"><code>fn:unordered</code></a></td>\n<td>Returns the items in the given sequence in a non-deterministic\norder.</td>\n</tr>\n</tbody>\n</table>\n<p>As in the previous section, for the illustrative examples below,\nassume an XQuery or transformation operating on a non-empty\nPurchase Order document containing a number of line-item elements.\nThe variable <code>$seq</code> is bound to the sequence of\nline-item nodes in document order. The variables\n<code>$item1</code>, <code>$item2</code>, etc. are bound to\nseparate, individual line-item nodes in the sequence.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-boolean\" id = \"XPath_func-boolean\"></a>15.1.1\nfn:boolean</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:boolean</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: Computes the effective boolean value of the sequence\n<code>$arg</code>. See <a href = \"http://www.w3.org/TR/xpath20/#id-ebv\">Section 2.4.3 Effective\nBoolean Value</a><sup><small>XP</small></sup></p>\n<ul>\n<li>\n<p>If <code>$arg</code> is the empty sequence,\n<code>fn:boolean</code> returns <code>false</code>.</p>\n</li>\n<li>\n<p>If <code>$arg</code> is a sequence whose first item is a node,\n<code>fn:boolean</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p>If <code>$arg</code> is a singleton value of type\n<code>xs:boolean</code> or a derived from <code>xs:boolean</code>,\n<code>fn:boolean</code> returns <code>$arg</code>.</p>\n</li>\n<li>\n<p>If <code>$arg</code> is a singleton value of type\n<code>xs:string</code> or a type derived from\n<code>xs:string</code>, <code>xs:anyURI</code> or a type derived\nfrom <code>xs:anyURI</code> or <code>xs:untypedAtomic</code>,\n<code>fn:boolean</code> returns <code>false</code> if the operand\nvalue has zero length; otherwise it returns <code>true</code>.</p>\n</li>\n<li>\n<p>If <code>$arg</code> is a singleton value of any numeric type or\na type derived from a numeric type, <code>fn:boolean</code> returns\n<code>false</code> if the operand value is <code>NaN</code> or is\nnumerically equal to zero; otherwise it returns\n<code>true</code>.</p>\n</li>\n<li>\n<p>In all other cases, <code>fn:boolean</code> raises a type error\n[<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n</ul>\n<p>The static semantics of this function are described in <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_boolean\">Section\n7.2.4 The fn:boolean and fn:not\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The result of this function is not necessarily the same as \"\n<code>$arg cast as xs:boolean</code> \". For example,\n<code>fn:boolean(\"false\")</code> returns the value\n<code>\"true\"</code> whereas \"<code>false</code>\" <code>cast as\nxs:boolean</code> returns <code>false</code>.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-boolean-examples\" id = \"func-boolean-examples\"></a>15.1.1.1 Examples</h5>\n<p>let <code>$x := (\"a\", \"b\", \"c\")</code></p>\n<ul>\n<li>\n<p><code>fn:boolean($x)</code> raises a type error [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n<li>\n<p><code>fn:boolean($x[1])</code> returns <code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:boolean($x[0])</code> returns <code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-concatenate\" id = \"XPath_func-concatenate\"></a>15.1.2\nop:concatenate</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:concatenate</code>(<code class = \"arg\">$seq1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,\n<code class = \"arg\">$seq2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n</div>\n<p>Summary: Returns a sequence consisting of the items in\n<code>$seq1</code> followed by the items in <code>$seq2</code>.\nThis function backs up the infix operator \",\". If either sequence\nis the empty sequence, the other operand is returned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_constructing_sequences\">\nSection 4.3.1 Constructing\nSequences</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-concatenate-examples\" id = \"func-concatenate-examples\"></a>15.1.2.1 Examples</h5>\n<ul>\n<li>\n<p><code>op:concatenate((1, 2, 3), (4, 5))</code> returns <code>(1,\n2, 3, 4, 5)</code>.</p>\n</li>\n<li>\n<p><code>op:concatenate((1, 2, 3), ())</code> returns <code>(1, 2,\n3)</code>.</p>\n</li>\n<li>\n<p><code>op:concatenate((), ())</code> returns <code>()</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-index-of\" id = \"XPath_func-index-of\"></a>15.1.3\nfn:index-of</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:index-of</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$seqParam</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$srchParam</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer*</code></td>\n</tr>\n</table>\n</div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:index-of</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$seqParam</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$srchParam</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns a sequence of positive integers giving the\npositions within the sequence <code>$seqParam</code> of items that\nare equal to <code>$srchParam</code>.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>. The collation is used when string comparison is\nrequired.</p>\n<p>The items in the sequence <code>$seqParam</code> are compared\nwith <code>$srchParam</code> under the rules for the\n<code>eq</code> operator. Values of type\n<code>xs:untypedAtomic</code> are compared as if they were of type\n<code>xs:string</code>. Values that cannot be compared, i.e. the\n<code>eq</code> operator is not defined for their types, are\nconsidered to be distinct. If an item compares equal, then the\nposition of that item in the sequence <code>$seqParam</code> is\nincluded in the result.</p>\n<p>If the value of <code>$seqParam</code> is the empty sequence, or\nif no item in <code>$seqParam</code> matches\n<code>$srchParam</code>, then the empty sequence is returned.</p>\n<p>The first item in a sequence is at position 1, not position\n0.</p>\n<p>The result sequence is in ascending numeric order.</p>\n<div class = \"div4\">\n<h5><a name = \"func-index-of-examples\" id = \"func-index-of-examples\"></a>15.1.3.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:index-of ((10, 20, 30, 40), 35)</code> returns\n<code>().</code></p>\n</li>\n<li>\n<p><code>fn:index-of ((10, 20, 30, 30, 20, 10), 20)</code> returns\n<code>(2, 5).</code></p>\n</li>\n<li>\n<p><code>fn:index-of ((\"a\", \"sport\", \"and\", \"a\", \"pastime\"),\n\"a\")</code> returns <code>(1, 4).</code></p>\n</li>\n<li>\n<p>If <code>@a</code> is an attribute of type\n<code>xs:NMTOKENS</code> whose string value is <code>\"red green\nblue\"</code>, and whose typed value is therefore the sequence of\nthree <code>xs:NMTOKEN</code> values <code>(\"red\", \"green\",\n\"blue\")</code>, then <code>fn:index-of(@a, \"blue\")</code> returns\n<code>3</code>.</p>\n<p>This is because the function calling mechanism atomizes the\nattribute node to produce a sequence of three\n<code>xs:NMTOKEN</code>s.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-empty\" id = \"XPath_func-empty\"></a>15.1.4 fn:empty</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:empty</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: If the value of <code>$arg</code> is the empty\nsequence, the function returns <code>true</code>; otherwise, the\nfunction returns <code>false</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-empty-examples\" id = \"func-empty-examples\"></a>15.1.4.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:empty(fn:remove((\"hello\", \"world\"), 1))</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-exists\" id = \"XPath_func-exists\"></a>15.1.5\nfn:exists</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:exists</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: If the value of <code>$arg</code> is not the empty\nsequence, the function returns <code>true</code>; otherwise, the\nfunction returns <code>false</code>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-exists-examples\" id = \"func-exists-examples\"></a>15.1.5.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:exists(fn:remove((\"hello\"), 1))</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-distinct-values\" id = \"XPath_func-distinct-values\"></a>15.1.6 fn:distinct-values</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:distinct-values</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType*</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:distinct-values</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the sequence that results from removing from\n<code>$arg</code> all but one of a set of values that are\n<code>eq</code> to one other. Values of type\n<code>xs:untypedAtomic</code> are compared as if they were of type\n<code>xs:string</code>. Values that cannot be compared, i.e. the\n<code>eq</code> operator is not defined for their types, are\nconsidered to be distinct. The order in which the sequence of\nvalues is returned is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>The static type of the result is a sequence of prime types as\ndefined in <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_distinct_node_vals\">Section\n7.2.7 The fn:distinct-values\nfunction</a><sup><small>FS</small></sup>.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>. The collation is used when string comparison is\nrequired.</p>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned.</p>\n<p>For <code>xs:float</code> and <code>xs:double</code> values,\npositive zero is equal to negative zero and, although\n<code>NaN</code> does not equal itself, if <code>$arg</code>\ncontains multiple <code>NaN</code> values a single <code>NaN</code>\nis returned.</p>\n<p>If <code>xs:dateTime</code>, <code>xs:date</code> or\n<code>xs:time</code> values do not have a timezone, they are\nconsidered to have the implicit timezone provided by the dynamic\ncontext for the purpose of comparison. Note that\n<code>xs:dateTime</code>, <code>xs:date</code> or\n<code>xs:time</code> values can compare equal even if their\ntimezones are different.</p>\n<p>Which value of a set of values that compare equal is returned is\n<a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>If the input sequence contains values of different numeric types\nthat differ from each other by small amounts, then the\n<code>eq</code> operator is not transitive, because of rounding\neffects occurring during type promotion. In the situation where the\ninput contains three values <var>A</var>, <var>B</var>, and\n<var>C</var> such that <code>A eq B</code>, <code>B eq C</code>,\nbut <code>A ne C</code>, then the number of items in the result of\nthe function (as well as the choice of which items are returned) is\n<a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation-dependent<span class = \"arrow\">·</span></a>, subject only to the constraints that (a) no\ntwo items in the result sequence compare equal to each other, and\n(b) every input item that does not appear in the result sequence\ncompares equal to some item that does appear in the result\nsequence.</p>\n<p>For example, this arises when computing:</p>\n<div class = \"exampleInner\">\n<pre>\n      distinct-values(\n         (xs:float('1.0'),\n          xs:decimal('1.0000000000100000000001',\n          xs:double( '1.00000000001'))\n</pre></div>\n<p>because the values of type <code>xs:float</code> and\n<code>xs:double</code> both compare equal to the value of type\n<code>xs:decimal</code> but not equal to each other.</p>\n<div class = \"div4\">\n<h5><a name = \"func-distinct-values-examples\" id = \"func-distinct-values-examples\"></a>15.1.6.1 Examples</h5>\n<ul>\n<li>\n<p><code>fn:distinct-values((1, 2.0, 3, 2))</code> might return\n<code>(1, 3, 2.0)</code>.</p>\n</li>\n<li>\n<p>The following query:</p>\n<div class = \"exampleInner\">\n<pre>\nlet $x as xs:untypedAtomic*\n    := (xs:untypedAtomic(\"cherry\"),\n        xs:untypedAtomic(\"bar\"),\n        xs:untypedAtomic(\"bar\"))\nreturn fn:distinct-values ($x)\n                                    \n</pre></div>\n<p>returns a sequence containing two items of type\n<code>xs:untypedAtomic</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-insert-before\" id = \"XPath_func-insert-before\"></a>15.1.7\nfn:insert-before</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:insert-before</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$target</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$position</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$inserts</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns a new sequence constructed from the value of\n<code>$target</code> with the value of <code>$inserts</code>\ninserted at the position specified by the value of\n<code>$position</code>. (The value of <code>$target</code> is not\naffected by the sequence construction.)</p>\n<p>If <code>$target</code> is the empty sequence,\n<code>$inserts</code> is returned. If <code>$inserts</code> is the\nempty sequence, <code>$target</code> is returned.</p>\n<p>The value returned by the function consists of all items of\n<code>$target</code> whose index is less than\n<code>$position</code>, followed by all items of\n<code>$inserts</code>, followed by the remaining elements of\n<code>$target</code>, in that sequence.</p>\n<p>If <code>$position</code> is less than one (1), the first\nposition, the effective value of <code>$position</code> is one (1).\nIf <code>$position</code> is greater than the number of items in\n<code>$target</code>, then the effective value of\n<code>$position</code> is equal to the number of items in\n<code>$target</code> plus 1.</p>\n<p>For detailed semantics see, <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_insert_before\">Section\n7.2.15 The fn:insert-before\nfunction</a><sup><small>FS</small></sup>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-insert-before-examples\" id = \"func-insert-before-examples\"></a>15.1.7.1 Examples</h5>\n<p>let <code>$x</code> := <code>(\"a\", \"b\", \"c\")</code></p>\n<ul>\n<li>\n<p><code>fn:insert-before($x, 0, \"z\")</code> returns <code>(\"z\",\n\"a\", \"b\", \"c\")</code></p>\n</li>\n<li>\n<p><code>fn:insert-before($x, 1, \"z\")</code> returns <code>(\"z\",\n\"a\", \"b\", \"c\")</code></p>\n</li>\n<li>\n<p><code>fn:insert-before($x, 2, \"z\")</code> returns <code>(\"a\",\n\"z\", \"b\", \"c\")</code></p>\n</li>\n<li>\n<p><code>fn:insert-before($x, 3, \"z\")</code> returns <code>(\"a\",\n\"b\", \"z\", \"c\")</code></p>\n</li>\n<li>\n<p><code>fn:insert-before($x, 4, \"z\")</code> returns <code>(\"a\",\n\"b\", \"c\", \"z\")</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-remove\" id = \"XPath_func-remove\"></a>15.1.8\nfn:remove</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:remove</code>(<code class = \"arg\">$target</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,\n<code class = \"arg\">$position</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n</div>\n<p>Summary: Returns a new sequence constructed from the value of\n<code>$target</code> with the item at the position specified by the\nvalue of <code>$position</code> removed.</p>\n<p>If <code>$position</code> is less than 1 or greater than the\nnumber of items in <code>$target</code>, <code>$target</code> is\nreturned. Otherwise, the value returned by the function consists of\nall items of <code>$target</code> whose index is less than\n<code>$position</code>, followed by all items of\n<code>$target</code> whose index is greater than\n<code>$position</code>. If <code>$target</code> is the empty\nsequence, the empty sequence is returned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_remove\">Section\n7.2.11 The fn:remove function</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-remove-examples\" id = \"func-remove-examples\"></a>15.1.8.1 Examples</h5>\n<p>let <code>$x</code> := <code>(\"a\", \"b\", \"c\")</code></p>\n<ul>\n<li>\n<p><code>fn:remove($x, 0)</code> returns <code>(\"a\", \"b\",\n\"c\")</code></p>\n</li>\n<li>\n<p><code>fn:remove($x, 1)</code> returns <code>(\"b\",\n\"c\")</code></p>\n</li>\n<li>\n<p><code>fn:remove($x, 6)</code> returns <code>(\"a\", \"b\",\n\"c\")</code></p>\n</li>\n<li>\n<p><code>fn:remove((), 3)</code> returns <code>()</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-reverse\" id = \"XPath_func-reverse\"></a>15.1.9\nfn:reverse</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:reverse</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n</div>\n<p>Summary: Reverses the order of items in a sequence. If\n<code>$arg</code> is the empty sequence, the empty sequence is\nreturned.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_reverse\">Section\n7.2.12 The fn:reverse function</a><sup><small>FS</small></sup></p>\n<div class = \"div4\">\n<h5><a name = \"func-reverse-examples\" id = \"func-reverse-examples\"></a>15.1.9.1 Examples</h5>\n<p>let <code>$x</code> := <code>(\"a\", \"b\", \"c\")</code></p>\n<ul>\n<li>\n<p><code>fn:reverse($x)</code> returns <code>(\"c\", \"b\",\n\"a\")</code></p>\n</li>\n<li>\n<p><code>fn:reverse((\"hello\"))</code> returns\n<code>(\"hello\")</code></p>\n</li>\n<li>\n<p><code>fn:reverse(())</code> returns <code>()</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-subsequence\" id = \"XPath_func-subsequence\"></a>15.1.10\nfn:subsequence</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:subsequence</code>(<code class = \"arg\">$sourceSeq</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,\n<code class = \"arg\">$startingLoc</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:subsequence</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$sourceSeq</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$startingLoc</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$length</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns the contiguous sequence of items in the value\nof <code>$sourceSeq</code> beginning at the position indicated by\nthe value of <code>$startingLoc</code> and continuing for the\nnumber of items indicated by the value of <code>$length</code>.</p>\n<p>In the two-argument case, returns:</p>\n<div class = \"exampleInner\">\n<pre>\n$sourceSeq[fn:round($startingLoc) le position()]\n</pre></div>\n<p>In the three-argument case, returns:</p>\n<div class = \"exampleInner\">\n<pre>\n$sourceSeq[fn:round($startingLoc) le position() \n    and position() lt fn:round($startingLoc) + fn:round($length)]\n</pre></div>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>If <code>$sourceSeq</code> is the empty sequence, the empty\nsequence is returned.</p>\n<p>If <code>$startingLoc</code> is zero or negative, the\nsubsequence includes items from the beginning of the\n<code>$sourceSeq</code>.</p>\n<p>If <code>$length</code> is not specified, the subsequence\nincludes items to the end of <code>$sourceSeq</code>.</p>\n<p>If <code>$length</code> is greater than the number of items in\nthe value of <code>$sourceSeq</code> following\n<code>$startingLoc</code>, the subsequence includes items to the\nend of <code>$sourceSeq</code>.</p>\n<p>The first item of a sequence is located at position 1, not\nposition 0.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_subsequence\">Section\n7.2.13 The fn:subsequence\nfunction</a><sup><small>FS</small></sup>.</p>\n<p>The reason the function accepts arguments of type\n<code>xs:double</code> is that many computations on untyped data\nreturn an <code>xs:double</code> result; and the reason for the\nrounding rules is to compensate for any imprecision in these\nfloating-point computations.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-subsequence-examples\" id = \"func-subsequence-examples\"></a>15.1.10.1 Examples</h5>\n<p>Assume <code>$seq = ($item1, $item2, $item3, $item4,\n...)</code></p>\n<ul>\n<li>\n<p><code>fn:subsequence($seq, 4)</code> returns <code>($item4,\n...)</code></p>\n</li>\n<li>\n<p><code>fn:subsequence($seq, 3, 2)</code> returns <code>($item3,\n$item4)</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-unordered\" id = \"XPath_func-unordered\"></a>15.1.11\nfn:unordered</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:unordered</code>(<code class = \"arg\">$sourceSeq</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()*</code></div>\n</div>\n<p>Summary: Returns the items of <code>$sourceSeq</code> in an\n<a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a> order.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Query optimizers may be able to do a better job if the order of\nthe output sequence is not specified. For example, when retrieving\nprices from a purchase order, if an index exists on prices, it may\nbe more efficient to return the prices in index order rather than\nin document order.</p>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"cardinality-functions\" id = \"cardinality-functions\"></a>15.2 Functions That Test the\nCardinality of Sequences</h3>\n<p>The following functions test the cardinality of their sequence\narguments.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-zero-or-one\"><code>fn:zero-or-one</code></a></td>\n<td>Returns the input sequence if it contains zero or one items.\nRaises an error otherwise.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-one-or-more\"><code>fn:one-or-more</code></a></td>\n<td>Returns the input sequence if it contains one or more items.\nRaises an error otherwise.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-exactly-one\"><code>fn:exactly-one</code></a></td>\n<td>Returns the input sequence if it contains exactly one item.\nRaises an error otherwise.</td>\n</tr>\n</tbody>\n</table>\n<p>The functions <a href = \"#XPath_func-zero-or-one\"><code>fn:zero-or-one</code></a>, <a href = \"#XPath_func-one-or-more\"><code>fn:one-or-more</code></a>, and <a href = \"#XPath_func-exactly-one\"><code>fn:exactly-one</code></a> defined in this\nsection, check that the cardinality of a sequence is in the\nexpected range. They are particularly useful with regard to static\ntyping. For example, the XML Schema <a href = \"#xmlschema-1\">[XML\nSchema Part 1: Structures Second Edition]</a> describing the output\nof a query may require a sequence of length one-or-more in some\nposition, but the static type system may not be able to infer this;\ninserting a call to <a href = \"#XPath_func-one-or-more\"><code>fn:one-or-more</code></a> at the\nappropriate place will provide a suitable static type at query\nanalysis time, and confirm that the length is correct with a\ndynamic check at query execution time.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-zero-or-one\" id = \"XPath_func-zero-or-one\"></a>15.2.1\nfn:zero-or-one</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:zero-or-one</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()?</code></div>\n</div>\n<p>Summary: Returns <code>$arg</code> if it contains zero or one\nitems. Otherwise, raises an error [<a href = \"#ERRFORG0003\" title = \"err:FORG0003\">err:FORG0003</a>].</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_cardinality_funcs\">Section\n7.2.16 The fn:zero-or-one, fn:one-or-more, and fn:exactly-one\nfunctions</a><sup><small>FS</small></sup></p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-one-or-more\" id = \"XPath_func-one-or-more\"></a>15.2.2\nfn:one-or-more</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:one-or-more</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()+</code></div>\n</div>\n<p>Summary: Returns <code>$arg</code> if it contains one or more\nitems. Otherwise, raises an error [<a href = \"#ERRFORG0004\" title = \"err:FORG0004\">err:FORG0004</a>].</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_cardinality_funcs\">Section\n7.2.16 The fn:zero-or-one, fn:one-or-more, and fn:exactly-one\nfunctions</a><sup><small>FS</small></sup></p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-exactly-one\" id = \"XPath_func-exactly-one\"></a>15.2.3\nfn:exactly-one</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:exactly-one</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">item()</code></div>\n</div>\n<p>Summary: Returns <code>$arg</code> if it contains exactly one\nitem. Otherwise, raises an error [<a href = \"#ERRFORG0005\" title = \"err:FORG0005\">err:FORG0005</a>].</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_cardinality_funcs\">Section\n7.2.16 The fn:zero-or-one, fn:one-or-more, and fn:exactly-one\nfunctions</a><sup><small>FS</small></sup></p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"union-intersection-except\" id = \"union-intersection-except\"></a>15.3 Equals, Union, Intersection\nand Except</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-deep-equal\"><code>fn:deep-equal</code></a></td>\n<td>Returns <code>true</code> if the two arguments have items that\ncompare equal in corresponding positions.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-union\"><code>op:union</code></a></td>\n<td>Returns the union of the two sequence arguments, eliminating\nduplicates.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-intersect\"><code>op:intersect</code></a></td>\n<td>Returns the intersection of the two sequence arguments,\neliminating duplicates.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-except\"><code>op:except</code></a></td>\n<td>Returns the difference of the two sequence arguments,\neliminating duplicates.</td>\n</tr>\n</tbody>\n</table>\n<p>As in the previous sections, for the illustrative examples\nbelow, assume an XQuery or transformation operating on a Purchase\nOrder document containing a number of line-item elements. The\nvariables <code>$item1</code>, <code>$item2</code>, etc. are bound\nto individual line-item nodes in the sequence. We use sequences of\nthese nodes in some of the examples below.</p>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-deep-equal\" id = \"XPath_func-deep-equal\"></a>15.3.1\nfn:deep-equal</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:deep-equal</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:deep-equal</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$parameter1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$parameter2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: This function assesses whether two sequences are\ndeep-equal to each other. To be deep-equal, they must contain items\nthat are pairwise deep-equal; and for two items to be deep-equal,\nthey must either be atomic values that compare equal, or nodes of\nthe same kind, with the same name, whose children are deep-equal.\nThis is defined in more detail below. The <code>$collation</code>\nargument identifies a collation which is used at all levels of\nrecursion when strings are compared (but not when names are\ncompared), according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>.</p>\n<p>If the two sequences are both empty, the function returns\n<code>true</code>.</p>\n<p>If the two sequences are of different lengths, the function\nreturns <code>false</code>.</p>\n<p>If the two sequences are of the same length, the function\nreturns <code>true</code> if and only if every item in the sequence\n<code>$parameter1</code> is deep-equal to the item at the same\nposition in the sequence <code>$parameter2</code>. The rules for\ndeciding whether two items are deep-equal follow.</p>\n<p>Call the two items <code>$i1</code> and <code>$i2</code>\nrespectively.</p>\n<p>If <code>$i1</code> and <code>$i2</code> are both atomic values,\nthey are deep-equal if and only if <code>($i1 eq $i2)</code> is\n<code>true</code>, or if both values are <code>NaN</code>. If the\n<code>eq</code> operator is not defined for <code>$i1</code> and\n<code>$i2</code>, the function returns <code>false</code>.</p>\n<p>If one of the pair <code>$i1</code> or <code>$i2</code> is an\natomic value and the other is a node, the function returns\n<code>false</code>.</p>\n<p>If <code>$i1</code> and <code>$i2</code> are both nodes, they\nare compared as described below:</p>\n<p>If the two nodes are of different kinds, the result is\n<code>false</code>.</p>\n<p>If the two nodes are both document nodes then they are\ndeep-equal if and only if the sequence <code>$i1/(*|text())</code>\nis deep-equal to the sequence <code>$i2/(*|text())</code>.</p>\n<p>If the two nodes are both element nodes then they are deep-equal\nif and only if all of the following conditions are satisfied:</p>\n<ol class = \"enumar\">\n<li>\n<p>the two nodes have the same name, that is <code>(node-name($i1)\neq node-name($i2))</code>.</p>\n</li>\n<li>\n<p>the two nodes are both annotated as having simple content or\nboth nodes are annotated as having complex content.</p>\n</li>\n<li>\n<p>the two nodes have the same number of attributes, and for every\nattribute <code>$a1</code> in <code>$i1/@*</code> there exists an\nattribute <code>$a2</code> in <code>$i2/@*</code> such that\n<code>$a1</code> and <code>$a2</code> are deep-equal.</p>\n</li>\n<li>\n<p>One of the following conditions holds:</p>\n<ul>\n<li>\n<p>Both element nodes have a type annotation that is simple\ncontent, and the typed value of <code>$i1</code> is deep-equal to\nthe typed value of <code>$i2</code>.</p>\n</li>\n<li>\n<p>Both element nodes have a type annotation that is complex\ncontent with elementOnly content, and each child element of\n<code>$i1</code> is deep-equal to the corresponding child element\nof <code>$i2</code>.</p>\n</li>\n<li>\n<p>Both element nodes have a type annotation that is complex\ncontent with mixed content, and the sequence\n<code>$i1/(*|text())</code> is deep-equal to the sequence\n<code>$i2/(*|text())</code>.</p>\n</li>\n<li>\n<p>Both element nodes have a type annotation that is complex\ncontent with empty content.</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>If the two nodes are both attribute nodes then they are\ndeep-equal if and only if both the following conditions are\nsatisfied:</p>\n<ol class = \"enumar\">\n<li>\n<p>the two nodes have the same name, that is <code>(node-name($i1)\neq node-name($i2))</code>.</p>\n</li>\n<li>\n<p>the typed value of <code>$i1</code> is deep-equal to the typed\nvalue of <code>$i2</code>.</p>\n</li>\n</ol>\n<p>If the two nodes are both processing instruction nodes, then\nthey are deep-equal if and only if both the following conditions\nare satisfied:</p>\n<ol class = \"enumar\">\n<li>\n<p>the two nodes have the same name, that is\n<code>(fn:node-name($i1) eq fn:node-name($i2))</code>.</p>\n</li>\n<li>\n<p>the string value of <code>$i1</code> is equal to the string\nvalue of <code>$i2</code>.</p>\n</li>\n</ol>\n<p>If the two nodes are both namespace nodes, then they are\ndeep-equal if and only if both the following conditions are\nsatisfied:</p>\n<ol class = \"enumar\">\n<li>\n<p>the two nodes either have the same name or are both nameless,\nthat is <code>fn:deep-equal(fn:node-name($i1),\nfn:node-name($i2))</code>.</p>\n</li>\n<li>\n<p>the string value of <code>$i1</code> is equal to the string\nvalue of <code>$i2</code> when compared using the Unicode codepoint\ncollation.</p>\n</li>\n</ol>\n<p>If the two nodes are both text nodes or comment nodes, then they\nare deep-equal if and only if their string-values are equal.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>The two nodes are not required to have the same type annotation,\nand they are not required to have the same in-scope namespaces.\nThey may also differ in their parent, their base URI, and the\nvalues returned by the <code>is-id</code> and\n<code>is-idrefs</code> accessors (see <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section 5.5 is-id\nAccessor</a><sup><small>DM</small></sup> and <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-idrefs\">Section 5.6\nis-idrefs Accessor</a><sup><small>DM</small></sup>). The order of\nchildren is significant, but the order of attributes is\ninsignificant.</p>\n<p>The contents of comments and processing instructions are\nsignificant only if these nodes appear directly as items in the two\nsequences being compared. The content of a comment or processing\ninstruction that appears as a descendant of an item in one of the\nsequences being compared does not affect the result. However, the\npresence of a comment or processing instruction, if it causes a\ntext node to be split into two text nodes, may affect the\nresult.</p>\n<p>The result of <code>fn:deep-equal(1, current-dateTime())</code>\nis <code>false</code>; it does not raise an error.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-deep-equal-examples\" id = \"func-deep-equal-examples\"></a>15.3.1.1 Examples</h5>\n<div class = \"exampleInner\">\n<pre>\nlet $at := &lt;attendees&gt; &lt;name last='Parker'\n                                first='Peter'/&gt; &lt;name last='Barker' first='Bob'/&gt;\n                                &lt;name last='Parker' first='Peter'/&gt; &lt;/attendees&gt;\n</pre></div>\n<ul>\n<li>\n<p><code>fn:deep-equal($at, $at/*)</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:deep-equal($at/name[1], $at/name[2])</code> returns\n<code>false</code>.</p>\n</li>\n<li>\n<p><code>fn:deep-equal($at/name[1], $at/name[3])</code> returns\n<code>true</code>.</p>\n</li>\n<li>\n<p><code>fn:deep-equal($at/name[1], 'Peter Parker')</code> returns\n<code>false</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-union\" id = \"XPath_func-union\"></a>15.3.2 op:union</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:union</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">node()*</code></div>\n</div>\n<p>Summary: Constructs a sequence containing every node that occurs\nin the values of either <code>$parameter1</code> or\n<code>$parameter2</code>, eliminating duplicate nodes. Nodes are\nreturned in document order. Two nodes are duplicates if they are\n<a href = \"#XPath_func-is-same-node\"><code>op:is-same-node()</code></a>.</p>\n<p>If either operand is the empty sequence, a sequence is returned\ncontaining the nodes in the other operand in document order after\neliminating duplicates.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_op_union_intersect_except\">\nSection 7.2.14 The op:union, op:intersect, and op:except\noperators</a><sup><small>FS</small></sup></p>\n<p>This function backs up the \"union\" or \"|\" operator.</p>\n<div class = \"div4\">\n<h5><a name = \"func-union-examples\" id = \"func-union-examples\"></a>15.3.2.1 Examples</h5>\n<p>Assume <code>$seq1 = ($item1, $item2), $seq2 = ($item1,\n$item2)</code> and <code>$seq3 = ($item2, $item3)</code>.</p>\n<ul>\n<li>\n<p><code>op:union($seq1, $seq1)</code> returns the sequence\n<code>($item1, $item2)</code>.</p>\n</li>\n<li>\n<p><code>op:union($seq2, $seq3)</code> returns the sequence\nconsisting of <code>($item1, $item2, $item3)</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-intersect\" id = \"XPath_func-intersect\"></a>15.3.3\nop:intersect</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:intersect</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">node()*</code></div>\n</div>\n<p>Summary: Constructs a sequence containing every node that occurs\nin the values of both <code>$parameter1</code> and\n<code>$parameter2</code>, eliminating duplicate nodes. Nodes are\nreturned in document order.</p>\n<p>If either operand is the empty sequence, the empty sequence is\nreturned.</p>\n<p>Two nodes are duplicates if they are <a href = \"#XPath_func-is-same-node\"><code>op:is-same-node()</code></a>.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_op_union_intersect_except\">\nSection 7.2.14 The op:union, op:intersect, and op:except\noperators</a><sup><small>FS</small></sup>.</p>\n<p>This function backs up the \"intersect\" operator.</p>\n<div class = \"div4\">\n<h5><a name = \"func-intersect-examples\" id = \"func-intersect-examples\"></a>15.3.3.1 Examples</h5>\n<p>Assume <code>$seq1 = ($item1, $item2), $seq2 = ($item1,\n$item2)</code> and <code>$seq3 = ($item2, $item3)</code>.</p>\n<ul>\n<li>\n<p><code>op:intersect($seq1, $seq1)</code> returns the sequence\n<code>($item1, $item2)</code>.</p>\n</li>\n<li>\n<p><code>op:intersect($seq2, $seq3)</code> returns the sequence\n<code>($item2)</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-except\" id = \"XPath_func-except\"></a>15.3.4\nop:except</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:except</code>(<code class = \"arg\">$parameter1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>,\n<code class = \"arg\">$parameter2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">node()*</code></div>\n</div>\n<p>Summary: Constructs a sequence containing every node that occurs\nin the value of <code>$parameter1</code>, but not in the value of\n<code>$parameter2</code>, eliminating duplicate nodes. Nodes are\nreturned in document order.</p>\n<p>If <code>$parameter1</code> is the empty sequence, the empty\nsequence is returned. If <code>$parameter2</code> is the empty\nsequence, a sequence is returned containing the nodes in\n<code>$parameter1</code> in document order after eliminating\nduplicates.</p>\n<p>Two nodes are duplicates if they are <a href = \"#XPath_func-is-same-node\"><code>op:is-same-node()</code></a>.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_op_union_intersect_except\">\nSection 7.2.14 The op:union, op:intersect, and op:except\noperators</a><sup><small>FS</small></sup>.</p>\n<p>This function backs up the \"except\" operator.</p>\n<div class = \"div4\">\n<h5><a name = \"func-except-examples\" id = \"func-except-examples\"></a>15.3.4.1 Examples</h5>\n<p>Assume <code>$seq1 = ($item1, $item2), $seq2 = ($item1,\n$item2)</code> and <code>$seq3 = ($item2, $item3)</code>.</p>\n<ul>\n<li>\n<p><code>op:except($seq1, $seq2)</code> returns the empty\nsequence.</p>\n</li>\n<li>\n<p><code>op:except($seq2, $seq3)</code> returns the sequence\n<code>($item1)</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"aggregate-functions\" id = \"aggregate-functions\"></a>15.4\nAggregate Functions</h3>\n<p>Aggregate functions take a sequence as argument and return a\nsingle value computed from values in the sequence. Except for\n<a href = \"#XPath_func-count\"><code>fn:count</code></a>, the sequence must\nconsist of values of a single type or one if its subtypes, or they\nmust be numeric. <code>xs:untypedAtomic</code> values are permitted\nin the input sequence and handled by special conversion rules. The\ntype of the items in the sequence must also support certain\noperations.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-count\"><code>fn:count</code></a></td>\n<td>Returns the number of items in a sequence.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-avg\"><code>fn:avg</code></a></td>\n<td>Returns the average of a sequence of values.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-max\"><code>fn:max</code></a></td>\n<td>Returns the maximum value from a sequence of comparable\nvalues.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-min\"><code>fn:min</code></a></td>\n<td>Returns the minimum value from a sequence of comparable\nvalues.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-sum\"><code>fn:sum</code></a></td>\n<td>Returns the sum of a sequence of values.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-count\" id = \"XPath_func-count\"></a>15.4.1 fn:count</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:count</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<p>Summary: Returns the number of items in the value of\n<code>$arg</code>.</p>\n<p>Returns 0 if <code>$arg</code> is the empty sequence.</p>\n<div class = \"div4\">\n<h5><a name = \"func-count-examples\" id = \"func-count-examples\"></a>15.4.1.1 Examples</h5>\n<p>Assume <code>$seq1 = ($item1, $item2)</code> and <code>$seq3 =\n()</code>, the empty sequence.</p>\n<ul>\n<li>\n<p><code>fn:count($seq1)</code> returns <code>2</code>.</p>\n</li>\n<li>\n<p><code>fn:count($seq3)</code> returns <code>0</code>.</p>\n</li>\n</ul>\n<p>Assume <code>$seq2 = (98.5, 98.3, 98.9)</code>.</p>\n<ul>\n<li>\n<p><code>fn:count($seq2)</code> returns <code>3</code>.</p>\n</li>\n<li>\n<p><code>fn:count($seq2[. &gt; 100])</code> returns\n<code>0</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-avg\" id = \"XPath_func-avg\"></a>15.4.2 fn:avg</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:avg</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></div>\n</div>\n<p>Summary: Returns the average of the values in the input sequence\n<code>$arg</code>, that is, the sum of the values divided by the\nnumber of values.</p>\n<p>If <code>$arg</code> is the empty sequence, the empty sequence\nis returned.</p>\n<p>If <code>$arg</code> contains values of type\n<code>xs:untypedAtomic</code> they are cast to\n<code>xs:double</code>.</p>\n<p>Duration values must either all be\n<code>xs:yearMonthDuration</code> values or must all be\n<code>xs:dayTimeDuration</code> values. For numeric values, the\nnumeric promotion rules defined in <a href = \"#op.numeric\"><b>6.2\nOperators on Numeric Values</b></a> are used to promote all values\nto a single common type. After these operations, <code>$arg</code>\nmust contain items of a single type, which must be one of the four\nnumeric types, <code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code> or one if its subtypes.</p>\n<p>If the above conditions are not met, then a type error is raised\n[<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n<p>Otherwise, returns the average of the values as <code>sum($arg)\ndiv count($arg)</code>; but the implementation may use an otherwise\nequivalent algorithm that avoids arithmetic overflow.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_aggregates\">Section\n7.2.10 The fn:min, fn:max, fn:avg, and fn:sum\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"div4\">\n<h5><a name = \"func-avg-examples\" id = \"func-avg-examples\"></a>15.4.2.1\nExamples</h5>\n<p>Assume <code>$d1 = xs:yearMonthDuration(\"P20Y\")</code> and\n<code>$d2 = xs:yearMonthDuration(\"P10M\")</code> and <code>$seq3 =\n(3, 4, 5)</code>.</p>\n<ul>\n<li>\n<p><code>fn:avg($seq3)</code> returns <code>4.0</code>.</p>\n</li>\n<li>\n<p><code>fn:avg(($d1, $d2))</code> returns a\n<code>yearMonthDuration</code> with value <code>125</code>\nmonths.</p>\n</li>\n<li>\n<p><code>fn:avg(($d1, $seq3))</code> raises a type error [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n<li>\n<p><code>fn:avg(())</code> returns <code>()</code>.</p>\n</li>\n<li>\n<p><code>fn:avg((xs:float('INF'), xs:float('-INF')))</code> returns\n<code>NaN</code>.</p>\n</li>\n<li>\n<p><code>fn:avg(($seq3, xs:float('NaN')))</code> returns\n<code>NaN</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-max\" id = \"XPath_func-max\"></a>15.4.3 fn:max</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:max</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></div>\n<div class = \"proto\"><code class = \"function\">fn:max</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>, <code class = \"arg\">$collation</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></div>\n</div>\n<p>Summary: Selects an item from the input sequence\n<code>$arg</code> whose value is greater than or equal to the value\nof every other item in the input sequence. If there are two or more\nsuch items, then the specific item whose value is returned is\n<a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>The following rules are applied to the input sequence:</p>\n<ul>\n<li>\n<p>Values of type <code>xs:untypedAtomic</code> in\n<code>$arg</code> are cast to <code>xs:double</code>.</p>\n</li>\n<li>\n<p>Numeric values are converted to their least common type\nreachable by a combination of type promotion and subtype\nsubstitution. See <a href = \"http://www.w3.org/TR/xpath20/#promotion\">Section B.1 Type\nPromotion</a><sup><small>XP</small></sup> and <a href = \"http://www.w3.org/TR/xpath20/#mapping\">Section B.2 Operator\nMapping</a><sup><small>XP</small></sup>.</p>\n</li>\n<li>\n<p>Values of type <code>xs:anyURI</code> are cast to\n<code>xs:string</code></p>\n</li>\n</ul>\n<p>The items in the resulting sequence may be reordered in an\narbitrary order. The resulting sequence is referred to below as the\nconverted sequence. This function returns an item from the\nconverted sequence rather than the input sequence.</p>\n<p>If the converted sequence is empty, the empty sequence is\nreturned.</p>\n<p>All items in <span>the converted sequence must be</span> derived\nfrom a single base type for which the <code>le</code> operator is\ndefined. In addition, the values in the sequence must have a total\norder. If date/time values do not have a timezone, they are\nconsidered to have the implicit timezone provided by the dynamic\ncontext for the purpose of comparison. Duration values must either\nall be <code>xs:yearMonthDuration</code> values or must all be\n<code>xs:dayTimeDuration</code> values.</p>\n<p>If any of these conditions is not met, then a type error is\nraised [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n<p>If the converted sequence contains the value <code>NaN</code>,\nthe value <code>NaN</code> is returned.</p>\n<p>If the items in <span>the converted sequence</span> are of type\n<code>xs:string</code> or types derived by restriction from\n<code>xs:string</code>, then the determination of the item with the\nsmallest value is made according to the collation that is used. If\nthe type of the items in <span>the converted sequence</span> is not\n<code>xs:string</code> and <code>$collation</code> is specified,\nthe collation is ignored.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>.</p>\n<p>Otherwise, the result of the function is the result of the\nexpression:</p>\n<div class = \"exampleInner\">\n<pre>\n   if (every $v in $c satisfies $c[1] ge $v)\n   then $c[1] \n   else fn:max(fn:subsequence($c, 2))\n</pre></div>\n<p>evaluated with <code>$collation</code> as the default collation\nif specified, and with <code>$c</code> as the converted\nsequence.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_aggregates\">Section\n7.2.10 The fn:min, fn:max, fn:avg, and fn:sum\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>If the converted sequence contains exactly one value then that\nvalue is returned.</p>\n<p>The default type when the <code>fn:max</code> function is\napplied to <code>xs:untypedAtomic</code> values is\n<code>xs:double</code>. This differs from the default type for\noperators such as <code>gt</code>, and for sorting in XQuery and\nXSLT, which is <code>xs:string</code>.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-max-examples\" id = \"func-max-examples\"></a>15.4.3.1\nExamples</h5>\n<ul>\n<li>\n<p><code>fn:max((3,4,5))</code> returns <code>5</code>.</p>\n</li>\n<li>\n<p><code>fn:max((5, 5.0e0))</code> returns <code>5.0e0</code>.</p>\n</li>\n<li>\n<p><code>fn:max((3,4,\"Zero\"))</code> raises a type error [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n<li>\n<p><code>fn:max((fn:current-date(), xs:date(\"2001-01-01\")))</code>\ntypically returns the current date.</p>\n</li>\n<li>\n<p><code>fn:max((\"a\", \"b\", \"c\"))</code> returns \"c\" under a typical\ndefault collation.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-min\" id = \"XPath_func-min\"></a>15.4.4 fn:min</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:min</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></div>\n<div class = \"proto\"><code class = \"function\">fn:min</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>, <code class = \"arg\">$collation</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></div>\n</div>\n<p>Summary: selects an item from the input sequence\n<code>$arg</code> whose value is less than or equal to the value of\nevery other item in the input sequence. If there are two or more\nsuch items, then the specific item whose value is returned is\n<a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>The following rules are applied to the input sequence:</p>\n<ul>\n<li>\n<p>Values of type <code>xs:untypedAtomic</code> in\n<code>$arg</code> are cast to <code>xs:double</code>.</p>\n</li>\n<li>\n<p>Numeric values are converted to their least common type\nreachable by a combination of type promotion and subtype\nsubstitution. See <a href = \"http://www.w3.org/TR/xpath20/#promotion\">Section B.1 Type\nPromotion</a><sup><small>XP</small></sup> and <a href = \"http://www.w3.org/TR/xpath20/#mapping\">Section B.2 Operator\nMapping</a><sup><small>XP</small></sup>.</p>\n</li>\n<li>\n<p>Values of type <code>xs:anyURI</code> are cast to\n<code>xs:string</code></p>\n</li>\n</ul>\n<p>The items in the resulting sequence may be reordered in an\narbitrary order. The resulting sequence is referred to below as the\nconverted sequence. This function returns an item from the\nconverted sequence rather than the input sequence.</p>\n<p>If the converted sequence is empty, the empty sequence is\nreturned.</p>\n<p>All items in <span>the converted sequence must be</span> derived\nfrom a single base type for which the <code>le</code> operator is\ndefined. In addition, the values in the sequence must have a total\norder. If date/time values do not have a timezone, they are\nconsidered to have the implicit timezone provided by the dynamic\ncontext for the purpose of comparison. Duration values must either\nall be <code>xs:yearMonthDuration</code> values or must all be\n<code>xs:dayTimeDuration</code> values.</p>\n<p>If any of these conditions is not met, a type error is raised\n[<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n<p>If the converted sequence contains the value <code>NaN</code>,\nthe value <code>NaN</code> is returned.</p>\n<p>If the items in <span>the converted sequence</span> are of type\n<code>xs:string</code> or types derived by restriction from\n<code>xs:string</code>, then the determination of the item with the\nsmallest value is made according to the collation that is used. If\nthe type of the items in <span>the converted sequence</span> is not\n<code>xs:string</code> and <code>$collation</code> is specified,\nthe collation is ignored.</p>\n<p>The collation used by the invocation of this function is\ndetermined according to the rules in <a href = \"#collations\"><b>7.3.1\nCollations</b></a>.</p>\n<p>Otherwise, the result of the function is the result of the\nexpression:</p>\n<div class = \"exampleInner\">\n<pre>\n   if (every $v in $c satisfies $c[1] le $v) \n   then $c[1] \n   else fn:min(fn:subsequence($c, 2))\n</pre></div>\n<p>evaluated with <code>$collation</code> as the default collation\nif specified, and with <code>$c</code> as the converted\nsequence.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_aggregates\">Section\n7.2.10 The fn:min, fn:max, fn:avg, and fn:sum\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>If the converted sequence contains exactly one value then that\nvalue is returned.</p>\n<p>The default type when the <code>fn:min</code> function is\napplied to <code>xs:untypedAtomic</code> values is\n<code>xs:double</code>. This differs from the default type for\noperators such as <code>lt</code>, and for sorting in XQuery and\nXSLT, which is <code>xs:string</code>.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-min-examples\" id = \"func-min-examples\"></a>15.4.4.1\nExamples</h5>\n<ul>\n<li>\n<p><code>fn:min((3,4,5))</code> returns <code>3</code>.</p>\n</li>\n<li>\n<p><code>fn:min((5, 5.0e0))</code> returns <code>5.0e0</code>.</p>\n</li>\n<li>\n<p><code>fn:min((3,4,\"Zero\"))</code> raises a type error [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n<li>\n<p><code>fn:min((xs:float(0.0E0), xs:float(-0.0E0)))</code> can\nreturn either positive or negative zero. <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ndoes not distinguish between the values positive zero and negative\nzero. The result is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n</li>\n<li>\n<p><code>fn:min((fn:current-date(), xs:date(\"2001-01-01\")))</code>\ntypically returns <code>xs:date(\"2001-01-01\")</code>.</p>\n</li>\n<li>\n<p><code>fn:min((\"a\", \"b\", \"c\"))</code> returns \"a\" under a typical\ndefault collation.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-sum\" id = \"XPath_func-sum\"></a>15.4.5 fn:sum</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:sum</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:sum</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$zero</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType?</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>Summary: Returns a value obtained by adding together the values\nin <code>$arg</code>. If <code>$zero</code> is not specified, then\nthe value returned for an empty sequence is the\n<code>xs:integer</code> value 0. If <code>$zero</code> is\nspecified, then the value returned for an empty sequence is\n<code>$zero</code>.</p>\n<p>Any values of type <code>xs:untypedAtomic</code> in\n<code>$arg</code> are cast to <code>xs:double</code>. The items in\nthe resulting sequence may be reordered in an arbitrary order. The\nresulting sequence is referred to below as the converted\nsequence.</p>\n<p>If the converted sequence is empty, then the single-argument\nform of the function returns the <code>xs:integer</code> value\n<code>0</code>; the two-argument form returns the value of the\nargument <code>$zero</code>.</p>\n<p>If the converted sequence contains the value <code>NaN</code>,\n<code>NaN</code> is returned.</p>\n<p>All items in <code>$arg</code> must be numeric or derived from a\nsingle base type. In addition, the type must support addition.\nDuration values must either all be\n<code>xs:yearMonthDuration</code> values or must all be\n<code>xs:dayTimeDuration</code> values. For numeric values, the\nnumeric promotion rules defined in <a href = \"#op.numeric\"><b>6.2\nOperators on Numeric Values</b></a> are used to promote all values\nto a single common type. The sum of a sequence of integers will\ntherefore be an integer, while the sum of a numeric sequence that\nincludes at least one xs:double will be an xs:double.</p>\n<p>If the above conditions are not met, a type error is raised\n[<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n<p>Otherwise, the result of the function, using the second\nsignature, is the result of the expression:</p>\n<div class = \"exampleInner\">\n<pre>\nif (fn:count($c) eq 0) then\n    $zero\nelse if (fn:count($c) eq 1) then\n    $c[1]\nelse\n    $c[1] + fn:sum(subsequence($c, 2))\n</pre></div>\n<p>where <code>$c</code> is the converted sequence.</p>\n<p>The result of the function, using the first signature, is the\nresult of the expression: <code>fn:sum($arg, 0)</code>.</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_aggregates\">Section\n7.2.10 The fn:min, fn:max, fn:avg, and fn:sum\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>The second argument allows an appropriate value to be defined to\nrepresent the sum of an empty sequence. For example, when summing a\nsequence of durations it would be appropriate to return a\nzero-length duration of the appropriate type. This argument is\nnecessary because a system that does dynamic typing cannot\ndistinguish \"an empty sequence of integers\", for example, from \"an\nempty sequence of durations\".</p>\n<p>If the converted sequence contains exactly one value then that\nvalue is returned.</p>\n</div>\n<div class = \"div4\">\n<h5><a name = \"func-sum-examples\" id = \"func-sum-examples\"></a>15.4.5.1\nExamples</h5>\n<p>Assume:</p>\n<div class = \"exampleInner\">\n<pre>\n$d1 = xs:yearMonthDuration(\"P20Y\")\n$d2 = xs:yearMonthDuration(\"P10M\")\n$seq1 = ($d1, $d2)\n$seq3 = (3, 4, 5)\n</pre></div>\n<ul>\n<li>\n<p><code>fn:sum(($d1, $d2))</code> returns an\n<code>xs:yearMonthDuration</code> with a value of <code>250</code>\nmonths.</p>\n</li>\n<li>\n<p><code>fn:sum($seq1[. &lt; xs:yearMonthDuration('P3M')],\nxs:yearMonthDuration('P0M'))</code> returns an\n<code>xs:yearMonthDuration</code> with a value of <code>0</code>\nmonths.</p>\n</li>\n<li>\n<p><code>fn:sum($seq3)</code> returns <code>12</code>.</p>\n</li>\n<li>\n<p><code>fn:sum(())</code> returns <code>0</code>.</p>\n</li>\n<li>\n<p><code>fn:sum((),())</code> returns <code>()</code>.</p>\n</li>\n<li>\n<p><code>fn:sum((1 to 100)[.&lt;0], 0)</code> returns\n<code>0</code>.</p>\n</li>\n<li>\n<p><code>fn:sum(($d1, 9E1))</code> raises an error [<a href = \"#ERRFORG0006\" title = \"err:FORG0006\">err:FORG0006</a>].</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"fns-that-generate-sequences\" id = \"fns-that-generate-sequences\"></a>15.5 Functions and Operators that\nGenerate Sequences</h3>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-to\"><code>op:to</code></a></td>\n<td>Returns the sequence containing every <code>xs:integer</code>\nbetween the values of the operands.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-id\"><code>fn:id</code></a></td>\n<td>Returns the sequence of element nodes having an ID value\nmatching the one or more of the supplied IDREF values.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-idref\"><code>fn:idref</code></a></td>\n<td>Returns the sequence of element or attribute nodes with an\nIDREF value matching one or more of the supplied ID values.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-doc\"><code>fn:doc</code></a></td>\n<td>Returns a document node retrieved using the specified URI.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-doc-available\"><code>fn:doc-available</code></a></td>\n<td>Returns <code>true</code> if a document node can be retrieved\nusing the specified URI.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-collection\"><code>fn:collection</code></a></td>\n<td>Returns a sequence of nodes retrieved using the specified URI\nor the nodes in the default collection.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-to\" id = \"XPath_func-to\"></a>15.5.1 op:to</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">op:to</code>(<code class = \"arg\">$firstval</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>,\n<code class = \"arg\">$lastval</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer*</code></div>\n</div>\n<p>Summary: Returns the sequence containing every\n<code>xs:integer</code> whose value is between the value of\n<code>$firstval</code> (inclusive) and the value of\n<code>$lastval</code> (inclusive), in monotonic order. If the value\nof the first operand is greater than the value of the second, the\nempty sequence is returned. If the values of the two operands are\nequal, a sequence containing a single <code>xs:integer</code> equal\nto the value is returned.</p>\n<p>This function backs up the \"to\" operator.</p>\n<div class = \"div4\">\n<h5><a name = \"func-to-examples\" id = \"func-to-examples\"></a>15.5.1.1\nExamples</h5>\n<ul>\n<li>\n<p><code>1 to 3</code> returns <code>(1, 2, 3)</code></p>\n</li>\n<li>\n<p><code>3 to 1</code> returns <code>()</code></p>\n</li>\n<li>\n<p><code>5 to 5</code> returns <code>5</code></p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-id\" id = \"XPath_func-id\"></a>15.5.2 fn:id</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:id</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">element()*</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:id</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>, <code class = \"arg\">$node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">element()*</code></div>\n</div>\n<p>Summary: Returns the sequence of element nodes that have an\n<code>ID</code> value matching the value of one or more of the\n<code>IDREF</code> values supplied in <code>$arg</code> .</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This function does not have the desired effect when searching a\ndocument in which elements of type <code>xs:ID</code> are used as\nidentifiers. To preserve backwards compatibility, a new function\n<a href = \"#XPath_func-element-with-id\"><code>fn:element-with-id</code></a>\nis therefore being introduced; it behaves the same way as\n<code>fn:id</code> in the case of ID-valued attributes.</p>\n</div>\n<p>The function returns a sequence, in document order with\nduplicates eliminated, containing every element node <code>E</code>\nthat satisfies all the following conditions:</p>\n<ol class = \"enumar\">\n<li>\n<p><code>E</code> is in the target document. The target document is\nthe document containing <code>$node</code>, or the document\ncontaining the context item (<code>.</code>) if the second argument\nis omitted. The behavior of the function if <code>$node</code> is\nomitted is exactly the same as if the context item had been passed\nas <code>$node</code>. If <code>$node</code>, or the context item\nif the second argument is omitted, is a node in a tree whose root\nis not a document node [<a href = \"#ERRFODC0001\" title = \"err:FODC0001\">err:FODC0001</a>] is raised. If the second argument\nis the context item, or is omitted, the following errors may be\nraised: if there is no context item, [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>; if\nthe context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n</li>\n<li>\n<p><code>E</code> has an <code>ID</code> value equal to one of the\ncandidate <code>IDREF</code> values, where:</p>\n<ul>\n<li>\n<p>An element has an <code>ID</code> value equal to <code>V</code>\nif either or both of the following conditions are true:</p>\n<ul>\n<li>\n<p>The <code>is-id</code> property (See <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section 5.5 is-id\nAccessor</a><sup><small>DM</small></sup>.) of the element node is\ntrue, and the typed value of the element node is equal to V under\nthe rules of the <code>eq</code> operator using the Unicode code\npoint collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>\n</li>\n<li>\n<p>The element has an attribute node whose <code>is-id</code>\nproperty (See <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section 5.5 is-id\nAccessor</a><sup><small>DM</small></sup>.) is true and whose typed\nvalue is equal to <code>V</code> under the rules of the\n<code>eq</code> operator using the Unicode code point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Each <code>xs:string</code> in <code>$arg</code> is treated as a\nwhitespace-separated sequence of tokens, each token acting as an\n<code>IDREF</code>. These tokens are then included in the list of\ncandidate <code>IDREF</code> values. If any of the tokens is not a\nlexically valid <code>IDREF</code> (that is, if it is not lexically\nan <code>xs:NCName</code>), it is ignored. Formally, the candidate\n<code>IDREF</code> values are the strings in the sequence given by\nthe expression:</p>\n<div class = \"exampleInner\">\n<pre>\nfor $s in $arg return fn:tokenize(fn:normalize-space($s), ' ')\n                 [. castable as xs:IDREF]\n</pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>If several elements have the same <code>ID</code> value, then\n<code>E</code> is the one that is first in document order.</p>\n</li>\n</ol>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>If the data model is constructed from an Infoset, an attribute\nwill have the <code>is-id</code> property if the corresponding\nattribute in the Infoset had an attribute type of <code>ID</code>:\ntypically this means the attribute was declared as an\n<code>ID</code> in a DTD.</p>\n<p>If the data model is constructed from a PSVI, an element or\nattribute will have the <code>is-id</code> property if its typed\nvalue is a single atomic value of type <code>xs:ID</code> or a type\nderived by restriction from <code>xs:ID</code>.</p>\n<p>No error is raised in respect of a candidate <code>IDREF</code>\nvalue that does not match the <code>ID</code> of any element in the\ndocument. If no candidate <code>IDREF</code> value matches the\n<code>ID</code> value of any element, the function returns the\nempty sequence.</p>\n<p>It is not necessary that the supplied argument should have type\n<code>xs:IDREF</code> or <code>xs:IDREFS</code>, or that it should\nbe derived from a node with the <code>is-idrefs</code>\nproperty.</p>\n<p>An element may have more than one <code>ID</code> value. This\ncan occur with synthetic data models or with data models\nconstructed from a PSVI where the element and one of its attributes\nare both typed as <code>xs:ID</code>.</p>\n<p>If the source document is well-formed but not valid, it is\npossible for two or more elements to have the same <code>ID</code>\nvalue. In this situation, the function will select the first such\nelement.</p>\n<p>It is also possible in a well-formed but invalid document to\nhave an element or attribute that has the is-id property but whose\nvalue does not conform to the lexical rules for the\n<code>xs:ID</code> type. Such a node will never be selected by this\nfunction.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-idref\" id = \"XPath_func-idref\"></a>15.5.3 fn:idref</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:idref</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:idref</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>, <code class = \"arg\">$node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></div>\n</div>\n<p>Summary: Returns the sequence of element or attribute nodes with\nan <code>IDREF</code> value matching the value of one or more of\nthe <code>ID</code> values supplied in <code>$arg</code>.</p>\n<p>The function returns a sequence, in document order with\nduplicates eliminated, containing every element or attribute node\n<code>$N</code> that satisfies all the following conditions:</p>\n<ol class = \"enumar\">\n<li>\n<p><code>$N</code> is in the target document. The target document\nis the document containing <code>$node</code> or the document\ncontaining the context item (<code>.</code>) if the second argument\nis omitted. The behavior of the function if <code>$node</code> is\nomitted is exactly the same as if the context item had been passed\nas <code>$node</code>. If <code>$node</code>, or the context item\nif the second argument is omitted, is a node in a tree whose root\nis not a document node [<a href = \"#ERRFODC0001\" title = \"err:FODC0001\">err:FODC0001</a>] is raised. If the second argument\nis the context item, or is omitted, the following errors may be\nraised: if there is no context item [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>; if\nthe context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n</li>\n<li>\n<p><code>$N</code> has an <code>IDREF</code> value equal to one of\nthe candidate <code>ID</code> values, where:</p>\n<ul>\n<li>\n<p>A node <code>$N</code> has an <code>IDREF</code> value equal to\n<code>V</code> if both of the following conditions are true:</p>\n<ul>\n<li>\n<p>The <code>is-idrefs</code> property (See <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-idrefs\">Section 5.6\nis-idrefs Accessor</a><sup><small>DM</small></sup>.)of\n<code>$N</code> is <code>true</code></p>\n</li>\n<li>\n<p>The sequence <a href = \"#XPath_func-tokenize\"><code>fn:tokenize(fn:normalize-space(fn:string($N)),\n' ')</code></a> contains a string that is equal to <code>V</code>\nunder the rules of the <code>eq</code> operator using the Unicode\ncode point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>).</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Each <code>xs:string</code> in <code>$arg</code> is parsed as if\nit were of lexically of type <code>xs:ID</code>. These\n<code>xs:string</code>s are then included in the list of candidate\n<code>xs:ID</code>s. If any of the strings in <code>$arg</code> is\nnot a lexically valid <code>xs:ID</code> (that is, if it is not\nlexically an <code>xs:NCName</code>), it is ignored. More formally,\nthe candidate <code>ID</code> values are the strings in the\nsequence</p>\n<div class = \"exampleInner\">\n<pre>\n$arg[. castable as xs:NCName]\n</pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>An element or attribute typically acquires the\n<code>is-idrefs</code> property by being validated against the\nschema type <code>xs:IDREF</code> or <code>xs:IDREFS</code>, or\n(for attributes only) by being described as of type\n<code>IDREF</code> or <code>IDREFS</code> in a DTD.</p>\n<p>No error is raised in respect of a candidate <code>ID</code>\nvalue that does not match the <code>IDREF</code> value of any\nelement or attribute in the document. If no candidate\n<code>ID</code> value matches the <code>IDREF</code> value of any\nelement or attribute, the function returns the empty sequence.</p>\n<p>It is possible for two or more nodes to have an\n<code>IDREF</code> value that matches a given candidate\n<code>ID</code> value. In this situation, the function will return\nall such nodes. However, each matching node will be returned at\nmost once, regardless how many candidate <code>ID</code> values it\nmatches.</p>\n<p>It is possible in a well-formed but invalid document to have a\nnode whose <code>is-idrefs</code> property is true but that does\nnot conform to the lexical rules for the <code>xs:IDREF</code>\ntype. The effect of the above rules is that ill-formed candidate\n<code>ID</code> values and ill-formed <code>IDREF</code> values are\nignored.</p>\n<p>If the data model is constructed from a PSVI, the typed value of\na node that has the <code>is-idrefs</code> property will contain at\nleast one atomic value of type <code>xs:IDREF</code> (or a type\nderived by restriction from <code>xs:IDREF</code>). It may also\ncontain atomic values of other types. These atomic values are\ntreated as candidate <code>ID</code> values if their lexical form\nis valid as an <code>xs:NCName</code>, and they are ignored\notherwise.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-doc\" id = \"XPath_func-doc\"></a>15.5.4 fn:doc</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:doc</code>(<code class = \"arg\">$uri</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">document-node()?</code></div>\n</div>\n<p>Summary: Retrieves a document using a URI supplied as an\n<code>xs:string</code>, and returns the corresponding document\nnode.</p>\n<p>If <code>$uri</code> is the empty sequence, the result is an\nempty sequence.</p>\n<p>If <code>$uri</code> is not a valid URI, an error\n<strong>may</strong> be raised [<a href = \"#ERRFODC0005\" title = \"err:FODC0005\">err:FODC0005</a>].</p>\n<p>If <code>$uri</code> is a relative URI reference, it is resolved\nrelative to the value of the base URI property from the static\ncontext. The resulting absolute URI is promoted to an\n<code>xs:string</code>.</p>\n<p>If the <b>Available documents</b> described in <a href = \"http://www.w3.org/TR/xpath20/#eval_context\">Section 2.1.2 Dynamic\nContext</a><sup><small>XP</small></sup> provides a mapping from\nthis string to a document node, the function returns that document\nnode.</p>\n<p>If the <b>Available documents</b> provides no mapping for the\nstring, an error is raised [<a href = \"#ERRFODC0005\" title = \"err:FODC0005\">err:FODC0005</a>].</p>\n<p>The URI may include a fragment identifier.</p>\n<p>By default, this function is <a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>. Two calls on this function return the same\ndocument node if the same URI Reference (after resolution to an\nabsolute URI Reference) is supplied to both calls. Thus, the\nfollowing expression (if it does not raise an error) will always be\ntrue:</p>\n<div class = \"exampleInner\">\n<pre>\ndoc(\"foo.xml\") is doc(\"foo.xml\")\n</pre></div>\n<p>However, for performance reasons, implementations may provide a\nuser option to evaluate the function without a guarantee of\nstability. The manner in which any such option is provided is\nimplementation-defined. If the user has not selected such an\noption, a call of the function must either return a stable result\nor must raise an error: [<a href = \"#ERRFODC0003\" title = \"err:FODC0003\">err:FODC0003</a>].</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_doc_collection\">Section\n7.2.5 The fn:collection and fn:doc\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>If <code>$uri</code> is read from a source document, it is\ngenerally appropriate to resolve it relative to the base URI\nproperty of the relevant node in the source document. This can be\nachieved by calling the <a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a> function, and\npassing the resulting absolute URI as an argument to the\n<code>fn:doc</code> function.</p>\n</div>\n<p>If two calls to this function supply different absolute URI\nReferences as arguments, the same document node may be returned if\nthe implementation can determine that the two arguments refer to\nthe same resource.</p>\n<p>By defining the semantics of this function in terms of a\nstring-to-document-node mapping in the dynamic context, the\nspecification is acknowledging that the results of this function\nare outside the purview of the language specification itself, and\ndepend entirely on the run-time environment in which the expression\nis evaluated. This run-time environment includes not only an\nunpredictable collection of resources (\"the web\"), but configurable\nmachinery for locating resources and turning their contents into\ndocument nodes within the XPath data model. Both the set of\nresources that are reachable, and the mechanisms by which those\nresources are parsed and validated, are <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>One possible processing model for this function is as follows.\nThe resource identified by the URI Reference is retrieved. If the\nresource cannot be retrieved, an error is raised [<a href = \"#ERRFODC0002\" title = \"err:FODC0002\">err:FODC0002</a>]. The data\nresulting from the retrieval action is then parsed as an XML\ndocument and a tree is constructed in accordance with the <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a>. If\nthe top-level media type is known and is \"text\", the content is\nparsed in the same way as if the media type were text/xml;\notherwise, it is parsed in the same way as if the media type were\napplication/xml. If the contents cannot be parsed successfully, an\nerror is raised [<a href = \"#ERRFODC0002\" title = \"err:FODC0002\">err:FODC0002</a>]. Otherwise, the result of the\nfunction is the document node at the root of the resulting tree.\nThis tree is then optionally validated against a schema.</p>\n<p>Various aspects of this processing are <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. Implementations may provide external\nconfiguration options that allow any aspect of the processing to be\ncontrolled by the user. In particular:</p>\n<ul>\n<li>\n<p>The set of URI schemes that the implementation recognizes is\nimplementation-defined. Implementations may allow the mapping of\nURIs to resources to be configured by the user, using mechanisms\nsuch as catalogs or user-written URI handlers.</p>\n</li>\n<li>\n<p>The handling of non-XML media types is implementation-defined.\nImplementations may allow instances of the data model to be\nconstructed from non-XML resources, under user control.</p>\n</li>\n<li>\n<p>It is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> whether DTD validation and/or schema\nvalidation is applied to the source document.</p>\n</li>\n<li>\n<p>Implementations may provide user-defined error handling options\nthat allow processing to continue following an error in retrieving\na resource, or in parsing and validating its content. When errors\nhave been handled in this way, the function may return either an\nempty sequence, or a fallback document provided by the error\nhandler.</p>\n</li>\n<li>\n<p>Implementations may provide user options that relax the\nrequirement for the function to return stable results.</p>\n</li>\n</ul>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-doc-available\" id = \"XPath_func-doc-available\"></a>15.5.5\nfn:doc-available</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:doc-available</code>(<code class = \"arg\">$uri</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</div>\n<p>Summary: The function returns true if and only if the function\ncall <a href = \"#XPath_func-doc\"><code>fn:doc($uri)</code></a> would return\na document node.</p>\n<p>If <code>$uri</code> is an empty sequence, this function returns\n<code>false</code>.</p>\n<p>If a call on <a href = \"#XPath_func-doc\"><code>fn:doc($uri)</code></a>\nwould return a document node, this function returns\n<code>true</code>.</p>\n<p>If <code>$uri</code> is not a valid URI according to the rules\napplied by the implementation of <a href = \"#XPath_func-doc\"><code>fn:doc</code></a>, an error is raised [<a href = \"#ERRFODC0005\" title = \"err:FODC0005\">err:FODC0005</a>].</p>\n<p>Otherwise, this function returns <code>false</code>.</p>\n<p>If this function returns <code>true</code>, then calling\n<a href = \"#XPath_func-doc\"><code>fn:doc($uri)</code></a> within the same\n<a title = \"execution scope\" class = \"termref\" href = \"#execution-scope\"><span class = \"arrow\">·</span>execution\nscope<span class = \"arrow\">·</span></a> must return a document node.\nHowever, if non-stable processing has been selected for the\n<a href = \"#XPath_func-doc\"><code>fn:doc</code></a> function, this\nguarantee is lost.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-collection\" id = \"XPath_func-collection\"></a>15.5.6\nfn:collection</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:collection</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:collection</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></div>\n</div>\n<p>Summary: This function takes an <code>xs:string</code> as\nargument and returns a sequence of nodes obtained by interpreting\n<code>$arg</code> as an <code>xs:anyURI</code> and resolving it\naccording to the mapping specified in <b>Available collections</b>\ndescribed in <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>. If <b>Available\ncollections</b> provides a mapping from this string to a sequence\nof nodes, the function returns that sequence. If <b>Available\ncollections</b> maps the string to an empty sequence, then the\nfunction returns an empty sequence. If <b>Available collections</b>\nprovides no mapping for the string, an error is raised [<a href = \"#ERRFODC0004\" title = \"err:FODC0004\">err:FODC0004</a>]. If\n<code>$arg</code> is not specified, the function returns the\nsequence of the nodes in the default collection in the dynamic\ncontext. See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>. If the value of the\ndefault collection is undefined an error is raised [<a href = \"#ERRFODC0002\" title = \"err:FODC0002\">err:FODC0002</a>].</p>\n<p>If the <code>$arg</code> is a relative <code>xs:anyURI</code>,\nit is resolved against the value of the base-URI property from the\nstatic context. If <code>$arg</code> is not a valid\n<code>xs:anyURI</code>, an error is raised [<a href = \"#ERRFODC0004\" title = \"err:FODC0004\">err:FODC0004</a>].</p>\n<p>If <code>$arg</code> is the empty sequence, the function behaves\nas if it had been called without an argument. See above.</p>\n<p>By default, this function is <a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>. This means that repeated calls on the\nfunction with the same argument will return the same result.\nHowever, for performance reasons, implementations may provide a\nuser option to evaluate the function without a guarantee of\nstability. The manner in which any such option is provided is\n<a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. If the user has not selected such an option,\na call to this function must either return a stable result or must\nraise an error: [<a href = \"#ERRFODC0003\" title = \"err:FODC0003\">err:FODC0003</a>].</p>\n<p>For detailed type semantics, see <a href = \"http://www.w3.org/TR/xquery-semantics/#sec_fn_doc_collection\">Section\n7.2.5 The fn:collection and fn:doc\nfunctions</a><sup><small>FS</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>This function provides a facility for users to work with a\ncollection of documents which may be contained in a directory or\nrows of a Relational table or other implementation-specific\nconstruct. An implementation may also use external variables to\nidentify external resources, but <code>fn:collection()</code>\nprovides functionality not provided by external variables.\nSpecifying resources using URIs is useful because URIs are dynamic,\ncan be parameterized, and do not rely on an external\nenvironment.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"XPath_func-element-with-id\" id = \"XPath_func-element-with-id\"></a>15.5.7 fn:element-with-id</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:element-with-id</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">element()*</code></div>\n</div>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:element-with-id</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>, <code class = \"arg\">$node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">element()*</code></div>\n</div>\n<p>Summary: Returns the sequence of element nodes that have an\n<code>ID</code> value matching the value of one or more of the\n<code>IDREF</code> values supplied in <code>$arg</code>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The <a href = \"#XPath_func-id\"><code>fn:id</code></a> function does not\nhave the desired effect when searching a document in which elements\nof type <code>xs:ID</code> are used as identifiers. To preserve\nbackwards compatibility, this function\n<code>fn:element-with-id</code> is therefore being introduced; it\nbehaves the same way as <a href = \"#XPath_func-id\"><code>fn:id</code></a>\nin the case of ID-valued attributes.</p>\n<p>Unless otherwise specified in the conformance rules for a host\nlanguage, implementation of this function is optional. Introduction\nof the function by means of an erratum therefore does not make\nexisting implementations non-conformant.</p>\n</div>\n<p>The function returns a sequence, in document order with\nduplicates eliminated, containing every element node <code>E</code>\nthat satisfies all the following conditions:</p>\n<ol class = \"enumar\">\n<li>\n<p><code>E</code> is in the target document. The target document is\nthe document containing <code>$node</code>, or the document\ncontaining the context item (<code>.</code>) if the second argument\nis omitted. The behavior of the function if <code>$node</code> is\nomitted is exactly the same as if the context item had been passed\nas <code>$node</code>. If <code>$node</code>, or the context item\nif the second argument is omitted, is a node in a tree whose root\nis not a document node [<a href = \"#ERRFODC0001\" title = \"err:FODC0001\">err:FODC0001</a>] is raised. If the second argument\nis the context item, or is omitted, the following errors may be\nraised: if there is no context item, [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>; if\nthe context item is not a node [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n</li>\n<li>\n<p><code>E</code> has an <code>ID</code> value equal to one of the\ncandidate <code>IDREF</code> values, where:</p>\n<ul>\n<li>\n<p>An element has an <code>ID</code> value equal to <code>V</code>\nif either or both of the following conditions are true:</p>\n<ul>\n<li>\n<p>The element has a child element node whose <code>is-id</code>\nproperty (See <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section 5.5 is-id\nAccessor</a><sup><small>DM</small></sup>.) is true, and whose typed\nvalue is equal to <code>V</code> under the rules of the\n<code>eq</code> operator using the Unicode code point\ncollation.</p>\n</li>\n<li>\n<p>The element has an attribute node whose <code>is-id</code>\nproperty (See <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section 5.5 is-id\nAccessor</a><sup><small>DM</small></sup>.) is true, and whose typed\nvalue is equal to <code>V</code> under the rules of the\n<code>eq</code> operator using the Unicode code point\ncollation.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Each <code>xs:string</code> in <code>$arg</code> is treated as a\nwhitespace-separated sequence of tokens, each acting as an\n<code>IDREF</code>. These tokens are then included in the list of\ncandidate <code>IDREF</code> values. If any of the tokens is not a\nlexically valid <code>IDREF</code> (that is, if it is not lexically\nan <code>xs:NCName</code>), it is ignored. Formally, the candidate\n<code>IDREF</code> values are the strings in the sequence given by\nthe expression:</p>\n<div class = \"exampleInner\">\n<pre>\nfor $s in $arg return fn:tokenize(fn:normalize-space($s), ' ')[. castable as xs:IDREF]\n</pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>If several elements have the same <code>ID</code> value, then\n<code>E</code> is the one that is first in document order.</p>\n</li>\n</ol>\n<div class = \"note\">\n<p class = \"prefix\"><b>Notes:</b></p>\n<p>See the Notes for the <a href = \"#XPath_func-id\"><code>fn:id</code></a>\nfunction, all of which apply equally to this function.</p>\n</div>\n</div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"context\" id = \"context\"></a>16 Context Functions</h2>\n<p>The following functions are defined to obtain information from\nthe dynamic context.</p>\n<table summary = \"Function/operator summary\" border = \"1\">\n<thead>\n<tr>\n<th>Function</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"#XPath_func-position\"><code>fn:position</code></a></td>\n<td>Returns the position of the context item within the sequence of\nitems currently being processed.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-last\"><code>fn:last</code></a></td>\n<td>Returns the number of items in the sequence of items currently\nbeing processed.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-current-dateTime\"><code>fn:current-dateTime</code></a></td>\n<td>Returns the current <code>xs:dateTime</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-current-date\"><code>fn:current-date</code></a></td>\n<td>Returns the current <code>xs:date</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-current-time\"><code>fn:current-time</code></a></td>\n<td>Returns the current <code>xs:time</code>.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-implicit-timezone\"><code>fn:implicit-timezone</code></a></td>\n<td>Returns the value of the implicit timezone property from the\ndynamic context.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-default-collation\"><code>fn:default-collation</code></a></td>\n<td>Returns the value of the default collation property from the\nstatic context.</td>\n</tr>\n<tr>\n<td><a href = \"#XPath_func-static-base-uri\"><code>fn:static-base-uri</code></a></td>\n<td>Returns the value of the Base URI property from the static\ncontext.</td>\n</tr>\n</tbody>\n</table>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-position\" id = \"XPath_func-position\"></a>16.1\nfn:position</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:position</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<p>Summary: Returns the context position from the dynamic context.\n(See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) If the context item is\nundefined, an error is raised: [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-last\" id = \"XPath_func-last\"></a>16.2 fn:last</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:last</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</div>\n<p>Summary: Returns the context size from the dynamic context. (See\n<a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) If the context item is\nundefined, an error is raised: [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPDY0002\" title = \"err:XPDY0002\">err:XPDY0002</a>]<sup><small>XP</small></sup>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-current-dateTime\" id = \"XPath_func-current-dateTime\"></a>16.3 fn:current-dateTime</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:current-dateTime</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dateTime</code></div>\n</div>\n<p>Summary: Returns the current dateTime (with timezone) from the\ndynamic context. (See <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.) This is an\n<code>xs:dateTime</code> that is current at some time during the\nevaluation of a query or transformation in which\n<code>fn:current-dateTime()</code> is executed. This function is\n<a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>. The precise\ninstant during the query or transformation represented by the value\nof <code>fn:current-dateTime()</code> is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<div class = \"div3\">\n<h4><a name = \"func-current-dateTime-examples\" id = \"func-current-dateTime-examples\"></a>16.3.1 Examples</h4>\n<ul>\n<li>\n<p><code>fn:current-dateTime()</code> returns an\n<code>xs:dateTime</code> corresponding to the current date and\ntime. For example, an invocation of\n<code>fn:current-dateTime()</code> might return\n<code>2004-05-12T18:17:15.125Z</code> corresponding to the current\ntime on May 12, 2004 in timezone <code>Z</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-current-date\" id = \"XPath_func-current-date\"></a>16.4\nfn:current-date</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:current-date</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:date</code></div>\n</div>\n<p>Summary: Returns <code>xs:date(fn:current-dateTime())</code>.\nThis is an <code>xs:date</code> (with timezone) that is current at\nsome time during the evaluation of a query or transformation in\nwhich <code>fn:current-date()</code> is executed. This function is\n<a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>. The precise\ninstant during the query or transformation represented by the value\nof <code>fn:current-date()</code> is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<div class = \"div3\">\n<h4><a name = \"func-current-date-examples\" id = \"func-current-date-examples\"></a>16.4.1 Examples</h4>\n<ul>\n<li>\n<p><code>fn:current-date()</code> returns an <code>xs:date</code>\ncorresponding to the current date and time. For example, an\ninvocation of <code>fn:current-date()</code> might return\n<code>2004-05-12+01:00</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-current-time\" id = \"XPath_func-current-time\"></a>16.5\nfn:current-time</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:current-time</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:time</code></div>\n</div>\n<p>Summary: Returns <code>xs:time(fn:current-dateTime())</code>.\nThis is an <code>xs:time</code> (with timezone) that is current at\nsome time during the evaluation of a query or transformation in\nwhich <code>fn:current-time()</code> is executed. This function is\n<a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>. The precise\ninstant during the query or transformation represented by the value\nof <code>fn:current-time()</code> is <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<div class = \"div3\">\n<h4><a name = \"func-current-time-examples\" id = \"func-current-time-examples\"></a>16.5.1 Examples</h4>\n<ul>\n<li>\n<p><code>fn:current-time()</code> returns an <code>xs:time</code>\ncorresponding to the current date and time. For example, an\ninvocation of <code>fn:current-time()</code> might return\n<code>23:17:00.000-05:00</code>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-implicit-timezone\" id = \"XPath_func-implicit-timezone\"></a>16.6 fn:implicit-timezone</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:implicit-timezone</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:dayTimeDuration</code></div>\n</div>\n<p>Summary: Returns the value of the implicit timezone property\nfrom the dynamic context. Components of the dynamic context are\ndiscussed in <a href = \"http://www.w3.org/TR/xpath20/#id-xp-evaluation-context-components\">\nSection C.2 Dynamic Context\nComponents</a><sup><small>XP</small></sup>.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-default-collation\" id = \"XPath_func-default-collation\"></a>16.7 fn:default-collation</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:default-collation</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Summary: Returns the value of the default collation property\nfrom the static context. Components of the static context are\ndiscussed in <a href = \"http://www.w3.org/TR/xpath20/#id-xp-static-context-components\">Section\nC.1 Static Context Components</a><sup><small>XP</small></sup>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The default collation property can never be undefined. If it is\nnot explicitly defined, a system defined default can be invoked. If\nthis is not provided, the Unicode code point collation\n(<code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>)\nis used.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"XPath_func-static-base-uri\" id = \"XPath_func-static-base-uri\"></a>16.8 fn:static-base-uri</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:static-base-uri</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI?</code></div>\n</div>\n<p>Summary: Returns the value of the Base URI property from the\nstatic context. If the Base URI property is undefined, the empty\nsequence is returned. Components of the static context are\ndiscussed in <a href = \"http://www.w3.org/TR/xpath20/#id-xp-static-context-components\">Section\nC.1 Static Context Components</a><sup><small>XP</small></sup> .</p>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"casting\" id = \"casting\"></a>17 Casting</h2>\n<p>Constructor functions and cast expressions accept an expression\nand return a value of a given type. They both convert a source\nvalue, <em>SV</em>, of a source type, <em>ST</em>, to a target\nvalue, <em>TV</em>, of the given target type, <em>TT</em>, with\nidentical semantics and different syntax. The name of the\nconstructor function is the same as the name of the built-in\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> datatype or the datatype defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#types\">Section 2.6\nTypes</a><sup><small>DM</small></sup> of <a href = \"#xpath-datamodel\">[XQuery 1.0 and XPath 2.0 Data Model]</a> (see\n<a href = \"#constructor-functions-for-xsd-types\"><b>5.1 Constructor\nFunctions for XML Schema Built-in Types</b></a>) or the\nuser-derived datatype (see <a href = \"#constructor-functions-for-user-defined-types\"><b>5.4 Constructor\nFunctions for User-Defined Types</b></a>) that is the target for\nthe conversion, and the semantics are exactly the same as for a\ncast expression; for example,\" <code>xs:date(\"2003-01-01\")</code> \"\nmeans exactly the same as \" <code>\"2003-01-01\"</code> cast as\n<code>xs:date?</code> \".</p>\n<p>The cast expression takes a type name to indicate the target\ntype of the conversion. See <a href = \"http://www.w3.org/TR/xpath20/#id-cast\">Section 3.10.2\nCast</a><sup><small>XP</small></sup>. If the type name allows the\nempty sequence and the expression to be cast is the empty sequence,\nthe empty sequence is returned. If the type name does not allow the\nempty sequence and the expression to be cast is the empty sequence,\na type error is raised [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>Where the argument to a cast is a literal, the result of the\nfunction may be evaluated statically; if an error is encountered\nduring such evaluation, it may be reported as a static error.</p>\n<p>Casting from primitive type to primitive type is discussed in\n<a href = \"#casting-from-primitive-to-primitive\"><b>17.1 Casting from\nprimitive types to primitive types</b></a>. Casting to derived\ntypes is discussed in <a href = \"#casting-to-derived-types\"><b>17.2\nCasting to derived types</b></a>. Casting from derived types is\ndiscussed in <a href = \"#casting-from-derived-to-parent\"><b>17.3\nCasting from derived types to parent types</b></a>, <a href = \"#casting-within-branch\"><b>17.4 Casting within a branch of the\ntype hierarchy</b></a> and <a href = \"#casting-across-hierarchy\"><b>17.5 Casting across the type\nhierarchy</b></a>.</p>\n<p>When casting from <code>xs:string</code> the semantics in\n<a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string\nand xs:untypedAtomic</b></a> apply, regardless of target type.</p>\n<div class = \"div2\">\n<h3><a name = \"casting-from-primitive-to-primitive\" id = \"casting-from-primitive-to-primitive\"></a>17.1 Casting from\nprimitive types to primitive types</h3>\n<p>This section defines casting between the 19 primitive types\ndefined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a> as well as <code>xs:untypedAtomic</code>,\n<code>xs:integer</code> and the two derived types of\n<code>xs:duration</code> (<code>xs:yearMonthDuration</code> and\n<code>xs:dayTimeDuration</code>). These four types are not\nprimitive types but they are treated as primitive types in this\nsection. The type conversions that are supported are indicated in\nthe table below. In this table, there is a row for each primitive\ntype with that type as the source of the conversion and there is a\ncolumn for each primitive type as the target of the conversion. The\nintersections of rows and columns contain one of three characters:\n\"Y\" indicates that a conversion from values of the type to which\nthe row applies to the type to which the column applies is\nsupported; \"N\" indicates that there are no supported conversions\nfrom values of the type to which the row applies to the type to\nwhich the column applies; and \"M\" indicates that a conversion from\nvalues of the type to which the row applies to the type to which\nthe column applies may succeed for some values in the value space\nand fails for others.</p>\n<p><a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> defines <code>xs:NOTATION</code> as an abstract type.\nThus, casting to <code>xs:NOTATION</code> from any other type\nincluding <code>xs:NOTATION</code> is not permitted and raises\n[<a href = \"http://www.w3.org/TR/xpath20/#ERRXPST0080\" title = \"err:XPST0080\">err:XPST0080</a>]<sup><small>XP</small></sup>.\nHowever, casting from one subtype of <code>xs:NOTATION</code> to\nanother subtype of <code>xs:NOTATION</code> is permitted.</p>\n<p>Casting is not supported to or from\n<code>xs:anySimpleType</code>. Thus, there is no row or column for\nthis type in the table below. For any node that has not been\nvalidated or has been validated as <code>xs:anySimpleType</code>,\nthe typed value of the node is an atomic value of type\n<code>xs:untypedAtomic</code>. There are no atomic values with the\ntype annotation <code>xs:anySimpleType</code> at runtime. Casting\nto a type that is not atomic raises [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPST0051\" title = \"err:XPST0051\">err:XPST0051</a>]<sup><small>XP</small></sup>.</p>\n<p>Similarly, casting is not supported to or from\n<code>xs:anyAtomicType</code> and will raise error [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPST0080\" title = \"err:XPST0080\">err:XPST0080</a>]<sup><small>XP</small></sup>. There\nare no atomic values with the type annotation\n<code>xs:anyAtomicType</code> at runtime, although this can be a\nstatically inferred type.</p>\n<p>If casting is attempted from an <em>ST</em> to a <em>TT</em> for\nwhich casting is not supported, as defined in the table below, a\ntype error is raised [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup>.</p>\n<p>In the following table, the columns and rows are identified by\nshort codes that identify simple types as follows:</p>\n<blockquote>\n<p>uA = xs:untypedAtomic<br/>\naURI = xs:anyURI<br/>\nb64 = xs:base64Binary<br/>\nbool = xs:boolean<br/>\ndat = xs:date<br/>\ngDay = xs:gDay<br/>\ndbl = xs:double<br/>\ndec = xs:decimal<br/>\ndT = xs:dateTime<br/>\ndTD = xs:dayTimeDuration<br/>\ndur = xs:duration<br/>\nflt = xs:float<br/>\nhxB = xs:hexBinary<br/>\ngMD = xs:gMonthDay<br/>\ngMon = xs:gMonth<br/>\nint = xs:integer<br/>\nNOT = xs:NOTATION<br/>\nQN = xs:QName<br/>\nstr = xs:string<br/>\ntim = xs:time<br/>\ngYM = xs:gYearMonth<br/>\nyMD = xs:yearMonthDuration<br/>\ngYr = xs:gYear</p>\n</blockquote>\n<p>In the following table, the notation \"S\\T\" indicates that the\nsource (\"S\") of the conversion is indicated in the column below the\nnotation and that the target (\"T\") is indicated in the row to the\nright of the notation.</p>\n<table class = \"casting\" summary = \"Casting table\" border = \"1\" cellpadding = \"1\" id = \"casting-to-primitives-table\">\n<col width = \"5%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<col width = \"3%\" span = \"1\"/>\n<thead>\n<tr>\n<th><span class = \"cancast\" title = \"S\\T\">S\\T</span></th>\n<th><span class = \"cancast\" title = \"untypedAtomic\">uA</span></th>\n<th><span class = \"cancast\" title = \"string\">str</span></th>\n<th><span class = \"cancast\" title = \"float\">flt</span></th>\n<th><span class = \"cancast\" title = \"double\">dbl</span></th>\n<th><span class = \"cancast\" title = \"decimal\">dec</span></th>\n<th><span class = \"cancast\" title = \"integer\">int</span></th>\n<th><span class = \"cancast\" title = \"duration\">dur</span></th>\n<th><span class = \"cancast\" title = \"yearMonthDuration\">yMD</span></th>\n<th><span class = \"cancast\" title = \"dayTimeDuration\">dTD</span></th>\n<th><span class = \"cancast\" title = \"dateTime\">dT</span></th>\n<th><span class = \"cancast\" title = \"time\">tim</span></th>\n<th><span class = \"cancast\" title = \"date\">dat</span></th>\n<th><span class = \"cancast\" title = \"gYearMonth\">gYM</span></th>\n<th><span class = \"cancast\" title = \"gYear\">gYr</span></th>\n<th><span class = \"cancast\" title = \"gMonthDay\">gMD</span></th>\n<th><span class = \"cancast\" title = \"gDay\">gDay</span></th>\n<th><span class = \"cancast\" title = \"gMonth\">gMon</span></th>\n<th><span class = \"cancast\" title = \"boolean\">bool</span></th>\n<th><span class = \"cancast\" title = \"base64Binary\">b64</span></th>\n<th><span class = \"cancast\" title = \"hexBinary\">hxB</span></th>\n<th><span class = \"cancast\" title = \"anyURI\">aURI</span></th>\n<th><span class = \"cancast\" title = \"QName\">QN</span></th>\n<th><span class = \"cancast\" title = \"NOTATION\">NOT</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th><span class = \"cancast\" title = \"untypedAtomic\">uA</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to string? Yes\">Y</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to float? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to double? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to decimal? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to integer? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to duration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to yearMonthDuration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to dayTimeDuration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to dateTime? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to time? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to date? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to gYearMonth? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to gYear? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to gMonthDay? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to gDay? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to gMonth? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to boolean? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to base64Binary? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to hexBinary? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to anyURI? Maybe\">M</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast untypedAtomic to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"string\">str</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to string? Yes\">Y</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to float? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to double? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to decimal? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to integer? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to duration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to yearMonthDuration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to dayTimeDuration? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to dateTime? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to time? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to date? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to gYearMonth? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to gYear? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to gMonthDay? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to gDay? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to gMonth? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to boolean? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to base64Binary? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to hexBinary? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to anyURI? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to QName? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast string to NOTATION? Maybe\">M</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"float\">flt</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to string? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to float? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to double? Yes\">Y</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to decimal? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to integer? Maybe\">M</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to gMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to boolean? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast float to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"double\">dbl</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to string? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to float? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to double? Yes\">Y</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to decimal? Maybe\">M</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to integer? Maybe\">M</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to gMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to boolean? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast double to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"decimal\">dec</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to string? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to float? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to double? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to decimal? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to integer? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to gMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to boolean? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast decimal to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"integer\">int</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to string? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to float? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to double? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to decimal? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to integer? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to gMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to boolean? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast integer to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"duration\">dur</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to integer? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to duration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to yearMonthDuration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to dayTimeDuration? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast duration to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"yearMonthDuration\">yMD</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to integer? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to duration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to yearMonthDuration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to dayTimeDuration? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast yearMonthDuration to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"dayTimeDuration\">dTD</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to integer? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to duration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to yearMonthDuration? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to dayTimeDuration? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dayTimeDuration to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"dateTime\">dT</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to dayTimeDuration? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to dateTime? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to time? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to date? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to gYearMonth? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to gYear? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to gMonthDay? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to gDay? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to gMonth? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast dateTime to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"time\">tim</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to dateTime? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to time? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast time to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"date\">dat</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to dayTimeDuration? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to dateTime? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to time? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to date? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to gYearMonth? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to gYear? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to gMonthDay? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to gDay? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to gMonth? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast date to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"gYearMonth\">gYM</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to date? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to gYearMonth? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYearMonth to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"gYear\">gYr</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to gYearMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to gYear? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gYear to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"gMonthDay\">gMD</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to gYear? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to gMonthDay? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonthDay to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"gDay\">gDay</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to gMonthDay? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to gDay? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gDay to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"gMonth\">gMon</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to gDay? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to gMonth? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast gMonth to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"boolean\">bool</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to string? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to float? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to double? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to decimal? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to integer? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to gMonth? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to boolean? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast boolean to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"base64Binary\">b64</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to boolean? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to base64Binary? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to hexBinary? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast base64Binary to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"hexBinary\">hxB</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to boolean? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to base64Binary? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to hexBinary? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast hexBinary to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"anyURI\">aURI</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to hexBinary? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to anyURI? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to QName? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast anyURI to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"QName\">QN</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to anyURI? No\">N</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to QName? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast QName to NOTATION? No\">N</span></td>\n</tr>\n<tr>\n<th><span class = \"cancast\" title = \"NOTATION\">NOT</span></th>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to untypedAtomic? Yes\">Y</span></td>\n<td class = \"castY\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to string? Yes\">Y</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to float? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to double? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to decimal? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to integer? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to duration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to yearMonthDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to dayTimeDuration? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to dateTime? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to time? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to date? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to gYearMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to gYear? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to gMonthDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to gDay? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to gMonth? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to boolean? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to base64Binary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to hexBinary? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to anyURI? No\">N</span></td>\n<td class = \"castN\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to QName? No\">N</span></td>\n<td class = \"castM\" align = \"center\" valign = \"middle\"><span class = \"cancast\" title = \"Cast NOTATION to NOTATION? Maybe\">M</span></td>\n</tr>\n</tbody>\n</table>\n<p>The following sub-sections define the semantics of casting from\na primitive type to a primitive type. Semantics of casting to and\nfrom a derived type are defined in sections <a href = \"#casting-to-derived-types\"><b>17.2 Casting to derived\ntypes</b></a>, <a href = \"#casting-from-derived-to-parent\"><b>17.3\nCasting from derived types to parent types</b></a>, <a href = \"#casting-within-branch\"><b>17.4 Casting within a branch of the\ntype hierarchy</b></a> and <a href = \"#casting-across-hierarchy\"><b>17.5 Casting across the type\nhierarchy</b></a>.</p>\n<div class = \"div3\">\n<h4><a name = \"casting-from-strings\" id = \"casting-from-strings\"></a>17.1.1 Casting from xs:string and\nxs:untypedAtomic</h4>\n<p>When the supplied value is an instance of <code>xs:string</code>\nor an instance of <code>xs:untypedAtomic</code>, it is treated as\nbeing a string value and mapped to a typed value of the target type\nas defined in <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes\nSecond Edition]</a>. Whitespace normalization is applied as\nindicated by the whiteSpace facet for the datatype. The resulting\nwhitespace-normalized string must be a valid lexical form for the\ndatatype. The semantics of casting are identical to XML Schema\nvalidation. For example, <code>\"13\" cast as xs:unsignedInt</code>\nreturns the <code>xs:unsignedInt</code> typed value\n<code>13</code>. This could also be written\n<code>xs:unsignedInt(\"13\")</code>.</p>\n<p>When casting from <code>xs:string</code> or\n<code>xs:untypedAtomic</code> to a derived type where the derived\ntype is restricted by a pattern facet, the lexical form is first\nchecked against the pattern before further casting is attempted\n(See <a href = \"#casting-to-derived-types\"><b>17.2 Casting to derived\ntypes</b></a>). If the lexical form does not conform to the\npattern, error [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>] is raised.</p>\n<p>Consider a user-defined Schema whose target namespace is bound\nto the prefix <code>mySchema</code> which defines a restriction of\n<code>xs:boolean</code> called <code>trueBool</code> which allows\nonly the lexical forms \"<code>1</code>\" and \"<code>0</code>\".\n<code>\"true\" cast as mySchema:trueBool</code> would fail with\n[<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>]. If\nthe Schema also defines a datatype called <code>height</code> as a\nrestriction of <code>xs:integer</code> with a maximum value of\n<code>84</code> then <code>\"100\" cast as mySchema:height</code>\nwould also fail with [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>].</p>\n<p>Casting is permitted from <code>xs:string</code> and\n<code>xs:untypedAtomic</code> to any primitive atomic type or any\natomic type derived by restriction, except <code>xs:QName</code> or\n<code>xs:NOTATION</code>. Casting to <code>xs:NOTATION</code> is\nnot permitted because it is an abstract type.</p>\n<p>Casting is permitted from <code>xs:string</code> literals to\n<code>xs:QName</code> and types derived from\n<code>xs:NOTATION</code>. If the argument to such a cast is\ncomputed dynamically, [<a href = \"http://www.w3.org/TR/xpath20/#ERRXPTY0004\" title = \"err:XPTY0004\">err:XPTY0004</a>]<sup><small>XP</small></sup> is\nraised if the value is of any type other than <code>xs:QName</code>\nor <code>xs:NOTATION</code> respectively (including the case where\nit is an <code>xs:string</code>). <span>The process is described in\nmore detail in <a href = \"#constructor-qname-notation\"><b>5.3\nConstructor Functions for xs:QName and\nxs:NOTATION</b></a>.</span></p>\n<p>In casting to numerics, if the value is too large or too small\nto be accurately represented by the implementation, it is handled\nas an overflow or underflow as defined in <a href = \"#op.numeric\"><b>6.2 Operators on Numeric Values</b></a>.</p>\n<p>In casting to <code>xs:decimal</code> or to a type derived from\n<code>xs:decimal</code>, if the value is not too large or too small\nbut nevertheless cannot be represented accurately with the number\nof decimal digits available to the implementation, the\nimplementation may round to the nearest representable value or may\nraise a dynamic error [<a href = \"#ERRFOCA0006\" title = \"err:FOCA0006\">err:FOCA0006</a>]. The choice of rounding algorithm\nand the choice between rounding and error behavior and is\nimplementation-defined.</p>\n<p>In casting to <code>xs:date</code>, <code>xs:dateTime</code>,\n<code>xs:gYear</code>, or <code>xs:gYearMonth</code> (or types\nderived from these), if the value is too large or too small to be\nrepresented by the implementation, error [<a href = \"#ERRFODT0001\" title = \"err:FODT0001\">err:FODT0001</a>] is raised.</p>\n<p>In casting to a duration value, if the value is too large or too\nsmall to be represented by the implementation, error [<a href = \"#ERRFODT0002\" title = \"err:FODT0002\">err:FODT0002</a>] is\nraised.</p>\n<p>For <code>xs:anyURI</code>, the extent to which an\nimplementation validates the lexical form of <code>xs:anyURI</code>\nis <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a>.</p>\n<p>If the cast fails for any other reason, error [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>] is\nraised.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-string\" id = \"casting-to-string\"></a>17.1.2\nCasting to xs:string and xs:untypedAtomic</h4>\n<p>Casting is permitted from any primitive type to the primitive\ntypes <code>xs:string</code> and <code>xs:untypedAtomic</code>.</p>\n<p>When a value of any simple type is cast as\n<code>xs:string</code>, the derivation of the\n<code>xs:string</code> value <em>TV</em> depends on the <em>ST</em>\nand on the <em>SV</em>, as follows.</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:string</code> or a type derived from\n<code>xs:string</code>, <em>TV</em> is <em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:anyURI</code>, the type conversion is\nperformed without escaping any characters.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:QName</code> or\n<code>xs:NOTATION</code>:</p>\n<ul>\n<li>\n<p>if the qualified name has a prefix, then <em>TV</em> is the\nconcatenation of the prefix of <em>SV</em>, a single colon (:), and\nthe local name of <em>SV</em>.</p>\n</li>\n<li>\n<p>otherwise <em>TV</em> is the local-name.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If <em>ST</em> is a numeric type, the following rules apply:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:integer</code>, <em>TV</em> is the\ncanonical lexical representation of <em>SV</em> as defined in\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a>. There is no decimal point.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:decimal</code>, then:</p>\n<ul>\n<li>\n<p>If <em>SV</em> is in the value space of <code>xs:integer</code>,\nthat is, if there are no significant digits after the decimal\npoint, then the value is converted from an <code>xs:decimal</code>\nto an <code>xs:integer</code> and the resulting\n<code>xs:integer</code> is converted to an <code>xs:string</code>\nusing the rule above.</p>\n</li>\n<li>\n<p>Otherwise, the canonical lexical representation of <em>SV</em>\nis returned, as defined in <a href = \"#xmlschema-2\">[XML Schema Part\n2: Datatypes Second Edition]</a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code> or\n<code>xs:double</code>, then:</p>\n<ul>\n<li>\n<p><em>TV</em> will be an <code>xs:string</code> in the lexical\nspace of <code>xs:double</code> or <code>xs:float</code> that when\nconverted to an <code>xs:double</code> or <code>xs:float</code>\nunder the rules of <a href = \"#casting-from-strings\"><b>17.1.1\nCasting from xs:string and xs:untypedAtomic</b></a> produces a\nvalue that is equal to <em>SV</em>, or is \"NaN\" if <em>SV</em> is\n<code>NaN</code>. In addition, <em>TV</em> must satisfy the\nconstraints in the following sub-bullets.</p>\n<ul>\n<li>\n<p>If <em>SV</em> has an absolute value that is greater than or\nequal to 0.000001 (one millionth) and less than 1000000 (one\nmillion), then the value is converted to an <code>xs:decimal</code>\nand the resulting <code>xs:decimal</code> is converted to an\n<code>xs:string</code> according to the rules above, as though\nusing an implementation of <code>xs:decimal</code> that imposes no\nlimits on the <code>totalDigits</code> or\n<code>fractionDigits</code> facets.</p>\n</li>\n<li>\n<p>If <em>SV</em> has the value positive or negative zero,\n<em>TV</em> is \"0\" or \"-0\" respectively.</p>\n</li>\n<li>\n<p>If <em>SV</em> is positive or negative infinity, <em>TV</em> is\nthe string \"<code>INF</code>\" or \"<code>-INF</code>\"\nrespectively.</p>\n</li>\n<li>\n<p>In other cases, the result consists of a mantissa, which has the\nlexical form of an <code>xs:decimal</code>, followed by the letter\n\"E\", followed by an exponent which has the lexical form of an\n<code>xs:integer</code>. Leading zeroes and \"+\" signs are\nprohibited in the exponent. For the mantissa, there must be a\ndecimal point, and there must be exactly one digit before the\ndecimal point, which must be non-zero. The \"+\" sign is prohibited.\nThere must be at least one digit after the decimal point. Apart\nfrom this mandatory digit, trailing zero digits are prohibited.</p>\n</li>\n</ul>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The above rules allow more than one representation of the same\nvalue. For example, the <code>xs:float</code> value whose exact\ndecimal representation is 1.26743223E15 might be represented by any\nof the strings \"1.26743223E15\", \"1.26743222E15\" or \"1.26743224E15\"\n(inter alia). It is implementation-dependent which of these\nrepresentations is chosen.</p>\n</div>\n</li>\n</ul>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, <code>xs:date</code>\nor <code>xs:time</code>, <em>TV</em> is the local value. The\ncomponents of <em>TV</em> are individually cast to\n<code>xs:string</code> using the functions described in <a href = \"#casting-to-datetimes\">[casting-to-datetimes]</a> and the results\nare concatenated together. The <code>year</code> component is cast\nto <code>xs:string</code> using\n<code>eg:convertYearToString</code>. The <code>month</code>,\n<code>day</code>, <code>hour</code> and <code>minute</code>\ncomponents are cast to <code>xs:string</code> using\n<code>eg:convertTo2CharString</code>. The <code>second</code>\ncomponent is cast to <code>xs:string</code> using\n<code>eg:convertSecondsToString</code>. The timezone component, if\npresent, is cast to <code>xs:string</code> using\n<code>eg:convertTZtoString</code>.</p>\n<p>Note that the hours component of the resulting string will never\nbe <code>\"24\"</code>. Midnight is always represented as\n<code>\"00:00:00\"</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code>, <em>TV</em> is the canonical\nrepresentation of <em>SV</em> as defined in <a href = \"#dt-yearMonthDuration\"><b>10.3.1 xs:yearMonthDuration</b></a> or\n<a href = \"#dt-dayTimeDuration\"><b>10.3.2 xs:dayTimeDuration</b></a>,\nrespectively.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:duration</code> then let <em>SYM</em>\nbe <em><code>SV</code></em> <code>cast as\nxs:yearMonthDuration</code>, and let <em>SDT</em> be\n<em><code>SV</code></em> <code>cast as xs:dayTimeDuration</code>;\nNow, let the next intermediate value, <em>TYM</em>, be\n<em><code>SYM</code></em> <code>cast as</code>\n<em><code>TT</code></em>, and let <em>TDT</em> be\n<em><code>SDT</code></em> <code>cast as</code>\n<em><code>TT</code></em>. If <em>TYM</em> is \"P0M\", then\n<em>TV</em> is <em>TDT</em>. Otherwise, <em>TYM</em> and\n<em>TDT</em> are merged according to the following rules:</p>\n<ol class = \"enumar\">\n<li>\n<p>If <em>TDT</em> is \"PT0S\", then <em>TV</em> is <em>TYM</em>.</p>\n</li>\n<li>\n<p>Otherwise, <em>TV</em> is the concatenation of all the\ncharacters in <em>TYM</em> and all the characters except the first\n\"P\" and the optional negative sign in <em>TDT</em>.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>In all other cases, <em>TV</em> is the <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\ncanonical representation of <em>SV</em>. For datatypes that do not\nhave a canonical lexical representation defined an <a title = \"implementation dependent\" class = \"termref\" href = \"#implementation-dependent\"><span class = \"arrow\">·</span>implementation dependent<span class = \"arrow\">·</span></a> canonical representation may be used.</p>\n</li>\n</ul>\n<p>To cast as <code>xs:untypedAtomic</code> the value is cast as\n<code>xs:string</code>, as described above, and the type annotation\nchanged to <code>xs:untypedAtomic</code>.</p>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>The string representations of numeric values are backwards\ncompatible with XPath 1.0 except for the special values positive\nand negative infinity, negative zero and values outside the range\n<code>1.0e-6</code> to <code>1.0e+6</code>.</p>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-numerics\" id = \"casting-to-numerics\"></a>17.1.3 Casting to numeric types</h4>\n<div class = \"div4\">\n<h5><a name = \"casting-to-float\" id = \"casting-to-float\"></a>17.1.3.1\nCasting to xs:float</h5>\n<p>When a value of any simple type is cast as\n<code>xs:float</code>, the <code>xs:float</code> <em>TV</em> is\nderived from the <em>ST</em> and the <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code>, then <em>TV</em> is\n<em>SV</em> and the conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:double</code>, then <em>TV</em> is\nobtained as follows:</p>\n<ul>\n<li>\n<p>if <em>SV</em> is the <code>xs:double</code> value\n<code>INF</code>, <code>-INF</code>, <code>NaN</code>, positive\nzero, or negative zero, then <em>TV</em> is the\n<code>xs:float</code> value <code>INF</code>, <code>-INF</code>,\n<code>NaN</code>, positive zero, or negative zero respectively.</p>\n</li>\n<li>\n<p>otherwise, <em>SV</em> can be expressed in the form <code>m ×\n2^e</code> where the mantissa <code>m</code> and exponent\n<code>e</code> are signed <code>xs:integer</code>s whose value\nrange is defined in <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a>, and the following rules apply:</p>\n<ul>\n<li>\n<p>if <code>m</code> (the mantissa of <em>SV</em>) is outside the\npermitted range for the mantissa of an <code>xs:float</code> value\n<code>(-2^24-1 to +2^24-1)</code>, then it is divided by\n<code>2^N</code> where <code>N</code> is the lowest positive\n<code>xs:integer</code> that brings the result of the division\nwithin the permitted range, and the exponent <code>e</code> is\nincreased by <code>N</code>. This is integer division (in effect,\nthe binary value of the mantissa is truncated on the right). Let\n<code>M</code> be the mantissa and <code>E</code> the exponent\nafter this adjustment.</p>\n</li>\n<li>\n<p>if <code>E</code> exceeds <code>104</code> (the maximum exponent\nvalue in the value space of <code>xs:float</code>) then <em>TV</em>\nis the <code>xs:float</code> value <code>INF</code> or\n<code>-INF</code> depending on the sign of <code>M</code>.</p>\n</li>\n<li>\n<p>if <code>E</code> is less than <code>-149</code> (the minimum\nexponent value in the value space of <code>xs:float</code>) then\n<em>TV</em> is the <code>xs:float</code> value positive or negative\nzero depending on the sign of <code>M</code></p>\n</li>\n<li>\n<p>otherwise, <em>TV</em> is the <code>xs:float</code> value\n<code>M × 2^E</code>.</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:decimal</code>, or\n<code>xs:integer</code>, then <em>TV</em> is <code>xs:float(</code>\n<em>SV</em> <code>cast as xs:string)</code> and the conversion is\ncomplete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:boolean</code>, <em>SV</em> is\nconverted to <code>1.0E0</code> if <em>SV</em> is <code>true</code>\nand to <code>0.0E0</code> if <em>SV</em> is <code>false</code> and\nthe conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Implementations <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> return negative zero for <code>\"-0.0E0\" cast\nas xs:float</code>. <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a> does not distinguish between the\nvalues positive zero and negative zero.</p>\n</div>\n</div>\n<div class = \"div4\">\n<h5><a name = \"casting-to-double\" id = \"casting-to-double\"></a>17.1.3.2\nCasting to xs:double</h5>\n<p>When a value of any simple type is cast as\n<code>xs:double</code>, the <code>xs:double</code> value\n<em>TV</em> is derived from the <em>ST</em> and the <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:double</code>, then <em>TV</em> is\n<em>SV</em> and the conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code> or a type derived from\n<code>xs:float</code>, then <em>TV</em> is obtained as follows:</p>\n<ul>\n<li>\n<p>if <em>SV</em> is the <code>xs:float</code> value\n<code>INF</code>, <code>-INF</code>, <code>NaN</code>, positive\nzero, or negative zero, then <em>TV</em> is the\n<code>xs:double</code> value <code>INF</code>, <code>-INF</code>,\n<code>NaN</code>, positive zero, or negative zero respectively.</p>\n</li>\n<li>\n<p>otherwise, <em>SV</em> can be expressed in the form <code>m ×\n2^e</code> where the mantissa <code>m</code> and exponent\n<code>e</code> are signed <code>xs:integer</code> values whose\nvalue range is defined in <a href = \"#xmlschema-2\">[XML Schema Part\n2: Datatypes Second Edition]</a>, and <em>TV</em> is the\n<code>xs:double</code> value <code>m × 2^e</code>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:decimal</code> or\n<code>xs:integer</code>, then <em>TV</em> is\n<code>xs:double(</code> <em>SV</em> <code>cast as xs:string)</code>\nand the conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:boolean</code>, <em>SV</em> is\nconverted to <code>1.0E0</code> if <em>SV</em> is <code>true</code>\nand to <code>0.0E0</code> if <em>SV</em> is <code>false</code> and\nthe conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n<div class = \"note\">\n<p class = \"prefix\"><b>Note:</b></p>\n<p>Implementations <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> return negative zero for <code>\"-0.0E0\" cast\nas xs:double</code>. <a href = \"#xmlschema-2\">[XML Schema Part 2:\nDatatypes Second Edition]</a> does not distinguish between the\nvalues positive zero and negative zero.</p>\n</div>\n</div>\n<div class = \"div4\">\n<h5><a name = \"casting-to-decimal\" id = \"casting-to-decimal\"></a>17.1.3.3 Casting to xs:decimal</h5>\n<p>When a value of any simple type is cast as\n<code>xs:decimal</code>, the <code>xs:decimal</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:decimal</code>,\n<code>xs:integer</code> or a type derived from them, then\n<em>TV</em> is <em>SV</em>, converted to an <code>xs:decimal</code>\nvalue if need be, and the conversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code> or\n<code>xs:double</code>, then <em>TV</em> is the\n<code>xs:decimal</code> value, within the set of\n<code>xs:decimal</code> values that the implementation is capable\nof representing, that is numerically closest to <em>SV</em>. If two\nvalues are equally close, then the one that is closest to zero is\nchosen. If <em>SV</em> is too large to be accommodated as an\n<code>xs:decimal</code>, (see <a href = \"#xmlschema-2\">[XML Schema\nPart 2: Datatypes Second Edition]</a> for <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> limits on numeric values) an error is raised\n[<a href = \"#ERRFOCA0001\" title = \"err:FOCA0001\">err:FOCA0001</a>]. If\n<em>SV</em> is one of the special <code>xs:float</code> or\n<code>xs:double</code> values <code>NaN</code>, <code>INF</code>,\nor <code>-INF</code>, an error is raised [<a href = \"#ERRFOCA0002\" title = \"err:FOCA0002\">err:FOCA0002</a>].</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:boolean</code>, <em>SV</em> is\nconverted to <code>1.0</code> if <em>SV</em> is <code>1</code> or\n<code>true</code> and to <code>0.0</code> if <em>SV</em> is\n<code>0</code> or <code>false</code> and the conversion is\ncomplete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</div>\n<div class = \"div4\">\n<h5><a name = \"casting-to-integer\" id = \"casting-to-integer\"></a>17.1.3.4 Casting to xs:integer</h5>\n<p>When a value of any simple type is cast as\n<code>xs:integer</code>, the <code>xs:integer</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:integer</code>, or a type derived\nfrom <code>xs:integer</code>, then <em>TV</em> is <em>SV</em>,\nconverted to an <code>xs:integer</code> value if need be, and the\nconversion is complete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:decimal</code>, <code>xs:float</code>\nor <code>xs:double</code>, then <em>TV</em> is <em>SV</em> with the\nfractional part discarded and the value converted to\n<code>xs:integer</code>. Thus, casting <code>3.1456</code> returns\n<code>3</code> and <code>-17.89</code> returns <code>-17</code>.\nCasting <code>3.124E1</code> returns <code>31</code>. If\n<em>SV</em> is too large to be accommodated as an integer, (see\n<a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> for <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> limits on numeric values) an error is raised\n[<a href = \"#ERRFOCA0003\" title = \"err:FOCA0003\">err:FOCA0003</a>]. If\n<em>SV</em> is one of the special <code>xs:float</code> or\n<code>xs:double</code> values <code>NaN</code>, <code>INF</code>,\nor <code>-INF</code>, an error is raised [<a href = \"#ERRFOCA0002\" title = \"err:FOCA0002\">err:FOCA0002</a>].</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:boolean</code>, <em>SV</em> is\nconverted to <code>1</code> if <em>SV</em> is <code>1</code> or\n<code>true</code> and to <code>0</code> if <em>SV</em> is\n<code>0</code> or <code>false</code> and the conversion is\ncomplete.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-durations\" id = \"casting-to-durations\"></a>17.1.4 Casting to duration types</h4>\n<p>When a value of type <code>xs:untypedAtomic</code>,\n<code>xs:string</code>, a type derived from <code>xs:string</code>,\n<code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code> is cast as\n<code>xs:duration</code>, <code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code>, <em>TV</em> is derived from\n<em>ST</em> and <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is the same as <em>TT</em>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:duration</code>, or a type derived\nfrom <code>xs:duration</code>, but not\n<code>xs:dayTimeDuration</code> or a type derived from\n<code>xs:dayTimeDuration</code>, and <em>TT</em> is\n<code>xs:yearMonthDuration</code>, then <em>TV</em> is derived from\n<em>SV</em> by removing the day, hour, minute and second components\nfrom <em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:duration</code>, or a type derived\nfrom <code>duration</code>, but not\n<code>xs:yearMonthDuration</code> or a type derived from\n<code>xs:yearMonthDuration</code>, and <em>TT</em> is\n<code>xs:dayTimeDuration</code>, then <em>TV</em> is derived from\n<em>SV</em> by removing the year and month components from\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code>, and <em>TT</em> is\n<code>xs:duration</code>, then <em>TV</em> is derived from\n<em>SV</em> as discussed in <a href = \"#casting-from-derived-to-parent\"><b>17.3 Casting from derived\ntypes to parent types</b></a>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:yearMonthDuration</code> and\n<em>TT</em> is <code>xs:dayTimeDuration</code>, the cast is\npermitted and returns a <code>xs:dayTimeDuration</code> with value\n0.0 seconds.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dayTimeDuration</code> and\n<em>TT</em> is <code>xs:yearMonthDuration</code>, the cast is\npermitted and returns a <code>xs:yearMonthDuration</code> with\nvalue 0 months.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n<p>Note that casting from <code>xs:duration</code> to\n<code>xs:yearMonthDuration</code> or\n<code>xs:dayTimeDuration</code> loses information. To avoid this,\nusers can cast the <code>xs:duration</code> value to both an\n<code>xs:yearMonthDuration</code> and an\n<code>xs:dayTimeDuration</code> and work with both values.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-datetimes\" id = \"casting-to-datetimes\"></a>17.1.5 Casting to date and time\ntypes</h4>\n<p>In several situations, casting to date and time types requires\nthe extraction of a component from <em>SV</em> or from the result\nof <a href = \"#XPath_func-current-dateTime\"><code>fn:current-dateTime</code></a> and\nconverting it to an <code>xs:string</code>. These conversions must\nfollow certain rules. For example, converting an\n<code>xs:integer</code> year value requires converting to an\n<code>xs:string</code> with four or more characters, preceded by a\nminus sign if the value is negative.</p>\n<p>This document defines four functions to perform these\nconversions. These functions are for illustrative purposes only and\nmake no recommendations as to style or efficiency. References to\nthese functions from the following text are not normative.</p>\n<p>The arguments to these functions come from functions defined in\nthis document. Thus, the functions below assume that they are\ncorrect and do no range checking on them.</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:convertYearToString($year as xs:integer) as xs:string\n{\n   let $plusMinus := if ($year &gt;= 0) then \"\" else \"-\"\n   let $yearString := fn:abs($year) cast as xs:string\n   let $length := fn:string-length($yearString)\n   return\n     if ($length = 1)  then fn:concat($plusMinus, \"000\", $yearString)\n     else\n     if ($length = 2)  then fn:concat($plusMinus, \"00\", $yearString)\n       else\n       if ($length = 3)  then fn:concat($plusMinus, \"0\", $yearString)\n       else fn:concat($plusMinus, $yearString)\n}\n                    \n</pre></div>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:convertTo2CharString($value as xs:integer) as xs:string\n{\n   let $string := $value cast as xs:string\n   return \n     if (fn:string-length($string) = 1) then fn:concat(\"0\", $string)\n     else $string\n}\n                    \n</pre></div>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:convertSecondsToString($seconds as xs:decimal) as xs:string\n{\n   let $string := $seconds cast as xs:string\n   let $intLength := fn:string-length(($seconds cast as xs:integer) cast as xs:string)\n   return \n     if ($intLength = 1) then fn:concat(\"0\", $string)\n     else $string\n}\n                    \n</pre></div>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:convertTZtoString($tz as xs:dayTimeDuration?) as xs:string\n{\n   if (empty($tz)) \n     then \"\"\n   else if ($tz eq xs:dayTimeDuration('PT0S'))\n     then \"Z\"\n   else \n     let $tzh := fn:hours-from-duration($tz)\n     let $tzm := fn:minutes-from-duration($tz)\n     let $plusMinus := if ($tzh &gt;= 0) then \"+\" else \"-\"\n     let $tzhString := eg:convertTo2CharString(fn:abs($tzh))\n     let $tzmString := eg:convertTo2CharString(fn:abs($tzm))\n     return fn:concat($plusMinus, $tzhString, \":\", $tzmString)\n}\n\n                    \n</pre></div>\n<p>Conversion from primitive types to date and time types follows\nthe rules below.</p>\n<ol class = \"enumar\">\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:dateTime</code>, the <code>xs:dateTime</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then let <em>SYR</em> be\n<code>eg:convertYearToString( fn:year-from-date(</code> <em>SV</em>\n<code>))</code>, let <em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-date(</code> <em>SV</em> <code>))</code>, let\n<em>SDA</em> be <code>eg:convertTo2CharString(\nfn:day-from-date(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-date(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:dateTime( fn:concat(</code> <em>SYR</em>\n<code>, '-',</code> <em>SMO</em> <code>, '-',</code> <em>SDA</em>\n<code>, 'T00:00:00 '</code>, <em>STZ</em> <code>) )</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:time</code>, the <code>xs:time</code> value <em>TV</em> is\nderived from <em>ST</em> and <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:time</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then <em>TV</em> is\n<code>xs:time( fn:concat( eg:convertTo2CharString(\nfn:hours-from-dateTime(</code> <em>SV</em> <code>)), ':',\neg:convertTo2CharString( fn:minutes-from-dateTime(</code>\n<em>SV</em> <code>)), ':', eg:convertSecondsToString(\nfn:seconds-from-dateTime(</code> <em>SV</em> <code>)),\neg:convertTZtoString( fn:timezone-from-dateTime(</code> <em>SV</em>\n<code>)) ))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:date</code>, the <code>xs:date</code> value <em>TV</em> is\nderived from <em>ST</em> and <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then let\n<em>SYR</em> be <code>eg:convertYearToString(\nfn:year-from-dateTime(</code> <em>SV</em> <code>))</code>, let\n<em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-dateTime(</code> <em>SV</em> <code>))</code>, let\n<em>SDA</em> be <code>eg:convertTo2CharString(\nfn:day-from-dateTime(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be\n<code>eg:convertTZtoString(fn:timezone-from-dateTime(</code>\n<em>SV</em> <code>))</code>; <em>TV</em> is <code>xs:date(\nfn:concat(</code> <em>SYR</em> <code>, '-',</code> <em>SMO</em>\n<code>, '-',</code> <em>SDA</em>, <em>STZ</em> <code>)\n)</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:gYearMonth</code>, the <code>xs:gYearMonth</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:gYearMonth</code>, then <em>TV</em>\nis <em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then let\n<em>SYR</em> be <code>eg:convertYearToString(\nfn:year-from-dateTime(</code> <em>SV</em> <code>))</code>, let\n<em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-dateTime(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-dateTime(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gYearMonth( fn:concat(</code> <em>SYR</em>\n<code>, '-',</code> <em>SMO</em>, <em>STZ</em> <code>)\n)</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then let <em>SYR</em> be\n<code>eg:convertYearToString( fn:year-from-date(</code> <em>SV</em>\n<code>))</code>, let <em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-date(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-date(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gYearMonth( fn:concat(</code> <em>SYR</em>\n<code>, '-',</code> <em>SMO</em>, <em>STZ</em> <code>)\n)</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:gYear</code>, the <code>xs:gYear</code> value <em>TV</em>\nis derived from <em>ST</em> and <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:gYear</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, let <em>SYR</em> be\n<code>eg:convertYearToString( fn:year-from-dateTime(</code>\n<em>SV</em> <code>))</code> and let <em>STZ</em> be\n<code>eg:convertTZtoString( fn:timezone-from-dateTime(</code>\n<em>SV</em> <code>))</code>; <em>TV</em> is\n<code>xs:gYear(fn:concat(</code> <em>SYR</em>, <em>STZ</em>\n<code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, let <em>SYR</em> be\n<code>eg:convertYearToString( fn:year-from-date(</code> <em>SV</em>\n<code>))</code>; and let <em>STZ</em> be\n<code>eg:convertTZtoString( fn:timezone-from-date(</code>\n<em>SV</em> <code>))</code>; <em>TV</em> is\n<code>xs:gYear(fn:concat(</code> <em>SYR</em>, <em>STZ</em>\n<code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:gMonthDay</code>, the <code>xs:gMonthDay</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:gMonthDay</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then let\n<em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-dateTime(</code> <em>SV</em> <code>))</code>, let\n<em>SDA</em> be <code>eg:convertTo2CharString(\nfn:day-from-dateTime(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-dateTime(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gYearMonth( fn:concat(</code>\n<code>'--',</code> <em>SMO</em> <code>'-',</code> <em>SDA</em>,\n<em>STZ</em> <code>) )</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then let <em>SMO</em> be\n<code>eg:convertTo2CharString( fn:month-from-date(</code>\n<em>SV</em> <code>))</code>, let <em>SDA</em> be\n<code>eg:convertTo2CharString( fn:day-from-date(</code> <em>SV</em>\n<code>))</code> and let <em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-date(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gYearMonth( fn:concat(</code>\n<code>'--',</code> <em>SMO</em> <code>, '-',</code> <em>SDA</em>,\n<em>STZ</em> <code>) )</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:gDay</code>, the <code>xs:gDay</code> value <em>TV</em> is\nderived from <em>ST</em> and <em>SV</em> as follows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:gDay</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then let\n<em>SDA</em> be <code>eg:convertTo2CharString(\nfn:day-from-dateTime(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-dateTime(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gDay( fn:concat( '---'</code>,\n<em>SDA</em>, <em>STZ</em> <code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then let <em>SDA</em> be\n<code>eg:convertTo2CharString( fn:day-from-date(</code> <em>SV</em>\n<code>))</code> and let <em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-date(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gDay( fn:concat( '---'</code>,\n<em>SDA</em>, <em>STZ</em> <code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>When a value of any primitive type is cast as\n<code>xs:gMonth</code>, the <code>xs:gMonth</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:gMonth</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:dateTime</code>, then let\n<em>SMO</em> be <code>eg:convertTo2CharString(\nfn:month-from-dateTime(</code> <em>SV</em> <code>))</code> and let\n<em>STZ</em> be <code>eg:convertTZtoString(\nfn:timezone-from-dateTime(</code> <em>SV</em> <code>))</code>;\n<em>TV</em> is <code>xs:gMonth( fn:concat( '--'</code> ,\n<em>SMO</em>, <em>STZ</em> <code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:date</code>, then let <em>SMO</em> be\n<code>eg:convertTo2CharString( fn:month-from-date(</code>\n<em>SV</em> <code>))</code> and let <em>STZ</em> be\n<code>eg:convertTZtoString( fn:timezone-from-date(</code>\n<em>SV</em> <code>))</code>; <em>TV</em> is <code>xs:gMonth(\nfn:concat( '--'</code>, <em>SMO</em>, <em>STZ</em>\n<code>))</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</li>\n</ol>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-boolean\" id = \"casting-boolean\"></a>17.1.6\nCasting to xs:boolean</h4>\n<p>When a value of any primitive type is cast as\n<code>xs:boolean</code>, the <code>xs:boolean</code> value\n<em>TV</em> is derived from <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:boolean</code>, then <em>TV</em> is\n<em>SV</em>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> and <em>SV</em>\nis <code>0</code>, <code>+0</code>, <code>-0</code>,\n<code>0.0</code>, <code>0.0E0</code> or <code>NaN</code>, then\n<em>TV</em> is <code>false</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:float</code>, <code>xs:double</code>,\n<code>xs:decimal</code> or <code>xs:integer</code> and <em>SV</em>\nis not one of the above values, then <em>TV</em> is\n<code>true</code>.</p>\n</li>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code>, see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-binary\" id = \"casting-to-binary\"></a>17.1.7\nCasting to xs:base64Binary and xs:hexBinary</h4>\n<p>Values of type <code>xs:base64Binary</code> can be cast as\n<code>xs:hexBinary</code> and vice versa, since the two types have\nthe same value space. Casting to <code>xs:base64Binary</code> and\n<code>xs:hexBinary</code> is also supported from the same type and\nfrom <code>xs:untypedAtomic</code>, <code>xs:string</code> and\nsubtypes of <code>xs:string</code> using <a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second Edition]</a>\nsemantics.</p>\n</div>\n<div class = \"div3\">\n<h4><a name = \"casting-to-anyuri\" id = \"casting-to-anyuri\"></a>17.1.8\nCasting to xs:anyURI</h4>\n<p>Casting to <code>xs:anyURI</code> is supported only from the\nsame type, <code>xs:untypedAtomic</code> or\n<code>xs:string</code>.</p>\n<p>When a value of any primitive type is cast as\n<code>xs:anyURI</code>, the <code>xs:anyURI</code> value\n<em>TV</em> is derived from the <em>ST</em> and <em>SV</em> as\nfollows:</p>\n<ul>\n<li>\n<p>If <em>ST</em> is <code>xs:untypedAtomic</code> or\n<code>xs:string</code> see <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"casting-to-derived-types\" id = \"casting-to-derived-types\"></a>17.2 Casting to derived types</h3>\n<p>Casting a value to a derived type can be separated into four\ncases. Note that <code>xs:untypedAtomic</code>,\n<code>xs:integer</code> and the two derived types of\n<code>xs:duration</code>:<code>xs:yearMonthDuration</code> and\n<code>xs:dayTimeDuration</code> are treated as primitive types.</p>\n<ol class = \"enumar\">\n<li>\n<p>When <em>SV</em> is an instance of a type that is derived by\nrestriction from <em>TT</em>. This is described in section <a href = \"#casting-from-derived-to-parent\"><b>17.3 Casting from derived\ntypes to parent types</b></a>.</p>\n</li>\n<li>\n<p>When <em>SV</em> is an instance of a type derived by restriction\nfrom the same primitive type as <em>TT</em>. This is described in\n<a href = \"#casting-within-branch\"><b>17.4 Casting within a branch of\nthe type hierarchy</b></a>.</p>\n</li>\n<li>\n<p>When the derived type is derived, directly or indirectly, from a\ndifferent primitive type than the primitive type of <em>ST</em>.\nThis is described in <a href = \"#casting-across-hierarchy\"><b>17.5\nCasting across the type hierarchy</b></a>.</p>\n</li>\n<li>\n<p>When <em>SV</em> is an instance of the <em>TT</em>, the cast\nalways succeeds (Identity cast).</p>\n</li>\n</ol>\n</div>\n<div class = \"div2\">\n<h3><a name = \"casting-from-derived-to-parent\" id = \"casting-from-derived-to-parent\"></a>17.3 Casting from derived\ntypes to parent types</h3>\n<p>Except in the case of <code>xs:NOTATION</code>, it is always\npossible to cast a value of any atomic type to an atomic type from\nwhich it is derived, directly or indirectly, by restriction. For\nexample, it is possible to cast an <code>xs:unsignedShort</code> to\nan <code>xs:unsignedInt</code>, an <code>xs:integer</code>, or an\n<code>xs:decimal</code>. Since the value space of the original type\nis a subset of the value space of the target type, such a cast is\nalways successful. The result will have the same value as the\noriginal, but will have a new type annotation.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"casting-within-branch\" id = \"casting-within-branch\"></a>17.4 Casting within a branch of the\ntype hierarchy</h3>\n<p>It is possible to cast an <em>SV</em> to a <em>TT</em> if the\ntype of the <em>SV</em> and the <em>TT</em> type are both derived\nby restriction (directly or indirectly) from the same primitive\ntype, provided that the supplied value conforms to the constraints\nimplied by the facets of the target type. This includes the case\nwhere the target type is derived from the type of the supplied\nvalue, as well as the case where the type of the supplied value is\nderived from the target type. For example, an instance of\n<code>xs:byte</code> can be cast as <code>xs:unsignedShort</code>,\nprovided the value is not negative.</p>\n<p>If the value does not conform to the facets defined for the\ntarget type, then an error is raised [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>]. See <a href = \"#xmlschema-2\">[XML\nSchema Part 2: Datatypes Second Edition]</a>. In the case of the\npattern facet (which applies to the lexical space rather than the\nvalue space), the pattern is tested against the canonical lexical\nrepresentation of the value, as defined for the source type (or the\nresult of casting the value to an <code>xs:string</code>, in the\ncase of types that have no canonical lexical representation defined\nfor them).</p>\n<p>Note that this will cause casts to fail if the pattern excludes\nthe canonical lexical representation of the source type. For\nexample, if the type <code>my:distance</code> is defined as a\nrestriction of <code>xs:decimal</code> with a pattern that requires\ntwo digits after the decimal point, casting of an\n<code>xs:integer</code> to <code>my:distance</code> will always\nfail, because the canonical representation of an\n<code>xs:integer</code> does not conform to this pattern.</p>\n<p>In some cases, casting from a parent type to a derived type\nrequires special rules. See <a href = \"#casting-to-durations\"><b>17.1.4 Casting to duration types</b></a>\nfor rules regarding casting to <code>xs:yearMonthDuration</code>\nand <code>xs:dayTimeDuration</code>. See <a href = \"#casting-to-ENTITY\"><b>17.4.1 Casting to xs:ENTITY</b></a>, below,\nfor casting to <code>xs:ENTITY</code> and types derived from\nit.</p>\n<div class = \"div3\">\n<h4><a name = \"casting-to-ENTITY\" id = \"casting-to-ENTITY\"></a>17.4.1\nCasting to xs:ENTITY</h4>\n<p><a href = \"#xmlschema-2\">[XML Schema Part 2: Datatypes Second\nEdition]</a> says that \"The value space of ENTITY is the set of all\nstrings that match the NCName production ... and have been declared\nas an unparsed entity in a document type definition.\" However,\n<a href = \"#xslt20\">[XSL Transformations (XSLT) Version 2.0]</a> and\n<a href = \"#xquery\">[XQuery 1.0: An XML Query Language]</a> do not\ncheck that constructed values of type <code>xs:ENTITY</code> match\ndeclared unparsed entities. Thus, this rule is relaxed in this\nspecification and, in casting to <code>xs:ENTITY</code> and types\nderived from it, no check is made that the values correspond to\ndeclared unparsed entities.</p>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"casting-across-hierarchy\" id = \"casting-across-hierarchy\"></a>17.5 Casting across the type\nhierarchy</h3>\n<p>When the <em>ST</em> and the <em>TT</em> are derived, directly\nor indirectly, from different primitive types, this is called\ncasting across the type hierarchy. Casting across the type\nhierarchy is logically equivalent to three separate steps performed\nin order. Errors can occur in either of the latter two steps.</p>\n<ol class = \"enumar\">\n<li>\n<p>Cast the <em>SV</em>, up the hierarchy, to the primitive type of\nthe source, as described in <a href = \"#casting-from-derived-to-parent\"><b>17.3 Casting from derived\ntypes to parent types</b></a>.</p>\n<ol class = \"enumla\">\n<li>\n<p>If <em>SV</em> is an instance of <code>xs:string</code> or\n<code>xs:untypedAtomic</code>, check its value against the pattern\nfacet of <em>TT</em>, and raise an error [<a href = \"#ERRFORG0001\" title = \"err:FORG0001\">err:FORG0001</a>] if the check fails.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Cast the value to the primitive type of <em>TT</em>, as\ndescribed in <a href = \"#casting-from-primitive-to-primitive\"><b>17.1\nCasting from primitive types to primitive types</b></a>.</p>\n<ul>\n<li>\n<p>If <em>TT</em> is derived from <code>xs:NOTATION</code>, assume\nfor the purposes of this rule that casting to\n<code>xs:NOTATION</code> succeeds.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Cast the value down to the <em>TT</em>, as described in <a href = \"#casting-within-branch\"><b>17.4 Casting within a branch of the\ntype hierarchy</b></a></p>\n</li>\n</ol>\n</div>\n</div>\n</div><div class = \"back\">\n<div class = \"div1\">\n<h2><a name = \"biblio\" id = \"biblio\"></a>A References</h2>\n<div class = \"div2\">\n<h3><a name = \"normative-biblio\" id = \"normative-biblio\"></a>A.1\nNormative References</h3>\n<dl>\n<dt class = \"label\"><span><a name = \"ieee754\" id = \"ieee754\"></a>IEEE\n754-1985</span></dt>\n<dd>\n<div>IEEE. <em>IEEE Standard for Binary Floating-Point\nArithmetic.</em></div>\n</dd>\n<dt class = \"label\"><span><a name = \"LDML\" id = \"LDML\"></a>Locale Data\nMarkup Language</span></dt>\n<dd>\n<div>Unicode Technical Standard #35, Locale Data Markup Language.\nAvailable at: <a href = \"http://www.unicode.org/reports/tr35/\">http://www.unicode.org/reports/tr35/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"rfc2396\" id = \"rfc2396\"></a>RFC\n2396</span></dt>\n<dd>\n<div>IETF. <em>RFC 2396: Uniform Resource Identifiers (URI):\nGeneric Syntax.</em> Available at: <a href = \"http://www.ietf.org/rfc/rfc2396.txt\">http://www.ietf.org/rfc/rfc2396.txt</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"rfc3986\" id = \"rfc3986\"></a>RFC\n3986</span></dt>\n<dd>\n<div>IETF. <em>RFC 3986: Uniform Resource Identifiers (URI):\nGeneric Syntax.</em> Available at: <a href = \"http://www.ietf.org/rfc/rfc3986.txt\">http://www.ietf.org/rfc/rfc3986.txt</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"rfc3987\" id = \"rfc3987\"></a>RFC\n3987</span></dt>\n<dd>\n<div>IETF. <em>RFC 3987: Internationalized Resource Identifiers\n(IRIs).</em> Available at: <a href = \"http://www.ietf.org/rfc/rfc3987.txt\">http://www.ietf.org/rfc/rfc3987.txt</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"charmod\" id = \"charmod\"></a>Character Model for the World Wide Web 1.0:\nFundamentals</span></dt>\n<dd>\n<div>Character Model for the World Wide Web 1.0: Fundamentals.\nAvailable at: <a href = \"http://www.w3.org/TR/2005/REC-charmod-20050215/\">http://www.w3.org/TR/2005/REC-charmod-20050215/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"charmod-normalization\" id = \"charmod-normalization\"></a>Character Model for the World Wide Web\n1.0: Normalization</span></dt>\n<dd>\n<div>Character Model for the World Wide Web 1.0: Normalization,\nLast Call Working Draft. Available at: <a href = \"http://www.w3.org/TR/2005/WD-charmod-norm-20051027/\">http://www.w3.org/TR/2005/WD-charmod-norm-20051027/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"ISO10967\" id = \"ISO10967\"></a>ISO\n10967</span></dt>\n<dd>\n<div>ISO (International Organization for Standardization).\n<em>ISO/IEC 10967-1:1994, Information technology—Language\nIndependent Arithmetic—Part 1: Integer and floating point\narithmetic</em> [Geneva]: International Organization for\nStandardization, 1994. Available from: <a href = \"http://www.iso.org/\">http://www.iso.org/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"Unicode4\" id = \"Unicode4\"></a>The\nUnicode Standard</span></dt>\n<dd>\n<div>The Unicode Consortium, Reading, MA, Addison-Wesley, 2003.\n<em>The Unicode Standard</em> as updated from time to time by the\npublication of new versions. See <a href = \"http://www.unicode.org/standard/versions/\">http://www.unicode.org/standard/versions/</a>\nfor the latest version and additional information on versions of\nthe standard and of the Unicode Character Database. The version of\nUnicode to be used is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>, but implementations are recommended to use\nthe latest Unicode version; currently, Version 4.0.00,\nAddison-Wesley, 2003 ISBN 0-321-18578-1</div>\n</dd>\n<dt class = \"label\"><span><a name = \"Unicode-Collations\" id = \"Unicode-Collations\"></a>Unicode Collation Algorithm</span></dt>\n<dd>\n<div>Unicode Technical Standard #10, Unicode Collation Algorithm.\nAvailable at: <a href = \"http://www.unicode.org/reports/tr10/\">http://www.unicode.org/reports/tr10/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"Unicode-Regex\" id = \"Unicode-Regex\"></a>Unicode Regular Expressions</span></dt>\n<dd>\n<div>Unicode Technical Standard #18, Unicode Regular Expressions.\nAvailable at: <a href = \"http://www.unicode.org/reports/tr18/\">http://www.unicode.org/reports/tr18/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"REC-xml\" id = \"REC-xml\"></a>Extensible Markup Language (XML) 1.0 Recommendation\n(Third Edition)</span></dt>\n<dd>\n<div>World Wide Web Consortium. <em>Extensible Markup Language\n(XML) 1.0 Third Edition.</em> Available at: <a href = \"http://www.w3.org/TR/REC-xml/\">http://www.w3.org/TR/REC-xml/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xml11\" id = \"xml11\"></a>Extensible\nMarkup Language (XML) 1.1 Recommendation</span></dt>\n<dd>\n<div>World Wide Web Consortium. <em>Extensible Markup Language\n(XML) 1.1.</em> Available at: <a href = \"http://www.w3.org/TR/2004/REC-xml11-20040204/\">http://www.w3.org/TR/2004/REC-xml11-20040204/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xpath20\" id = \"xpath20\"></a>XML Path\nLanguage (XPath) 2.0</span></dt>\n<dd>\n<div>World Wide Web Consortium. XML Path Language (XPath) Version\n2.0. Available at: <a href = \"http://www.w3.org/TR/xpath20/\">http://www.w3.org/TR/xpath20/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xslt20\" id = \"xslt20\"></a>XSL\nTransformations (XSLT) Version 2.0</span></dt>\n<dd>\n<div>World Wide Web Consortium. XSL Transformations Version 2.0.\nAvailable at: <a href = \"http://www.w3.org/TR/xslt20/\">http://www.w3.org/TR/xslt20/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xpath-datamodel\" id = \"xpath-datamodel\"></a>XQuery 1.0 and XPath 2.0 Data\nModel</span></dt>\n<dd>\n<div>World Wide Web Consortium. XQuery 1.0 and XPath 2.0 Data Model\n(XDM). Available at: <a href = \"http://www.w3.org/TR/xpath-datamodel/\">http://www.w3.org/TR/xpath-datamodel/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xquery-semantics\" id = \"xquery-semantics\"></a>XQuery 1.0 and XPath 2.0 Formal\nSemantics</span></dt>\n<dd>\n<div>World Wide Web Consortium. XQuery 1.0 and XPath 2.0 Formal\nSemantics. Available at: <a href = \"http://www.w3.org/TR/xquery-semantics/\">http://www.w3.org/TR/xquery-semantics/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xquery\" id = \"xquery\"></a>XQuery\n1.0: An XML Query Language</span></dt>\n<dd>\n<div>World Wide Web Consortium. XQuery 1.0: An XML Query Language.\nAvailable at: <a href = \"http://www.w3.org/TR/xquery/\">http://www.w3.org/TR/xquery/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xmlschema-1\" id = \"xmlschema-1\"></a>XML Schema Part 1: Structures Second\nEdition</span></dt>\n<dd>\n<div>XML Schema Part 1: Structures Second Edition, Oct 28 2004.\nAvailable at: <a href = \"http://www.w3.org/TR/xmlschema-1/\">http://www.w3.org/TR/xmlschema-1/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xmlschema-2\" id = \"xmlschema-2\"></a>XML Schema Part 2: Datatypes Second\nEdition</span></dt>\n<dd>\n<div>XML Schema Part 2: Datatypes Second Edition, Oct. 28 2004.\nAvailable at: <a href = \"http://www.w3.org/TR/xmlschema-2/\">http://www.w3.org/TR/xmlschema-2/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"REC-xml-names\" id = \"REC-xml-names\"></a>Namespaces in XML</span></dt>\n<dd>\n<div>Namespaces in XML. Available at: <a href = \"http://www.w3.org/TR/1999/REC-xml-names-19990114/\">http://www.w3.org/TR/1999/REC-xml-names-19990114/</a></div>\n</dd>\n</dl>\n</div>\n<div class = \"div2\">\n<h3><a name = \"non-normative-biblio\" id = \"non-normative-biblio\"></a>A.2 Non-normative References</h3>\n<dl>\n<dt class = \"label\"><span><a name = \"HTML40\" id = \"HTML40\"></a>HTML\n4.0</span></dt>\n<dd>\n<div>HTML 4.01 Recommendation, 24 December 1999. Available at:\n<a href = \"http://www.w3.org/TR/REC-html40/\">http://www.w3.org/TR/REC-html40/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"ISO8601\" id = \"ISO8601\"></a>ISO\n8601</span></dt>\n<dd>\n<div>ISO (International Organization for Standardization).\n<em>Representations of dates and times, 2000-08-03.</em> Available\nfrom: <a href = \"http://www.iso.org/\">http://www.iso.org/\"</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"Working-With-Timezones\" id = \"Working-With-Timezones\"></a>Working With Timezones</span></dt>\n<dd>\n<div>World Wide Web Consortium Working Group Note. <em>Working With\nTimezones, October 13, 2005.</em> Available at: <a href = \"http://www.w3.org/TR/2005/NOTE-timezone-20051013/\">http://www.w3.org/TR/2005/NOTE-timezone-20051013/</a></div>\n</dd>\n<dt class = \"label\"><span><a name = \"xpath\" id = \"xpath\"></a>XML Path\nLanguage (XPath) Version 1.0</span></dt>\n<dd>\n<div>World Wide Web Consortium. XML Path Language (XPath) Version\n1.0 Available at: <a href = \"http://www.w3.org/TR/xpath/\">http://www.w3.org/TR/xpath/</a></div>\n</dd>\n</dl>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"error-summary\" id = \"error-summary\"></a>B Error\nSummary</h2>\n<p>The error text provided with these errors is non-normative.</p>\n<dl>\n<dt><a name = \"ERRFOER0000\" id = \"ERRFOER0000\"></a>err:FOER0000,\nUnidentified error.</dt>\n<dd>\n<p>Unidentified error.</p>\n</dd>\n<dt><a name = \"ERRFOAR0001\" id = \"ERRFOAR0001\"></a>err:FOAR0001,\nDivision by zero.</dt>\n<dd>\n<p>This error is raised whenever an attempt is made to divide by\nzero.</p>\n</dd>\n<dt><a name = \"ERRFOAR0002\" id = \"ERRFOAR0002\"></a>err:FOAR0002,\nNumeric operation overflow/underflow.</dt>\n<dd>\n<p>This error is raised whenever numeric operations result in an\noverflow or underflow.</p>\n</dd>\n<dt><a name = \"ERRFOCA0001\" id = \"ERRFOCA0001\"></a>err:FOCA0001, Input\nvalue too large for decimal.</dt>\n<dt><a name = \"ERRFOCA0002\" id = \"ERRFOCA0002\"></a>err:FOCA0002,\nInvalid lexical value.</dt>\n<dt><a name = \"ERRFOCA0003\" id = \"ERRFOCA0003\"></a>err:FOCA0003, Input\nvalue too large for integer.</dt>\n<dt><a name = \"ERRFOCA0005\" id = \"ERRFOCA0005\"></a>err:FOCA0005, NaN\nsupplied as float/double value.</dt>\n<dt><a name = \"ERRFOCA0006\" id = \"ERRFOCA0006\"></a>err:FOCA0006, String\nto be cast to decimal has too many digits of precision.</dt>\n<dt><a name = \"ERRFOCH0001\" id = \"ERRFOCH0001\"></a>err:FOCH0001, Code\npoint not valid.</dt>\n<dt><a name = \"ERRFOCH0002\" id = \"ERRFOCH0002\"></a>err:FOCH0002,\nUnsupported collation.</dt>\n<dt><a name = \"ERRFOCH0003\" id = \"ERRFOCH0003\"></a>err:FOCH0003,\nUnsupported normalization form.</dt>\n<dt><a name = \"ERRFOCH0004\" id = \"ERRFOCH0004\"></a>err:FOCH0004,\nCollation does not support collation units.</dt>\n<dt><a name = \"ERRFODC0001\" id = \"ERRFODC0001\"></a>err:FODC0001, No\ncontext document.</dt>\n<dt><a name = \"ERRFODC0002\" id = \"ERRFODC0002\"></a>err:FODC0002, Error\nretrieving resource.</dt>\n<dt><a name = \"ERRFODC0003\" id = \"ERRFODC0003\"></a>err:FODC0003,\nFunction stability not defined.</dt>\n<dt><a name = \"ERRFODC0004\" id = \"ERRFODC0004\"></a>err:FODC0004,\nInvalid argument to fn:collection.</dt>\n<dt><a name = \"ERRFODC0005\" id = \"ERRFODC0005\"></a>err:FODC0005,\nInvalid argument to fn:doc or fn:doc-available.</dt>\n<dt><a name = \"ERRFODT0001\" id = \"ERRFODT0001\"></a>err:FODT0001,\nOverflow/underflow in date/time operation.</dt>\n<dt><a name = \"ERRFODT0002\" id = \"ERRFODT0002\"></a>err:FODT0002,\nOverflow/underflow in duration operation.</dt>\n<dt><a name = \"ERRFODT0003\" id = \"ERRFODT0003\"></a>err:FODT0003,\nInvalid timezone value.</dt>\n<dt><a name = \"ERRFONS0004\" id = \"ERRFONS0004\"></a>err:FONS0004, No\nnamespace found for prefix.</dt>\n<dt><a name = \"ERRFONS0005\" id = \"ERRFONS0005\"></a>err:FONS0005,\nBase-uri not defined in the static context.</dt>\n<dt><a name = \"ERRFORG0001\" id = \"ERRFORG0001\"></a>err:FORG0001,\nInvalid value for cast/constructor.</dt>\n<dt><a name = \"ERRFORG0002\" id = \"ERRFORG0002\"></a>err:FORG0002,\nInvalid argument to fn:resolve-uri().</dt>\n<dt><a name = \"ERRFORG0003\" id = \"ERRFORG0003\"></a>err:FORG0003,\nfn:zero-or-one called with a sequence containing more than one\nitem.</dt>\n<dt><a name = \"ERRFORG0004\" id = \"ERRFORG0004\"></a>err:FORG0004,\nfn:one-or-more called with a sequence containing no items.</dt>\n<dt><a name = \"ERRFORG0005\" id = \"ERRFORG0005\"></a>err:FORG0005,\nfn:exactly-one called with a sequence containing zero or more than\none item.</dt>\n<dt><a name = \"ERRFORG0006\" id = \"ERRFORG0006\"></a>err:FORG0006,\nInvalid argument type.</dt>\n<dt><a name = \"ERRFORG0008\" id = \"ERRFORG0008\"></a>err:FORG0008, The\ntwo arguments to fn:dateTime have inconsistent timezones.</dt>\n<dt><a name = \"ERRFORG0009\" id = \"ERRFORG0009\"></a>err:FORG0009, Error\nin resolving a relative URI against a base URI in\nfn:resolve-uri.</dt>\n<dt><a name = \"ERRFORX0001\" id = \"ERRFORX0001\"></a>err:FORX0001,\nInvalid regular expression flags.</dt>\n<dt><a name = \"ERRFORX0002\" id = \"ERRFORX0002\"></a>err:FORX0002,\nInvalid regular expression.</dt>\n<dt><a name = \"ERRFORX0003\" id = \"ERRFORX0003\"></a>err:FORX0003,\nRegular expression matches zero-length string.</dt>\n<dt><a name = \"ERRFORX0004\" id = \"ERRFORX0004\"></a>err:FORX0004,\nInvalid replacement string.</dt>\n<dt><a name = \"ERRFOTY0012\" id = \"ERRFOTY0012\"></a>err:FOTY0012,\nArgument node does not have a typed value.</dt>\n</dl>\n</div>\n<div class = \"div1\">\n<h2><a name = \"xpath1-compatibility\" id = \"xpath1-compatibility\"></a>C\nCompatibility with XPath 1.0 (Non-Normative)</h2>\n<p>This appendix summarizes the relationship between certain\nfunctions defined in <a href = \"#xpath\">[XML Path Language (XPath)\nVersion 1.0]</a> and the corresponding functions defined in this\ndocument. The first column of the table provides the signature of\nfunctions defined in this document. The second column provides the\nsignature of the corresponding function in <a href = \"#xpath\">[XML\nPath Language (XPath) Version 1.0]</a>. The third column discusses\nthe differences in the semantics of the corresponding functions.\nThe functions appear in the order they appear in <a href = \"#xpath\">[XML Path Language (XPath) Version 1.0]</a>.</p>\n<p>The evaluation of the arguments to the functions defined in this\ndocument depends on whether the XPath 1.0 compatibility mode is on\nor off. See <a href = \"#xpath20\">[XML Path Language (XPath) 2.0]</a>.\nIf the mode is on, the following conversions are applied, in order,\nbefore the argument value is passed to the function:</p>\n<ul>\n<li>\n<p>If the expected type is a single item or an optional single\nitem, (examples: <code>xs:string, xs:string?, xs:untypedAtomic,\nxs:untypedAtomic?, node(), node()?, item(), item()?</code>), then\nthe given value <code>V</code> is effectively replaced by <a href = \"#XPath_func-subsequence\"><code>fn:subsequence(V, 1, 1)</code></a>.</p>\n</li>\n<li>\n<p>If the expected type is <code>xs:string</code> or\n<code>xs:string?</code>, then the given value <code>V</code> is\neffectively replaced by <a href = \"#XPath_func-string\"><code>fn:string(V)</code></a>.</p>\n</li>\n<li>\n<p>If the expected type is numeric or optional numeric, then the\ngiven value <code>V</code> is effectively replaced by <a href = \"#XPath_func-number\"><code>fn:number(V)</code></a>.</p>\n</li>\n<li>\n<p>Otherwise, the given value is unchanged.</p>\n</li>\n</ul>\n<table summary = \"Issues list\" border = \"1\" width = \"100%\">\n<col width = \"33%\" span = \"1\"/>\n<col width = \"33%\" span = \"1\"/>\n<col width = \"33%\" span = \"1\"/>\n<tbody>\n<tr>\n<th>XQuery 1.0 and XPath 2.0</th>\n<th>XPath 1.0</th>\n<th>Notes</th>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:last</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</td>\n<td><code>last() =&gt; number</code></td>\n<td>Precision of numeric results may be different.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:position</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</td>\n<td><code>position() =&gt; number</code></td>\n<td>Precision of numeric results may be different.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:count</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer</code></div>\n</td>\n<td><code>count(node-set) =&gt; number</code></td>\n<td>Precision of numeric results may be different.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:id</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">element()*</code></div>\n</td>\n<td><code>id(object) =&gt; node-set</code></td>\n<td>XPath 2.0 behavior is different for boolean and numeric\narguments. The recognition of a node as an id value is sensitive to\nthe manner in which the datamodel is constructed. In XPath 1.0 the\nwhole string is treated as a unit. In XPath 2.0 each string is\ntreated as a list.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:local-name</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>local-name(node-set?) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif argument has more than one node.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:local-name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:namespace-uri</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>namespace-uri(node-set?) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif argument has more than one node.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:namespace-uri</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:name</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td><code>name(node-set?) =&gt; string</code></td>\n<td>If compatibility mode is off, an error will occur if argument\nhas more than one node. The rules for determining the prefix are\nmore precisely defined in <a href = \"#xpath20\">[XML Path Language\n(XPath) 2.0]</a>. Function is not \"well-defined\" for parentless\nattribute nodes.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:string</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>string(object) =&gt; string</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif argument has more than one node. Representations of numeric\nvalues are XPath 1.0 compatible except for the special values\npositive and negative infinity, and for values outside the range\n1.0e-6 to 1.0e+6.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:string</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:concat</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><span class = \"varargs\">...</span></td>\n<td valign = \"baseline\">)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n<td><code>concat(string, string, string*) =&gt; string</code></td>\n<td>If compatibility mode is off, an error will occur if an\nargument has more than one node. If compatibility mode on, the\nfirst node in the sequence is used.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:starts-with</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td rowspan = \"2\"><code>starts-with(string, string) =&gt;\nboolean</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif either argument has more than one node or is a number or a\nboolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:starts-with</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:contains</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td rowspan = \"2\"><code>contains(string, string) =&gt;\nboolean</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif either argument has more than one node or is a number or a\nboolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:contains</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n</tr>\n</table>\n</div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:substring-before</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>substring-before(string, string) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif either argument has more than one node or is a number or a\nboolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring-before</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:substring-after</code>(<code class = \"arg\">$arg1</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$arg2</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>substring-after(string, string) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif either argument has more than one node or is a number or a\nboolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring-after</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$collation</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">fn:substring</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$sourceString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$startingLoc</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n<td rowspan = \"2\"><code>substring(string, number, number?) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif <code>$sourceString</code> has more than one node or is a number\nor a boolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:substring</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$sourceString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$startingLoc</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$length</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:double</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:string-length</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</td>\n<td rowspan = \"2\"><code>string-length(string?) =&gt;\nnumber</code></td>\n<td rowspan = \"2\">If compatibility mode is off, numbers and booleans\nwill give errors for first arg. Also, multiple nodes will give\nerror.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:string-length</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer?</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:normalize-space</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n<td rowspan = \"2\"><code>normalize-space(string?) =&gt;\nstring</code></td>\n<td rowspan = \"2\">If compatibility mode is off, an error will occur\nif <code>$arg</code> has more than one node or is a number or a\nboolean. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:normalize-space</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">fn:translate</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$mapString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$transString</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n</tr>\n</table>\n</div>\n</td>\n<td><code>translate(string, string, string)=&gt; string</code></td>\n<td>.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:boolean</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td><code>boolean(object) =&gt; boolean</code></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:not</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td><code>not(boolean) =&gt; boolean</code></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:true</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td><code>true() =&gt; boolean</code></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:false</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td><code>false() =&gt; boolean</code></td>\n<td></td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:lang</code>(<code class = \"arg\">$testlang</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></div>\n</td>\n<td><code>lang(string) =&gt; boolean</code></td>\n<td>If compatibility mode is off, numbers and booleans will give\nerrors. Also, multiple nodes will give error. If compatibility mode\nis on, implicit conversion is performed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:number</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double</code></div>\n</td>\n<td rowspan = \"2\"><code>number(object?) =&gt; number</code></td>\n<td rowspan = \"2\">Error if argument has more than one node when not\nin compatibility node.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:number</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:double</code></div>\n</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:sum</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">xs:anyAtomicType</code></div>\n</td>\n<td><code>sum(node-set) =&gt; number</code></td>\n<td>2.0 raises an error if sequence contains values that cannot be\nadded together such as NMTOKENS and other subtypes of string. 1.0\nreturns <code>NaN</code>.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:floor</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</td>\n<td><code>floor(number)=&gt; number</code></td>\n<td>In 2.0, if argument is <code>()</code>, the result is\n<code>()</code>. In 1.0, the result is <code>NaN</code>. If\ncompatibility mode is off, an error will occur with more than one\nnode. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:ceiling</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</td>\n<td><code>ceiling(number)=&gt; number</code></td>\n<td>In 2.0, if argument is <code>()</code>, the result is\n<code>()</code>. In 1.0, the result is <code>NaN</code>. If\ncompatibility mode is off, an error will occur with more than one\nnode. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n<tr>\n<td>\n<div class = \"proto\"><code class = \"function\">fn:round</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-varies\">numeric?</code></div>\n</td>\n<td><code>round(number)=&gt; number</code></td>\n<td>In 2.0, if argument is <code>()</code>, the result is\n<code>()</code>. In 1.0, the result is <code>NaN</code>. If\ncompatibility mode is off, an error will occur with more than one\nnode. If compatibility mode is on, implicit conversion is\nperformed.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class = \"div1\">\n<h2><a name = \"examples\" id = \"examples\"></a>D Illustrative\nUser-written Functions (Non-Normative)</h2>\n<p>Certain functions that were proposed for inclusion in this\nfunction library have been excluded on the basis that it is\nstraightforward for users to implement these functions themselves\nusing XSLT 2.0 or XQuery 1.0.</p>\n<p>This Appendix provides sample implementations of some of these\nfunctions.</p>\n<p>To emphasize that these functions are examples of functions that\nvendors may write, their names carry the prefix 'eg'. Vendors are\nfree to define such functions in any namespace. A group of vendors\nmay also choose to create a collection of such useful functions and\nput them in a common namespace.</p>\n<div class = \"div2\">\n<h3><a name = \"if-empty-if-absent\" id = \"if-empty-if-absent\"></a>D.1\neg:if-empty and eg:if-absent</h3>\n<p>In some situations, users may want to provide default values for\nmissing information that may be signaled by elements that are\nomitted, have no value or have the empty sequence as their value.\nFor example, a missing middle initial may be indicated by omitting\nthe element or a non-existent bonus signaled with an empty\nsequence. This section includes examples of functions that provide\nsuch defaults. These functions return\n<code>xs:anyAtomicType*</code>. Users may want to write functions\nthat return more specific types.</p>\n<div class = \"div3\">\n<h4><a name = \"if-empty\" id = \"if-empty\"></a>D.1.1 eg:if-empty</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">eg:if-empty</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$node</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>If the first argument is the empty sequence or an element\nwithout simple or complex content, if-empty() returns the second\nargument; otherwise, it returns the content of the first\nargument.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:if-empty\" as=\"xs:anyAtomicType*\"&gt;\n  &lt;xsl:param name=\"node\" as=\"node()?\"/&gt;\n  &lt;xsl:param name=\"value\" as=\"xs:anyAtomicType\"/&gt;\n  &lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$node and $node/child::node()\"&gt;\n      &lt;xsl:sequence select=\"fn:data($node)\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n      &lt;xsl:sequence select=\"$value\"/&gt;\n    &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:if-empty (\n  $node as node()?,\n  $value as xs:anyAtomicType) as xs:anyAtomicType* \n{\n  if ($node and $node/child::node())\n            then fn:data($node)\n            else $value\n}\n                    \n</pre></div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"if-absent\" id = \"if-absent\"></a>D.1.2 eg:if-absent</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">eg:if-absent</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$node</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>If the first argument is the empty sequence, if-absent() returns\nthe second argument; otherwise, it returns the content of the first\nargument.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:if-absent\"&gt;\n  &lt;xsl:param name=\"node\" as=\"node()?\"/&gt;\n  &lt;xsl:param name=\"value\" as=\"xs:anyAtomicType\"/&gt;\n  &lt;xsl:choose&gt;\n    &lt;xsl:when test=\"$node\"&gt;\n      &lt;xsl:sequence select=\"fn:data($node)\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n      &lt;xsl:sequence select=\"$value\"/&gt;\n    &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:if-absent (\n  $node as node()?,\n  $value as xs:anyAtomicType) as xs:anyAtomicType* \n{\n  if ($node)\n    then fn:data($node)\n    else $value\n}\n                    \n</pre></div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"union-intersect-except-on-values\" id = \"union-intersect-except-on-values\"></a>D.2 union, intersect and\nexcept on sequences of values</h3>\n<div class = \"div3\">\n<h4><a name = \"value-union\" id = \"value-union\"></a>D.2.1\neg:value-union</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">eg:value-union</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>This function returns a sequence containing all the distinct\nitems in $arg1 and $arg2, in an undefined order.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\nxsl:function name=\"eg:value-union\" as=\"xs:anyAtomicType*\"&gt;\n  &lt;xsl:param name=\"arg1\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:param name=\"arg2\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:sequence\n     select=\"fn:distinct-values(($arg1, $arg2))\"/&gt; \n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:value-union (\n  $arg1 as xs:anyAtomicType*,\n  $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* \n{\n  fn:distinct-values(($arg1, $arg2))\n}\n                    \n</pre></div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"value-intersect\" id = \"value-intersect\"></a>D.2.2\neg:value-intersect</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">eg:value-intersect</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>This function returns a sequence containing all the distinct\nitems that appear in both $arg1 and $arg2, in an undefined\norder.</p>\n<p>XSLT implementation&gt;</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:value-intersect\" as=\"xs:anyAtomicType*\"&gt;\n  &lt;xsl:param name=\"arg1\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:param name=\"arg2\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:sequence \n     select=\"fn:distinct-values($arg1[.=$arg2])\"/&gt;\n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:value-intersect (\n  $arg1 as xs:anyAtomicType*,\n  $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* \n{\n  fn:distinct-values($arg1[.=$arg2])\n}\n                    \n</pre></div>\n</div>\n<div class = \"div3\">\n<h4><a name = \"value-except\" id = \"value-except\"></a>D.2.3\neg:value-except</h4>\n<div class = \"exampleInner\">\n<div class = \"proto\">\n<table border = \"0\" cellpadding = \"0\" cellspacing = \"0\" summary = \"Function/operator prototype\">\n<tr>\n<td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">eg:value-except</code>(</td>\n<td valign = \"baseline\"><code class = \"arg\">$arg1</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n</tr>\n<tr>\n<td valign = \"baseline\"><code class = \"arg\">$arg2</code></td>\n<td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType*</code></td>\n</tr>\n</table>\n</div>\n</div>\n<p>This function returns a sequence containing all the distinct\nitems that appear in $arg1 but not in $arg2, in an undefined\norder.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:value-except\" as=\"xs:anyAtomicType*\"&gt;\n  &lt;xsl:param name=\"arg1\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:param name=\"arg2\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:sequence\n     select=\"fn:distinct-values($arg1[not(.=$arg2)])\"/&gt;\n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:value-except (\n  $arg1 as xs:anyAtomicType*,\n  $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* \n{\n  fn:distinct-values($arg1[not(.=$arg2)])\n}\n</pre></div>\n</div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"index-of-node\" id = \"index-of-node\"></a>D.3\neg:index-of-node</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">eg:index-of-node</code>(<code class = \"arg\">$seqParam</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>,\n<code class = \"arg\">$srchParam</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:integer*</code></div>\n</div>\n<p>This function returns a sequence of positive integers giving the\npositions within the sequence <code>$seqParam</code> of nodes that\nare identical to <code>$srchParam</code>.</p>\n<p>The nodes in the sequence <code>$seqParam</code> are compared\nwith <code>$srchParam</code> under the rules for the\n<code>is</code> operator. If a node compares identical, then the\nposition of that node in the sequence <code>$srchParam</code> is\nincluded in the result.</p>\n<p>If the value of <code>$seqParam</code> is the empty sequence, or\nif no node in <code>$seqParam</code> matches $srchParam, then the\nempty sequence is returned.</p>\n<p>The index is 1-based, not 0-based.</p>\n<p>The result sequence is in ascending numeric order.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:index-of-node\" as=\"xs:integer*\"&gt;\n  &lt;xsl:param name=\"sequence\" as=\"node()*\"/&gt;\n  &lt;xsl:param name=\"srch\" as=\"node()\"/&gt;\n  &lt;xsl:for-each select=\"$sequence\"&gt;\n    &lt;xsl:if test=\". is $srch\"&gt;\n       &lt;xsl:sequence select=\"position()\"/&gt;\n    &lt;/xsl:if&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:function&gt;\n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:index-of-node($sequence as node()*, $srch as node()) as xs:integer* \n{\n  for $n at $i in $sequence where ($n is $srch) return $i\n}\n</pre></div>\n</div>\n<div class = \"div2\">\n<h3><a name = \"string-pad\" id = \"string-pad\"></a>D.4 eg:string-pad</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">eg:string-pad</code>(<code class = \"arg\">$padString</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,\n<code class = \"arg\">$padCount</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></div>\n</div>\n<p>Returns a <code>xs:string</code> consisting of a given number of\ncopies of an <code>xs:string</code> argument concatenated\ntogether.</p>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:string-pad\" as=\"xs:string\"&gt;\n  &lt;xsl:param name=\"padString\" as=\"xs:string?\"/&gt;\n  &lt;xsl:param name=\"padCount\" as=\"xs:integer\"/&gt;\n  &lt;xsl:sequence select=\"fn:string-join((for $i in 1 to $padCount \n                                    return $padString), '')\"/&gt;\n &lt;/xsl:function&gt;\n                \n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function eg:string-pad (\n  $padString as xs:string?,\n  $padCount as xs:integer) as xs:string \n{\n   fn:string-join((for $i in 1 to $padCount return $padString), \"\")\n}\n\n                \n</pre></div>\n<p>This returns the zero-length string if <code>$padString</code>\nis the empty sequence, which is consistent with the general\nprinciple that if an <code>xs:string</code> argument is the empty\nsequence it is treated as if it were the zero-length string.</p>\n</div>\n<div class = \"div2\">\n<h3><a name = \"func-distinct-nodes-stable\" id = \"func-distinct-nodes-stable\"></a>D.5 eg:distinct-nodes-stable</h3>\n<div class = \"exampleInner\">\n<div class = \"proto\"><code class = \"function\">fn:eg:distinct-nodes-stable</code>(<code class = \"arg\">$arg</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></div>\n</div>\n<p>This function illustrates one possible implementation of a\ndistinct-nodes function. It removes duplicate nodes by identity,\npreserving the first occurrence of each node.</p>\n<p>XPath</p>\n<div class = \"exampleInner\">\n<pre>\n$arg[empty(subsequence($arg, 1, position()-1) intersect .)]\n                \n</pre></div>\n<p>XSLT implementation</p>\n<div class = \"exampleInner\">\n<pre>\n&lt;xsl:function name=\"eg:distinct-nodes-stable\" as=\"node()*\"&gt;\n  &lt;xsl:param name=\"arg\" as=\"node()*\"/&gt;\n  &lt;xsl:sequence \n    select=\"$arg[empty(subsequence($arg, 1, position()-1) intersect .)]\"/&gt; &lt;/xsl:function&gt;\n                \n</pre></div>\n<p>XQuery implementation</p>\n<div class = \"exampleInner\">\n<pre>\ndeclare function distinct-nodes-stable ($arg as node()*) as node()* \n{ \n   for $a at $apos in $arg \n   let $before_a := fn:subsequence($arg, 1, $apos - 1) \n   where every $ba in $before_a satisfies not($ba is $a) \n   return $a \n}\n</pre></div>\n</div>\n</div>\n<div class = \"div1\">\n<h2><a name = \"impl-def\" id = \"impl-def\"></a>E Checklist of\nImplementation-Defined Features (Non-Normative)</h2>\n<p>This appendix provides a summary of features defined in this\nspecification whose effect is explicitly <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. The conformance rules require vendors to\nprovide documentation that explains how these choices have been\nexercised.</p>\n<ol class = \"enumar\">\n<li>\n<p>The destination of the trace output is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. See <a href = \"#XPath_func-trace\"><b>4 The Trace\nFunction</b></a>.</p>\n</li>\n<li>\n<p>For <code>xs:integer</code> operations, implementations that\nsupport limited-precision integer operations <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> either raise an error [<a href = \"#ERRFOAR0002\" title = \"err:FOAR0002\">err:FOAR0002</a>] or provide an <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> mechanism that allows users to choose between\nraising an error and returning a result that is modulo the largest\nrepresentable integer value. See <a href = \"#op.numeric\"><b>6.2\nOperators on Numeric Values</b></a>.</p>\n</li>\n<li>\n<p>For <code>xs:decimal</code> values the number of digits of\nprecision returned by the numeric operators is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. See <a href = \"#op.numeric\"><b>6.2 Operators on\nNumeric Values</b></a>. See also <a href = \"#casting-to-decimal\"><b>17.1.3.3 Casting to xs:decimal</b></a> and\n<a href = \"#casting-to-integer\"><b>17.1.3.4 Casting to\nxs:integer</b></a></p>\n</li>\n<li>\n<p>If the number of digits in the result of a numeric operation\nexceeds the number of digits that the implementation supports, the\nresult is truncated or rounded in an <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> manner. See <a href = \"#op.numeric\"><b>6.2\nOperators on Numeric Values</b></a>. See also <a href = \"#casting-to-decimal\"><b>17.1.3.3 Casting to xs:decimal</b></a> and\n<a href = \"#casting-to-integer\"><b>17.1.3.4 Casting to\nxs:integer</b></a></p>\n</li>\n<li>\n<p>It is <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> which version of Unicode is supported by the\nfeatures defined in this specification, but it is recommended that\nthe most recent version of Unicode be used. See <a href = \"#string-types\"><b>7.1 String Types</b></a>.</p>\n</li>\n<li>\n<p>For <a href = \"#XPath_func-normalize-unicode\"><b>7.4.6\nfn:normalize-unicode</b></a>, conforming implementations <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> support\nnormalization form \"NFC\" and <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> support normalization forms \"NFD\", \"NFKC\",\n\"NFKD\", \"FULLY-NORMALIZED\". They <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> also support other normalization forms with\n<a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> semantics.</p>\n</li>\n<li>\n<p>The ability to decompose strings into collation units suitable\nfor substring matching is an <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> property of a collation. See <a href = \"#substring.functions\"><b>7.5 Functions Based on Substring\nMatching</b></a>.</p>\n</li>\n<li>\n<p>All <em>minimally conforming</em> processors <a title = \"must\" class = \"termref\" href = \"#must\"><span class = \"arrow\">·</span>must<span class = \"arrow\">·</span></a> support year\nvalues with a minimum of 4 digits (i.e., YYYY) and a minimum\nfractional second precision of 1 millisecond or three digits (i.e.,\ns.sss). However, <em>conforming processors</em> <a title = \"may\" class = \"termref\" href = \"#may\"><span class = \"arrow\">·</span>may<span class = \"arrow\">·</span></a> set larger\n<a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a> limits on the maximum number of digits they\nsupport in these two situations. See <a href = \"#date-time-duration-conformance\"><b>10.1.1 Limits and\nPrecision</b></a>.</p>\n</li>\n<li>\n<p>The result of casting a string to <code>xs:decimal</code>, when\nthe resulting value is not too large or too small but nevertheless\nhas too many decimal digits to be accurately represented, is\nimplementation-defined. See <a href = \"#casting-from-strings\"><b>17.1.1 Casting from xs:string and\nxs:untypedAtomic</b></a>.</p>\n</li>\n<li>\n<p>Various aspects of the processing provided by <a href = \"#XPath_func-doc\"><b>15.5.4 fn:doc</b></a> are <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>. Implementations may provide external\nconfiguration options that allow any aspect of the processing to be\ncontrolled by the user.</p>\n</li>\n<li>\n<p>The manner in which implementations provide options to weaken\nthe <a title = \"stable\" class = \"termref\" href = \"#stable\"><span class = \"arrow\">·</span>stable<span class = \"arrow\">·</span></a>\ncharacteristic of <a href = \"#XPath_func-collection\"><b>15.5.6\nfn:collection</b></a> and <a href = \"#XPath_func-doc\"><b>15.5.4\nfn:doc</b></a> are <a title = \"implementation-defined\" class = \"termref\" href = \"#implementation-defined\"><span class = \"arrow\">·</span>implementation-defined<span class = \"arrow\">·</span></a>.</p>\n</li>\n</ol>\n</div>\n<div class = \"div1\">\n<h2><a name = \"changes-since-edition-1\" id = \"changes-since-edition-1\"></a>F Changes since the First Edition\n(Non-Normative)</h2>\n<p>The changes made to this document are described in detail in the\n<a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html\">Errata</a>\nto the first edition. The rationale for each erratum is explained\nin the corresponding Bugzilla database entry. The following table\nsummarizes the errata that have been applied.</p>\n<table summary = \"A table [this is bad style]\" border = \"1\" cellpadding = \"5\" width = \"100%\">\n<thead>\n<tr>\n<td>Erratum</td>\n<td>Bugzilla</td>\n<td>Category</td>\n<td>Description</td>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E1\">\nE1</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4373\">4373</a></td>\n<td>substantive</td>\n<td>In fn:resolve-uri it is unclear what happens when the supplied\nbase URI is a relative reference</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E2\">\nE2</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4384\">4384</a></td>\n<td>editorial</td>\n<td>The description of fn:subsequence contains a spurious variable\n$p</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E3\">\nE3</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4385\">4385</a></td>\n<td>markup</td>\n<td>An example under fn:idref is incorrectly formatted</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E4\">\nE4</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4106\">4106</a>&#160;<a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4634\">4634</a></td>\n<td>substantive</td>\n<td>The regex specification allows a back-reference within square\nbrackets, which is meaningless. Furthermore, the specification\ndoesn't say what happens when a regular expression contains a\nback-reference to a non-existent subexpression.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E5\">\nE5</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4448\">4448</a></td>\n<td>editorial</td>\n<td>The function signatures for the internal functions\nop:subtract-dates and op:subtract-dateTimes incorrectly allow an\nempty sequence as the return value.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E6\">\nE6</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4471\">4471</a></td>\n<td>substantive</td>\n<td>Casting from date and time type to string represents the UTC\ntimezone as \"+00:00\" rather than as \"Z\". This erratum changes the\nrepresentation to \"Z\".</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E7\">\nE7</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4543\">4543</a></td>\n<td>substantive</td>\n<td>The meaning of the regex flag \"m\" is unclear when the last\ncharacter in the string is a newline</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E8\">\nE8</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4545\">4545</a></td>\n<td>editorial</td>\n<td>A character code confuses decimal and hexadecimal notation</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E9\">\nE9</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4549\">4549</a></td>\n<td>editorial</td>\n<td>In Appendix D, the function signature of the fn:translate\nfunction is quoted incorrectly.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E10\">\nE10</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4874\">4874</a></td>\n<td>editorial</td>\n<td>In 17.1.2, the procedure for casting xs:NOTATION to xs:string\ndoes not work because it uses functions that are defined only on\nxs:QName.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E11\">\nE11</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4874\">4874</a></td>\n<td>editorial</td>\n<td>Although the specification states that a string literal can be\ncast to an xs:QName or xs:NOTATION, the semantics of the operation\nare not described in the obvious place. This erratum adds a\ncross-reference.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E12\">\nE12</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4621\">4621</a></td>\n<td>substantive</td>\n<td>When multiplying or dividing a yearMonthDuration by a number,\nrounding behavior is underspecified.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E13\">\nE13</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4519\">4519</a></td>\n<td>editorial</td>\n<td>The conditions under which a node has the is-id or is-idref\nproperty need to be clarified. (See also corresponding erratum\nDM.E005 to XDM)</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E14\">\nE14</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4974\">4974</a></td>\n<td>editorial</td>\n<td>In fn:normalize-space, a sentence with multiple conditions is\nambiguously worded. To solve the problem, the relevant sentence can\nbe simplified, because it doesn't need to say what happens when the\nargument is \".\" and there is no context item; that's covered in the\nrules for evaluating \".\".</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E15\">\nE15</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5235\">5235</a></td>\n<td>editorial</td>\n<td>In fn:namespace-uri, the terminology \"the namespace URI of the\nxs:QName of $arg\" is incorrect. It's not clear that it's referring\nto the name of the node, rather than (say) its type\nannotation.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E16\">\nE16</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5246\">5246</a></td>\n<td>markup</td>\n<td>In fn:lang, the list item numbers (1) and (2) are\nduplicated.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E17\">\nE17</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5251\">5251</a></td>\n<td>substantive</td>\n<td>In fn:starts-with and fn:ends-with, the requirement that there\nshould be a minimal match at the start of the string gives\nunacceptable results. Any match suffices.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E18\">\nE18</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5271\">5271</a></td>\n<td>editorial</td>\n<td>In the (non-normative) appendix summarizing error conditions,\nthe description of code FORG0008 is misleading.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E19\">\nE19</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5284\">5284</a></td>\n<td>editorial</td>\n<td>Typo in the description of the fn:concat function.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E20\">\nE20</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5287\">5287</a></td>\n<td>editorial</td>\n<td>Errors in examples for the function op:duration-equal.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E21\">\nE21</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5597\">5597</a></td>\n<td>markup</td>\n<td>Errors in examples for the function fn:string-join.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E22\">\nE22</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5618\">5618</a></td>\n<td>editorial</td>\n<td>Narrative for fn:namespace-uri-from-QName refers to xs:string\nrather than xs:anyURI.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E23\">\nE23</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5617\">5617</a></td>\n<td>editorial</td>\n<td>Summary of op:unary-plus and op:unary-minus ignores the\npossibility of type promotion.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E24\">\nE24</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4106\">4106</a>&#160;<a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=4634\">4634</a>&#160;<a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5348\">5348</a></td>\n<td>substantive</td>\n<td>The regex specification allows a back-reference within square\nbrackets, which is meaningless. Furthermore, the specification\ndoesn't say what happens when a regular expression contains a\nback-reference to a non-existent subexpression.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E25\">\nE25</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5719\">5719</a></td>\n<td>editorial</td>\n<td>Misplaced full stop in (non-normative) error text for error\nFORX0001</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E26\">\nE26</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5688\">5688</a></td>\n<td>substantive</td>\n<td>The doc() and doc-available() functions are unclear on the\nrules for validating the first argument. They also mandate that\ninvalid URIs should always be rejected: this runs against the\npractice of many implementations, which often allow strings that\nare not valid URIs to be dereferenced, for example by the use of a\ncatalog. Note: this change indirectly affects the rules for the\ndocument() function in XSLT, which refers normatively to the doc()\nfunction</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E27\">\nE27</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5671\">5671</a></td>\n<td>editorial</td>\n<td>The rules for fn:min() and fn:max() are not entirely clear\nabout the type of the returned result.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E28\">\nE28</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5706\">5706</a></td>\n<td>editorial</td>\n<td>It is unclear what happens when implementation limits are\nexceeded in casting to xs:gYear or xs:gYearMonth.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E29\">\nE29</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6306\">6306</a></td>\n<td>substantive</td>\n<td>In the description of fn:idref, fn:normalize-space needs to be\napplied to the string value of the node, not to its typed\nvalue.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E30\">\nE30</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6212\">6212</a></td>\n<td>substantive</td>\n<td>The behavior of the idiv operator is unclear in situations\ninvolving rounding or overflow.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E31\">\nE31</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6028\">6028</a>&#160;<a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6591\">6591</a></td>\n<td>substantive</td>\n<td>The fn:id() function does not have the correct semantics when\ndealing with ID-valued elements. The resolution of this problem is\nto retain the behavior of fn:id() as specified, while introducing a\nnew function fn:element-with-id() whose behavior reflects the\nintended meaning of ID-valued elements. To avoid making existing\nimplementations non-conformant, the new function is optional.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E32\">\nE32</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6124\">6124</a></td>\n<td>editorial</td>\n<td>Code in illustrative functions for casting to dates and times\nuses fn:length in place of fn:string-length.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E33\">\nE33</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6316\">6316</a>&#160;<a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6212\">6212</a></td>\n<td>editorial</td>\n<td>The behaviour of the idiv operator is unclear in situations\ninvolving rounding or overflow, and it is not stated clearly what\nthe result of idiv is when the second operand is infinity.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E34\">\nE34</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6338\">6338</a></td>\n<td>editorial</td>\n<td>In fn:string-length, a sentence with multiple conditions is\nambiguously worded. To solve the problem, the relevant sentence can\nbe simplified, because it doesn't need to say what happens when the\nargument is \".\" and there is no context item; that's covered in the\nrules for evaluating \".\". (See also erratum E14)</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E35\">\nE35</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6342\">6342</a></td>\n<td>editorial</td>\n<td>Missing closing quote in example of\nop:divide-dayTimeDuration-by-dayTimeDuration</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E36\">\nE36</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6346\">6346</a></td>\n<td>editorial</td>\n<td>Misleading example of fn:number</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E37\">\nE37</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6347\">6347</a></td>\n<td>editorial</td>\n<td>Missing closing parenthesis in description of\nfn:local-name</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E38\">\nE38</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6348\">6348</a></td>\n<td>editorial</td>\n<td>Incorrect duration syntax in example code</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E39\">\nE39</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6355\">6355</a></td>\n<td>editorial</td>\n<td>Incorrect example for op:divide-dayTimeDuration (uses wrong\ntype name)</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E40\">\nE40</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6359\">6359</a></td>\n<td>editorial</td>\n<td>Incorrect example for op:gMonth-equal (missing closing\nparenthesis)</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E41\">\nE41</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6371\">6371</a></td>\n<td>editorial</td>\n<td>Unclear scenario for example of fn:index-of</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E42\">\nE42</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6372\">6372</a></td>\n<td>substantive</td>\n<td>The rules for comparing namespace nodes in fn:deep-equal() are\ninappropriate, for example they can lead to a node not being equal\nto itself.</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E43\">\nE43</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6375\">6375</a></td>\n<td>editorial</td>\n<td>It is not explicitly stated that notes and examples are\nnon-normative</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E44\">\nE44</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5183\">5183</a></td>\n<td>substantive</td>\n<td>The distinct-values() function has problems caused by\nnon-transitivity of the eq operator</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E45\">\nE45</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6344\">6344</a></td>\n<td>editorial</td>\n<td>Typographical error in the explanation of an example of\nop:gYearEqual()</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E46\">\nE46</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6345\">6345</a></td>\n<td>editorial</td>\n<td>The word \"Summary\" is repeated in the specification of\nop:gMonthDayEqual()</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E47\">\nE47</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=5671\">5671</a></td>\n<td>editorial</td>\n<td>The rules for fn:min() and fn:max() appear contradictory about\nwhether the input sequence is allowed to contain a mixture of\nxs:string and xs:anyURI values. (This erratum relates to the\nproblem identified in comment #9 of the Bugzilla entry.)</td>\n</tr>\n<tr>\n<td><a href = \"http://www.w3.org/XML/2007/qt-errata/xpath-functions-errata.html#E48\">\nE48</a></td>\n<td><a href = \"http://www.w3.org/Bugs/Public/show_bug.cgi?id=6591\">6591</a></td>\n<td>editorial</td>\n<td>The reference to xs:IDREFS in the description of fn:id() is\nmisleading, since xs:IDREFS has a minLength of 1.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class = \"div1\">\n<h2><a name = \"quickref\" id = \"quickref\"></a>G Function and Operator\nQuick Reference (Non-Normative)</h2>\n<div class = \"div2\">\n<h3><a name = \"quickref-section\" id = \"quickref-section\"></a>G.1\nFunctions and Operators by Section</h3>\n<dl>\n<dt class = \"label\">2 Accessors</dt>\n<dd>\n<dl>\n<dt class = \"label\">2.1 fn:node-name</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-node-name\"><code>fn:node-name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:QName?</code></div>\n</dd>\n<dt class = \"label\">2.2 fn:nilled</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-nilled\"><code>fn:nilled</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:boolean?</code></div>\n</dd>\n<dt class = \"label\">2.3 fn:string</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-string\"><code>fn:string</code></a>()<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-string\"><code>fn:string</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">2.4 fn:data</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-data\"><code>fn:data</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code></div>\n</dd>\n<dt class = \"label\">2.5 fn:base-uri</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-base-uri\"><code>fn:base-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-base-uri\"><code>fn:base-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n</dd>\n<dt class = \"label\">2.6 fn:document-uri</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-document-uri\"><code>fn:document-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">3 The Error Function</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>()<code>&#160;as&#160;</code><code>none</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName</code>)<code>&#160;as&#160;</code><code>none</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName?</code>,\n<code>$description</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>none</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName?</code>,\n<code>$description</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$error-object</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>none</code></div>\n</dd>\n<dt class = \"label\">4 The Trace Function</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-trace\"><code>fn:trace</code></a>(<code>$value</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$label</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n</dd>\n<dt class = \"label\">5 Constructor Functions</dt>\n<dd>\n<dl>\n<dt class = \"label\">5.2 A Special Constructor Function for\nxs:dateTime</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime\"><code>fn:dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">6 Functions and Operators on Numerics</dt>\n<dd>\n<dl>\n<dt class = \"label\">6.2 Operators on Numeric Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-add\"><code>op:numeric-add</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-subtract\"><code>op:numeric-subtract</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-multiply\"><code>op:numeric-multiply</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-integer-divide\"><code>op:numeric-integer-divide</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:integer</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-mod\"><code>op:numeric-mod</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-unary-plus\"><code>op:numeric-unary-plus</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-unary-minus\"><code>op:numeric-unary-minus</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code></div>\n</dd>\n<dt class = \"label\">6.3 Comparison Operators on Numeric Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-equal\"><code>op:numeric-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-less-than\"><code>op:numeric-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-greater-than\"><code>op:numeric-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">6.4 Functions on Numeric Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-abs\"><code>fn:abs</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-ceiling\"><code>fn:ceiling</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-floor\"><code>fn:floor</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-round\"><code>fn:round</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-round-half-to-even\"><code>fn:round-half-to-even</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-round-half-to-even\"><code>fn:round-half-to-even</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>,\n<code>$precision</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>numeric?</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">7 Functions on Strings</dt>\n<dd>\n<dl>\n<dt class = \"label\">7.2 Functions to Assemble and Disassemble\nStrings</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-codepoints-to-string\"><code>fn:codepoints-to-string</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:integer*</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-to-codepoints\"><code>fn:string-to-codepoints</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer*</code></div>\n</dd>\n<dt class = \"label\">7.3 Equality and Comparison of Strings</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-compare\"><code>fn:compare</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-compare\"><code>fn:compare</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-codepoint-equal\"><code>fn:codepoint-equal</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean?</code></div>\n</dd>\n<dt class = \"label\">7.4 Functions on String Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-concat\"><code>fn:concat</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>,\n<span class = \"varargs\">...</span>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-join\"><code>fn:string-join</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring\"><code>fn:substring</code></a>(<code>$sourceString</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring\"><code>fn:substring</code></a>(<code>$sourceString</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>,\n<code>$length</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-space\"><code>fn:normalize-space</code></a>()<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-space\"><code>fn:normalize-space</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$normalizationForm</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-upper-case\"><code>fn:upper-case</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-lower-case\"><code>fn:lower-case</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-translate\"><code>fn:translate</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$mapString</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$transString</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-encode-for-uri\"><code>fn:encode-for-uri</code></a>(<code>$uri-part</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-iri-to-uri\"><code>fn:iri-to-uri</code></a>(<code>$iri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-escape-html-uri\"><code>fn:escape-html-uri</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">7.5 Functions Based on Substring Matching</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-contains\"><code>fn:contains</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-contains\"><code>fn:contains</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-starts-with\"><code>fn:starts-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-starts-with\"><code>fn:starts-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-ends-with\"><code>fn:ends-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-ends-with\"><code>fn:ends-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-before\"><code>fn:substring-before</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-before\"><code>fn:substring-before</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-after\"><code>fn:substring-after</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-after\"><code>fn:substring-after</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">7.6 String Functions that Use Pattern\nMatching</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-matches\"><code>fn:matches</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-matches\"><code>fn:matches</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-replace\"><code>fn:replace</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$replacement</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-replace\"><code>fn:replace</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$replacement</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-tokenize\"><code>fn:tokenize</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-tokenize\"><code>fn:tokenize</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string*</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">8 Functions on anyURI</dt>\n<dd>\n<dl>\n<dt class = \"label\">8.1 fn:resolve-uri</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a>(<code>$relative</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a>(<code>$relative</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$base</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">9 Functions and Operators on Boolean Values</dt>\n<dd>\n<dl>\n<dt class = \"label\">9.1 Additional Boolean Constructor Functions</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-true\"><code>fn:true</code></a>()<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-false\"><code>fn:false</code></a>()<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">9.2 Operators on Boolean Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-equal\"><code>op:boolean-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-less-than\"><code>op:boolean-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-greater-than\"><code>op:boolean-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">9.3 Functions on Boolean Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-not\"><code>fn:not</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">10 Functions and Operators on Durations, Dates\nand Times</dt>\n<dd>\n<dl>\n<dt class = \"label\">10.4 Comparison Operators on Duration, Date and\nTime Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-yearMonthDuration-less-than\"><code>op:yearMonthDuration-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-yearMonthDuration-greater-than\"><code>op:yearMonthDuration-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-dayTimeDuration-less-than\"><code>op:dayTimeDuration-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-dayTimeDuration-greater-than\"><code>op:dayTimeDuration-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-duration-equal\"><code>op:duration-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:duration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:duration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-less-than\"><code>op:dateTime-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-greater-than\"><code>op:dateTime-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-equal\"><code>op:date-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-less-than\"><code>op:date-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-greater-than\"><code>op:date-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-equal\"><code>op:time-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-less-than\"><code>op:time-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-greater-than\"><code>op:time-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-gYearMonth-equal\"><code>op:gYearMonth-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gYearMonth</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gYearMonth</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-gYear-equal\"><code>op:gYear-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gYear</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gYear</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-gMonthDay-equal\"><code>op:gMonthDay-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gMonthDay</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gMonthDay</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-gMonth-equal\"><code>op:gMonth-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gMonth</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gMonth</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-gDay-equal\"><code>op:gDay-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gDay</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gDay</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">10.5 Component Extraction Functions on Durations,\nDates and Times</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-years-from-duration\"><code>fn:years-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-months-from-duration\"><code>fn:months-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-days-from-duration\"><code>fn:days-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-duration\"><code>fn:hours-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-duration\"><code>fn:minutes-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-duration\"><code>fn:seconds-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-year-from-dateTime\"><code>fn:year-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-month-from-dateTime\"><code>fn:month-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-day-from-dateTime\"><code>fn:day-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-dateTime\"><code>fn:hours-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-dateTime\"><code>fn:minutes-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-dateTime\"><code>fn:seconds-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-dateTime\"><code>fn:timezone-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-year-from-date\"><code>fn:year-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-month-from-date\"><code>fn:month-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-day-from-date\"><code>fn:day-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-date\"><code>fn:timezone-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-time\"><code>fn:hours-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-time\"><code>fn:minutes-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-time\"><code>fn:seconds-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-time\"><code>fn:timezone-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code></div>\n</dd>\n<dt class = \"label\">10.6 Arithmetic Operators on Durations</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDurations\"><code>op:add-yearMonthDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDurations\"><code>op:subtract-yearMonthDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-multiply-yearMonthDuration\"><code>op:multiply-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-yearMonthDuration\"><code>op:divide-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-yearMonthDuration-by-yearMonthDuration\"><code>op:divide-yearMonthDuration-by-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:decimal</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDurations\"><code>op:add-dayTimeDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDurations\"><code>op:subtract-dayTimeDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-multiply-dayTimeDuration\"><code>op:multiply-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-dayTimeDuration\"><code>op:divide-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-dayTimeDuration-by-dayTimeDuration\"><code>op:divide-dayTimeDuration-by-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:decimal</code></div>\n</dd>\n<dt class = \"label\">10.7 Timezone Adjustment Functions on Dates and\nTime Values</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-date-to-timezone\"><code>fn:adjust-date-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:date?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-date-to-timezone\"><code>fn:adjust-date-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:date?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-time-to-timezone\"><code>fn:adjust-time-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:time?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-time-to-timezone\"><code>fn:adjust-time-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:time?</code></div>\n</dd>\n<dt class = \"label\">10.8 Arithmetic Operators on Durations, Dates and\nTimes</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dateTimes\"><code>op:subtract-dateTimes</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dates\"><code>op:subtract-dates</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-times\"><code>op:subtract-times</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDuration-to-dateTime\"><code>op:add-yearMonthDuration-to-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-dateTime\"><code>op:add-dayTimeDuration-to-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDuration-from-dateTime\"><code>op:subtract-yearMonthDuration-from-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-dateTime\"><code>op:subtract-dayTimeDuration-from-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDuration-to-date\"><code>op:add-yearMonthDuration-to-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-date\"><code>op:add-dayTimeDuration-to-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDuration-from-date\"><code>op:subtract-yearMonthDuration-from-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-date\"><code>op:subtract-dayTimeDuration-from-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-time\"><code>op:add-dayTimeDuration-to-time</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:time</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-time\"><code>op:subtract-dayTimeDuration-from-time</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:time</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">11 Functions Related to QNames</dt>\n<dd>\n<dl>\n<dt class = \"label\">11.1 Additional Constructor Functions for\nQNames</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-QName\"><code>fn:resolve-QName</code></a>(<code>$qname</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:QName?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-QName\"><code>fn:QName</code></a>(<code>$paramURI</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$paramQName</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:QName</code></div>\n</dd>\n<dt class = \"label\">11.2 Functions and Operators Related to\nQNames</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-QName-equal\"><code>op:QName-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:QName</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:QName</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-prefix-from-QName\"><code>fn:prefix-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:NCName?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name-from-QName\"><code>fn:local-name-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:NCName?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri-from-QName\"><code>fn:namespace-uri-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri-for-prefix\"><code>fn:namespace-uri-for-prefix</code></a>(<code>$prefix</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-in-scope-prefixes\"><code>fn:in-scope-prefixes</code></a>(<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:string*</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">12 Operators on base64Binary and hexBinary</dt>\n<dd>\n<dl>\n<dt class = \"label\">12.1 Comparisons of base64Binary and hexBinary\nValues</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-hexBinary-equal\"><code>op:hexBinary-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:hexBinary</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:hexBinary</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-base64Binary-equal\"><code>op:base64Binary-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:base64Binary</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:base64Binary</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">13 Operators on NOTATION</dt>\n<dd>\n<dl>\n<dt class = \"label\">13.1 Operators on NOTATION</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-NOTATION-equal\"><code>op:NOTATION-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:NOTATION</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:NOTATION</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">14 Functions and Operators on Nodes</dt>\n<dd>\n<dl>\n<dt class = \"label\">14.1 fn:name</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-name\"><code>fn:name</code></a>()<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-name\"><code>fn:name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">14.2 fn:local-name</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name\"><code>fn:local-name</code></a>()<code>&#160;as&#160;</code><code>xs:string</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name\"><code>fn:local-name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">14.3 fn:namespace-uri</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri\"><code>fn:namespace-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri\"><code>fn:namespace-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI</code></div>\n</dd>\n<dt class = \"label\">14.4 fn:number</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-number\"><code>fn:number</code></a>()<code>&#160;as&#160;</code><code>xs:double</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-number\"><code>fn:number</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>)<code>&#160;as&#160;</code><code>xs:double</code></div>\n</dd>\n<dt class = \"label\">14.5 fn:lang</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-lang\"><code>fn:lang</code></a>(<code>$testlang</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-lang\"><code>fn:lang</code></a>(<code>$testlang</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">14.6 op:is-same-node</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-is-same-node\"><code>op:is-same-node</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">14.7 op:node-before</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-node-before\"><code>op:node-before</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">14.8 op:node-after</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-node-after\"><code>op:node-after</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n</dd>\n<dt class = \"label\">14.9 fn:root</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-root\"><code>fn:root</code></a>()<code>&#160;as&#160;</code><code>node()</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-root\"><code>fn:root</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>node()?</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">15 Functions and Operators on Sequences</dt>\n<dd>\n<dl>\n<dt class = \"label\">15.1 General Functions and Operators on\nSequences</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean\"><code>fn:boolean</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-concatenate\"><code>op:concatenate</code></a>(<code>$seq1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$seq2</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-index-of\"><code>fn:index-of</code></a>(<code>$seqParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$srchParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType</code>)<code>&#160;as&#160;</code><code>xs:integer*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-index-of\"><code>fn:index-of</code></a>(<code>$seqParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$srchParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:integer*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-empty\"><code>fn:empty</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-exists\"><code>fn:exists</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-distinct-values\"><code>fn:distinct-values</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-distinct-values\"><code>fn:distinct-values</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-insert-before\"><code>fn:insert-before</code></a>(<code>$target</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$position</code><code>&#160;as&#160;</code><code>xs:integer</code>,\n<code>$inserts</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-remove\"><code>fn:remove</code></a>(<code>$target</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$position</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-reverse\"><code>fn:reverse</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subsequence\"><code>fn:subsequence</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-subsequence\"><code>fn:subsequence</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>,\n<code>$length</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-unordered\"><code>fn:unordered</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code></div>\n</dd>\n<dt class = \"label\">15.2 Functions That Test the Cardinality of\nSequences</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-zero-or-one\"><code>fn:zero-or-one</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-one-or-more\"><code>fn:one-or-more</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()+</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-exactly-one\"><code>fn:exactly-one</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()</code></div>\n</dd>\n<dt class = \"label\">15.3 Equals, Union, Intersection and Except</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-deep-equal\"><code>fn:deep-equal</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-deep-equal\"><code>fn:deep-equal</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-union\"><code>op:union</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-intersect\"><code>op:intersect</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-except\"><code>op:except</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n</dd>\n<dt class = \"label\">15.4 Aggregate Functions</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-count\"><code>fn:count</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:integer</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-avg\"><code>fn:avg</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-max\"><code>fn:max</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-max\"><code>fn:max</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-min\"><code>fn:min</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-min\"><code>fn:min</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-sum\"><code>fn:sum</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-sum\"><code>fn:sum</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$zero</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code></div>\n</dd>\n<dt class = \"label\">15.5 Functions and Operators that Generate\nSequences</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-to\"><code>op:to</code></a>(<code>$firstval</code><code>&#160;as&#160;</code><code>xs:integer</code>,\n<code>$lastval</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>xs:integer*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-id\"><code>fn:id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>element()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-id\"><code>fn:id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>element()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-idref\"><code>fn:idref</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-idref\"><code>fn:idref</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-doc\"><code>fn:doc</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>document-node()?</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-doc-available\"><code>fn:doc-available</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-collection\"><code>fn:collection</code></a>()<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-collection\"><code>fn:collection</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>node()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-element-with-id\"><code>fn:element-with-id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>element()*</code></div>\n<div class = \"protoref\"><a href = \"#XPath_func-element-with-id\"><code>fn:element-with-id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>element()*</code></div>\n</dd>\n</dl>\n</dd>\n<dt class = \"label\">16 Context Functions</dt>\n<dd>\n<dl>\n<dt class = \"label\">16.1 fn:position</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-position\"><code>fn:position</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code></div>\n</dd>\n<dt class = \"label\">16.2 fn:last</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-last\"><code>fn:last</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code></div>\n</dd>\n<dt class = \"label\">16.3 fn:current-dateTime</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-current-dateTime\"><code>fn:current-dateTime</code></a>()<code>&#160;as&#160;</code><code>xs:dateTime</code></div>\n</dd>\n<dt class = \"label\">16.4 fn:current-date</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-current-date\"><code>fn:current-date</code></a>()<code>&#160;as&#160;</code><code>xs:date</code></div>\n</dd>\n<dt class = \"label\">16.5 fn:current-time</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-current-time\"><code>fn:current-time</code></a>()<code>&#160;as&#160;</code><code>xs:time</code></div>\n</dd>\n<dt class = \"label\">16.6 fn:implicit-timezone</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-implicit-timezone\"><code>fn:implicit-timezone</code></a>()<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code></div>\n</dd>\n<dt class = \"label\">16.7 fn:default-collation</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-default-collation\"><code>fn:default-collation</code></a>()<code>&#160;as&#160;</code><code>xs:string</code></div>\n</dd>\n<dt class = \"label\">16.8 fn:static-base-uri</dt>\n<dd>\n<div class = \"protoref\"><a href = \"#XPath_func-static-base-uri\"><code>fn:static-base-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI?</code></div>\n</dd>\n</dl>\n</dd>\n</dl>\n</div>\n<div class = \"div2\">\n<h3><a name = \"quickref-alpha\" id = \"quickref-alpha\"></a>G.2 Functions\nand Operators Alphabetically</h3>\n<div class = \"protoref\"><a href = \"#XPath_func-NOTATION-equal\"><code>op:NOTATION-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:NOTATION</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:NOTATION</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-NOTATION-equal\">13.1.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-QName\"><code>fn:QName</code></a>(<code>$paramURI</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$paramQName</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:QName</code>\n(§<a href = \"#XPath_func-QName\">11.1.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-QName-equal\"><code>op:QName-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:QName</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:QName</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-QName-equal\">11.2.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-abs\"><code>fn:abs</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-abs\">6.4.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-date\"><code>op:add-dayTimeDuration-to-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code>\n(§<a href = \"#XPath_func-add-dayTimeDuration-to-date\">10.8.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-dateTime\"><code>op:add-dayTimeDuration-to-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code>\n(§<a href = \"#XPath_func-add-dayTimeDuration-to-dateTime\">10.8.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDuration-to-time\"><code>op:add-dayTimeDuration-to-time</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:time</code>\n(§<a href = \"#XPath_func-add-dayTimeDuration-to-time\">10.8.12</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-dayTimeDurations\"><code>op:add-dayTimeDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-add-dayTimeDurations\">10.6.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDuration-to-date\"><code>op:add-yearMonthDuration-to-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code>\n(§<a href = \"#XPath_func-add-yearMonthDuration-to-date\">10.8.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDuration-to-dateTime\"><code>op:add-yearMonthDuration-to-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code>\n(§<a href = \"#XPath_func-add-yearMonthDuration-to-dateTime\">10.8.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-add-yearMonthDurations\"><code>op:add-yearMonthDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>\n(§<a href = \"#XPath_func-add-yearMonthDurations\">10.6.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-date-to-timezone\"><code>fn:adjust-date-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:date?</code>\n(§<a href = \"#XPath_func-adjust-date-to-timezone\">10.7.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-date-to-timezone\"><code>fn:adjust-date-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:date?</code>\n(§<a href = \"#XPath_func-adjust-date-to-timezone\">10.7.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code>\n(§<a href = \"#XPath_func-adjust-dateTime-to-timezone\">10.7.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-dateTime-to-timezone\"><code>fn:adjust-dateTime-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code>\n(§<a href = \"#XPath_func-adjust-dateTime-to-timezone\">10.7.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-time-to-timezone\"><code>fn:adjust-time-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:time?</code>\n(§<a href = \"#XPath_func-adjust-time-to-timezone\">10.7.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-adjust-time-to-timezone\"><code>fn:adjust-time-to-timezone</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>,\n<code>$timezone</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>)<code>&#160;as&#160;</code><code>xs:time?</code>\n(§<a href = \"#XPath_func-adjust-time-to-timezone\">10.7.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-avg\"><code>fn:avg</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-avg\">15.4.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-base-uri\"><code>fn:base-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-base-uri\">2.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-base-uri\"><code>fn:base-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-base-uri\">2.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-base64Binary-equal\"><code>op:base64Binary-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:base64Binary</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:base64Binary</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-base64Binary-equal\">12.1.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean\"><code>fn:boolean</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-boolean\">15.1.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-equal\"><code>op:boolean-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-boolean-equal\">9.2.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-greater-than\"><code>op:boolean-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-boolean-greater-than\">9.2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-boolean-less-than\"><code>op:boolean-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:boolean</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:boolean</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-boolean-less-than\">9.2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-ceiling\"><code>fn:ceiling</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-ceiling\">6.4.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-codepoint-equal\"><code>fn:codepoint-equal</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean?</code>\n(§<a href = \"#XPath_func-codepoint-equal\">7.3.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-codepoints-to-string\"><code>fn:codepoints-to-string</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:integer*</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-codepoints-to-string\">7.2.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-collection\"><code>fn:collection</code></a>()<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-collection\">15.5.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-collection\"><code>fn:collection</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-collection\">15.5.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-compare\"><code>fn:compare</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-compare\">7.3.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-compare\"><code>fn:compare</code></a>(<code>$comparand1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$comparand2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-compare\">7.3.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-concat\"><code>fn:concat</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>,\n<span class = \"varargs\">...</span>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-concat\">7.4.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-concatenate\"><code>op:concatenate</code></a>(<code>$seq1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$seq2</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-concatenate\">15.1.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-contains\"><code>fn:contains</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-contains\">7.5.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-contains\"><code>fn:contains</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-contains\">7.5.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-count\"><code>fn:count</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-count\">15.4.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-current-date\"><code>fn:current-date</code></a>()<code>&#160;as&#160;</code><code>xs:date</code>\n(§<a href = \"#XPath_func-current-date\">16.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-current-dateTime\"><code>fn:current-dateTime</code></a>()<code>&#160;as&#160;</code><code>xs:dateTime</code>\n(§<a href = \"#XPath_func-current-dateTime\">16.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-current-time\"><code>fn:current-time</code></a>()<code>&#160;as&#160;</code><code>xs:time</code>\n(§<a href = \"#XPath_func-current-time\">16.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-data\"><code>fn:data</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>\n(§<a href = \"#XPath_func-data\">2.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-equal\"><code>op:date-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-date-equal\">10.4.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-greater-than\"><code>op:date-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-date-greater-than\">10.4.11</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-date-less-than\"><code>op:date-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-date-less-than\">10.4.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime\"><code>fn:dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:dateTime?</code>\n(§<a href = \"#XPath_func-dateTime\">5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-equal\"><code>op:dateTime-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-dateTime-equal\">10.4.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-greater-than\"><code>op:dateTime-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-dateTime-greater-than\">10.4.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dateTime-less-than\"><code>op:dateTime-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-dateTime-less-than\">10.4.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-day-from-date\"><code>fn:day-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-day-from-date\">10.5.16</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-day-from-dateTime\"><code>fn:day-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-day-from-dateTime\">10.5.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dayTimeDuration-greater-than\"><code>op:dayTimeDuration-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-dayTimeDuration-greater-than\">10.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-dayTimeDuration-less-than\"><code>op:dayTimeDuration-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-dayTimeDuration-less-than\">10.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-days-from-duration\"><code>fn:days-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-days-from-duration\">10.5.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-deep-equal\"><code>fn:deep-equal</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-deep-equal\">15.3.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-deep-equal\"><code>fn:deep-equal</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-deep-equal\">15.3.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-default-collation\"><code>fn:default-collation</code></a>()<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-default-collation\">16.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-distinct-values\"><code>fn:distinct-values</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>\n(§<a href = \"#XPath_func-distinct-values\">15.1.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-distinct-values\"><code>fn:distinct-values</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>\n(§<a href = \"#XPath_func-distinct-values\">15.1.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-dayTimeDuration\"><code>op:divide-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-divide-dayTimeDuration\">10.6.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-dayTimeDuration-by-dayTimeDuration\"><code>op:divide-dayTimeDuration-by-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:decimal</code>\n(§<a href = \"#XPath_func-divide-dayTimeDuration-by-dayTimeDuration\">10.6.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-yearMonthDuration\"><code>op:divide-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>\n(§<a href = \"#XPath_func-divide-yearMonthDuration\">10.6.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-divide-yearMonthDuration-by-yearMonthDuration\"><code>op:divide-yearMonthDuration-by-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:decimal</code>\n(§<a href = \"#XPath_func-divide-yearMonthDuration-by-yearMonthDuration\">10.6.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-doc\"><code>fn:doc</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>document-node()?</code>\n(§<a href = \"#XPath_func-doc\">15.5.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-doc-available\"><code>fn:doc-available</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-doc-available\">15.5.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-document-uri\"><code>fn:document-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-document-uri\">2.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-duration-equal\"><code>op:duration-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:duration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:duration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-duration-equal\">10.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-element-with-id\"><code>fn:element-with-id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>element()*</code>\n(§<a href = \"#XPath_func-element-with-id\">15.5.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-element-with-id\"><code>fn:element-with-id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>element()*</code>\n(§<a href = \"#XPath_func-element-with-id\">15.5.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-empty\"><code>fn:empty</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-empty\">15.1.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-encode-for-uri\"><code>fn:encode-for-uri</code></a>(<code>$uri-part</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-encode-for-uri\">7.4.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-ends-with\"><code>fn:ends-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-ends-with\">7.5.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-ends-with\"><code>fn:ends-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-ends-with\">7.5.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>()<code>&#160;as&#160;</code><code>none</code>\n(§<a href = \"#XPath_func-error\">3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName</code>)<code>&#160;as&#160;</code><code>none</code>\n(§<a href = \"#XPath_func-error\">3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName?</code>,\n<code>$description</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>none</code>\n(§<a href = \"#XPath_func-error\">3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-error\"><code>fn:error</code></a>(<code>$error</code><code>&#160;as&#160;</code><code>xs:QName?</code>,\n<code>$description</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$error-object</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>none</code>\n(§<a href = \"#XPath_func-error\">3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-escape-html-uri\"><code>fn:escape-html-uri</code></a>(<code>$uri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-escape-html-uri\">7.4.12</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-exactly-one\"><code>fn:exactly-one</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()</code>\n(§<a href = \"#XPath_func-exactly-one\">15.2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-except\"><code>op:except</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-except\">15.3.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-exists\"><code>fn:exists</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-exists\">15.1.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-false\"><code>fn:false</code></a>()<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-false\">9.1.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-floor\"><code>fn:floor</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-floor\">6.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-gDay-equal\"><code>op:gDay-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gDay</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gDay</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-gDay-equal\">10.4.19</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-gMonth-equal\"><code>op:gMonth-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gMonth</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gMonth</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-gMonth-equal\">10.4.18</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-gMonthDay-equal\"><code>op:gMonthDay-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gMonthDay</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gMonthDay</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-gMonthDay-equal\">10.4.17</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-gYear-equal\"><code>op:gYear-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gYear</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gYear</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-gYear-equal\">10.4.16</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-gYearMonth-equal\"><code>op:gYearMonth-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:gYearMonth</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:gYearMonth</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-gYearMonth-equal\">10.4.15</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-hexBinary-equal\"><code>op:hexBinary-equal</code></a>(<code>$value1</code><code>&#160;as&#160;</code><code>xs:hexBinary</code>,\n<code>$value2</code><code>&#160;as&#160;</code><code>xs:hexBinary</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-hexBinary-equal\">12.1.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-dateTime\"><code>fn:hours-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-hours-from-dateTime\">10.5.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-duration\"><code>fn:hours-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-hours-from-duration\">10.5.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-hours-from-time\"><code>fn:hours-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-hours-from-time\">10.5.18</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-id\"><code>fn:id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>element()*</code>\n(§<a href = \"#XPath_func-id\">15.5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-id\"><code>fn:id</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>element()*</code>\n(§<a href = \"#XPath_func-id\">15.5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-idref\"><code>fn:idref</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-idref\">15.5.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-idref\"><code>fn:idref</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-idref\">15.5.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-implicit-timezone\"><code>fn:implicit-timezone</code></a>()<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-implicit-timezone\">16.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-in-scope-prefixes\"><code>fn:in-scope-prefixes</code></a>(<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:string*</code>\n(§<a href = \"#XPath_func-in-scope-prefixes\">11.2.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-index-of\"><code>fn:index-of</code></a>(<code>$seqParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$srchParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType</code>)<code>&#160;as&#160;</code><code>xs:integer*</code>\n(§<a href = \"#XPath_func-index-of\">15.1.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-index-of\"><code>fn:index-of</code></a>(<code>$seqParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$srchParam</code><code>&#160;as&#160;</code><code>xs:anyAtomicType</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:integer*</code>\n(§<a href = \"#XPath_func-index-of\">15.1.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-insert-before\"><code>fn:insert-before</code></a>(<code>$target</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$position</code><code>&#160;as&#160;</code><code>xs:integer</code>,\n<code>$inserts</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-insert-before\">15.1.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-intersect\"><code>op:intersect</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-intersect\">15.3.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-iri-to-uri\"><code>fn:iri-to-uri</code></a>(<code>$iri</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-iri-to-uri\">7.4.11</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-is-same-node\"><code>op:is-same-node</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-is-same-node\">14.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-lang\"><code>fn:lang</code></a>(<code>$testlang</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-lang\">14.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-lang\"><code>fn:lang</code></a>(<code>$testlang</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$node</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-lang\">14.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-last\"><code>fn:last</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-last\">16.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name\"><code>fn:local-name</code></a>()<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-local-name\">14.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name\"><code>fn:local-name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-local-name\">14.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-local-name-from-QName\"><code>fn:local-name-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:NCName?</code>\n(§<a href = \"#XPath_func-local-name-from-QName\">11.2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-lower-case\"><code>fn:lower-case</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-lower-case\">7.4.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-matches\"><code>fn:matches</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-matches\">7.6.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-matches\"><code>fn:matches</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-matches\">7.6.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-max\"><code>fn:max</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-max\">15.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-max\"><code>fn:max</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-max\">15.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-min\"><code>fn:min</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-min\">15.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-min\"><code>fn:min</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>string</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-min\">15.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-dateTime\"><code>fn:minutes-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-minutes-from-dateTime\">10.5.11</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-duration\"><code>fn:minutes-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-minutes-from-duration\">10.5.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-minutes-from-time\"><code>fn:minutes-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-minutes-from-time\">10.5.19</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-month-from-date\"><code>fn:month-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-month-from-date\">10.5.15</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-month-from-dateTime\"><code>fn:month-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-month-from-dateTime\">10.5.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-months-from-duration\"><code>fn:months-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-months-from-duration\">10.5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-multiply-dayTimeDuration\"><code>op:multiply-dayTimeDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-multiply-dayTimeDuration\">10.6.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-multiply-yearMonthDuration\"><code>op:multiply-yearMonthDuration</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>\n(§<a href = \"#XPath_func-multiply-yearMonthDuration\">10.6.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-name\"><code>fn:name</code></a>()<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-name\">14.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-name\"><code>fn:name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-name\">14.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri\"><code>fn:namespace-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI</code>\n(§<a href = \"#XPath_func-namespace-uri\">14.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri\"><code>fn:namespace-uri</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:anyURI</code>\n(§<a href = \"#XPath_func-namespace-uri\">14.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri-for-prefix\"><code>fn:namespace-uri-for-prefix</code></a>(<code>$prefix</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-namespace-uri-for-prefix\">11.2.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-namespace-uri-from-QName\"><code>fn:namespace-uri-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-namespace-uri-from-QName\">11.2.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-nilled\"><code>fn:nilled</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:boolean?</code>\n(§<a href = \"#XPath_func-nilled\">2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-node-after\"><code>op:node-after</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-node-after\">14.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-node-before\"><code>op:node-before</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-node-before\">14.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-node-name\"><code>fn:node-name</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>xs:QName?</code>\n(§<a href = \"#XPath_func-node-name\">2.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-space\"><code>fn:normalize-space</code></a>()<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-normalize-space\">7.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-space\"><code>fn:normalize-space</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-normalize-space\">7.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-normalize-unicode\">7.4.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-normalize-unicode\"><code>fn:normalize-unicode</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$normalizationForm</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-normalize-unicode\">7.4.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-not\"><code>fn:not</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-not\">9.3.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-number\"><code>fn:number</code></a>()<code>&#160;as&#160;</code><code>xs:double</code>\n(§<a href = \"#XPath_func-number\">14.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-number\"><code>fn:number</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>)<code>&#160;as&#160;</code><code>xs:double</code>\n(§<a href = \"#XPath_func-number\">14.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-add\"><code>op:numeric-add</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-add\">6.2.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-divide\"><code>op:numeric-divide</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-divide\">6.2.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-equal\"><code>op:numeric-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-numeric-equal\">6.3.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-greater-than\"><code>op:numeric-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-numeric-greater-than\">6.3.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-integer-divide\"><code>op:numeric-integer-divide</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-numeric-integer-divide\">6.2.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-less-than\"><code>op:numeric-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-numeric-less-than\">6.3.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-mod\"><code>op:numeric-mod</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-mod\">6.2.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-multiply\"><code>op:numeric-multiply</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-multiply\">6.2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-subtract\"><code>op:numeric-subtract</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>numeric</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-subtract\">6.2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-unary-minus\"><code>op:numeric-unary-minus</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-unary-minus\">6.2.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-numeric-unary-plus\"><code>op:numeric-unary-plus</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric</code>)<code>&#160;as&#160;</code><code>numeric</code>\n(§<a href = \"#XPath_func-numeric-unary-plus\">6.2.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-one-or-more\"><code>fn:one-or-more</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()+</code>\n(§<a href = \"#XPath_func-one-or-more\">15.2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-position\"><code>fn:position</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-position\">16.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-prefix-from-QName\"><code>fn:prefix-from-QName</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:QName?</code>)<code>&#160;as&#160;</code><code>xs:NCName?</code>\n(§<a href = \"#XPath_func-prefix-from-QName\">11.2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-remove\"><code>fn:remove</code></a>(<code>$target</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$position</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-remove\">15.1.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-replace\"><code>fn:replace</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$replacement</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-replace\">7.6.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-replace\"><code>fn:replace</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$replacement</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-replace\">7.6.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-QName\"><code>fn:resolve-QName</code></a>(<code>$qname</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$element</code><code>&#160;as&#160;</code><code>element()</code>)<code>&#160;as&#160;</code><code>xs:QName?</code>\n(§<a href = \"#XPath_func-resolve-QName\">11.1.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a>(<code>$relative</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-resolve-uri\">8.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-resolve-uri\"><code>fn:resolve-uri</code></a>(<code>$relative</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$base</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-resolve-uri\">8.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-reverse\"><code>fn:reverse</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-reverse\">15.1.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-root\"><code>fn:root</code></a>()<code>&#160;as&#160;</code><code>node()</code>\n(§<a href = \"#XPath_func-root\">14.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-root\"><code>fn:root</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>node()?</code>)<code>&#160;as&#160;</code><code>node()?</code>\n(§<a href = \"#XPath_func-root\">14.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-round\"><code>fn:round</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-round\">6.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-round-half-to-even\"><code>fn:round-half-to-even</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-round-half-to-even\">6.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-round-half-to-even\"><code>fn:round-half-to-even</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>numeric?</code>,\n<code>$precision</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>numeric?</code>\n(§<a href = \"#XPath_func-round-half-to-even\">6.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-dateTime\"><code>fn:seconds-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code>\n(§<a href = \"#XPath_func-seconds-from-dateTime\">10.5.12</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-duration\"><code>fn:seconds-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code>\n(§<a href = \"#XPath_func-seconds-from-duration\">10.5.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-seconds-from-time\"><code>fn:seconds-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:decimal?</code>\n(§<a href = \"#XPath_func-seconds-from-time\">10.5.20</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-starts-with\"><code>fn:starts-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-starts-with\">7.5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-starts-with\"><code>fn:starts-with</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-starts-with\">7.5.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-static-base-uri\"><code>fn:static-base-uri</code></a>()<code>&#160;as&#160;</code><code>xs:anyURI?</code>\n(§<a href = \"#XPath_func-static-base-uri\">16.8</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string\"><code>fn:string</code></a>()<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-string\">2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string\"><code>fn:string</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-string\">2.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-join\"><code>fn:string-join</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string*</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-string-join\">7.4.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a>()<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-string-length\">7.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-length\"><code>fn:string-length</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer</code>\n(§<a href = \"#XPath_func-string-length\">7.4.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-string-to-codepoints\"><code>fn:string-to-codepoints</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:integer*</code>\n(§<a href = \"#XPath_func-string-to-codepoints\">7.2.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subsequence\"><code>fn:subsequence</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-subsequence\">15.1.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subsequence\"><code>fn:subsequence</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>,\n<code>$length</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-subsequence\">15.1.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring\"><code>fn:substring</code></a>(<code>$sourceString</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring\">7.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring\"><code>fn:substring</code></a>(<code>$sourceString</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$startingLoc</code><code>&#160;as&#160;</code><code>xs:double</code>,\n<code>$length</code><code>&#160;as&#160;</code><code>xs:double</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring\">7.4.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-after\"><code>fn:substring-after</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring-after\">7.5.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-after\"><code>fn:substring-after</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring-after\">7.5.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-before\"><code>fn:substring-before</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring-before\">7.5.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-substring-before\"><code>fn:substring-before</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$collation</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-substring-before\">7.5.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dateTimes\"><code>op:subtract-dateTimes</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dateTime</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-subtract-dateTimes\">10.8.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dates\"><code>op:subtract-dates</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:date</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-subtract-dates\">10.8.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-date\"><code>op:subtract-dayTimeDuration-from-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code>\n(§<a href = \"#XPath_func-subtract-dayTimeDuration-from-date\">10.8.11</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-dateTime\"><code>op:subtract-dayTimeDuration-from-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code>\n(§<a href = \"#XPath_func-subtract-dayTimeDuration-from-dateTime\">10.8.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDuration-from-time\"><code>op:subtract-dayTimeDuration-from-time</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:time</code>\n(§<a href = \"#XPath_func-subtract-dayTimeDuration-from-time\">10.8.13</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-dayTimeDurations\"><code>op:subtract-dayTimeDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-subtract-dayTimeDurations\">10.6.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-times\"><code>op:subtract-times</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration</code>\n(§<a href = \"#XPath_func-subtract-times\">10.8.3</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDuration-from-date\"><code>op:subtract-yearMonthDuration-from-date</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:date</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:date</code>\n(§<a href = \"#XPath_func-subtract-yearMonthDuration-from-date\">10.8.10</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDuration-from-dateTime\"><code>op:subtract-yearMonthDuration-from-dateTime</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:dateTime</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:dateTime</code>\n(§<a href = \"#XPath_func-subtract-yearMonthDuration-from-dateTime\">10.8.6</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-subtract-yearMonthDurations\"><code>op:subtract-yearMonthDurations</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>\n(§<a href = \"#XPath_func-subtract-yearMonthDurations\">10.6.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-sum\"><code>fn:sum</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType</code>\n(§<a href = \"#XPath_func-sum\">15.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-sum\"><code>fn:sum</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:anyAtomicType*</code>,\n<code>$zero</code><code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>)<code>&#160;as&#160;</code><code>xs:anyAtomicType?</code>\n(§<a href = \"#XPath_func-sum\">15.4.5</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-equal\"><code>op:time-equal</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-time-equal\">10.4.12</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-greater-than\"><code>op:time-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-time-greater-than\">10.4.14</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-time-less-than\"><code>op:time-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:time</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:time</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-time-less-than\">10.4.13</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-date\"><code>fn:timezone-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>\n(§<a href = \"#XPath_func-timezone-from-date\">10.5.17</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-dateTime\"><code>fn:timezone-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>\n(§<a href = \"#XPath_func-timezone-from-dateTime\">10.5.13</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-timezone-from-time\"><code>fn:timezone-from-time</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:time?</code>)<code>&#160;as&#160;</code><code>xs:dayTimeDuration?</code>\n(§<a href = \"#XPath_func-timezone-from-time\">10.5.21</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-to\"><code>op:to</code></a>(<code>$firstval</code><code>&#160;as&#160;</code><code>xs:integer</code>,\n<code>$lastval</code><code>&#160;as&#160;</code><code>xs:integer</code>)<code>&#160;as&#160;</code><code>xs:integer*</code>\n(§<a href = \"#XPath_func-to\">15.5.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-tokenize\"><code>fn:tokenize</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string*</code>\n(§<a href = \"#XPath_func-tokenize\">7.6.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-tokenize\"><code>fn:tokenize</code></a>(<code>$input</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$pattern</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$flags</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string*</code>\n(§<a href = \"#XPath_func-tokenize\">7.6.4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-trace\"><code>fn:trace</code></a>(<code>$value</code><code>&#160;as&#160;</code><code>item()*</code>,\n<code>$label</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-trace\">4</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-translate\"><code>fn:translate</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>,\n<code>$mapString</code><code>&#160;as&#160;</code><code>xs:string</code>,\n<code>$transString</code><code>&#160;as&#160;</code><code>xs:string</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-translate\">7.4.9</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-true\"><code>fn:true</code></a>()<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-true\">9.1.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-union\"><code>op:union</code></a>(<code>$parameter1</code><code>&#160;as&#160;</code><code>node()*</code>,\n<code>$parameter2</code><code>&#160;as&#160;</code><code>node()*</code>)<code>&#160;as&#160;</code><code>node()*</code>\n(§<a href = \"#XPath_func-union\">15.3.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-unordered\"><code>fn:unordered</code></a>(<code>$sourceSeq</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()*</code>\n(§<a href = \"#XPath_func-unordered\">15.1.11</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-upper-case\"><code>fn:upper-case</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:string?</code>)<code>&#160;as&#160;</code><code>xs:string</code>\n(§<a href = \"#XPath_func-upper-case\">7.4.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-year-from-date\"><code>fn:year-from-date</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:date?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-year-from-date\">10.5.14</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-year-from-dateTime\"><code>fn:year-from-dateTime</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:dateTime?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-year-from-dateTime\">10.5.7</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-yearMonthDuration-greater-than\"><code>op:yearMonthDuration-greater-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-yearMonthDuration-greater-than\">10.4.2</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-yearMonthDuration-less-than\"><code>op:yearMonthDuration-less-than</code></a>(<code>$arg1</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>,\n<code>$arg2</code><code>&#160;as&#160;</code><code>xs:yearMonthDuration</code>)<code>&#160;as&#160;</code><code>xs:boolean</code>\n(§<a href = \"#XPath_func-yearMonthDuration-less-than\">10.4.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-years-from-duration\"><code>fn:years-from-duration</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>xs:duration?</code>)<code>&#160;as&#160;</code><code>xs:integer?</code>\n(§<a href = \"#XPath_func-years-from-duration\">10.5.1</a>)</div>\n<div class = \"protoref\"><a href = \"#XPath_func-zero-or-one\"><code>fn:zero-or-one</code></a>(<code>$arg</code><code>&#160;as&#160;</code><code>item()*</code>)<code>&#160;as&#160;</code><code>item()?</code>\n(§<a href = \"#XPath_func-zero-or-one\">15.2.1</a>)</div>\n</div>\n</div>\n</div>",
		"searchableItems": [
			{
				"name": "fn:abs",
				"domId": "XPath_func-abs"
			},
			{
				"name": "fn:adjust-date-to-timezone",
				"domId": "XPath_func-adjust-date-to-timezone"
			},
			{
				"name": "fn:adjust-dateTime-to-timezone",
				"domId": "XPath_func-adjust-dateTime-to-timezone"
			},
			{
				"name": "fn:adjust-time-to-timezone",
				"domId": "XPath_func-adjust-time-to-timezone"
			},
			{
				"name": "fn:avg",
				"domId": "XPath_func-avg"
			},
			{
				"name": "fn:base-uri",
				"domId": "XPath_func-base-uri"
			},
			{
				"name": "fn:boolean",
				"domId": "XPath_func-boolean"
			},
			{
				"name": "fn:ceiling",
				"domId": "XPath_func-ceiling"
			},
			{
				"name": "fn:codepoint-equal",
				"domId": "XPath_func-codepoint-equal"
			},
			{
				"name": "fn:codepoints-to-string",
				"domId": "XPath_func-codepoints-to-string"
			},
			{
				"name": "fn:collection",
				"domId": "XPath_func-collection"
			},
			{
				"name": "fn:compare",
				"domId": "XPath_func-compare"
			},
			{
				"name": "fn:concat",
				"domId": "XPath_func-concat"
			},
			{
				"name": "fn:contains",
				"domId": "XPath_func-contains"
			},
			{
				"name": "fn:count",
				"domId": "XPath_func-count"
			},
			{
				"name": "fn:current-date",
				"domId": "XPath_func-current-date"
			},
			{
				"name": "fn:current-dateTime",
				"domId": "XPath_func-current-dateTime"
			},
			{
				"name": "fn:current-time",
				"domId": "XPath_func-current-time"
			},
			{
				"name": "fn:data",
				"domId": "XPath_func-data"
			},
			{
				"name": "fn:dateTime",
				"domId": "XPath_func-dateTime"
			},
			{
				"name": "fn:day-from-date",
				"domId": "XPath_func-day-from-date"
			},
			{
				"name": "fn:day-from-dateTime",
				"domId": "XPath_func-day-from-dateTime"
			},
			{
				"name": "fn:days-from-duration",
				"domId": "XPath_func-days-from-duration"
			},
			{
				"name": "fn:deep-equal",
				"domId": "XPath_func-deep-equal"
			},
			{
				"name": "fn:default-collation",
				"domId": "XPath_func-default-collation"
			},
			{
				"name": "fn:distinct-values",
				"domId": "XPath_func-distinct-values"
			},
			{
				"name": "fn:doc",
				"domId": "XPath_func-doc"
			},
			{
				"name": "fn:doc-available",
				"domId": "XPath_func-doc-available"
			},
			{
				"name": "fn:document-uri",
				"domId": "XPath_func-document-uri"
			},
			{
				"name": "fn:element-with-id",
				"domId": "XPath_func-element-with-id"
			},
			{
				"name": "fn:empty",
				"domId": "XPath_func-empty"
			},
			{
				"name": "fn:encode-for-uri",
				"domId": "XPath_func-encode-for-uri"
			},
			{
				"name": "fn:ends-with",
				"domId": "XPath_func-ends-with"
			},
			{
				"name": "fn:error",
				"domId": "XPath_func-error"
			},
			{
				"name": "fn:escape-html-uri",
				"domId": "XPath_func-escape-html-uri"
			},
			{
				"name": "fn:exactly-one",
				"domId": "XPath_func-exactly-one"
			},
			{
				"name": "fn:exists",
				"domId": "XPath_func-exists"
			},
			{
				"name": "fn:false",
				"domId": "XPath_func-false"
			},
			{
				"name": "fn:floor",
				"domId": "XPath_func-floor"
			},
			{
				"name": "fn:hours-from-dateTime",
				"domId": "XPath_func-hours-from-dateTime"
			},
			{
				"name": "fn:hours-from-duration",
				"domId": "XPath_func-hours-from-duration"
			},
			{
				"name": "fn:hours-from-time",
				"domId": "XPath_func-hours-from-time"
			},
			{
				"name": "fn:id",
				"domId": "XPath_func-id"
			},
			{
				"name": "fn:idref",
				"domId": "XPath_func-idref"
			},
			{
				"name": "fn:implicit-timezone",
				"domId": "XPath_func-implicit-timezone"
			},
			{
				"name": "fn:in-scope-prefixes",
				"domId": "XPath_func-in-scope-prefixes"
			},
			{
				"name": "fn:index-of",
				"domId": "XPath_func-index-of"
			},
			{
				"name": "fn:insert-before",
				"domId": "XPath_func-insert-before"
			},
			{
				"name": "fn:iri-to-uri",
				"domId": "XPath_func-iri-to-uri"
			},
			{
				"name": "fn:lang",
				"domId": "XPath_func-lang"
			},
			{
				"name": "fn:last",
				"domId": "XPath_func-last"
			},
			{
				"name": "fn:local-name",
				"domId": "XPath_func-local-name"
			},
			{
				"name": "fn:local-name-from-QName",
				"domId": "XPath_func-local-name-from-QName"
			},
			{
				"name": "fn:lower-case",
				"domId": "XPath_func-lower-case"
			},
			{
				"name": "fn:matches",
				"domId": "XPath_func-matches"
			},
			{
				"name": "fn:max",
				"domId": "XPath_func-max"
			},
			{
				"name": "fn:min",
				"domId": "XPath_func-min"
			},
			{
				"name": "fn:minutes-from-dateTime",
				"domId": "XPath_func-minutes-from-dateTime"
			},
			{
				"name": "fn:minutes-from-duration",
				"domId": "XPath_func-minutes-from-duration"
			},
			{
				"name": "fn:minutes-from-time",
				"domId": "XPath_func-minutes-from-time"
			},
			{
				"name": "fn:month-from-date",
				"domId": "XPath_func-month-from-date"
			},
			{
				"name": "fn:month-from-dateTime",
				"domId": "XPath_func-month-from-dateTime"
			},
			{
				"name": "fn:months-from-duration",
				"domId": "XPath_func-months-from-duration"
			},
			{
				"name": "fn:name",
				"domId": "XPath_func-name"
			},
			{
				"name": "fn:namespace-uri",
				"domId": "XPath_func-namespace-uri"
			},
			{
				"name": "fn:namespace-uri-for-prefix",
				"domId": "XPath_func-namespace-uri-for-prefix"
			},
			{
				"name": "fn:namespace-uri-from-QName",
				"domId": "XPath_func-namespace-uri-from-QName"
			},
			{
				"name": "fn:nilled",
				"domId": "XPath_func-nilled"
			},
			{
				"name": "fn:node-name",
				"domId": "XPath_func-node-name"
			},
			{
				"name": "fn:normalize-space",
				"domId": "XPath_func-normalize-space"
			},
			{
				"name": "fn:normalize-unicode",
				"domId": "XPath_func-normalize-unicode"
			},
			{
				"name": "fn:not",
				"domId": "XPath_func-not"
			},
			{
				"name": "fn:number",
				"domId": "XPath_func-number"
			},
			{
				"name": "fn:one-or-more",
				"domId": "XPath_func-one-or-more"
			},
			{
				"name": "fn:position",
				"domId": "XPath_func-position"
			},
			{
				"name": "fn:prefix-from-QName",
				"domId": "XPath_func-prefix-from-QName"
			},
			{
				"name": "fn:QName",
				"domId": "XPath_func-QName"
			},
			{
				"name": "fn:remove",
				"domId": "XPath_func-remove"
			},
			{
				"name": "fn:replace",
				"domId": "XPath_func-replace"
			},
			{
				"name": "fn:resolve-QName",
				"domId": "XPath_func-resolve-QName"
			},
			{
				"name": "fn:resolve-uri",
				"domId": "XPath_func-resolve-uri"
			},
			{
				"name": "fn:reverse",
				"domId": "XPath_func-reverse"
			},
			{
				"name": "fn:root",
				"domId": "XPath_func-root"
			},
			{
				"name": "fn:round",
				"domId": "XPath_func-round"
			},
			{
				"name": "fn:round-half-to-even",
				"domId": "XPath_func-round-half-to-even"
			},
			{
				"name": "fn:seconds-from-dateTime",
				"domId": "XPath_func-seconds-from-dateTime"
			},
			{
				"name": "fn:seconds-from-duration",
				"domId": "XPath_func-seconds-from-duration"
			},
			{
				"name": "fn:seconds-from-time",
				"domId": "XPath_func-seconds-from-time"
			},
			{
				"name": "fn:starts-with",
				"domId": "XPath_func-starts-with"
			},
			{
				"name": "fn:static-base-uri",
				"domId": "XPath_func-static-base-uri"
			},
			{
				"name": "fn:string",
				"domId": "XPath_func-string"
			},
			{
				"name": "fn:string-join",
				"domId": "XPath_func-string-join"
			},
			{
				"name": "fn:string-length",
				"domId": "XPath_func-string-length"
			},
			{
				"name": "fn:string-to-codepoints",
				"domId": "XPath_func-string-to-codepoints"
			},
			{
				"name": "fn:subsequence",
				"domId": "XPath_func-subsequence"
			},
			{
				"name": "fn:substring",
				"domId": "XPath_func-substring"
			},
			{
				"name": "fn:substring-after",
				"domId": "XPath_func-substring-after"
			},
			{
				"name": "fn:substring-before",
				"domId": "XPath_func-substring-before"
			},
			{
				"name": "fn:sum",
				"domId": "XPath_func-sum"
			},
			{
				"name": "fn:timezone-from-date",
				"domId": "XPath_func-timezone-from-date"
			},
			{
				"name": "fn:timezone-from-dateTime",
				"domId": "XPath_func-timezone-from-dateTime"
			},
			{
				"name": "fn:timezone-from-time",
				"domId": "XPath_func-timezone-from-time"
			},
			{
				"name": "fn:tokenize",
				"domId": "XPath_func-tokenize"
			},
			{
				"name": "fn:trace",
				"domId": "XPath_func-trace"
			},
			{
				"name": "fn:translate",
				"domId": "XPath_func-translate"
			},
			{
				"name": "fn:true",
				"domId": "XPath_func-true"
			},
			{
				"name": "fn:unordered",
				"domId": "XPath_func-unordered"
			},
			{
				"name": "fn:upper-case",
				"domId": "XPath_func-upper-case"
			},
			{
				"name": "fn:year-from-date",
				"domId": "XPath_func-year-from-date"
			},
			{
				"name": "fn:year-from-dateTime",
				"domId": "XPath_func-year-from-dateTime"
			},
			{
				"name": "fn:years-from-duration",
				"domId": "XPath_func-years-from-duration"
			},
			{
				"name": "fn:zero-or-one",
				"domId": "XPath_func-zero-or-one"
			},
			{
				"name": "op:add-dayTimeDuration-to-date",
				"domId": "XPath_func-add-dayTimeDuration-to-date"
			},
			{
				"name": "op:add-dayTimeDuration-to-dateTime",
				"domId": "XPath_func-add-dayTimeDuration-to-dateTime"
			},
			{
				"name": "op:add-dayTimeDuration-to-time",
				"domId": "XPath_func-add-dayTimeDuration-to-time"
			},
			{
				"name": "op:add-dayTimeDurations",
				"domId": "XPath_func-add-dayTimeDurations"
			},
			{
				"name": "op:add-yearMonthDuration-to-date",
				"domId": "XPath_func-add-yearMonthDuration-to-date"
			},
			{
				"name": "op:add-yearMonthDuration-to-dateTime",
				"domId": "XPath_func-add-yearMonthDuration-to-dateTime"
			},
			{
				"name": "op:add-yearMonthDurations",
				"domId": "XPath_func-add-yearMonthDurations"
			},
			{
				"name": "op:base64Binary-equal",
				"domId": "XPath_func-base64Binary-equal"
			},
			{
				"name": "op:boolean-equal",
				"domId": "XPath_func-boolean-equal"
			},
			{
				"name": "op:boolean-greater-than",
				"domId": "XPath_func-boolean-greater-than"
			},
			{
				"name": "op:boolean-less-than",
				"domId": "XPath_func-boolean-less-than"
			},
			{
				"name": "op:concatenate",
				"domId": "XPath_func-concatenate"
			},
			{
				"name": "op:date-equal",
				"domId": "XPath_func-date-equal"
			},
			{
				"name": "op:date-greater-than",
				"domId": "XPath_func-date-greater-than"
			},
			{
				"name": "op:date-less-than",
				"domId": "XPath_func-date-less-than"
			},
			{
				"name": "op:dateTime-equal",
				"domId": "XPath_func-dateTime-equal"
			},
			{
				"name": "op:dateTime-greater-than",
				"domId": "XPath_func-dateTime-greater-than"
			},
			{
				"name": "op:dateTime-less-than",
				"domId": "XPath_func-dateTime-less-than"
			},
			{
				"name": "op:dayTimeDuration-greater-than",
				"domId": "XPath_func-dayTimeDuration-greater-than"
			},
			{
				"name": "op:dayTimeDuration-less-than",
				"domId": "XPath_func-dayTimeDuration-less-than"
			},
			{
				"name": "op:divide-dayTimeDuration",
				"domId": "XPath_func-divide-dayTimeDuration"
			},
			{
				"name": "op:divide-dayTimeDuration-by-dayTimeDuration",
				"domId": "XPath_func-divide-dayTimeDuration-by-dayTimeDuration"
			},
			{
				"name": "op:divide-yearMonthDuration",
				"domId": "XPath_func-divide-yearMonthDuration"
			},
			{
				"name": "op:divide-yearMonthDuration-by-yearMonthDuration",
				"domId": "XPath_func-divide-yearMonthDuration-by-yearMonthDuration"
			},
			{
				"name": "op:duration-equal",
				"domId": "XPath_func-duration-equal"
			},
			{
				"name": "op:except",
				"domId": "XPath_func-except"
			},
			{
				"name": "op:gDay-equal",
				"domId": "XPath_func-gDay-equal"
			},
			{
				"name": "op:gMonth-equal",
				"domId": "XPath_func-gMonth-equal"
			},
			{
				"name": "op:gMonthDay-equal",
				"domId": "XPath_func-gMonthDay-equal"
			},
			{
				"name": "op:gYear-equal",
				"domId": "XPath_func-gYear-equal"
			},
			{
				"name": "op:gYearMonth-equal",
				"domId": "XPath_func-gYearMonth-equal"
			},
			{
				"name": "op:hexBinary-equal",
				"domId": "XPath_func-hexBinary-equal"
			},
			{
				"name": "op:intersect",
				"domId": "XPath_func-intersect"
			},
			{
				"name": "op:is-same-node",
				"domId": "XPath_func-is-same-node"
			},
			{
				"name": "op:multiply-dayTimeDuration",
				"domId": "XPath_func-multiply-dayTimeDuration"
			},
			{
				"name": "op:multiply-yearMonthDuration",
				"domId": "XPath_func-multiply-yearMonthDuration"
			},
			{
				"name": "op:node-after",
				"domId": "XPath_func-node-after"
			},
			{
				"name": "op:node-before",
				"domId": "XPath_func-node-before"
			},
			{
				"name": "op:NOTATION-equal",
				"domId": "XPath_func-NOTATION-equal"
			},
			{
				"name": "op:numeric-add",
				"domId": "XPath_func-numeric-add"
			},
			{
				"name": "op:numeric-divide",
				"domId": "XPath_func-numeric-divide"
			},
			{
				"name": "op:numeric-equal",
				"domId": "XPath_func-numeric-equal"
			},
			{
				"name": "op:numeric-greater-than",
				"domId": "XPath_func-numeric-greater-than"
			},
			{
				"name": "op:numeric-integer-divide",
				"domId": "XPath_func-numeric-integer-divide"
			},
			{
				"name": "op:numeric-less-than",
				"domId": "XPath_func-numeric-less-than"
			},
			{
				"name": "op:numeric-mod",
				"domId": "XPath_func-numeric-mod"
			},
			{
				"name": "op:numeric-multiply",
				"domId": "XPath_func-numeric-multiply"
			},
			{
				"name": "op:numeric-subtract",
				"domId": "XPath_func-numeric-subtract"
			},
			{
				"name": "op:numeric-unary-minus",
				"domId": "XPath_func-numeric-unary-minus"
			},
			{
				"name": "op:numeric-unary-plus",
				"domId": "XPath_func-numeric-unary-plus"
			},
			{
				"name": "op:QName-equal",
				"domId": "XPath_func-QName-equal"
			},
			{
				"name": "op:subtract-dates",
				"domId": "XPath_func-subtract-dates"
			},
			{
				"name": "op:subtract-dateTimes",
				"domId": "XPath_func-subtract-dateTimes"
			},
			{
				"name": "op:subtract-dayTimeDuration-from-date",
				"domId": "XPath_func-subtract-dayTimeDuration-from-date"
			},
			{
				"name": "op:subtract-dayTimeDuration-from-dateTime",
				"domId": "XPath_func-subtract-dayTimeDuration-from-dateTime"
			},
			{
				"name": "op:subtract-dayTimeDuration-from-time",
				"domId": "XPath_func-subtract-dayTimeDuration-from-time"
			},
			{
				"name": "op:subtract-dayTimeDurations",
				"domId": "XPath_func-subtract-dayTimeDurations"
			},
			{
				"name": "op:subtract-times",
				"domId": "XPath_func-subtract-times"
			},
			{
				"name": "op:subtract-yearMonthDuration-from-date",
				"domId": "XPath_func-subtract-yearMonthDuration-from-date"
			},
			{
				"name": "op:subtract-yearMonthDuration-from-dateTime",
				"domId": "XPath_func-subtract-yearMonthDuration-from-dateTime"
			},
			{
				"name": "op:subtract-yearMonthDurations",
				"domId": "XPath_func-subtract-yearMonthDurations"
			},
			{
				"name": "op:time-equal",
				"domId": "XPath_func-time-equal"
			},
			{
				"name": "op:time-greater-than",
				"domId": "XPath_func-time-greater-than"
			},
			{
				"name": "op:time-less-than",
				"domId": "XPath_func-time-less-than"
			},
			{
				"name": "op:to",
				"domId": "XPath_func-to"
			},
			{
				"name": "op:union",
				"domId": "XPath_func-union"
			},
			{
				"name": "op:yearMonthDuration-greater-than",
				"domId": "XPath_func-yearMonthDuration-greater-than"
			},
			{
				"name": "op:yearMonthDuration-less-than",
				"domId": "XPath_func-yearMonthDuration-less-than"
			}
		]
	},
	{
		"url": "http://www.w3.org/TR/xslt20/",
		"title": "XSLT",
		"html": "<div class = \"head\">\n    <p><a href = \"http://www.w3.org/\"><img src = \"http://www.w3.org/Icons/w3c_home\" alt = \"W3C\" height = \"48\" width = \"72\"/></a></p>\n\n    <h1><a name = \"title\" id = \"title\"></a>XSL Transformations (XSLT)\n    Version 2.0</h1>\n\n    <h2><a name = \"w3c-doctype\" id = \"w3c-doctype\"></a>W3C\n    Recommendation 23 January 2007</h2>\n\n    <dl>\n      <dt>This version:</dt>\n\n      <dd><a href = \"http://www.w3.org/TR/2007/REC-xslt20-20070123/\">http://www.w3.org/TR/2007/REC-xslt20-20070123/</a></dd>\n\n      <dt>Latest version:</dt>\n\n      <dd><a href = \"http://www.w3.org/TR/xslt20/\">http://www.w3.org/TR/xslt20/</a><br/>\n      </dd>\n\n      <dt>Previous version:</dt>\n\n      <dd><a href = \"http://www.w3.org/TR/2006/PR-xslt20-20061121/\">http://www.w3.org/TR/2006/PR-xslt20-20061121/</a><br/>\n      </dd>\n\n      <dt>Editor:</dt>\n\n      <dd>Michael Kay, Saxonica <a href = \"http://www.saxonica.com/\">&lt;http://www.saxonica.com/&gt;</a></dd>\n    </dl>\n\n    <p>Please refer to the <a href = \"http://www.w3.org/XML/2007/qt-errata/xslt-errata.html\"><strong>\n    errata</strong></a> for this document, which may include some\n    normative corrections.</p>\n\n    <p>See also <a href = \"http://www.w3.org/2003/03/Translations/byTechnology?technology=xslt20\">\n    <strong>translations</strong></a>.</p>\n\n    <p class = \"copyright\"><a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#Copyright\">Copyright</a>&#160;©&#160;2007&#160;<a href = \"http://www.w3.org/\">\n    <acronym title = \"World Wide Web Consortium\">W3C</acronym></a><sup>®</sup>\n    (<a href = \"http://www.csail.mit.edu/\"><acronym title = \"Massachusetts Institute of Technology\">MIT</acronym></a>,\n    <a href = \"http://www.ercim.org/\"><acronym title = \"European Research Consortium for Informatics and Mathematics\">ERCIM</acronym></a>,\n    <a href = \"http://www.keio.ac.jp/\">Keio</a>), All Rights\n    Reserved. W3C <a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer\">\n    liability</a>, <a href = \"http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks\">trademark</a>\n    and <a href = \"http://www.w3.org/Consortium/Legal/copyright-documents\">document\n    use</a> rules apply.</p>\n  </div><hr/><div>\n    <h2><a name = \"abstract\" id = \"abstract\"></a>Abstract</h2>\n\n    <p>This specification defines the syntax and semantics of XSLT\n    2.0, a language for transforming XML documents into other XML\n    documents.</p>\n\n    <p>XSLT 2.0 is a revised version of the XSLT 1.0 Recommendation\n    <a href = \"#xslt\">[XSLT 1.0]</a> published on 16 November\n    1999.</p>\n\n    <p>XSLT 2.0 is designed to be used in conjunction with XPath\n    2.0, which is defined in <a href = \"#xpath20\">[XPath 2.0]</a>.\n    XSLT shares the same data model as XPath 2.0, which is defined\n    in <a href = \"#xpath-datamodel\">[Data Model]</a>, and it uses the\n    library of functions and operators defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n\n    <p>XSLT 2.0 also includes optional facilities to serialize the\n    results of a transformation, by means of an interface to the\n    serialization component described in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n    Serialization]</a>.</p>\n\n    <p><em>This document contains hyperlinks to specific sections\n    or definitions within other documents in this family of\n    specifications. These links are indicated visually by a\n    superscript identifying the target specification: for example\n    XP for XPath, DM for the XDM data model, FO for Functions and\n    Operators.</em></p>\n  </div><div>\n    <h2><a name = \"status\" id = \"status\"></a>Status of this\n    Document</h2>\n\n    <p><em>This section describes the status of this document at\n    the time of its publication. Other documents may supersede this\n    document. A list of current W3C publications and the latest\n    revision of this technical report can be found in the <a href = \"http://www.w3.org/TR/\">W3C technical reports index</a> at\n    http://www.w3.org/TR/.</em></p>\n\n    <p>This <a href = \"http://www.w3.org/2004/02/Process-20040205/tr.html#RecsW3C\">Recommendation</a>\n    builds on the success of <a href = \"#xslt\">[XSLT 1.0]</a>, which\n    was published on 16 November 1999. Many new features have been\n    added to the language (see <a href = \"#changes-since-1.0\"><i>J.2\n    New Functionality</i></a>) while retaining a high level of\n    backwards compatibility (see <a href = \"#incompatibilities\"><i>J.1 Incompatible Changes</i></a>). The\n    changes have been designed to meet the requirements for XSLT\n    2.0 described in <a href = \"#xslt20req\">[XSLT 2.0\n    Requirements]</a>. The way in which each requirement has been\n    addressed is outlined in <a href = \"#requirements-checklist\"><i>I\n    Checklist of Requirements</i></a>.</p>\n\n    <p>XSLT 2.0 depends on a number of other specifications that\n    have progressed to Recommendation status at the same time: see\n    <a href = \"#xpath20\">[XPath 2.0]</a>, <a href = \"#xpath-datamodel\">[Data Model]</a>, <a href = \"#xpath-functions\">[Functions and Operators]</a>, and <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n    Serialization]</a>. These subsidiary documents are also\n    referenced in the specification of XQuery 1.0.</p>\n\n    <p>This document has been produced by the <a href = \"http://www.w3.org/Style/XSL/\">XSL Working Group</a>, which is\n    part of the <a href = \"http://www.w3.org/XML/Activity\">XML\n    Activity</a>. The document has been reviewed by W3C Members and\n    other interested parties, and is endorsed by the Director. It\n    is a stable document and may be used as reference material or\n    cited as a normative reference from another document. W3C's\n    role in making the Recommendation is to draw attention to the\n    specification and to promote its widespread deployment. This\n    enhances the functionality and interoperability of the Web.</p>\n\n    <p>A small number of editorial corrections and clarifications\n    have been made to the document since it <a href = \"http://www.w3.org/TR/2006/PR-xslt20-20061121/\">was\n    published</a> as a <a href = \"http://www.w3.org/2004/02/Process-20040205/tr.html#RecsPR\">Proposed\n    Recommendation</a> on 21 November 2006. These changes are\n    listed at <a href = \"#changes-2007-01\"><i>J.2.4 Changes since\n    Proposed Recommendation</i></a>.</p>\n\n    <p>Please record any comments about this document in W3C's\n    <a href = \"http://www.w3.org/Bugs/Public/\">public Bugzilla\n    system</a> (instructions can be found at <a href = \"http://www.w3.org/XML/2005/04/qt-bugzilla\">http://www.w3.org/XML/2005/04/qt-bugzilla</a>).\n    If access to that system is not feasible, you may send your\n    comments to the W3C XSLT/XPath/XQuery public comments mailing\n    list, <a href = \"mailto:public-qt-comments@w3.org\">public-qt-comments@w3.org</a>.\n    It is helpful to include the string [XSLT] in the subject line\n    of your comment, whether made in Bugzilla or in email. Each\n    Bugzilla entry and email message should contain only one\n    comment. Archives of the comments and responses are available\n    at <a href = \"http://lists.w3.org/Archives/Public/public-qt-comments/\">http://lists.w3.org/Archives/Public/public-qt-comments/</a>.</p>\n\n    <p>General public discussion of XSLT takes place on the\n    <a href = \"http://www.mulberrytech.com/xsl/xsl-list/index.html\">XSL-List</a>\n    forum.</p>\n\n    <p>This document was produced by a group operating under the\n    <a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/\">5\n    February 2004 W3C Patent Policy</a>. W3C maintains a <a href = \"http://www.w3.org/2004/01/pp-impl/19552/status#disclosures\">public\n    list of any patent disclosures</a> made in connection with the\n    deliverables of the group; that page also includes instructions\n    for disclosing a patent. An individual who has actual knowledge\n    of a patent which the individual believes contains <a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential\">\n    Essential Claim(s)</a> must disclose the information in\n    accordance with <a href = \"http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure\">\n    section 6 of the W3C Patent Policy</a>.</p>\n  </div><div class = \"toc\">\n    <h2><a name = \"contents\" id = \"contents\"></a>Table of Contents</h2>\n\n    <p class = \"toc\">1 <a href = \"#introduction\">Introduction</a><br/>\n    &#160;&#160;&#160;&#160;1.1 <a href = \"#what-is-xslt\">What is\n    XSLT?</a><br/>\n    &#160;&#160;&#160;&#160;1.2 <a href = \"#whats-new-in-xslt2\">What's New in XSLT 2.0?</a><br/>\n    2 <a href = \"#concepts\">Concepts</a><br/>\n    &#160;&#160;&#160;&#160;2.1 <a href = \"#terminology\">Terminology</a><br/>\n    &#160;&#160;&#160;&#160;2.2 <a href = \"#notation\">Notation</a><br/>\n    &#160;&#160;&#160;&#160;2.3 <a href = \"#initiating\">Initiating a\n    Transformation</a><br/>\n    &#160;&#160;&#160;&#160;2.4 <a href = \"#executing-a-transformation\">Executing a\n    Transformation</a><br/>\n    &#160;&#160;&#160;&#160;2.5 <a href = \"#context\">The Evaluation\n    Context</a><br/>\n    &#160;&#160;&#160;&#160;2.6 <a href = \"#parsing-and-serialization\">Parsing and\n    Serialization</a><br/>\n    &#160;&#160;&#160;&#160;2.7 <a href = \"#extensibility\">Extensibility</a><br/>\n    &#160;&#160;&#160;&#160;2.8 <a href = \"#stylesheets-and-schemas\">Stylesheets and XML\n    Schemas</a><br/>\n    &#160;&#160;&#160;&#160;2.9 <a href = \"#errors\">Error\n    Handling</a><br/>\n    3 <a href = \"#stylesheet-structure\">Stylesheet\n    Structure</a><br/>\n    &#160;&#160;&#160;&#160;3.1 <a href = \"#xslt-namespace\">XSLT\n    Namespace</a><br/>\n    &#160;&#160;&#160;&#160;3.2 <a href = \"#reserved-namespaces\">Reserved Namespaces</a><br/>\n    &#160;&#160;&#160;&#160;3.3 <a href = \"#extension-attributes\">Extension Attributes</a><br/>\n    &#160;&#160;&#160;&#160;3.4 <a href = \"#xslt-media-type\">XSLT\n    Media Type</a><br/>\n    &#160;&#160;&#160;&#160;3.5 <a href = \"#standard-attributes\">Standard Attributes</a><br/>\n    &#160;&#160;&#160;&#160;3.6 <a href = \"#stylesheet-element\">Stylesheet Element</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.6.1 <a href = \"#default-collation-attribute\">The default-collation\n    attribute</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.6.2 <a href = \"#user-defined-top-level\">User-defined Data Elements</a><br/>\n    &#160;&#160;&#160;&#160;3.7 <a href = \"#simplified-stylesheet\">Simplified Stylesheet\n    Modules</a><br/>\n    &#160;&#160;&#160;&#160;3.8 <a href = \"#backwards\">Backwards-Compatible Processing</a><br/>\n    &#160;&#160;&#160;&#160;3.9 <a href = \"#forwards\">Forwards-Compatible Processing</a><br/>\n    &#160;&#160;&#160;&#160;3.10 <a href = \"#combining-modules\">Combining Stylesheet Modules</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.10.1 <a href = \"#locating-modules\">Locating Stylesheet Modules</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.10.2 <a href = \"#include\">Stylesheet Inclusion</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3.10.3 <a href = \"#import\">Stylesheet Import</a><br/>\n    &#160;&#160;&#160;&#160;3.11 <a href = \"#embedded\">Embedded\n    Stylesheet Modules</a><br/>\n    &#160;&#160;&#160;&#160;3.12 <a href = \"#conditional-inclusion\">Conditional Element\n    Inclusion</a><br/>\n    &#160;&#160;&#160;&#160;3.13 <a href = \"#built-in-types\">Built-in\n    Types</a><br/>\n    &#160;&#160;&#160;&#160;3.14 <a href = \"#import-schema\">Importing\n    Schema Components</a><br/>\n    4 <a href = \"#data-model\">Data Model</a><br/>\n    &#160;&#160;&#160;&#160;4.1 <a href = \"#xml-versions\">XML\n    Versions</a><br/>\n    &#160;&#160;&#160;&#160;4.2 <a href = \"#stylesheet-stripping\">Stripping Whitespace from the\n    Stylesheet</a><br/>\n    &#160;&#160;&#160;&#160;4.3 <a href = \"#stripping-annotations\">Stripping Type Annotations from a\n    Source Tree</a><br/>\n    &#160;&#160;&#160;&#160;4.4 <a href = \"#strip\">Stripping\n    Whitespace from a Source Tree</a><br/>\n    &#160;&#160;&#160;&#160;4.5 <a href = \"#id-in-data-model\">Attribute Types and DTD\n    Validation</a><br/>\n    &#160;&#160;&#160;&#160;4.6 <a href = \"#limits\">Limits</a><br/>\n    &#160;&#160;&#160;&#160;4.7 <a href = \"#d-o-e-in-data-model\">Disable Output Escaping</a><br/>\n    5 <a href = \"#constructs\">Features of the XSLT Language</a><br/>\n    &#160;&#160;&#160;&#160;5.1 <a href = \"#qname\">Qualified\n    Names</a><br/>\n    &#160;&#160;&#160;&#160;5.2 <a href = \"#unprefixed-qnames\">Unprefixed QNames in Expressions and\n    Patterns</a><br/>\n    &#160;&#160;&#160;&#160;5.3 <a href = \"#expressions\">Expressions</a><br/>\n    &#160;&#160;&#160;&#160;5.4 <a href = \"#static-and-dynamic-context\">The Static and Dynamic\n    Context</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.1 <a href = \"#static-context\">Initializing the Static Context</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.2 <a href = \"#additional-static-context\">Additional Static Context\n    Components used by XSLT</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.3 <a href = \"#xpath-dynamic-context\">Initializing the Dynamic\n    Context</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.3.1\n    <a href = \"#focus\">Maintaining Position: the Focus</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.3.2\n    <a href = \"#evaluation-context\">Other components of the XPath\n    Dynamic Context</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.4.4 <a href = \"#additional-dynamic-context\">Additional Dynamic Context\n    Components used by XSLT</a><br/>\n    &#160;&#160;&#160;&#160;5.5 <a href = \"#patterns\">Patterns</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.5.1 <a href = \"#pattern-examples\">Examples of Patterns</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.5.2 <a href = \"#pattern-syntax\">Syntax of Patterns</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.5.3 <a href = \"#pattern-semantics\">The Meaning of a Pattern</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.5.4 <a href = \"#pattern-errors\">Errors in Patterns</a><br/>\n    &#160;&#160;&#160;&#160;5.6 <a href = \"#attribute-value-templates\">Attribute Value\n    Templates</a><br/>\n    &#160;&#160;&#160;&#160;5.7 <a href = \"#sequence-constructors\">Sequence Constructors</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.7.1 <a href = \"#constructing-complex-content\">Constructing Complex\n    Content</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.7.2 <a href = \"#constructing-simple-content\">Constructing Simple\n    Content</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5.7.3 <a href = \"#namespace-fixup\">Namespace Fixup</a><br/>\n    &#160;&#160;&#160;&#160;5.8 <a href = \"#uri-references\">URI\n    References</a><br/>\n    6 <a href = \"#rules\">Template Rules</a><br/>\n    &#160;&#160;&#160;&#160;6.1 <a href = \"#defining-templates\">Defining Templates</a><br/>\n    &#160;&#160;&#160;&#160;6.2 <a href = \"#defining-template-rules\">Defining Template Rules</a><br/>\n    &#160;&#160;&#160;&#160;6.3 <a href = \"#applying-templates\">Applying Template Rules</a><br/>\n    &#160;&#160;&#160;&#160;6.4 <a href = \"#conflict\">Conflict\n    Resolution for Template Rules</a><br/>\n    &#160;&#160;&#160;&#160;6.5 <a href = \"#modes\">Modes</a><br/>\n    &#160;&#160;&#160;&#160;6.6 <a href = \"#built-in-rule\">Built-in\n    Template Rules</a><br/>\n    &#160;&#160;&#160;&#160;6.7 <a href = \"#apply-imports\">Overriding\n    Template Rules</a><br/>\n    7 <a href = \"#for-each\">Repetition</a><br/>\n    8 <a href = \"#conditionals\">Conditional Processing</a><br/>\n    &#160;&#160;&#160;&#160;8.1 <a href = \"#xsl-if\">Conditional\n    Processing with xsl:if</a><br/>\n    &#160;&#160;&#160;&#160;8.2 <a href = \"#xsl-choose\">Conditional\n    Processing with xsl:choose</a><br/>\n    9 <a href = \"#variables-and-parameters\">Variables and\n    Parameters</a><br/>\n    &#160;&#160;&#160;&#160;9.1 <a href = \"#variables\">Variables</a><br/>\n    &#160;&#160;&#160;&#160;9.2 <a href = \"#parameters\">Parameters</a><br/>\n    &#160;&#160;&#160;&#160;9.3 <a href = \"#variable-values\">Values\n    of Variables and Parameters</a><br/>\n    &#160;&#160;&#160;&#160;9.4 <a href = \"#temporary-trees\">Creating\n    implicit document nodes</a><br/>\n    &#160;&#160;&#160;&#160;9.5 <a href = \"#global-variables\">Global\n    Variables and Parameters</a><br/>\n    &#160;&#160;&#160;&#160;9.6 <a href = \"#local-variables\">Local\n    Variables and Parameters</a><br/>\n    &#160;&#160;&#160;&#160;9.7 <a href = \"#scope-of-variables\">Scope\n    of Variables</a><br/>\n    &#160;&#160;&#160;&#160;9.8 <a href = \"#circularity\">Circular\n    Definitions</a><br/>\n    10 <a href = \"#callable-components\">Callable Components</a><br/>\n    &#160;&#160;&#160;&#160;10.1 <a href = \"#named-templates\">Named\n    Templates</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.1.1 <a href = \"#with-param\">Passing Parameters to Templates</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;10.1.2 <a href = \"#tunnel-params\">Tunnel Parameters</a><br/>\n    &#160;&#160;&#160;&#160;10.2 <a href = \"#attribute-sets\">Named\n    Attribute Sets</a><br/>\n    &#160;&#160;&#160;&#160;10.3 <a href = \"#stylesheet-functions\">Stylesheet Functions</a><br/>\n    11 <a href = \"#creating-new-nodes\">Creating Nodes and\n    Sequences</a><br/>\n    &#160;&#160;&#160;&#160;11.1 <a href = \"#literal-result-element\">Literal Result Elements</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.1 <a href = \"#setting-annotation-for-lre\">Setting the Type Annotation for\n    Literal Result Elements</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.2 <a href = \"#attributes-for-lres\">Attribute Nodes for Literal Result\n    Elements</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.3 <a href = \"#lre-namespaces\">Namespace Nodes for Literal Result\n    Elements</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.1.4 <a href = \"#namespace-aliasing\">Namespace Aliasing</a><br/>\n    &#160;&#160;&#160;&#160;11.2 <a href = \"#xsl-element\">Creating\n    Element Nodes Using xsl:element</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.2.1 <a href = \"#annotation-for-constructed-element\">Setting the Type\n    Annotation for a Constructed Element Node</a><br/>\n    &#160;&#160;&#160;&#160;11.3 <a href = \"#creating-attributes\">Creating Attribute Nodes Using\n    xsl:attribute</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.3.1 <a href = \"#annotation-for-constructed-attribute\">Setting the Type\n    Annotation for a Constructed Attribute Node</a><br/>\n    &#160;&#160;&#160;&#160;11.4 <a href = \"#creating-text-nodes\">Creating Text Nodes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.4.1 <a href = \"#literal-text-nodes\">Literal Text Nodes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.4.2 <a href = \"#xsl-text\">Creating Text Nodes Using xsl:text</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.4.3 <a href = \"#value-of\">Generating Text with xsl:value-of</a><br/>\n    &#160;&#160;&#160;&#160;11.5 <a href = \"#creating-document-nodes\">Creating Document Nodes</a><br/>\n    &#160;&#160;&#160;&#160;11.6 <a href = \"#creating-processing-instructions\">Creating Processing\n    Instructions</a><br/>\n    &#160;&#160;&#160;&#160;11.7 <a href = \"#creating-namespace-nodes\">Creating Namespace Nodes</a><br/>\n    &#160;&#160;&#160;&#160;11.8 <a href = \"#creating-comments\">Creating Comments</a><br/>\n    &#160;&#160;&#160;&#160;11.9 <a href = \"#copying\">Copying\n    Nodes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.9.1 <a href = \"#shallow-copy\">Shallow Copy</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;11.9.2 <a href = \"#copy-of\">Deep Copy</a><br/>\n    &#160;&#160;&#160;&#160;11.10 <a href = \"#constructing-sequences\">Constructing Sequences</a><br/>\n    12 <a href = \"#number\">Numbering</a><br/>\n    &#160;&#160;&#160;&#160;12.1 <a href = \"#formatting-supplied-number\">Formatting a Supplied\n    Number</a><br/>\n    &#160;&#160;&#160;&#160;12.2 <a href = \"#numbering-based-on-position\">Numbering based on Position in a\n    Document</a><br/>\n    &#160;&#160;&#160;&#160;12.3 <a href = \"#convert\">Number to\n    String Conversion Attributes</a><br/>\n    13 <a href = \"#sorting\">Sorting</a><br/>\n    &#160;&#160;&#160;&#160;13.1 <a href = \"#xsl-sort\">The xsl:sort\n    Element</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;13.1.1 <a href = \"#sorting-process\">The Sorting Process</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;13.1.2 <a href = \"#comparing-sort-keys\">Comparing Sort Key Values</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;13.1.3 <a href = \"#collating-sequences\">Sorting Using Collations</a><br/>\n    &#160;&#160;&#160;&#160;13.2 <a href = \"#creating-sorted-sequence\">Creating a Sorted\n    Sequence</a><br/>\n    &#160;&#160;&#160;&#160;13.3 <a href = \"#sorted-iteration\">Processing a Sequence in Sorted\n    Order</a><br/>\n    14 <a href = \"#grouping\">Grouping</a><br/>\n    &#160;&#160;&#160;&#160;14.1 <a href = \"#current-group\">The\n    Current Group</a><br/>\n    &#160;&#160;&#160;&#160;14.2 <a href = \"#current-grouping-key\">The Current Grouping Key</a><br/>\n    &#160;&#160;&#160;&#160;14.3 <a href = \"#xsl-for-each-group\">The\n    xsl:for-each-group Element</a><br/>\n    &#160;&#160;&#160;&#160;14.4 <a href = \"#grouping-examples\">Examples of Grouping</a><br/>\n    15 <a href = \"#regular-expressions\">Regular Expressions</a><br/>\n    &#160;&#160;&#160;&#160;15.1 <a href = \"#analyze-string\">The\n    xsl:analyze-string instruction</a><br/>\n    &#160;&#160;&#160;&#160;15.2 <a href = \"#regex-group\">Captured\n    Substrings</a><br/>\n    &#160;&#160;&#160;&#160;15.3 <a href = \"#regex-examples\">Examples\n    of Regular Expression Matching</a><br/>\n    16 <a href = \"#add-func\">Additional Functions</a><br/>\n    &#160;&#160;&#160;&#160;16.1 <a href = \"#document\">Multiple\n    Source Documents</a><br/>\n    &#160;&#160;&#160;&#160;16.2 <a href = \"#unparsed-text\">Reading\n    Text Files</a><br/>\n    &#160;&#160;&#160;&#160;16.3 <a href = \"#key\">Keys</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.3.1 <a href = \"#xsl-key\">The xsl:key Declaration</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.3.2 <a href = \"#keys\">The key Function</a><br/>\n    &#160;&#160;&#160;&#160;16.4 <a href = \"#format-number\">Number\n    Formatting</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.4.1 <a href = \"#defining-decimal-format\">Defining a Decimal Format</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.4.2 <a href = \"#processing-picture-string\">Processing the Picture\n    String</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.4.3 <a href = \"#analysing-picture-string\">Analysing the Picture\n    String</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.4.4 <a href = \"#formatting-the-number\">Formatting the Number</a><br/>\n    &#160;&#160;&#160;&#160;16.5 <a href = \"#format-date\">Formatting\n    Dates and Times</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.5.1 <a href = \"#date-picture-string\">The Picture String</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.5.2 <a href = \"#lang-cal-country\">The Language, Calendar, and Country\n    Arguments</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.5.3 <a href = \"#date-time-examples\">Examples of Date and Time\n    Formatting</a><br/>\n    &#160;&#160;&#160;&#160;16.6 <a href = \"#misc-func\">Miscellaneous\n    Additional Functions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.6.1 <a href = \"#current-function\">current</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.6.2 <a href = \"#unparsed-entity-uri\">unparsed-entity-uri</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.6.3 <a href = \"#unparsed-entity-public-id\">unparsed-entity-public-id</a><br/>\n\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.6.4 <a href = \"#generate-id\">generate-id</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;16.6.5 <a href = \"#system-property\">system-property</a><br/>\n    17 <a href = \"#message\">Messages</a><br/>\n    18 <a href = \"#extension\">Extensibility and Fallback</a><br/>\n    &#160;&#160;&#160;&#160;18.1 <a href = \"#extension-functions\">Extension Functions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.1.1 <a href = \"#testing-function-availability\">Testing Availability of\n    Functions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.1.2 <a href = \"#calling-extension-functions\">Calling Extension\n    Functions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.1.3 <a href = \"#external-objects\">External Objects</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.1.4 <a href = \"#testing-type-availability\">Testing Availability of\n    Types</a><br/>\n    &#160;&#160;&#160;&#160;18.2 <a href = \"#extension-instruction\">Extension Instructions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.2.1 <a href = \"#designating-extension-namespace\">Designating an Extension\n    Namespace</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.2.2 <a href = \"#testing-instruction-available\">Testing Availability of\n    Instructions</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;18.2.3 <a href = \"#fallback\">Fallback</a><br/>\n    19 <a href = \"#result-trees\">Final Result Trees</a><br/>\n    &#160;&#160;&#160;&#160;19.1 <a href = \"#creating-result-trees\">Creating Final Result Trees</a><br/>\n    &#160;&#160;&#160;&#160;19.2 <a href = \"#validation\">Validation</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19.2.1 <a href = \"#validating-constructed-nodes\">Validating Constructed Elements\n    and Attributes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19.2.1.1\n    <a href = \"#validating-using-validation-attribute\">Validation\n    using the [xsl:]validation Attribute</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19.2.1.2\n    <a href = \"#validation-xsl-type\">Validation using the [xsl:]type\n    Attribute</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19.2.1.3\n    <a href = \"#validation-process\">The Validation Process</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19.2.2 <a href = \"#validating-document-nodes\">Validating Document\n    Nodes</a><br/>\n    20 <a href = \"#serialization\">Serialization</a><br/>\n    &#160;&#160;&#160;&#160;20.1 <a href = \"#character-maps\">Character Maps</a><br/>\n    &#160;&#160;&#160;&#160;20.2 <a href = \"#disable-output-escaping\">Disabling Output Escaping</a><br/>\n    21 <a href = \"#conformance\">Conformance</a><br/>\n    &#160;&#160;&#160;&#160;21.1 <a href = \"#basic-conformance\">Basic\n    XSLT Processor</a><br/>\n    &#160;&#160;&#160;&#160;21.2 <a href = \"#schema-aware-conformance\">Schema-Aware XSLT\n    Processor</a><br/>\n    &#160;&#160;&#160;&#160;21.3 <a href = \"#serialization-feature\">Serialization Feature</a><br/>\n    &#160;&#160;&#160;&#160;21.4 <a href = \"#backwards-compatibility-feature\">Backwards Compatibility\n    Feature</a><br/></p>\n\n    <h3><a name = \"appendices\" id = \"appendices\"></a>Appendices</h3>\n\n    <p class = \"toc\">A <a href = \"#references\">References</a><br/>\n    &#160;&#160;&#160;&#160;A.1 <a href = \"#normative-references\">Normative References</a><br/>\n    &#160;&#160;&#160;&#160;A.2 <a href = \"#other-references\">Other\n    References</a><br/>\n    B <a href = \"#xslt-mime-definition\">The XSLT Media Type</a><br/>\n    &#160;&#160;&#160;&#160;B.1 <a href = \"#media-type-registration\">Registration of MIME Media Type\n    application/xslt+xml</a><br/>\n    &#160;&#160;&#160;&#160;B.2 <a href = \"#media-type-fragid\">Fragment Identifiers</a><br/>\n    C <a href = \"#glossary\">Glossary</a> (Non-Normative)<br/>\n    D <a href = \"#element-syntax-summary\">Element Syntax Summary</a>\n    (Non-Normative)<br/>\n    E <a href = \"#error-summary\">Summary of Error Conditions</a>\n    (Non-Normative)<br/>\n    F <a href = \"#implementation-defined-features\">Checklist of\n    Implementation-Defined Features</a> (Non-Normative)<br/>\n    G <a href = \"#schema-for-xslt\">Schema for XSLT Stylesheets</a>\n    (Non-Normative)<br/>\n    H <a href = \"#acknowledgements\">Acknowledgements</a>\n    (Non-Normative)<br/>\n    I <a href = \"#requirements-checklist\">Checklist of\n    Requirements</a> (Non-Normative)<br/>\n    J <a href = \"#changes\">Changes from XSLT 1.0</a>\n    (Non-Normative)<br/>\n    &#160;&#160;&#160;&#160;J.1 <a href = \"#incompatibilities\">Incompatible Changes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.1 <a href = \"#incompatibility-stripping\">Tree construction: whitespace\n    stripping</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.2 <a href = \"#incompatibility-serialization\">Changes in Serialization\n    Behavior</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.3 <a href = \"#backwards-compatibility-behavior\">Backwards Compatibility\n    Behavior</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.4 <a href = \"#incompatibility-without-schema\">Incompatibility in the\n    Absence of a Schema</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.5 <a href = \"#compatibility-with-schema\">Compatibility in the Presence of a\n    Schema</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.1.6 <a href = \"#xpath-compatibility\">XPath 2.0 Backwards\n    Compatibility</a><br/>\n    &#160;&#160;&#160;&#160;J.2 <a href = \"#changes-since-1.0\">New\n    Functionality</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.2.1 <a href = \"#pervasive-changes\">Pervasive changes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.2.2 <a href = \"#major-features\">Major Features</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.2.3 <a href = \"#minor-changes\">Minor Changes</a><br/>\n    &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J.2.4 <a href = \"#changes-2007-01\">Changes since Proposed\n    Recommendation</a><br/></p>\n  </div><hr/><div class = \"body\">\n    <div class = \"div1\">\n      <h2><a name = \"introduction\" id = \"introduction\"></a>1\n      Introduction</h2>\n\n      <div class = \"div2\">\n        <h3><a name = \"what-is-xslt\" id = \"what-is-xslt\"></a>1.1 What\n        is XSLT?</h3>\n\n        <p>This specification defines the syntax and semantics of\n        the XSLT 2.0 language.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stylesheet\" id = \"dt-stylesheet\" title = \"stylesheet\"></a>A\n        transformation in the XSLT language is expressed in the\n        form of a <b>stylesheet</b>, whose syntax is well-formed\n        XML <a href = \"#REC-xml\">[XML 1.0]</a> conforming to the\n        Namespaces in XML Recommendation <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a>.<span class = \"definition\">]</span></p>\n\n        <p>A stylesheet generally includes elements that are\n        defined by XSLT as well as elements that are not defined by\n        XSLT. XSLT-defined elements are distinguished by use of the\n        namespace <code>http://www.w3.org/1999/XSL/Transform</code>\n        (see <a href = \"#xslt-namespace\"><i>3.1 XSLT\n        Namespace</i></a>), which is referred to in this\n        specification as the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>. Thus this\n        specification is a definition of the syntax and semantics\n        of the XSLT namespace.</p>\n\n        <p>The term <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> reflects the fact that one\n        of the important roles of XSLT is to add styling\n        information to an XML source document, by transforming it\n        into a document consisting of XSL formatting objects (see\n        <a href = \"#xsl\">[Extensible Stylesheet Language (XSL)]</a>),\n        or into another presentation-oriented format such as HTML,\n        XHTML, or SVG. However, XSLT is used for a wide range of\n        transformation tasks, not exclusively for formatting and\n        presentation applications.</p>\n\n        <p>A transformation expressed in XSLT describes rules for\n        transforming zero or more source trees into one or more\n        result trees. The structure of these trees is described in\n        <a href = \"#xpath-datamodel\">[Data Model]</a>. The\n        transformation is achieved by a set of <a title = \"template rule\" href = \"#dt-template-rule\">template\n        rules</a>. A template rule associates a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, which matches nodes in the\n        source document, with a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.\n        In many cases, evaluating the sequence constructor will\n        cause new nodes to be constructed, which can be used to\n        produce part of a result tree. The structure of the result\n        trees can be completely different from the structure of the\n        source trees. In constructing a result tree, nodes from the\n        source trees can be filtered and reordered, and arbitrary\n        structure can be added. This mechanism allows a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to be\n        applicable to a wide class of documents that have similar\n        source tree structures.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-principal-stylesheet-module\" id = \"dt-principal-stylesheet-module\" title = \"principal stylesheet module\"></a>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> may consist of several\n        <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a>, contained\n        in different XML documents. For a given transformation, one\n        of these functions as the <b>principal stylesheet\n        module</b>. The complete <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is assembled by finding the\n        <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> referenced\n        directly or indirectly from the principal stylesheet module\n        using <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> and\n        <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n        elements: see <a href = \"#include\"><i>3.10.2 Stylesheet\n        Inclusion</i></a> and <a href = \"#import\"><i>3.10.3\n        Stylesheet Import</i></a>.<span class = \"definition\">]</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"whats-new-in-xslt2\" id = \"whats-new-in-xslt2\"></a>1.2 What's New in XSLT 2.0?</h3>\n\n        <p>XSLT 1.0 was published in November 1999, and version 2.0\n        represents a significant increase in the capability of the\n        language. A detailed list of changes is included in\n        <a href = \"#changes\"><i>J Changes from XSLT 1.0</i></a>. XSLT\n        2.0 has been developed in parallel with XPath 2.0 (see\n        <a href = \"#xpath20\">[XPath 2.0]</a>), so the changes to\n        XPath must be considered alongside the changes to XSLT.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"concepts\" id = \"concepts\"></a>2 Concepts</h2>\n\n      <div class = \"div2\">\n        <h3><a name = \"terminology\" id = \"terminology\"></a>2.1\n        Terminology</h3>\n\n        <p>For a full glossary of terms, see <a href = \"#glossary\"><i>C Glossary</i></a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-processor\" id = \"dt-processor\" title = \"processor\"></a>The\n        software responsible for transforming source trees into\n        result trees using an XSLT stylesheet is referred to as the\n        <b>processor</b>. This is sometimes expanded to <em>XSLT\n        processor</em> to avoid any confusion with other\n        processors, for example an XML processor.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-implementation\" id = \"dt-implementation\" title = \"implementation\"></a>A specific product that performs the\n        functions of an <a title = \"processor\" href = \"#dt-processor\">XSLT processor</a> is referred to as an\n        <b>implementation</b> <span class = \"definition\">]</span>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-result-tree\" id = \"dt-result-tree\" title = \"result tree\"></a>The term <b>result tree</b> is used to\n        refer to any tree constructed by <a title = \"instruction\" href = \"#dt-instruction\">instructions</a> in the stylesheet.\n        A result tree is either a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> or a\n        <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-final-result-tree\" id = \"dt-final-result-tree\" title = \"final result tree\"></a>A <b>final result tree</b> is a\n        <a title = \"result tree\" href = \"#dt-result-tree\">result\n        tree</a> that forms part of the final output of a\n        transformation. Once created, the contents of a final\n        result tree are not accessible within the stylesheet\n        itself.<span class = \"definition\">]</span> The <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction always creates a final result tree, and a final\n        result tree may also be created implicitly by the <a title = \"initial template\" href = \"#dt-initial-template\">initial\n        template</a>. The conditions under which this happens are\n        described in <a href = \"#executing-a-transformation\"><i>2.4\n        Executing a Transformation</i></a>. A final result tree\n        <span class = \"verb\">may</span> be serialized as described in\n        <a href = \"#serialization\"><i>20 Serialization</i></a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-source-tree\" id = \"dt-source-tree\" title = \"source tree\"></a>The term <b>source tree</b> means any\n        tree provided as input to the transformation. This includes\n        the document containing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a> if\n        any, documents containing nodes supplied as the values of\n        <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>,\n        documents obtained from the results of functions such as\n        <a href = \"#function-document\"><code>document</code></a>,\n        <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup>, and <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n        collection</code></a><sup><small>FO</small></sup>, and\n        documents returned by extension functions or extension\n        instructions. In the context of a particular XSLT\n        instruction, the term <b>source tree</b> means any tree\n        provided as input to that instruction; this may be a source\n        tree of the transformation as a whole, or it may be a\n        <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> produced during the\n        course of the transformation.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-temporary-tree\" id = \"dt-temporary-tree\" title = \"temporary tree\"></a>The term <b>temporary tree</b> means\n        any tree that is neither a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a> nor a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a>.<span class = \"definition\">]</span> Temporary\n        trees are used to hold intermediate results during the\n        execution of the transformation.</p>\n\n        <p>In this specification the phrases <span class = \"verb\">must</span>, <span class = \"verb\">must not</span>,\n        <span class = \"verb\">should</span>, <span class = \"verb\">should\n        not</span>, <span class = \"verb\">may</span>, <span class = \"verb\">required</span>, and <span class = \"verb\">recommended</span> are to be interpreted as\n        described in <a href = \"#RFC2119\">[RFC2119]</a>.</p>\n\n        <p>Where the phrase <span class = \"verb\">must</span>,\n        <span class = \"verb\">must not</span>, or <span class = \"verb\">required</span> relates to the behavior of the XSLT\n        processor, then an implementation is not conformant unless\n        it behaves as specified, subject to the more detailed rules\n        in <a href = \"#conformance\"><i>21 Conformance</i></a>.</p>\n\n        <p>Where the phrase <span class = \"verb\">must</span>,\n        <span class = \"verb\">must not</span>, or <span class = \"verb\">required</span> relates to a stylesheet, then the\n        processor <span class = \"verb\">must</span> enforce this\n        constraint on stylesheets by reporting an error if the\n        constraint is not satisfied.</p>\n\n        <p>Where the phrase <span class = \"verb\">should</span>,\n        <span class = \"verb\">should not</span>, or <span class = \"verb\">recommended</span> relates to a stylesheet, then a\n        processor <span class = \"verb\">may</span> produce warning\n        messages if the constraint is not satisfied, but\n        <span class = \"verb\">must not</span> treat this as an\n        error.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-implementation-defined\" id = \"dt-implementation-defined\" title = \"implementation-defined\"></a>In this specification,\n        the term <b>implementation-defined</b> refers to a feature\n        where the implementation is allowed some flexibility, and\n        where the choices made by the implementation <span class = \"verb\">must</span> be described in documentation that\n        accompanies any conformance claim.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-implementation-dependent\" id = \"dt-implementation-dependent\" title = \"implementation-dependent\"></a>The term\n        <b>implementation-dependent</b> refers to a feature where\n        the behavior <span class = \"verb\">may</span> vary from one\n        implementation to another, and where the vendor is not\n        expected to provide a full specification of the\n        behavior.<span class = \"definition\">]</span> (This might\n        apply, for example, to limits on the size of source\n        documents that can be transformed.)</p>\n\n        <p>In all cases where this specification leaves the\n        behavior implementation-defined or\n        implementation-dependent, the implementation has the option\n        of providing mechanisms that allow the user to influence\n        the behavior.</p>\n\n        <p>A paragraph labeled as a <b>Note</b> or described as an\n        <b>example</b> is non-normative.</p>\n\n        <p>Many terms used in this document are defined in the\n        XPath specification <a href = \"#xpath20\">[XPath 2.0]</a> or\n        the XDM specification <a href = \"#xpath-datamodel\">[Data\n        Model]</a>. Particular attention is drawn to the\n        following:</p>\n\n        <ul>\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-atomization\" id = \"dt-atomization\" title = \"atomize\"></a>The term <b>atomization</b> is defined in\n            <a href = \"http://www.w3.org/TR/xpath20/#id-atomization\">Section\n            2.4.2 Atomization</a><sup><small>XP</small></sup>. It\n            is a process that takes as input a sequence of nodes\n            and atomic values, and returns a sequence of atomic\n            values, in which the nodes are replaced by their typed\n            values as defined in <a href = \"#xpath-datamodel\">[Data\n            Model]</a>.<span class = \"definition\">]</span> For some\n            nodes (for example, elements with element-only\n            content), atomization generates a <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic\n            error</a>.</p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-typed-value\" id = \"dt-typed-value\" title = \"typed value\"></a>The term <b>typed value</b> is\n            defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-typed-value\">Section\n            5.15 typed-value\n            Accessor</a><sup><small>DM</small></sup>. Every node\n            except an element defined in the schema with\n            element-only content has a <a title = \"string value\" href = \"#dt-string-value\">typed value</a>. For example,\n            the <a title = \"typed value\" href = \"#dt-typed-value\">typed\n            value</a> of an attribute of type\n            <code>xs:IDREFS</code> is a sequence of zero or more\n            <code>xs:IDREF</code> values.<span class = \"definition\">]</span></p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-string-value\" id = \"dt-string-value\" title = \"string value\"></a>The term <b>string value</b> is\n            defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-string-value\">\n            Section 5.13 string-value\n            Accessor</a><sup><small>DM</small></sup>. Every node\n            has a <a title = \"string value\" href = \"#dt-string-value\">string value</a>. For example, the\n            <a title = \"string value\" href = \"#dt-string-value\">string\n            value</a> of an element is the concatenation of the\n            <a title = \"string value\" href = \"#dt-string-value\">string\n            values</a> of all its descendant text\n            nodes.<span class = \"definition\">]</span></p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-compatibility-mode\" id = \"dt-compatibility-mode\" title = \"XPath 1.0 compatibility mode\"></a>The term\n            <b>XPath 1.0 compatibility mode</b> is defined in\n            <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section\n            2.1.1 Static Context</a><sup><small>XP</small></sup>.\n            This is a setting in the static context of an XPath\n            expression; it has two values, <code>true</code> and\n            <code>false</code>. When the value is set to true, the\n            semantics of function calls and certain other\n            operations are adjusted to give a greater degree of\n            backwards compatibility between XPath 2.0 and XPath\n            1.0.<span class = \"definition\">]</span></p>\n          </li>\n        </ul>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-core-function\" id = \"dt-core-function\" title = \"core function\"></a>The term <b>core function</b> means a\n        function that is specified in <a href = \"#xpath-functions\">[Functions and Operators]</a> and that\n        is in the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n        namespace</a>.<span class = \"definition\">]</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"notation\" id = \"notation\"></a>2.2 Notation</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-xslt-element\" id = \"dt-xslt-element\" title = \"XSLT element\"></a>An <b>XSLT element</b> is an element in\n        the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> whose syntax and\n        semantics are defined in this specification.<span class = \"definition\">]</span> For a non-normative list of XSLT\n        elements, see <a href = \"#element-syntax-summary\"><i>D\n        Element Syntax Summary</i></a>.</p>\n\n        <p>In this document the specification of each <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a> is\n        preceded by a summary of its syntax in the form of a model\n        for elements of that element type. A full list of all these\n        specifications can be found in <a href = \"#element-syntax-summary\"><i>D Element Syntax\n        Summary</i></a>. The meaning of syntax summary notation is\n        as follows:</p>\n\n        <ul>\n          <li>\n            <p>An attribute that is <span class = \"verb\">required</span> is shown with its name in bold.\n            An attribute that may be omitted is shown with a\n            question mark following its name.</p>\n          </li>\n\n          <li>\n            <p>An attribute that is <a title = \"deprecated\" href = \"#dt-deprecated\">deprecated</a> is shown in a grayed\n            font within square brackets.</p>\n          </li>\n\n          <li>\n            <p>The string that occurs in the place of an attribute\n            value specifies the allowed values of the attribute. If\n            this is surrounded by curly brackets\n            (<code>{...}</code>), then the attribute value is\n            treated as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n            template</a>, and the string occurring within curly\n            brackets specifies the allowed values of the result of\n            evaluating the attribute value template. Alternative\n            allowed values are separated by <code>|</code>. A\n            quoted string indicates a value equal to that specific\n            string. An unquoted, italicized name specifies a\n            particular type of value.</p>\n\n            <p>In all cases where this specification states that\n            the value of an attribute <span class = \"verb\">must</span> be one of a limited set of values,\n            leading and trailing whitespace in the attribute value\n            is ignored. In the case of an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n            template</a>, this applies to the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n            value</a> obtained when the attribute value template is\n            expanded.</p>\n          </li>\n\n          <li>\n            <p>Unless the element is <span class = \"verb\">required</span> to be empty, the model element\n            contains a comment specifying the allowed content. The\n            allowed content is specified in a similar way to an\n            element type declaration in XML; <em>sequence\n            constructor</em> means that any mixture of text nodes,\n            <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n            elements</a>, <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a>,\n            and <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a> from the <a title = \"instruction\" href = \"#dt-instruction\">instruction</a>\n            category is allowed; <em>other-declarations</em> means\n            that any mixture of XSLT elements from the <a title = \"declaration\" href = \"#dt-declaration\">declaration</a>\n            category, other than <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>, is\n            allowed, together with <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a>.</p>\n          </li>\n\n          <li>\n            <p>The element is prefaced by comments indicating if it\n            belongs to the <code>instruction</code> category or\n            <code>declaration</code> category or both. The category\n            of an element only affects whether it is allowed in the\n            content of elements that allow a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> or\n            <em>other-declarations</em>.</p>\n          </li>\n        </ul>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e659\" id = \"d5e659\"></a>Example: Syntax\n            Notation\n          </div>\n\n          <p>This example illustrates the notation used to describe\n          <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n          elements</a>.</p>\n\n          <p class = \"element-syntax\"><a name = \"element-example-element\" id = \"element-example-element\"></a><code>&lt;!-- Category:\n          instruction --&gt;<br/>\n          &lt;xsl:example-element<br/>\n          &#160;&#160;<b>select</b> = <var>expression</var><br/>\n          &#160;&#160;debug? = { \"yes\" | \"no\" }&gt;<br/>\n          &#160;&#160;&lt;!-- Content: ((<a href = \"#XSLT_element-variable\">xsl:variable</a> | <a href = \"#XSLT_element-param\">xsl:param</a>)*, <a href = \"#XSLT_element-sequence\">xsl:sequence</a>) --&gt;<br/>\n          &lt;/xsl:example-element&gt;</code></p>\n\n          <p>This example defines a (non-existent) element\n          <code>xsl:example-element</code>. The element is\n          classified as an instruction. It takes a mandatory\n          <code>select</code> attribute, whose value is an XPath\n          <a title = \"expression\" href = \"#dt-expression\">expression</a>, and an optional\n          <code>debug</code> attribute, whose value <span class = \"verb\">must</span> be either <code>yes</code> or\n          <code>no</code>; the curly brackets indicate that the\n          value can be defined as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a>, allowing a value such as\n          <code>debug=\"{$debug}\"</code>, where the <a title = \"variable\" href = \"#dt-variable\">variable</a>\n          <code>debug</code> is evaluated to yield\n          <code>\"yes\"</code> or <code>\"no\"</code> at run-time.</p>\n\n          <p>The content of an <code>xsl:example-element</code>\n          instruction is defined to be a sequence of zero or more\n          <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>\n          and <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n          elements, followed by an <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>\n          element.</p>\n        </div>\n\n        <p><a name = \"err-XTSE0010\" id = \"err-XTSE0010\"><span class = \"error\">[ERR XTSE0010]</span></a> A <a title = \"static error\" href = \"#dt-static-error\">static error</a> is signaled if an\n        XSLT-defined element is used in a context where it is not\n        permitted, if a <span class = \"verb\">required</span>\n        attribute is omitted, or if the content of the element does\n        not correspond to the content that is allowed for the\n        element.</p>\n\n        <p>Attributes are validated as follows. These rules apply\n        to the value of the attribute after removing leading and\n        trailing whitespace.</p>\n\n        <ul>\n          <li>\n            <p><a name = \"err-XTSE0020\" id = \"err-XTSE0020\"><span class = \"error\">[ERR\n            XTSE0020]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an\n            attribute (other than an attribute written using curly\n            brackets in a position where an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n            template</a> is permitted) contains a value that is not\n            one of the permitted values for that attribute.</p>\n          </li>\n\n          <li>\n            <p><a name = \"err-XTDE0030\" id = \"err-XTDE0030\"><span class = \"error\">[ERR\n            XTDE0030]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n            error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of an\n            attribute written using curly brackets, in a position\n            where an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n            template</a> is permitted, is a value that is not one\n            of the permitted values for that attribute. If the\n            processor is able to detect the error statically (for\n            example, when any XPath expressions within the curly\n            brackets can be evaluated statically), then the\n            processor may optionally signal this as a static\n            error.</p>\n          </li>\n        </ul>\n\n        <p>Special rules apply if the construct appears in part of\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that is processed with\n        <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a>: see <a href = \"#forwards\"><i>3.9\n        Forwards-Compatible Processing</i></a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-deprecated\" id = \"dt-deprecated\" title = \"deprecated\"></a>Some constructs defined in this\n        specification are described as being <b>deprecated</b>. The\n        use of this term implies that stylesheet authors\n        <span class = \"verb\">should not</span> use the construct, and\n        that the construct may be removed in a later version of\n        this specification.<span class = \"definition\">]</span> All\n        constructs that are <a title = \"deprecated\" href = \"#dt-deprecated\">deprecated</a> in this specification are\n        also (as it happens) optional features that <a title = \"implementation\" href = \"#dt-implementation\">implementations</a> are <span class = \"verb\">not required</span> to provide.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This working draft includes a non-normative XML Schema\n          for XSLT <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> (see\n          <a href = \"#schema-for-xslt\"><i>G Schema for XSLT\n          Stylesheets</i></a>). The syntax summaries described in\n          this section are normative.</p>\n        </div>\n\n        <p>XSLT defines a set of standard functions which are\n        additional to those defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>. The\n        signatures of these functions are described using the same\n        notation as used in <a href = \"#xpath-functions\">[Functions\n        and Operators]</a>. The names of these functions are all in\n        the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n        namespace</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"initiating\" id = \"initiating\"></a>2.3 Initiating\n        a Transformation</h3>\n\n        <p>This document does not specify any application\n        programming interfaces or other interfaces for initiating a\n        transformation. This section, however, describes the\n        information that is supplied when a transformation is\n        initiated. Except where otherwise indicated, the\n        information is <span class = \"verb\">required</span>.</p>\n\n        <p>Implementations <span class = \"verb\">may</span> allow a\n        transformation to run as two or more phases, for example\n        parsing, compilation and execution. Such a distinction is\n        outside the scope of this specification, which treats\n        transformation as a single process controlled using a set\n        of <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a>, supplied in\n        the form of XML documents.</p>\n\n        <p>The following information is supplied to execute a\n        transformation:</p>\n\n        <ul>\n          <li>\n            <p>The <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> that is\n            to act as the <a title = \"principal stylesheet module\" href = \"#dt-principal-stylesheet-module\">principal\n            stylesheet module</a> for the transformation. The\n            complete <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is assembled by\n            recursively expanding the <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> and\n            <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n            declarations in the principal stylesheet module, as\n            described in <a href = \"#include\"><i>3.10.2 Stylesheet\n            Inclusion</i></a> and <a href = \"#import\"><i>3.10.3\n            Stylesheet Import</i></a>.</p>\n          </li>\n\n          <li>\n            <p>A set (possibly empty) of values for <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>\n            (see <a href = \"#global-variables\"><i>9.5 Global\n            Variables and Parameters</i></a>). These values are\n            available for use within <a title = \"expression\" href = \"#dt-expression\">expressions</a> in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-initial-context-node\" id = \"dt-initial-context-node\" title = \"initial context node\"></a>A node that acts as\n            the <b>initial context node</b> for the transformation.\n            This node is accessible within the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> as\n            the initial value of the XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> <code>.</code>\n            (dot) and <code>self::node()</code>, as described in\n            <a href = \"#focus\"><i>5.4.3.1 Maintaining Position: the\n            Focus</i></a><span class = \"definition\">]</span>.</p>\n\n            <p>If no initial context node is supplied, then the\n            <a title = \"context item\" href = \"#dt-context-item\">context\n            item</a>, <a title = \"context position\" href = \"#dt-context-position\">context position</a>, and\n            <a title = \"context size\" href = \"#dt-context-size\">context\n            size</a> will initially be undefined, and the\n            evaluation of any expression that references these\n            values will result in a dynamic error. (Note that the\n            initial context size and context position will always\n            be 1 (one) when an initial context node is supplied,\n            and will be undefined if no initial context node is\n            supplied).</p>\n          </li>\n\n          <li>\n            <p>Optionally, the name of a <a title = \"named template\" href = \"#dt-named-template\">named template</a> which is\n            to be executed as the entry point to the\n            transformation. This template <span class = \"verb\">must</span> exist within the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. If\n            no named template is supplied, then the transformation\n            starts with the <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> that best matches\n            the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>,\n            according to the rules defined in <a href = \"#conflict\"><i>6.4 Conflict Resolution for Template\n            Rules</i></a>. Either a named template, or an initial\n            context node, or both, <span class = \"verb\">must</span>\n            be supplied.</p>\n          </li>\n\n          <li>\n            <p>Optionally, an initial <a title = \"mode\" href = \"#dt-mode\">mode</a>. <span>This <span class = \"verb\">must</span> either be the default mode, or a\n            mode that is explicitly named in the <code>mode</code>\n            attribute of an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n            declaration within the stylesheet</span>. If an initial\n            mode is supplied, then in searching for the <a title = \"template rule\" href = \"#dt-template-rule\">template\n            rule</a> that best matches the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>,\n            the processor considers only those rules that apply to\n            the initial mode. If no initial mode is supplied, the\n            <a title = \"default mode\" href = \"#dt-default-mode\">default\n            mode</a> is used.</p>\n          </li>\n\n          <li>\n            <p>A base output URI. <span class = \"definition\">[Definition:&#160;</span><a name = \"dt-base-output-uri\" id = \"dt-base-output-uri\" title = \"base output URI\"></a> The <b>base output URI</b> is a\n            URI to be used as the base URI when resolving a\n            relative URI allocated to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n            result tree</a>. If the transformation generates more\n            than one final result tree, then typically each one\n            will be allocated a URI relative to this base URI.\n            <span class = \"definition\">]</span> <span>The way in\n            which a base output URI is established is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</span></p>\n          </li>\n\n          <li>\n            <p>A mechanism for obtaining a document node and a\n            media type, given an absolute URI. The total set of\n            available documents (modeled as a mapping from URIs to\n            document nodes) forms part of the context for\n            evaluating XPath expressions, specifically the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n            <small>FO</small></sup> function. The XSLT <a href = \"#function-document\"><code>document</code></a> function\n            additionally requires the media type of the resource\n            representation, for use in interpreting any fragment\n            identifier present within a URI Reference.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>The set of documents that are available to the\n              stylesheet is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>,\n              as is the processing that is carried out to construct\n              a tree representing the resource retrieved using a\n              given URI. Some possible ways of constructing a\n              document (specifically, rules for constructing a\n              document from an Infoset or from a PSVI) are\n              described in <a href = \"#xpath-datamodel\">[Data\n              Model]</a>.</p>\n            </div>\n          </li>\n        </ul>\n\n        <p><a name = \"err-XTDE0040\" id = \"err-XTDE0040\"><span class = \"error\">[ERR XTDE0040]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies a template\n        name that does not match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of a named\n        template defined in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n        <p><a name = \"err-XTDE0045\" id = \"err-XTDE0045\"><span class = \"error\">[ERR XTDE0045]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies an initial\n        <a title = \"mode\" href = \"#dt-mode\">mode</a> (other than the\n        default mode) that does not match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> in the\n        <code>mode</code> attribute of any template defined in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n        <p><a name = \"err-XTDE0047\" id = \"err-XTDE0047\"><span class = \"error\">[ERR XTDE0047]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies both an\n        initial <a title = \"mode\" href = \"#dt-mode\">mode</a> and an\n        initial template.</p>\n\n        <p><a name = \"err-XTDE0050\" id = \"err-XTDE0050\"><span class = \"error\">[ERR XTDE0050]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the stylesheet that is invoked declares a\n        visible <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a> with\n        <code>required=\"yes\"</code> and no value for this parameter\n        is supplied during the invocation of the stylesheet. A\n        stylesheet parameter is visible if it is not masked by\n        another global variable or parameter with the same name and\n        higher <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-initial-template\" id = \"dt-initial-template\" title = \"initial template\"></a>The transformation is performed by\n        evaluating an <b>initial template</b>. If a <a title = \"named template\" href = \"#dt-named-template\">named\n        template</a> is supplied when the transformation is\n        initiated, then this is the initial template;\n        <span>otherwise, the initial template is the <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>\n        selected according to the rules of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction for processing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a> in the\n        initial <a title = \"mode\" href = \"#dt-mode\">mode</a>.</span><span class = \"definition\">]</span></p>\n\n        <p>Parameters passed to the transformation by the client\n        application are matched against <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a> (see\n        <a href = \"#global-variables\"><i>9.5 Global Variables and\n        Parameters</i></a>), not against the <a title = \"template parameter\" href = \"#dt-template-parameter\">template\n        parameters</a> declared within the <a title = \"initial template\" href = \"#dt-initial-template\">initial\n        template</a>. All <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameters</a> within the\n        initial template to be executed will take their default\n        values.</p>\n\n        <p><a name = \"err-XTDE0060\" id = \"err-XTDE0060\"><span class = \"error\">[ERR XTDE0060]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> defines a\n        <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> that\n        specifies <code>required=\"yes\"</code>.</p>\n\n        <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> can process further source\n        documents in addition to those supplied when the\n        transformation is invoked. These additional documents can\n        be loaded using the functions <a href = \"#function-document\"><code>document</code></a> (see\n        <a href = \"#document\"><i>16.1 Multiple Source\n        Documents</i></a>) or <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup> or <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n        collection</code></a><sup><small>FO</small></sup> (see\n        <a href = \"#xpath-functions\">[Functions and Operators]</a>),\n        or they can be supplied as <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>\n        (see <a href = \"#global-variables\"><i>9.5 Global Variables\n        and Parameters</i></a>), or as the result of an <a title = \"extension function\" href = \"#dt-extension-function\">extension function</a> (see\n        <a href = \"#extension-functions\"><i>18.1 Extension\n        Functions</i></a>).</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"executing-a-transformation\" id = \"executing-a-transformation\"></a>2.4 Executing a\n        Transformation</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-template-rule\" id = \"dt-template-rule\" title = \"template rule\"></a>A stylesheet contains a set of\n        <b>template rules</b> (see <a href = \"#rules\"><i>6 Template\n        Rules</i></a>). A template rule has three parts: a\n        <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that is\n        matched against nodes, a (possibly empty) set of <a title = \"template parameter\" href = \"#dt-template-parameter\">template\n        parameters</a>, and a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that is\n        evaluated to produce a sequence of items.<span class = \"definition\">]</span> In many cases these items are newly\n        constructed nodes, which are then written to a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n\n        <p>A transformation as a whole is executed by evaluating\n        the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> of the\n        <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> as described in\n        <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>.</p>\n\n        <p>If the initial template has an <code>as</code>\n        attribute, then the result sequence of the initial template\n        is checked against the required type in the same way as for\n        any other template. If this result sequence is non-empty,\n        then it is used to construct an implicit <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a>, following the rules described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>: the effect is as if the initial\n        template <var>T</var> were called by an implicit template\n        of the form:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:template name=\"IMPLICIT\"&gt;\n  &lt;xsl:result-document href=\"\"&gt;\n    &lt;xsl:call-template name=\"T\"/&gt;\n  &lt;/xsl:result-document&gt;\n&lt;/xsl:template&gt;\n</pre>\n        </div>\n\n        <p>An implicit result tree is also created when the result\n        sequence is empty, provided that no <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction has been evaluated during the course of the\n        transformation. In this situation the implicit result tree\n        will consist of a document node with no children.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This means that there is always at least one result\n          tree. It also means that if the content of the initial\n          template is a single <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction, as in the example above, then only one\n          result tree is produced, not two. It is useful to make\n          the result document explicit as this is the only way of\n          invoking document-level validation.</p>\n\n          <p>If the result of the initial template is non-empty,\n          and an explicit <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction has been evaluated with the empty attribute\n          <code>href=\"\"</code>, then an error will occur\n          <span class = \"error\">[see <a href = \"#err-XTDE1490\">ERR\n          XTDE1490</a>]</span>, since it is not possible to create\n          two final result trees with the same URI.</p>\n        </div>\n\n        <p>A <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is a\n        sequence of sibling nodes in the stylesheet, each of which\n        is either an <a title = \"XSLT instruction\" href = \"#dt-xslt-instruction\">XSLT instruction</a>, a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>, a\n        text node, or an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-instruction\" id = \"dt-instruction\" title = \"instruction\"></a>An <b>instruction</b> is either an\n        <a title = \"XSLT instruction\" href = \"#dt-xslt-instruction\">XSLT instruction</a> or an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n        instruction</a>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-xslt-instruction\" id = \"dt-xslt-instruction\" title = \"XSLT instruction\"></a>An <b>XSLT instruction</b> is an\n        <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n        element</a> whose syntax summary in this specification\n        contains the annotation <code>&lt;!-- category: instruction\n        --&gt;</code>.<span class = \"definition\">]</span></p>\n\n        <p><a title = \"extension instruction\" href = \"#dt-extension-instruction\">Extension instructions</a> are\n        described in <a href = \"#extension-instruction\"><i>18.2\n        Extension Instructions</i></a>.</p>\n\n        <p>The main categories of <a title = \"XSLT instruction\" href = \"#dt-xslt-instruction\">XSLT instruction</a> are as\n        follows:</p>\n\n        <ul>\n          <li>\n            <p>instructions that create new nodes: <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n            <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>,\n            <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a>,\n            <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>,\n            <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>,\n            <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>;</p>\n          </li>\n\n          <li>\n            <p>an instruction that returns an arbitrary sequence by\n            evaluating an XPath expression: <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>;</p>\n          </li>\n\n          <li>\n            <p>instructions that cause conditional or repeated\n            evaluation of nested instructions: <a href = \"#XSLT_element-if\"><code>xsl:if</code></a>, <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a>, <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n            <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>;</p>\n          </li>\n\n          <li>\n            <p>instructions that invoke templates: <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n            <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n            <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n            <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>;</p>\n          </li>\n\n          <li>\n            <p>Instructions that declare variables: <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>,\n            <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>;</p>\n          </li>\n\n          <li>\n            <p>other specialized instructions: <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>, <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>,\n            <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>,\n            <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>.</p>\n          </li>\n        </ul>\n\n        <p>Often, a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> will\n        include an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction, which selects a sequence of nodes to be\n        processed. Each of the selected nodes is processed by\n        searching the stylesheet for a matching <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>\n        and evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> of that\n        template rule. The resulting sequences of items are\n        concatenated, in order, to give the result of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction, as described in <a href = \"#applying-templates\"><i>6.3 Applying Template\n        Rules</i></a>; this sequence is often added to a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>. Since\n        the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructors</a> of the\n        selected <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a> may themselves\n        contain <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instructions, this results in a cycle of selecting nodes,\n        identifying <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a>, constructing\n        sequences, and constructing <a title = \"result tree\" href = \"#dt-result-tree\">result trees</a>, that recurses through a\n        <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"context\" id = \"context\"></a>2.5 The Evaluation\n        Context</h3>\n\n        <p>The results of some expressions and instructions in a\n        stylesheet may depend on information provided contextually.\n        This context information is divided into two categories:\n        the static context, which is known during static analysis\n        of the stylesheet, and the dynamic context, which is not\n        known until the stylesheet is evaluated. Although\n        information in the static context is known at analysis\n        time, it is sometimes used during stylesheet\n        evaluation.</p>\n\n        <p>Some context information can be set by means of\n        declarations within the stylesheet itself. For example, the\n        namespace bindings used for any XPath expression are\n        determined by the namespace declarations present in\n        containing elements in the stylesheet. Other information\n        may be supplied externally or implicitly: an example is the\n        current date and time.</p>\n\n        <p>The context information used in processing an XSLT\n        stylesheet includes as a subset all the context information\n        required when evaluating XPath expressions. The XPath 2.0\n        specification defines a static and dynamic context that the\n        host language (in this case, XSLT) may initialize, which\n        affects the results of XPath expressions used in that\n        context. XSLT augments the context with additional\n        information: this additional information is used firstly by\n        XSLT constructs outside the scope of XPath (for example,\n        the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n        element), and secondly, by functions that are defined in\n        the XSLT specification (such as <a href = \"#function-key\"><code>key</code></a> and <a href = \"#function-format-number\"><code>format-number</code></a>)\n        that are available for use in XPath expressions appearing\n        within a stylesheet.</p>\n\n        <p>The static context for an expression or other construct\n        in a stylesheet is determined by the place in which it\n        appears lexically. The details vary for different\n        components of the static context, but in general, elements\n        within a stylesheet module affect the static context for\n        their descendant elements within the same stylesheet\n        module.</p>\n\n        <p>The dynamic context is maintained as a stack. When an\n        instruction or expression is evaluated, it may add dynamic\n        context information to the stack; when evaluation is\n        complete, the dynamic context reverts to its previous\n        state. An expression that accesses information from the\n        dynamic context always uses the value at the top of the\n        stack.</p>\n\n        <p>The most commonly used component of the dynamic context\n        is the <a title = \"context item\" href = \"#dt-context-item\">context item</a>. This is an implicit\n        variable whose value is the item (it may be a node or an\n        atomic value) currently being processed. The value of the\n        context item can be referenced within an XPath expression\n        using the expression <code>.</code> (dot).</p>\n\n        <p>Full details of the static and dynamic context are\n        provided in <a href = \"#static-and-dynamic-context\"><i>5.4\n        The Static and Dynamic Context</i></a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"parsing-and-serialization\" id = \"parsing-and-serialization\"></a>2.6 Parsing and\n        Serialization</h3>\n\n        <p>An XSLT <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> describes a process that\n        constructs a set of <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> from a set\n        of <a title = \"source tree\" href = \"#dt-source-tree\">source\n        trees</a>.</p>\n\n        <p>The <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> does not describe how a\n        <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a> is constructed. <span>Some possible ways of\n        constructing source trees are described in <a href = \"#xpath-datamodel\">[Data Model]</a>.</span> Frequently an\n        <a title = \"implementation\" href = \"#dt-implementation\">implementation</a> will operate in\n        conjunction with an XML parser (or more strictly, in the\n        terminology of <a href = \"#REC-xml\">[XML 1.0]</a>, an <em>XML\n        processor</em>), to build a source tree from an input XML\n        document. An implementation <span class = \"verb\">may</span>\n        also provide an application programming interface allowing\n        the tree to be constructed directly, or allowing it to be\n        supplied in the form of a DOM Document object (see <a href = \"#DOM-Level-2-Core\">[DOM Level 2]</a>). This is outside the\n        scope of this specification. Users should be aware,\n        however, that since the input to the transformation is a\n        tree conforming to the <span>XDM</span> data model as\n        described in <a href = \"#xpath-datamodel\">[Data Model]</a>,\n        constructs that might exist in the original XML document,\n        or in the DOM, but which are not within the scope of the\n        data model, cannot be processed by the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> and\n        cannot be guaranteed to remain unchanged in the\n        transformation output. Such constructs include CDATA\n        section boundaries, the use of entity references, and the\n        DOCTYPE declaration and internal DTD subset.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-serialization\" id = \"dt-serialization\" title = \"serialization\"></a>A frequent requirement is to output a\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> as an XML\n        document (or in other formats such as HTML). This process\n        is referred to as <b>serialization</b>.<span class = \"definition\">]</span></p>\n\n        <p>Like parsing, serialization is not part of the\n        transformation process, and it is not <span class = \"verb\">required</span> that an XSLT processor <span class = \"verb\">must</span> be able to perform serialization.\n        However, for pragmatic reasons, this specification\n        describes declarations (the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> element and\n        the <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declarations, see <a href = \"#serialization\"><i>20\n        Serialization</i></a>), and attributes on the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction, that allow a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to specify the desired\n        properties of a serialized output file. <span>When\n        serialization is not being performed, either because the\n        implementation does not support the serialization option,\n        or because the user is executing the transformation in a\n        way that does not invoke serialization, then the content of\n        the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n        and <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declarations has no effect. Under these circumstances the\n        processor <span class = \"verb\">may</span> report any errors\n        in an <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n        or <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declaration, or in the serialization attributes of <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,</span>\n        but is not <span class = \"verb\">required</span> to do so.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"extensibility\" id = \"extensibility\"></a>2.7\n        Extensibility</h3>\n\n        <p>XSLT defines a number of features that allow the\n        language to be extended by implementers, or, if\n        implementers choose to provide the capability, by users.\n        These features have been designed, so far as possible, so\n        that they can be used without sacrificing interoperability.\n        Extensions other than those explicitly defined in this\n        specification are not permitted.</p>\n\n        <p>These features are all based on XML namespaces;\n        namespaces are used to ensure that the extensions provided\n        by one implementer do not clash with those of a different\n        implementer.</p>\n\n        <p>The most common way of extending the language is by\n        providing additional functions, which can be invoked from\n        XPath expressions. These are known as <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>, and are\n        described in <a href = \"#extension-functions\"><i>18.1\n        Extension Functions</i></a>.</p>\n\n        <p>It is also permissible to extend the language by\n        providing new <a title = \"instruction\" href = \"#dt-instruction\">instructions</a>. These are referred to\n        as <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a>, and\n        are described in <a href = \"#extension-instruction\"><i>18.2\n        Extension Instructions</i></a>. A stylesheet that uses\n        extension instructions must declare that it is doing so by\n        using the <code>[xsl:]extension-element-prefixes</code>\n        attribute.</p>\n\n        <p>Extension instructions and extension functions defined\n        according to these rules <span class = \"verb\">may</span> be\n        provided by the implementer of the XSLT processor, and the\n        implementer <span class = \"verb\">may</span> also provide\n        facilities to allow users to create further extension\n        instructions and extension functions.</p>\n\n        <p>This specification defines how extension instructions\n        and extension functions are invoked, but the facilities for\n        creating new extension instructions and extension functions\n        are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n        For further details, see <a href = \"#extension\"><i>18\n        Extensibility and Fallback</i></a>.</p>\n\n        <p>The XSLT language can also be extended by the use of\n        <a title = \"extension attribute\" href = \"#dt-extension-attribute\">extension attributes</a> (see\n        <a href = \"#extension-attributes\"><i>3.3 Extension\n        Attributes</i></a>), and by means of <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a> (see\n        <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined\n        Data Elements</i></a>).</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"stylesheets-and-schemas\" id = \"stylesheets-and-schemas\"></a>2.8 Stylesheets and\n        <span>XML</span> Schemas</h3>\n\n        <p>An XSLT <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> can make use of information\n        from a schema. An XSLT transformation can take place in the\n        absence of a schema (and, indeed, in the absence of a DTD),\n        but where the source document has undergone schema validity\n        assessment, the XSLT processor has access to the type\n        information associated with individual nodes, not merely to\n        the untyped text.</p>\n\n        <p>Information from a schema can be used both statically\n        (when the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is compiled), and\n        dynamically (during evaluation of the stylesheet to\n        transform a source document).</p>\n\n        <p>There are places within a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, and within XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> and\n        <a title = \"pattern\" href = \"#dt-pattern\">patterns</a> in a\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>,\n        where it is possible to refer to named type definitions in\n        a schema, or to element and attribute declarations. For\n        example, it is possible to declare the types expected for\n        the parameters of a function. This is done using the\n        <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SequenceType\">SequenceType</a><sup>\n        <small>XP</small></sup> syntax defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-schema-component\" id = \"dt-schema-component\" title = \"schema component\"></a>Type definitions and element and\n        attribute declarations are referred to collectively as\n        <b>schema components</b>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-in-scope-schema-component\" id = \"dt-in-scope-schema-component\" title = \"in-scope schema component\"></a>The <a title = \"schema component\" href = \"#dt-schema-component\">schema\n        components</a> that may be referenced by name in a\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        are referred to as the <b>in-scope schema components</b>.\n        This set is the same throughout all the modules of a\n        stylesheet.<span class = \"definition\">]</span></p>\n\n        <p>The conformance rules for XSLT 2.0, defined in <a href = \"#conformance\"><i>21 Conformance</i></a>, distinguish\n        between a <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a> and a\n        <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n        processor</a>. As the names suggest, a basic XSLT processor\n        does not support the features of XSLT that require access\n        to schema information, either statically or dynamically. A\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        that works with a basic XSLT processor will produce the\n        same results with a schema-aware XSLT processor\n        <span>provided that the source documents are untyped (that\n        is, they are not validated against a schema). However, if\n        source documents are validated against a schema then the\n        results may be different from the case where they are not\n        validated. Some constructs that work on untyped data may\n        fail with typed data (for example, an attribute of type\n        <code>xs:date</code> cannot be used as an argument of the\n        <a href = \"http://www.w3.org/TR/xpath-functions/#func-substring\"><code>\n        substring</code></a><sup><small>FO</small></sup> function)\n        and other constructs may produce different results\n        depending on the data type (for example, given the element\n        <code>&lt;product price=\"10.00\"\n        discount=\"2.00\"/&gt;</code>, the expression <code>@price gt\n        @discount</code> will return true if the attributes have\n        type <code>xs:decimal</code>, but will return false if they\n        are untyped).</span></p>\n\n        <p>There is a standard set of type definitions that are\n        always available as <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        components</a> in every stylesheet. These are defined in\n        <a href = \"#built-in-types\"><i>3.13 Built-in Types</i></a>.\n        The set of built-in types varies between a <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a> and a\n        <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n        processor</a>.</p>\n\n        <p>The remainder of this section describes facilities that\n        are available only with a <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n        processor</a>.</p>\n\n        <p>Additional <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> (type\n        definitions, element declarations, and attribute\n        declarations) may be added to the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        components</a> by means of the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration in a stylesheet.</p>\n\n        <p>The <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration may reference an external schema document by\n        means of a URI, or it may contain an inline\n        <code>xs:schema</code> element.</p>\n\n        <p>It is only necessary to import a schema explicitly if\n        <span>one or more of its <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> are referenced\n        explicitly by name</span> in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>; it is not necessary\n        to import a schema merely because the stylesheet is used to\n        process a source document that has been assessed against\n        that schema. It is possible to make use of the information\n        resulting from schema assessment (for example, the fact\n        that a particular attribute holds a date) even if no schema\n        has been imported by the stylesheet.</p>\n\n        <p>Further, importing a schema does not of itself say\n        anything about the type of the source document that the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        is expected to process. The imported type definitions can\n        be used for temporary nodes or for nodes on a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> just\n        as much as for nodes <span>in source documents. It is\n        possible to make assertions about the type of an input\n        document by means of tests within the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. For\n        example:</span></p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e1763\" id = \"d5e1763\"></a>Example: Asserting\n            the Required Type of the Source Document\n          </div>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"document-node(schema-element(my:invoice))\" priority=\"2\"&gt;\n. . .\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"document-node()\" priority=\"1\"&gt;\n  &lt;xsl:message terminate=\"yes\"&gt;Source document is not an invoice&lt;/xsl:message&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>This example will cause the transformation to fail\n          with an error message unless the document element of the\n          source document is valid against the top-level element\n          declaration <code>my:invoice</code>, and has been\n          annotated as such.</p>\n        </div>\n\n        <p>It is possible that a source document may contain nodes\n        whose <a title = \"type annotation\" href = \"#dt-annotation\">type\n        annotation</a> is not one of the types imported by the\n        stylesheet. This creates a potential problem because in the\n        case of an expression such as <code>data(.) instance of\n        xs:integer</code> the system needs to know whether the type\n        named in the type annotation of the context node is derived\n        by restriction from the type <code>xs:integer</code>. This\n        information is not explicitly available in an <span>XDM\n        tree</span>, as defined in <a href = \"#xpath-datamodel\">[Data\n        Model]</a>. The implementation may choose one of several\n        strategies for dealing with this situation:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>The processor may signal a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n            error</a> if a source document is found to contain a\n            <a title = \"type annotation\" href = \"#dt-annotation\">type\n            annotation</a> that is not known to the processor.</p>\n          </li>\n\n          <li>\n            <p>The processor may maintain additional metadata,\n            beyond that described in <a href = \"#xpath-datamodel\">[Data Model]</a>, that allows the\n            source document to be processed as if all the necessary\n            schema information had been imported using <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>.\n            Such metadata might be held in the data structure\n            representing the source document itself, or it might be\n            held in a system catalog or repository.</p>\n          </li>\n\n          <li>\n            <p>The processor may be configured to use a fixed set\n            of schemas, which are automatically used to validate\n            all source documents before they can be supplied as\n            input to a transformation. In this case it is\n            impossible for a source document to have a <a title = \"type annotation\" href = \"#dt-annotation\">type\n            annotation</a> that the processor is not aware of.</p>\n          </li>\n\n          <li>\n            <p>The processor may be configured to treat the source\n            document as if no schema processing had been performed,\n            that is, effectively to strip all type annotations from\n            elements and attributes on input, marking them instead\n            as having type <span><code>xs:untyped</code></span> and\n            <span><code>xs:untypedAtomic</code></span>\n            respectively.</p>\n          </li>\n        </ol>\n\n        <p>Where a stylesheet author chooses to make assertions\n        about the types of nodes or of <a title = \"variable\" href = \"#dt-variable\">variables</a> and <a title = \"parameter\" href = \"#dt-parameter\">parameters</a>, it is possible for an XSLT\n        processor to perform static analysis of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> (that is,\n        analysis in the absence of any source document). Such\n        analysis <span class = \"verb\">may</span> reveal errors that\n        would otherwise not be discovered until the transformation\n        is actually executed. An XSLT processor is not <span class = \"verb\">required</span> to perform such static\n        type-checking. <span>Under some circumstances (see <a href = \"#errors\"><i>2.9 Error Handling</i></a>) type errors that\n        are detected early <span class = \"verb\">may</span> be\n        reported as static errors. In addition an implementation\n        <span class = \"verb\">may</span> report any condition found\n        during static analysis as a warning, provided that this\n        does not prevent the stylesheet being evaluated as\n        described by this specification.</span></p>\n\n        <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> can also control the\n        <a title = \"type annotation\" href = \"#dt-annotation\">type\n        annotations</a> of nodes that it constructs in a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a>, or in <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary trees</a>. This can be done\n        in a number of ways.</p>\n\n        <ul>\n          <li>\n            <p>It is possible to request explicit validation of a\n            complete document, that is, a tree rooted at a document\n            node. This applies both to temporary trees constructed\n            using the <a href = \"#XSLT_element-document\"><code>xsl:document</code></a> (or\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>)\n            instruction and also to <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a>\n            constructed using <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>.\n            Validation is either strict or lax, as described in\n            <a href = \"#xmlschema-1\">[XML Schema Part 1]</a>. If\n            validation of a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> fails (strictly\n            speaking, if the outcome of the validity assessment is\n            <code>invalid</code>), then the transformation fails,\n            but in all other cases, the element and attribute nodes\n            of the tree will be annotated with the names of the\n            types to which these nodes conform. These <a title = \"type annotation\" href = \"#dt-annotation\">type\n            annotations</a> will be discarded if the result tree is\n            serialized as an XML document, but they remain\n            available when the result tree is passed to an\n            application (perhaps another <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>) for further\n            processing.</p>\n          </li>\n\n          <li>\n            <p>It is also possible to validate individual element\n            and attribute nodes as they are constructed. This is\n            done using the <code>type</code> and\n            <code>validation</code> attributes of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, and\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n            instructions, or the <code>xsl:type</code> and\n            <code>xsl:validation</code> attributes of a literal\n            result element.</p>\n          </li>\n\n          <li>\n            <p>When elements, attributes, or document nodes are\n            copied, either explicitly using the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n            instructions, or implicitly when nodes in a sequence\n            are attached to a new parent node, the options\n            <code>validation=\"strip\"</code> and\n            <code>validation=\"preserve\"</code> are available, to\n            control whether existing <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a> are to be\n            retained or not.</p>\n          </li>\n        </ul>\n\n        <p>When nodes in a <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> are validated, type\n        information is available for use by operations carried out\n        on the temporary tree, in the same way as for a source\n        document that has undergone schema assessment.</p>\n\n        <p>For details of how validation of element and attribute\n        nodes works, see <a href = \"#validation\"><i>19.2\n        Validation</i></a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"errors\" id = \"errors\"></a>2.9 Error\n        Handling</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-static-error\" id = \"dt-static-error\" title = \"static error\"></a>An error that is detected by examining a\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        before execution starts (that is, before the source\n        document and values of stylesheet parameters are available)\n        is referred to as a <b>static error</b>.<span class = \"definition\">]</span></p>\n\n        <p>Errors classified in this specification as static errors\n        <span class = \"verb\">must</span> be signaled by all\n        implementations: that is, the <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">must</span> indicate that the error is present. A\n        static error <span class = \"verb\">must</span> be signaled\n        even if it occurs in a part of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that is never\n        evaluated. Static errors are never recoverable. After\n        signaling a static error, a processor <span class = \"verb\">may</span> continue for the purpose of signaling\n        additional errors, but it <span class = \"verb\">must</span>\n        eventually terminate abnormally without producing any\n        <span><a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a></span>.</p>\n\n        <p>There is an exception to this rule when the stylesheet\n        specifies <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a> (see <a href = \"#forwards\"><i>3.9\n        Forwards-Compatible Processing</i></a>).</p>\n\n        <p>Generally, errors in the structure of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, or in\n        the syntax of XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> contained in the\n        stylesheet, are classified as <a title = \"static error\" href = \"#dt-static-error\">static errors</a>. Where this\n        specification states that an element in the stylesheet\n        <span class = \"verb\">must</span> or <span class = \"verb\">must\n        not</span> appear in a certain position, or that it\n        <span class = \"verb\">must</span> or <span class = \"verb\">must\n        not</span> have a particular attribute, or that an\n        attribute <span class = \"verb\">must</span> or <span class = \"verb\">must not</span> have a value satisfying specified\n        conditions, then any contravention of this rule is a static\n        error unless otherwise specified.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-dynamic-error\" id = \"dt-dynamic-error\" title = \"dynamic error\"></a>An error that is not detected until a\n        source document is being transformed is referred to as a\n        <b>dynamic error</b>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-recoverable-error\" id = \"dt-recoverable-error\" title = \"recoverable error\"></a>Some dynamic errors are classed as\n        <b>recoverable errors</b>. When a recoverable error occurs,\n        this specification allows the processor either to signal\n        the error (by reporting the error condition and terminating\n        execution) or to take a defined recovery action and\n        continue processing.<span class = \"definition\">]</span> It is\n        <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        whether the error is signaled or the recovery action is\n        taken.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-optional-recovery-action\" id = \"dt-optional-recovery-action\" title = \"optional recovery action\"></a>If an implementation chooses\n        to recover from a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a>, it\n        <span class = \"verb\">must</span> take the <b>optional\n        recovery action</b> defined for that error condition in\n        this specification.<span class = \"definition\">]</span></p>\n\n        <p>When the implementation makes the choice between\n        signaling a dynamic error or recovering, it is not\n        restricted in how it makes the choice; for example, it\n        <span class = \"verb\">may</span> provide options that can be\n        set by the user. When an implementation chooses to recover\n        from a dynamic error, it <span><span class = \"verb\">may</span></span> also take other action, such as\n        logging a warning message.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-nonrec-dynamic-error\" id = \"dt-nonrec-dynamic-error\" title = \"non-recoverable dynamic error\"></a>A <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a>\n        that is not recoverable is referred to as a\n        <b>non-recoverable dynamic error</b>. When a\n        non-recoverable dynamic error occurs, the <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">must</span> signal the error, and the transformation\n        fails.<span class = \"definition\">]</span></p>\n\n        <p>Because different implementations may optimize execution\n        of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> in different ways, the\n        detection of dynamic errors is to some degree <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.\n        In cases where an implementation is able to produce the\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> without\n        evaluating a particular construct, the implementation is\n        never <span class = \"verb\">required</span> to evaluate that\n        construct solely in order to determine whether doing so\n        causes a dynamic error. For example, if a <a title = \"variable\" href = \"#dt-variable\">variable</a> is declared but\n        never referenced, an implementation <span class = \"verb\">may</span> choose whether or not to evaluate the\n        variable declaration, which means that if evaluating the\n        variable declaration causes a dynamic error, some\n        implementations will signal this error and others will\n        not.</p>\n\n        <p>There are some cases where this specification requires\n        that a construct <span class = \"verb\">must not</span> be\n        evaluated: for example, the content of an <a href = \"#XSLT_element-if\"><code>xsl:if</code></a> instruction\n        <span class = \"verb\">must not</span> be evaluated if the test\n        condition is false. This means that an implementation\n        <span class = \"verb\">must not</span> signal any dynamic\n        errors that would arise if the construct were\n        evaluated.</p>\n\n        <p>An implementation <span class = \"verb\">may</span> signal a\n        <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic\n        error</a> before any source document is available, but only\n        if it can determine that the error would be signaled for\n        every possible source document and every possible set of\n        parameter values. For example, some <a title = \"\" href = \"#circularity\">circularity</a> errors fall into this\n        category: see <a href = \"#circularity\"><i>9.8 Circular\n        Definitions</i></a>.</p>\n\n        <p>The XPath specification states (see <a href = \"http://www.w3.org/TR/xpath20/#id-kinds-of-errors\">Section\n        2.3.1 Kinds of Errors</a><sup><small>XP</small></sup>) that\n        if any expression (at any level) can be evaluated during\n        the analysis phase (because all its explicit operands are\n        known and it has no dependencies on the dynamic context),\n        then any error in performing this evaluation <span class = \"verb\">may</span> be reported as a static error. For XPath\n        expressions used in an XSLT stylesheet, however, any such\n        errors <span class = \"verb\">must not</span> be reported as\n        static errors in the stylesheet unless they would occur in\n        every possible evaluation of that stylesheet; instead, they\n        must be signaled as dynamic errors, and signaled only if\n        the XPath expression is actually evaluated.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e2144\" id = \"d5e2144\"></a>Example: Errors in\n            Constant Subexpressions\n          </div>\n\n          <p>An XPath processor may report statically that the\n          expression <code>1 div 0</code> fails with a \"divide by\n          zero\" error. But suppose this XPath expression occurs in\n          an XSLT construct such as:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:choose&gt;\n  &lt;xsl:when test=\"system-property('xsl:version') = '1.0'\"&gt;\n    &lt;xsl:value-of select=\"1 div 0\"/&gt;\n  &lt;/xsl:when&gt;\n  &lt;xsl:otherwise&gt;\n    &lt;xsl:value-of select=\"xs:double('INF')\"/&gt;\n  &lt;/xsl:otherwise&gt;\n&lt;/xsl:choose&gt;\n</pre>\n          </div>\n\n          <p>Then the XSLT processor must not report an error,\n          because the relevant XPath construct appears in a context\n          where it will never be executed by an XSLT 2.0 processor.\n          (An XSLT 1.0 processor will execute this code\n          successfully, returning positive infinity, because it\n          uses double arithmetic rather than decimal\n          arithmetic.)</p>\n        </div>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-type-error\" id = \"dt-type-error\" title = \"type errors\"></a>Certain errors are classified as <b>type\n        errors</b>. A type error occurs when the value supplied as\n        input to an operation is of the wrong type for that\n        operation, for example when an integer is supplied to an\n        operation that expects a node.<span class = \"definition\">]</span> If a type error occurs in an\n        instruction that is actually evaluated, then it\n        <span class = \"verb\">must</span> be signaled <span>in the\n        same way as a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a>. Alternatively, an implementation <span class = \"verb\">may</span> signal a type error during the analysis\n        phase</span> in the same way as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>, even if it occurs\n        in part of the stylesheet that is never evaluated, provided\n        it can establish that execution of a particular construct\n        would never succeed.</p>\n\n        <p>It is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        whether type errors are signaled statically.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e2186\" id = \"d5e2186\"></a>Example: A Type\n            Error\n          </div>\n\n          <p>The following construct contains a type error, because\n          <code>42</code> is not allowed as an operand of the\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction. An implementation <span class = \"verb\">may</span> optionally signal this as a static\n          error, even though the offending instruction will never\n          be evaluated, and the type error would therefore never be\n          signaled as a dynamic error.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:if test=\"false()\"&gt;\n  &lt;xsl:apply-templates select=\"42\"/&gt;\n&lt;/xsl:if&gt;\n</pre>\n          </div>\n\n          <p>On the other hand, in the following example it is not\n          possible to determine statically whether the operand of\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          will have a suitable dynamic type. An implementation\n          <span class = \"verb\">may</span> produce a warning in such\n          cases, but it <span class = \"verb\">must not</span> treat it\n          as an error.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"para\"&gt;\n  &lt;xsl:param name=\"p\" as=\"item()\"/&gt;\n  &lt;xsl:apply-templates select=\"$p\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>If more than one error arises, an implementation is not\n        <span class = \"verb\">required</span> to signal any errors\n        other than the first one that it detects. It is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n        which of the several errors is signaled. This applies both\n        to static errors and to dynamic errors. An implementation\n        is allowed to signal more than one error, but if any errors\n        have been signaled, it <span class = \"verb\">must not</span>\n        finish as if the transformation were successful.</p>\n\n        <p>When a transformation signals one or more dynamic\n        errors, the final state of any persistent resources updated\n        by the transformation is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.\n        Implementations are not <span class = \"verb\">required</span>\n        to restore such resources to their initial state. In\n        particular, where a transformation produces multiple result\n        documents, it is possible that one or more serialized\n        result documents <span class = \"verb\">may</span> be written\n        successfully before the transformation terminates, but the\n        application cannot rely on this behavior.</p>\n\n        <p>Everything said above about error handling applies\n        equally to errors in evaluating XSLT instructions, and\n        errors in evaluating XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a>. Static errors and dynamic\n        errors may occur in both cases.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-serialization-error\" id = \"dt-serialization-error\" title = \"serialization error\"></a>If a transformation has\n        successfully produced a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>, it is still\n        possible that errors may occur in serializing the result\n        tree. For example, it may be impossible to serialize the\n        result tree using the encoding selected by the user. Such\n        an error is referred to as a <b>serialization\n        error</b>.<span class = \"definition\">]</span> <span>If the\n        processor performs serialization, then it <span class = \"verb\">must</span> do so as specified in <a href = \"#serialization\"><i>20 Serialization</i></a>, and in\n        particular it <span class = \"verb\">must</span> signal any\n        serialization errors that occur.</span></p>\n\n        <p>Errors are identified by a QName. For errors defined in\n        this specification, the namespace of the QName is always\n        <code>http://www.w3.org/2005/xqt-errors</code> (and is\n        therefore not given explicitly), while the local part is an\n        8-character code in the form <var>PPSSNNNN</var>. Here\n        <var>PP</var> is always <code>XT</code> (meaning XSLT), and\n        <var>SS</var> is one of <code>SE</code> (static error),\n        <code>DE</code> (dynamic error), <code>RE</code>\n        (recoverable dynamic error), or <code>TE</code> (type\n        error). Note that the allocation of an error to one of\n        these categories is purely for convenience and carries no\n        normative implications about the way the error is handled.\n        Many errors, for example, can be reported either\n        dynamically or statically.</p>\n\n        <p>These error codes are used to label error conditions in\n        this specification, and are summarized in <a href = \"#error-summary\"><i>E Summary of Error Conditions</i></a>).\n        They are provided primarily for ease of reference.\n        Implementations <span class = \"verb\">may</span> use these\n        codes when signaling errors, but they are not <span class = \"verb\">required</span> to do so. An API specification,\n        however, <span class = \"verb\">may</span> require the use of\n        error codes based on these QNames. Additional errors\n        defined by an implementation (or by an application)\n        <span class = \"verb\">may</span> use QNames in an\n        implementation-defined (or user-defined) namespace without\n        risk of collision.</p>\n\n        <p>Errors defined in the <a href = \"#xpath20\">[XPath 2.0]</a>\n        and <a href = \"#xpath-functions\">[Functions and\n        Operators]</a> specifications use QNames with a similar\n        structure, in the same namespace. When errors occur in\n        processing XPath expressions, an XSLT processor\n        <span class = \"verb\">should</span> use the original error\n        code reported by the XPath processor, unless a more\n        specific XSLT error code is available.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"stylesheet-structure\" id = \"stylesheet-structure\"></a>3 Stylesheet Structure</h2>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stylesheet-module\" id = \"dt-stylesheet-module\" title = \"stylesheet module\"></a>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> consists of one or more\n      <b>stylesheet modules</b>, each one forming all or part of an\n      XML document.<span class = \"definition\">]</span></p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>A stylesheet module is represented by an <span>XDM\n        element node</span> (see <a href = \"#xpath-datamodel\">[Data\n        Model]</a>). <span>In the case of a standard stylesheet\n        module, this will be an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n        <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n        element. In the case of a simplified stylesheet module, it\n        can be any element (not in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>) that has an\n        <code>xsl:version</code> attribute.</span></p>\n\n        <p>Although stylesheet modules will commonly be maintained\n        in the form of documents conforming to XML 1.0 or XML 1.1,\n        this specification does not mandate such a representation.\n        As with <a title = \"source tree\" href = \"#dt-source-tree\">source trees</a>, the way in which\n        stylesheet modules are constructed, from textual XML or\n        otherwise, is outside the scope of this specification.</p>\n      </div>\n\n      <p>A stylesheet module is either a standard stylesheet module\n      or a simplified stylesheet module:</p>\n\n      <ul>\n        <li>\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-standard-stylesheet-module\" id = \"dt-standard-stylesheet-module\" title = \"standard stylesheet module\"></a>A <b>standard stylesheet\n          module</b> is a tree, or part of a tree, consisting of an\n          <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n          <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n          element (see <a href = \"#stylesheet-element\"><i>3.6\n          Stylesheet Element</i></a>) together with its descendant\n          nodes and associated attributes and\n          namespaces.<span class = \"definition\">]</span></p>\n        </li>\n\n        <li>\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-simplified-stylesheet-module\" id = \"dt-simplified-stylesheet-module\" title = \"simplified stylesheet module\"></a>A <b>simplified\n          stylesheet module</b> is a tree, or part of a tree,\n          consisting of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>\n          together with its descendant nodes and associated\n          attributes and namespaces. This element is not itself in\n          the XSLT namespace, but it <span class = \"verb\">must</span>\n          have an <code>xsl:version</code> attribute, which implies\n          that it <span class = \"verb\">must</span> have a namespace\n          node that declares a binding for the XSLT namespace. For\n          further details see <a href = \"#simplified-stylesheet\"><i>3.7 Simplified Stylesheet\n          Modules</i></a>. <span class = \"definition\">]</span></p>\n        </li>\n      </ul>\n\n      <p>Both forms of stylesheet module (standard and simplified)\n      can exist either as an entire XML document, or embedded as\n      part of another XML document, typically <span>but not\n      necessarily</span> a source document that is to be processed\n      using the stylesheet.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-standalone-stylesheet-module\" id = \"dt-standalone-stylesheet-module\" title = \"standalone stylesheet module\"></a>A <b>standalone stylesheet\n      module</b> is a stylesheet module that comprises the whole of\n      an XML document.<span class = \"definition\">]</span></p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-embedded-stylesheet-module\" id = \"dt-embedded-stylesheet-module\" title = \"embedded stylesheet module\"></a>An <b>embedded stylesheet\n      module</b> is a stylesheet module that is embedded within\n      another XML document, typically the source document that is\n      being transformed.<span class = \"definition\">]</span> (see\n      <a href = \"#embedded\"><i>3.11 Embedded Stylesheet\n      Modules</i></a>).</p>\n\n      <p>There are thus four kinds of stylesheet module:</p>\n\n      <blockquote>\n        <p>standalone standard stylesheet modules<br/>\n        standalone simplified stylesheet modules<br/>\n        embedded standard stylesheet modules<br/>\n        embedded simplified stylesheet modules</p>\n      </blockquote>\n\n      <div class = \"div2\">\n        <h3><a name = \"xslt-namespace\" id = \"xslt-namespace\"></a>3.1\n        XSLT Namespace</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-xslt-namespace\" id = \"dt-xslt-namespace\" title = \"XSLT namespace\"></a>The <b>XSLT namespace</b> has the URI\n        <code>http://www.w3.org/1999/XSL/Transform</code>. It is\n        used to identify elements, attributes, and other names that\n        have a special meaning defined in this\n        specification.<span class = \"definition\">]</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The <code>1999</code> in the URI indicates the year in\n          which the URI was allocated by the W3C. It does not\n          indicate the version of XSLT being used, which is\n          specified by attributes (see <a href = \"#stylesheet-element\"><i>3.6 Stylesheet Element</i></a>\n          and <a href = \"#simplified-stylesheet\"><i>3.7 Simplified\n          Stylesheet Modules</i></a>).</p>\n        </div>\n\n        <p>XSLT <a title = \"processor\" href = \"#dt-processor\">processors</a> <span class = \"verb\">must</span> use the XML namespaces mechanism\n        <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a> to\n        recognize elements and attributes from this namespace.\n        Elements from the XSLT namespace are recognized only in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        and not in the source document. The complete list of\n        XSLT-defined elements is specified in <a href = \"#element-syntax-summary\"><i>D Element Syntax\n        Summary</i></a>. <a title = \"implementation\" href = \"#dt-implementation\">Implementations</a> <span class = \"verb\">must not</span> extend the XSLT namespace with\n        additional elements or attributes. Instead, any extension\n        <span class = \"verb\">must</span> be in a separate namespace.\n        Any namespace that is used for additional instruction\n        elements <span class = \"verb\">must</span> be identified by\n        means of the <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n        mechanism specified in <a href = \"#extension-instruction\"><i>18.2 Extension\n        Instructions</i></a>.</p>\n\n        <p>This specification uses a prefix of <code>xsl:</code>\n        for referring to elements in the XSLT namespace. However,\n        XSLT stylesheets are free to use any prefix, provided that\n        there is a namespace declaration that binds the prefix to\n        the URI of the XSLT namespace.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Throughout this specification, an element or attribute\n          that is in no namespace, or an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> whose\n          namespace part is an empty sequence, is referred to as\n          having a <b>null namespace URI</b>.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The conventions used for the names of <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a>,\n          attributes and functions are that names are all\n          lower-case, use hyphens to separate words, and use\n          abbreviations only if they already appear in the syntax\n          of a related language such as XML or HTML. Names of types\n          defined in XML Schema however, are regarded as single\n          words and are capitalized exactly as in XML Schema. This\n          sometimes leads to composite function names such as\n          <a href = \"http://www.w3.org/TR/xpath-functions/#func-current-dateTime\">\n          <code>current-dateTime</code></a><sup><small>FO</small></sup>.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"reserved-namespaces\" id = \"reserved-namespaces\"></a>3.2 Reserved Namespaces</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-reserved-namespace\" id = \"dt-reserved-namespace\" title = \"reserved namespace\"></a>The XSLT namespace, together with\n        certain other namespaces recognized by an XSLT processor,\n        are classified as <b>reserved namespaces</b> and\n        <span class = \"verb\">must</span> be used only as specified in\n        this and related specifications.<span class = \"definition\">]</span> The reserved namespaces are those\n        listed below.</p>\n\n        <ul>\n          <li>\n            <p>The <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>, described in\n            <a href = \"#xslt-namespace\"><i>3.1 XSLT\n            Namespace</i></a>, is reserved.</p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-standard-function-namespace\" id = \"dt-standard-function-namespace\" title = \"standard function namespace\"></a>The <b>standard\n            function namespace</b>\n            <code>http://www.w3.org/2005/xpath-functions</code> is\n            used for functions in the function library defined in\n            <a href = \"#xpath-functions\">[Functions and\n            Operators]</a> and standard functions defined in this\n            specification.<span class = \"definition\">]</span></p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"xml-namespace\" id = \"xml-namespace\" title = \"XML namespace\"></a>The <b>XML namespace</b>,\n            <span>defined in <a href = \"#REC-xml-names\">[Namespaces\n            in XML 1.0]</a> as\n            <code>http://www.w3.org/XML/1998/namespace</code></span>,\n            is used for attributes such as <code>xml:lang</code>,\n            <code>xml:space</code>, and\n            <code>xml:id</code>.<span class = \"definition\">]</span></p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-schema-namespace\" id = \"dt-schema-namespace\" title = \"schema namespace\"></a>The <b>schema namespace</b>\n            <code>http://www.w3.org/2001/XMLSchema</code> is used\n            as defined in <a href = \"#xmlschema-1\">[XML Schema Part\n            1]</a> <span class = \"definition\">]</span>. In a\n            <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> this namespace may be\n            used to refer to built-in schema datatypes and to the\n            constructor functions associated with those\n            datatypes.</p>\n          </li>\n\n          <li>\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-schema-instance-namespace\" id = \"dt-schema-instance-namespace\" title = \"schema instance namespace\"></a>The <b>schema instance\n            namespace</b>\n            <code>http://www.w3.org/2001/XMLSchema-instance</code>\n            is used as defined in <a href = \"#xmlschema-1\">[XML\n            Schema Part 1]</a> <span class = \"definition\">]</span>.\n            Attributes in this namespace, if they appear in a\n            <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, are treated by the\n            XSLT processor in the same way as any other\n            attributes.</p>\n          </li>\n        </ul>\n\n        <p>Reserved namespaces may be used without restriction to\n        refer to the names of elements and attributes in source\n        documents and result documents. As far as the XSLT\n        processor is concerned, reserved namespaces other than the\n        XSLT namespace may be used without restriction in the names\n        of <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result elements</a>\n        and <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a>, and in\n        the names of attributes of literal result elements or of\n        <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n        <span>elements</span></a>: but other processors\n        <span class = \"verb\">may</span> impose restrictions or attach\n        special meaning to them. Reserved namespaces <span class = \"verb\">must not</span> be used, however, in the names of\n        stylesheet-defined objects such as <a title = \"variable\" href = \"#dt-variable\">variables</a> and <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>With the exception of the XML namespace, any of the\n          above namespaces that are used in a stylesheet must be\n          explicitly declared with a namespace declaration.\n          Although conventional prefixes are used for these\n          namespaces in this specification, any prefix may be used\n          in a user stylesheet.</p>\n        </div>\n\n        <p><a name = \"err-XTSE0080\" id = \"err-XTSE0080\"><span class = \"error\">[ERR XTSE0080]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> to\n        use a <a title = \"reserved namespace\" href = \"#dt-reserved-namespace\">reserved namespace</a> in the name\n        of a <a title = \"named template\" href = \"#dt-named-template\">named template</a>, a <a title = \"mode\" href = \"#dt-mode\">mode</a>, an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute set</a>, a <a title = \"key\" href = \"#dt-key\">key</a>, a <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal-format</a>, a <a title = \"variable\" href = \"#dt-variable\">variable</a> or <a title = \"parameter\" href = \"#dt-parameter\">parameter</a>, a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>, a named\n        <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>, or a\n        <a title = \"character map\" href = \"#dt-character-map\">character\n        map</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"extension-attributes\" id = \"extension-attributes\"></a>3.3 Extension Attributes</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-extension-attribute\" id = \"dt-extension-attribute\" title = \"extension attribute\"></a>An element from the XSLT\n        namespace may have any attribute not from the XSLT\n        namespace, provided that the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> (see <a href = \"#xpath20\">[XPath 2.0]</a>) of the attribute has a non-null\n        namespace URI. These attributes are referred to as\n        <b>extension attributes</b>.<span class = \"definition\">]</span> The presence of an extension\n        attribute <span class = \"verb\">must not</span> cause the\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> produced by\n        the transformation to be different from the result trees\n        that a conformant XSLT 2.0 processor might produce. They\n        <span class = \"verb\">must not</span> cause the processor to\n        fail to signal an error that a conformant processor is\n        required to signal. This means that an extension attribute\n        <span class = \"verb\">must not</span> change the effect of any\n        <a title = \"instruction\" href = \"#dt-instruction\">instruction</a> except to the extent that\n        the effect is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a> or\n        <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.</p>\n\n        <p>Furthermore, if serialization is performed using one of\n        the serialization methods <code>xml</code>,\n        <code>xhtml</code>, <code>html</code>, or <code>text</code>\n        described in <a href = \"#serialization\"><i>20\n        Serialization</i></a>, the presence of an extension\n        attribute must not cause the serializer to behave in a way\n        that is inconsistent with the mandatory provisions of that\n        specification.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p><a title = \"extension attribute\" href = \"#dt-extension-attribute\">Extension attributes</a> may be\n          used to modify the behavior of <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a> and\n          <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a>.\n          They may be used to select processing options in cases\n          where the specification leaves the behavior <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          or <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.\n          They may also be used for optimization hints, for\n          diagnostics, or for documentation.</p>\n\n          <p><a title = \"extension attribute\" href = \"#dt-extension-attribute\">Extension attributes</a>\n          <span class = \"verb\">may</span> also be used to influence\n          the behavior of the serialization methods\n          <code>xml</code>, <code>xhtml</code>, <code>html</code>,\n          or <code>text</code>, to the extent that the behavior of\n          the serialization method is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          or <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.\n          For example, an extension attribute might be used to\n          define the amount of indentation to be used when\n          <code>indent=\"yes\"</code> is specified. If a\n          serialization method other than one of these four is\n          requested (using a prefixed QName in the method\n          parameter) then extension attributes may influence its\n          behavior in arbitrary ways. Extension attributes\n          <span class = \"verb\">must not</span> be used to cause the\n          four standard serialization methods to behave in a\n          non-conformant way, for example by failing to report\n          serialization errors that a serializer is <span class = \"verb\">required</span> to report. An implementation that\n          wishes to provide such options must create a new\n          serialization method for the purpose.</p>\n\n          <p>An implementation that does not recognize the name of\n          an extension attribute, or that does not recognize its\n          value, <span class = \"verb\">must</span> perform the\n          transformation as if the extension attribute were not\n          present. As always, it is permissible to produce warning\n          messages.</p>\n\n          <p>The namespace used for an extension attribute will be\n          copied to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> in the normal way if it\n          is in scope for a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>.\n          This can be prevented using the\n          <code>[xsl:]exclude-result-prefixes</code> attribute.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e2801\" id = \"d5e2801\"></a>Example: An\n            Extension Attribute for <code>xsl:message</code>\n          </div>\n\n          <p>The following code might be used to indicate to a\n          particular implementation that the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>\n          instruction is to ask the user for confirmation before\n          continuing with the transformation:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:message\n    abc:pause=\"yes\"\n    xmlns:abc=\"http://vendor.example.com/xslt/extensions\"&gt;Phase 1 complete&lt;/xsl:message&gt;\n</pre>\n          </div>\n\n          <p>Implementations that do not recognize the namespace\n          <code>http://vendor.example.com/xslt/extensions</code>\n          will simply ignore the extra attribute, and evaluate the\n          <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>\n          instruction in the normal way.</p>\n        </div>\n\n        <p><a name = \"err-XTSE0090\" id = \"err-XTSE0090\"><span class = \"error\">[ERR XTSE0090]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> for\n        an element from the XSLT namespace to have an attribute\n        whose namespace is either null (that is, an attribute with\n        an unprefixed name) or the XSLT namespace, other than\n        attributes defined for the element in this document.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xslt-media-type\" id = \"xslt-media-type\"></a>3.4\n        XSLT Media Type</h3>\n\n        <p>The media type <code>application/xslt+xml</code> will be\n        registered for XSLT stylesheet modules.</p>\n\n        <p>The proposed definition of the media type is at <a href = \"#xslt-mime-definition\"><i>B The XSLT Media\n        Type</i></a></p>\n\n        <p>This media type <span class = \"verb\">should</span> be used\n        for an XML document containing a <a title = \"standard stylesheet module\" href = \"#dt-standard-stylesheet-module\">standard stylesheet\n        module</a> at its top level, and it <span class = \"verb\">may</span> also be used for a <a title = \"simplified stylesheet module\" href = \"#dt-simplified-stylesheet-module\">simplified stylesheet\n        module</a>. It <span class = \"verb\">should not</span> be used\n        for an XML document containing an <a title = \"embedded stylesheet module\" href = \"#dt-embedded-stylesheet-module\">embedded stylesheet\n        module</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"standard-attributes\" id = \"standard-attributes\"></a>3.5 Standard Attributes</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-standard-attributes\" id = \"dt-standard-attributes\" title = \"standard attributes\"></a>There are a number of <b>standard\n        attributes</b> that may appear on any <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>:\n        specifically <code>version</code>,\n        <code>exclude-result-prefixes</code>,\n        <code>extension-element-prefixes</code>,\n        <code>xpath-default-namespace</code><span>,\n        <code>default-collation</code>, and\n        <code>use-when</code>.</span><span class = \"definition\">]</span></p>\n\n        <p>These attributes may also appear on a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>,\n        but in this case, to distinguish them from user-defined\n        attributes, the names of the attributes are in the\n        <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n        namespace</a>. They are thus typically written as\n        <code>xsl:version</code>,\n        <code>xsl:exclude-result-prefixes</code>,\n        <code>xsl:extension-element-prefixes</code>,\n        <code>xsl:xpath-default-namespace</code><span>,\n        <code>xsl:default-collation</code>, or\n        <code>xsl:use-when</code></span>.</p>\n\n        <p>It is <span class = \"verb\">recommended</span> that all\n        these attributes should also be permitted on <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a>, but\n        this is at the discretion of the implementer of each\n        extension instruction. They <span class = \"verb\">may</span>\n        also be permitted on <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a>,\n        though they will only have any useful effect in the case of\n        data elements that are designed to behave like XSLT\n        declarations or instructions.</p>\n\n        <p>In the following descriptions, these attributes are\n        referred to generically as <code>[xsl:]version</code>, and\n        so on.</p>\n\n        <p>These attributes all affect the element they appear on,\n        <span>together with any elements and attributes that have\n        that element as an ancestor</span>. The two forms with and\n        without the XSLT namespace have the same effect; the XSLT\n        namespace is used for the attribute if and only if its\n        parent element is <em>not</em> in the XSLT namespace.</p>\n\n        <p>In the case of <code>[xsl:]version</code>,\n        <code>[xsl:]xpath-default-namespace</code>, and\n        <code>[xsl:]default-collation</code>, the value can be\n        overridden by a different value for the same attribute\n        appearing on a descendant element. The effective value of\n        the attribute for a particular stylesheet element is\n        determined by the innermost <span>ancestor-or-self</span>\n        element on which the attribute appears.</p>\n\n        <p>In an <a title = \"embedded stylesheet module\" href = \"#dt-embedded-stylesheet-module\">embedded stylesheet\n        module</a>, <a title = \"standard attributes\" href = \"#dt-standard-attributes\">standard attributes</a> appearing\n        on ancestors of the outermost element of the stylesheet\n        module have no effect.</p>\n\n        <p>In the case of\n        <code>[xsl:]exclude-result-prefixes</code> and\n        <code>[xsl:]extension-element-prefixes</code> the values\n        are cumulative. For these attributes, the value is given as\n        a whitespace-separated list of namespace prefixes, and the\n        effective value for an element is the combined set of\n        namespace URIs designated by the prefixes that appear in\n        this attribute for that element and any of its ancestor\n        elements. Again, the two forms with and without the XSLT\n        namespace are equivalent.</p>\n\n        <p>The effect of the <code>[xsl:]use-when</code> attribute\n        is described in <a href = \"#conditional-inclusion\"><i>3.12\n        Conditional Element Inclusion</i></a>.</p>\n\n        <p>Because these attributes may appear on any <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>,\n        they are not listed in the syntax summary of each\n        individual element. Instead they are listed and described\n        in the entry for the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> and\n        <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n        elements only. This reflects the fact that these attributes\n        are often used on the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element only, in which case they apply to the entire\n        <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a>.</p>\n\n        <p>Note that the effect of these attributes does\n        <em>not</em> extend to <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> referenced\n        by <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n        or <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n        declarations.</p>\n\n        <p>For the detailed effect of each attribute, see the\n        following sections:</p>\n\n        <dl>\n          <dt class = \"label\"><code>[xsl:]version</code></dt>\n\n          <dd>\n            <p>see <a href = \"#backwards\"><i>3.8 Backwards-Compatible\n            Processing</i></a> and <a href = \"#forwards\"><i>3.9\n            Forwards-Compatible Processing</i></a></p>\n          </dd>\n\n          <dt class = \"label\">\n          <code>[xsl:]xpath-default-namespace</code></dt>\n\n          <dd>\n            <p>see <a href = \"#unprefixed-qnames\"><i>5.2 Unprefixed\n            QNames in Expressions and Patterns</i></a></p>\n          </dd>\n\n          <dt class = \"label\">\n          <code>[xsl:]exclude-result-prefixes</code></dt>\n\n          <dd>\n            <p>see <a href = \"#lre-namespaces\"><i>11.1.3 Namespace\n            Nodes for Literal Result Elements</i></a></p>\n          </dd>\n\n          <dt class = \"label\">\n          <code>[xsl:]extension-element-prefixes</code></dt>\n\n          <dd>\n            <p>see <a href = \"#extension-instruction\"><i>18.2\n            Extension Instructions</i></a></p>\n          </dd>\n\n          <dt class = \"label\"><code>[xsl:]use-when</code></dt>\n\n          <dd>\n            <p>see <a href = \"#conditional-inclusion\"><i>3.12\n            Conditional Element Inclusion</i></a></p>\n          </dd>\n\n          <dt class = \"label\">\n          <code>[xsl:]default-collation</code></dt>\n\n          <dd>\n            <p>see <a href = \"#default-collation-attribute\"><i>3.6.1\n            The default-collation attribute</i></a></p>\n          </dd>\n        </dl>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"stylesheet-element\" id = \"stylesheet-element\"></a>3.6 Stylesheet Element</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-stylesheet\" id = \"XSLT_element-stylesheet\"></a><code>&lt;xsl:stylesheet<br/>\n        &#160;&#160;id? = <var>id</var><br/>\n        &#160;&#160;extension-element-prefixes? =\n        <var>tokens</var><br/>\n        &#160;&#160;exclude-result-prefixes? =\n        <var>tokens</var><br/>\n        &#160;&#160;<b>version</b> = <var>number</var><br/>\n        &#160;&#160;xpath-default-namespace? = <var>uri</var><br/>\n        &#160;&#160;default-validation? = \"preserve\" |\n        \"strip\"<br/>\n        &#160;&#160;default-collation? = <var>uri-list</var><br/>\n        &#160;&#160;input-type-annotations? = \"preserve\" | \"strip\"\n        | \"unspecified\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-import\">xsl:import</a>*,\n        <var>other-declarations</var>) --&gt;<br/>\n        &lt;/xsl:stylesheet&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-transform\" id = \"XSLT_element-transform\"></a><code>&lt;xsl:transform<br/>\n        &#160;&#160;id? = <var>id</var><br/>\n        &#160;&#160;extension-element-prefixes? =\n        <var>tokens</var><br/>\n        &#160;&#160;exclude-result-prefixes? =\n        <var>tokens</var><br/>\n        &#160;&#160;<b>version</b> = <var>number</var><br/>\n        &#160;&#160;xpath-default-namespace? = <var>uri</var><br/>\n        &#160;&#160;default-validation? = \"preserve\" |\n        \"strip\"<br/>\n        &#160;&#160;default-collation? = <var>uri-list</var><br/>\n        &#160;&#160;input-type-annotations? = \"preserve\" | \"strip\"\n        | \"unspecified\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-import\">xsl:import</a>*,\n        <var>other-declarations</var>) --&gt;<br/>\n        &lt;/xsl:transform&gt;</code></p>\n\n        <p>A stylesheet module is represented by an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element in an XML document. <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a> is\n        allowed as a synonym for <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>;\n        everything this specification says about the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element applies equally to <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>.</p>\n\n        <p>An <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element <span class = \"verb\">must</span> have a\n        <code>version</code> attribute, indicating the version of\n        XSLT that the stylesheet <span>module</span> requires.</p>\n\n        <p><a name = \"err-XTSE0110\" id = \"err-XTSE0110\"><span class = \"error\">[ERR XTSE0110]</span></a> The value of the\n        <code>version</code> attribute <span class = \"verb\">must</span> be a number: specifically, it\n        <span class = \"verb\">must</span> be a <span>a valid instance\n        of the type <code>xs:decimal</code> as defined in <a href = \"#xmlschema-2\">[XML Schema Part 2]</a></span>. For this\n        version of XSLT, the value <span class = \"verb\">should</span>\n        normally be <code>2.0</code>. A value of <code>1.0</code>\n        indicates that the stylesheet module was written with the\n        intention that it <span class = \"verb\">should</span> be\n        processed using an XSLT 1.0 processor.</p>\n\n        <p>If a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that specifies\n        <code>[xsl:]version=\"1.0\"</code> in the outermost element\n        of the <a title = \"principal stylesheet module\" href = \"#dt-principal-stylesheet-module\">principal stylesheet\n        module</a> (that is, <code>version=\"1.0\"</code> in the case\n        of a <a title = \"standard stylesheet module\" href = \"#dt-standard-stylesheet-module\">standard stylesheet\n        module</a>, or <code>xsl:version=\"1.0\"</code> in the case\n        of a <a title = \"simplified stylesheet module\" href = \"#dt-simplified-stylesheet-module\">simplified stylesheet\n        module</a>) is submitted to an XSLT 2.0 processor, the\n        processor <span class = \"verb\">should</span> output a warning\n        advising the user of possible incompatibilities, unless the\n        user has requested otherwise. The processor <span class = \"verb\">must</span> then process the stylesheet using the\n        rules for <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards-compatible\n        behavior</a>. These rules require that if the processor\n        does not support <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards-compatible\n        behavior</a>, it <span class = \"verb\">must</span> signal an\n        error and <span class = \"verb\">must not</span> execute the\n        transformation.</p>\n\n        <p>When the value of the <code>version</code> attribute is\n        greater than 2.0, <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a> is enabled (see <a href = \"#forwards\"><i>3.9\n        Forwards-Compatible Processing</i></a>).</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>XSLT 1.0 allowed the <code>[xsl:]version</code>\n          attribute to take any numeric value, and specified that\n          if the value was not equal to 1.0, the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> would\n          be executed in forwards compatible mode. XSLT 2.0\n          continues to allow the attribute to take any unsigned\n          decimal value. A software product that includes both an\n          XSLT 1.0 processor and an XSLT 2.0 processor (or that can\n          execute as either) may use the <code>[xsl:]version</code>\n          attribute to decide which processor to invoke; such\n          behavior is outside the scope of this specification. When\n          the stylesheet is executed with an XSLT 2.0 processor,\n          the value <code>1.0</code> is taken to indicate that the\n          stylesheet <span>module</span> was written with XSLT 1.0\n          in mind: if this value appears on the outermost element\n          of the principal stylesheet module then an XSLT 2.0\n          processor will either reject the stylesheet or execute it\n          in backwards compatible mode, as described above. Setting\n          <code>version=\"2.0\"</code> indicates that the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is to\n          be executed with neither backwards nor forwards\n          compatible behavior enabled. Any other value less than\n          <code>2.0</code> enables backwards compatible behavior,\n          while any value greater than <code>2.0</code> enables\n          forwards compatible behavior.</p>\n\n          <p>When developing a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that is designed to\n          execute under either XSLT 1.0 or XSLT 2.0, the\n          recommended practice is to create two alternative\n          <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a>, one\n          specifying <code>version=\"1.0\"</code>, and the other\n          specifying <code>version=\"2.0\"</code>; these modules can\n          use <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> or\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> to\n          incorporate the common code. When running under an XSLT\n          1.0 processor, the <code>version=\"1.0\"</code> module can\n          be selected as the <a title = \"principal stylesheet module\" href = \"#dt-principal-stylesheet-module\">principal\n          stylesheet module</a>; when running under an XSLT 2.0\n          processor, the <code>version=\"2.0\"</code> module can be\n          selected as the <a title = \"principal stylesheet module\" href = \"#dt-principal-stylesheet-module\">principal\n          stylesheet module</a>. Stylesheet modules that are\n          included or imported should specify\n          <code>version=\"2.0\"</code> if they make use of XSLT 2.0\n          facilities, and <code>version=\"1.0\"</code> otherwise.</p>\n        </div>\n\n        <p>The effect of the <code>input-type-annotations</code>\n        attribute is described in <a href = \"#stripping-annotations\"><i>4.3 Stripping Type Annotations\n        from a Source Tree</i></a>.</p>\n\n        <p>The <code>default-validation</code> attribute defines\n        the default value of the <code>validation</code> attribute\n        of all <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n        <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n        <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>, and\n        <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instructions, and of the <code>xsl:validation</code>\n        attribute of all <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result elements</a>.\n        It also determines the validation applied to the implicit\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> created in\n        the absence of an <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction. This default applies within the <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet\n        module</a>: it does not extend to included or imported\n        stylesheet modules. If the attribute is omitted, the\n        default is <code>strip</code>. <span>The permitted values\n        are <code>preserve</code> and <code>strip</code>.</span>\n        For details of the effect of this attribute, see <a href = \"#validation\"><i>19.2 Validation</i></a>.</p>\n\n        <p><a name = \"err-XTSE0120\" id = \"err-XTSE0120\"><span class = \"error\">[ERR XTSE0120]</span></a> An <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element <span class = \"verb\">must not</span> have any text\n        node children. (This rule applies after stripping of\n        <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> as\n        described in <a href = \"#stylesheet-stripping\"><i>4.2\n        Stripping Whitespace from the Stylesheet</i></a>.)</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-top-level\" id = \"dt-top-level\" title = \"top-level\"></a>An\n        element occurring as a child of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element is called a <b>top-level</b> element.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-declaration\" id = \"dt-declaration\" title = \"declaration\"></a>Top-level elements fall into two\n        categories: declarations, and user-defined data elements.\n        Top-level elements whose names are in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n        namespace</a> are <b>declarations</b>. Top-level elements\n        in any other namespace are <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a> (see\n        <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined\n        Data Elements</i></a>)<span class = \"definition\">]</span>.</p>\n\n        <p>The <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> elements permitted in the\n        <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element are:</p>\n\n        <blockquote>\n          <p><a href = \"#XSLT_element-import\"><code>xsl:import</code></a><br/>\n          <a href = \"#XSLT_element-include\"><code>xsl:include</code></a><br/>\n          <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a><br/>\n\n          <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a><br/>\n\n          <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a><br/>\n\n          <a href = \"#XSLT_element-function\"><code>xsl:function</code></a><br/>\n          <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a><br/>\n\n          <a href = \"#XSLT_element-key\"><code>xsl:key</code></a><br/>\n          <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a><br/>\n\n          <a href = \"#XSLT_element-output\"><code>xsl:output</code></a><br/>\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a><br/>\n          <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a><br/>\n\n          <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a><br/>\n\n          <a href = \"#XSLT_element-template\"><code>xsl:template</code></a><br/>\n          <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a></p>\n        </blockquote>\n\n        <p>Note that the <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> and\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        elements can act either as <a title = \"declaration\" href = \"#dt-declaration\">declarations</a> or as <a title = \"instruction\" href = \"#dt-instruction\">instructions</a>. A\n        global variable or parameter is defined using a\n        declaration; a local variable or parameter using an\n        instruction.</p>\n\n        <p>If there are <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> elements,\n        these <span class = \"verb\">must</span> come before any other\n        elements. Apart from this, the child elements of the\n        <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element may appear in any order. The ordering of these\n        elements does not affect the results of the transformation\n        unless there are conflicting declarations (for example, two\n        template rules with the same priority that match the same\n        node). In general, it is an error for a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to\n        contain such conflicting declarations, but in some cases\n        the processor is allowed to recover from the error by\n        choosing the declaration that appears last in the\n        stylesheet.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"default-collation-attribute\" id = \"default-collation-attribute\"></a>3.6.1 The\n          <code>default-collation</code> attribute</h4>\n\n          <p>The <code>default-collation</code> attribute is a\n          <a title = \"standard attributes\" href = \"#dt-standard-attributes\">standard attribute</a> that may\n          appear on any element in the XSLT namespace, or (as\n          <code>xsl:default-collation</code>) on a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n          element</a>.</p>\n\n          <p>The attribute is used to specify the default collation\n          used by all XPath expressions appearing in the attributes\n          of this element, or attributes of descendant elements,\n          unless overridden by another\n          <code>default-collation</code> attribute on an inner\n          element. It also determines the collation used by certain\n          XSLT constructs (such as <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> and <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>)\n          within its scope.</p>\n\n          <p>The value of the attribute is a whitespace-separated\n          list of collation URIs. <span>If any of these URIs is a\n          relative URI, then it is resolved relative to the base\n          URI of the attribute's parent element. If the\n          implementation recognizes one or more of the resulting\n          absolute collation URIs</span>, then it uses the first\n          one that it recognizes as the default collation.</p>\n\n          <p><a name = \"err-XTSE0125\" id = \"err-XTSE0125\"><span class = \"error\">[ERR XTSE0125]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the value of an <code>[xsl:]default-collation</code>\n          attribute<span>, after resolving against the base\n          URI,</span> contains no URI that the implementation\n          recognizes as a collation URI.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The reason the attribute allows a list of collation\n            URIs is that collation URIs will often be meaningful\n            only to one particular XSLT implementation. Stylesheets\n            designed to run with several different implementations\n            can therefore specify several different collation URIs,\n            one for use with each. To avoid the above error\n            condition, it is possible to specify the Unicode\n            Codepoint Collation as the last collation URI in the\n            list.</p>\n          </div>\n\n          <p>The <code>[xsl:]default-collation</code> attribute\n          does not affect the collation used by\n          <code>xsl:sort</code>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"user-defined-top-level\" id = \"user-defined-top-level\"></a>3.6.2 User-defined Data\n          Elements</h4>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-data-element\" id = \"dt-data-element\" title = \"user-defined data element\"></a>In addition to <a title = \"declaration\" href = \"#dt-declaration\">declarations</a>,\n          the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element may contain any element not from the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, provided that the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element\n          has a non-null namespace URI. Such elements are referred\n          to as <b>user-defined data elements</b>.<span class = \"definition\">]</span></p>\n\n          <p><a name = \"err-XTSE0130\" id = \"err-XTSE0130\"><span class = \"error\">[ERR XTSE0130]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element has a child element whose name has a null\n          namespace URI.</p>\n\n          <p>An implementation <span class = \"verb\">may</span> attach\n          <span>an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a></span>\n          meaning to user-defined data elements that appear in\n          <span>particular namespaces</span>. The set of namespaces\n          that are recognized for such data elements is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          The presence of a user-defined data element <span class = \"verb\">must not</span> change the behavior of <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a>\n          and functions defined in this document; for example, it\n          is not permitted for a user-defined data element to\n          specify that <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          should use different rules to resolve conflicts.\n          <span>The constraints on what user-defined data elements\n          can and cannot do are exactly the same as the constraints\n          on <a title = \"extension attribute\" href = \"#dt-extension-attribute\">extension attributes</a>,\n          described in <a href = \"#extension-attributes\"><i>3.3\n          Extension Attributes</i></a>.</span> Thus, an\n          implementation is always free to ignore user-defined data\n          elements, and <span class = \"verb\">must</span> ignore such\n          data elements without giving an error if it does not\n          recognize the namespace URI.</p>\n\n          <p>User-defined data elements can provide, for\n          example,</p>\n\n          <ul>\n            <li>\n              <p>information used by <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n              instructions</a> or <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>\n              (see <a href = \"#extension\"><i>18 Extensibility and\n              Fallback</i></a>),</p>\n            </li>\n\n            <li>\n              <p>information about what to do with any <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>,</p>\n            </li>\n\n            <li>\n              <p>information about how to construct <a title = \"source tree\" href = \"#dt-source-tree\">source\n              trees</a>,</p>\n            </li>\n\n            <li>\n              <p>optimization hints for the <a title = \"processor\" href = \"#dt-processor\">processor</a>,</p>\n            </li>\n\n            <li>\n              <p>metadata about the stylesheet,</p>\n            </li>\n\n            <li>\n              <p>structured documentation for the stylesheet.</p>\n            </li>\n          </ul>\n\n          <p>A <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data element</a>\n          <span class = \"verb\">must not</span> precede an <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> element\n          within a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a>\n          <span><span class = \"error\">[see <a href = \"#err-XTSE0200\">ERR XTSE0200</a>]</span></span></p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"simplified-stylesheet\" id = \"simplified-stylesheet\"></a>3.7 Simplified Stylesheet\n        Modules</h3>\n\n        <p>A simplified syntax is allowed for a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet\n        module</a> that defines only a single template rule for the\n        document node. The stylesheet module may consist of just a\n        <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>\n        (see <a href = \"#literal-result-element\"><i>11.1 Literal\n        Result Elements</i></a>) together with its contents.\n        <span>The literal result element must have an\n        <code>xsl:version</code> attribute (and it must therefore\n        also declare the XSLT namespace).</span> Such a stylesheet\n        <span>module</span> is equivalent to a standard stylesheet\n        module whose <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element contains a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> containing the\n        literal result element, <span>minus its\n        <code>xsl:version</code> attribute</span>; the template\n        rule has a match <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> of <code>/</code>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e3741\" id = \"d5e3741\"></a>Example: A\n            Simplified Stylesheet\n          </div>\n\n          <p>For example:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;html xsl:version=\"2.0\"\n      xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n      xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Expense Report Summary&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Total Amount: &lt;xsl:value-of select=\"expense-report/total\"/&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n          </div>\n\n          <p>has the same meaning as</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:stylesheet version=\"2.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;xsl:template match=\"/\"&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Expense Report Summary&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Total Amount: &lt;xsl:value-of select=\"expense-report/total\"/&gt;&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre>\n          </div>\n\n          <p>Note that it is not possible, using a simplified\n          stylesheet, to request that the serialized output\n          contains a <code>DOCTYPE</code> declaration. This can\n          only be done by using a standard stylesheet module, and\n          using the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          element.</p>\n        </div>\n\n        <p>More formally, a simplified stylesheet module is\n        equivalent to the standard stylesheet module that would be\n        generated by applying the following transformation to the\n        simplified stylesheet module, invoking the transformation\n        by calling the <a title = \"named template\" href = \"#dt-named-template\">named template</a>\n        <code>expand</code>, with the containing literal result\n        element as the <a title = \"context node\" href = \"#dt-context-node\">context node</a>:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:stylesheet version=\"2.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:template name=\"expand\"&gt;\n  &lt;xsl:element name=\"xsl:stylesheet\"&gt;\n    &lt;xsl:attribute name=\"version\" select=\"@xsl:version\"/&gt;\n    &lt;xsl:element name=\"xsl:template\"&gt;\n      &lt;xsl:attribute name=\"match\"&gt;/&lt;/xsl:attribute&gt;\n      &lt;xsl:copy-of select=\".\"/&gt;\n    &lt;/xsl:element&gt;\n  &lt;/xsl:element&gt;\n&lt;/xsl:template&gt;  \n\n&lt;/xsl:stylesheet&gt;\n</pre>\n        </div>\n\n        <p><a name = \"err-XTSE0150\" id = \"err-XTSE0150\"><span class = \"error\">[ERR XTSE0150]</span></a> A <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>\n        that is used as the outermost element of a simplified\n        stylesheet module <span class = \"verb\">must</span> have an\n        <code>xsl:version</code> attribute. This indicates the\n        version of XSLT that the stylesheet requires. For this\n        version of XSLT, the value will normally be\n        <code>2.0</code>; the value <span class = \"verb\">must</span>\n        be a <span>valid instance of the type\n        <code>xs:decimal</code> as defined in <a href = \"#xmlschema-2\">[XML Schema Part 2]</a></span>.</p>\n\n        <p>Other <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result elements</a>\n        may also have an <code>xsl:version</code> attribute. When\n        the <code>xsl:version</code> attribute is numerically less\n        than <code>2.0</code>, backwards-compatible processing\n        behavior is enabled (see <a href = \"#backwards\"><i>3.8\n        Backwards-Compatible Processing</i></a>). When the\n        <code>xsl:version</code> attribute is numerically greater\n        than <code>2.0</code>, <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a> is enabled (see <a href = \"#forwards\"><i>3.9\n        Forwards-Compatible Processing</i></a>).</p>\n\n        <p>The allowed content of a literal result element when\n        used as a simplified stylesheet is the same as when it\n        occurs within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>. Thus,\n        a literal result element used as the document element of a\n        simplified stylesheet cannot contain <a title = \"declaration\" href = \"#dt-declaration\">declarations</a>. <span>Simplified\n        stylesheets therefore cannot use <a title = \"global variable\" href = \"#dt-global-variable\">global variables</a>, <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>,\n        <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a>,\n        <a title = \"key\" href = \"#dt-key\">keys</a>, <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute-sets</a>, or <a title = \"output definition\" href = \"#dt-output-definition\">output\n        definitions</a>. In turn this means that the only useful\n        way to initiate the transformation is to supply a document\n        node as the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>, to be\n        matched by the implicit <code>match=\"/\"</code> template\n        rule using the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a>.</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"backwards\" id = \"backwards\"></a>3.8\n        Backwards-Compatible Processing</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-backwards-compatible-behavior\" id = \"dt-backwards-compatible-behavior\" title = \"backwards compatible behavior\"></a>An element enables\n        backwards-compatible behavior for itself, its attributes,\n        its descendants and their attributes if it has an\n        <code>[xsl:]version</code> attribute (see <a href = \"#standard-attributes\"><i>3.5 Standard Attributes</i></a>)\n        whose value is less than <code>2.0</code>.<span class = \"definition\">]</span></p>\n\n        <p>An element that has an <code>[xsl:]version</code>\n        attribute whose value is greater than or equal to\n        <code>2.0</code> disables backwards-compatible behavior for\n        itself, its attributes, its descendants and their\n        attributes. The compatibility behavior established by an\n        element overrides any compatibility behavior established by\n        an ancestor element.</p>\n\n        <p>If an attribute containing an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> is\n        processed with backwards-compatible behavior, then the\n        expression is evaluated with <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n        set to <code>true</code>. For details of this mode, see\n        <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section\n        2.1.1 Static Context</a><sup><small>XP</small></sup>.\n        <span>Furthermore, in such an expression any function call\n        for which no implementation is available (unless it uses\n        the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n        namespace</a>) is bound to a fallback error function whose\n        effect when evaluated is to raise a dynamic error\n        <span class = \"error\">[see <a href = \"#err-XTDE1425\">ERR\n        XTDE1425</a>]</span> . The effect is that with\n        backwards-compatible behavior enabled, calls on <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a> that are\n        not available in a particular implementation do not cause\n        an error unless the function call is actually evaluated.\n        For further details, see <a href = \"#extension-functions\"><i>18.1 Extension\n        Functions</i></a>.</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This might appear to contradict the specification of\n          XPath 2.0, which states that a static error [XPST0017] is\n          raised when an expression contains a call to a function\n          that is not present (with matching name and arity) in the\n          static context. This apparent contradiction is resolved\n          by specifying that the XSLT processor constructs a static\n          context for the expression in which every possible\n          function name and arity (other than names in the\n          <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n          namespace</a>) is present; when no other implementation\n          of the function is available, the function call is bound\n          to a fallback error function whose run-time effect is to\n          raise a dynamic error.</p>\n        </div>\n\n        <p>Certain XSLT constructs also produce different results\n        when backwards-compatible behavior is enabled. This is\n        described separately for each such construct.</p>\n\n        <p>These rules do not apply to the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> element,\n        whose <code>version</code> attribute has an entirely\n        different purpose: it is used to define the version of the\n        output method to be used for serialization.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p><span>By making use of backwards-compatible behavior,\n          it is possible to write the stylesheet in a way that\n          ensures that its results when processed with an XSLT 2.0\n          processor are identical to the effects of processing the\n          same stylesheet using an XSLT 1.0 processor.</span> The\n          differences are described (non-normatively) in <a href = \"#incompatibilities\"><i>J.1 Incompatible Changes</i></a>.\n          To assist with transition, some parts of a stylesheet may\n          be processed with backwards compatible behavior enabled,\n          and other parts with this behavior disabled. All data\n          values manipulated by an XSLT 2.0 processor are defined\n          by the <span>XDM</span> data model, whether or not the\n          relevant expressions use backwards compatible behavior.\n          Because the same data model is used in both cases,\n          expressions are fully composable. The result of\n          evaluating instructions or expressions with backwards\n          compatible behavior is fully defined in the XSLT 2.0 and\n          XPath 2.0 specifications, it is not defined by reference\n          to the XSLT 1.0 and XPath 1.0 specifications.</p>\n        </div>\n\n        <p>It is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        whether a particular XSLT 2.0 implementation supports\n        backwards-compatible behavior.</p>\n\n        <p><a name = \"err-XTDE0160\" id = \"err-XTDE0160\"><span class = \"error\">[ERR XTDE0160]</span></a> If an implementation does\n        not support backwards-compatible behavior, then it is a\n        <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if any element is evaluated that enables\n        backwards-compatible behavior.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>To write a stylesheet that works with both XSLT 1.0\n          and 2.0 processors, while making selective use of XSLT\n          2.0 facilities, it is necessary to understand both the\n          rules for backwards-compatible behavior in XSLT 2.0, and\n          the rules for forwards-compatible behavior in XSLT 1.0.\n          If the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element specifies <code>version=\"2.0\"</code>, then an\n          XSLT 1.0 processor will ignore XSLT 2.0 <a title = \"declaration\" href = \"#dt-declaration\">declarations</a>\n          that were not defined in XSLT 1.0, for example <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> and\n          <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>.\n          If any new XSLT 2.0 instructions are used (for example\n          <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          or <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>), or\n          if new XPath 2.0 features are used (for example, new\n          functions, or syntax such as conditional expressions, or\n          calls to a function defined using <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>), then\n          the stylesheet must provide fallback behavior that relies\n          on XSLT 1.0 and XPath 1.0 facilities only. The fallback\n          behavior can be invoked by using the <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          instruction, or by testing the results of the <a href = \"#function-function-available\"><code>function-available</code></a>\n          or <a href = \"#function-element-available\"><code>element-available</code></a>\n          functions, or by testing the value of the\n          <code>xsl:version</code> property returned by the\n          <a href = \"#function-system-property\"><code>system-property</code></a>\n          function.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"forwards\" id = \"forwards\"></a>3.9\n        Forwards-Compatible Processing</h3>\n\n        <p>The intent of forwards-compatible behavior is to make it\n        possible to write a stylesheet that takes advantage of\n        features introduced in some version of XSLT subsequent to\n        XSLT 2.0, while retaining the ability to execute the\n        stylesheet with an XSLT 2.0 processor using appropriate\n        fallback behavior.</p>\n\n        <p>It is always possible to write conditional code to run\n        under different XSLT versions by using the\n        <code>use-when</code> feature described in <a href = \"#conditional-inclusion\"><i>3.12 Conditional Element\n        Inclusion</i></a>. The rules for forwards-compatible\n        behavior supplement this mechanism in two ways:</p>\n\n        <ul>\n          <li>\n            <p>certain constructs in the stylesheet that mean\n            nothing to an XSLT 2.0 processor are ignored, rather\n            than being treated as errors.</p>\n          </li>\n\n          <li>\n            <p>explicit fallback behavior can be defined for\n            instructions defined in a future XSLT release, using\n            the <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n            instruction.</p>\n          </li>\n        </ul>\n\n        <p>The detailed rules follow.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-forwards-compatible-behavior\" id = \"dt-forwards-compatible-behavior\" title = \"forwards-compatible behavior\"></a>An element enables\n        <b>forwards-compatible behavior</b> for itself, its\n        attributes, its descendants and their attributes if it has\n        an <code>[xsl:]version</code> attribute (see <a href = \"#standard-attributes\"><i>3.5 Standard Attributes</i></a>)\n        whose value is greater than <code>2.0</code>.<span class = \"definition\">]</span></p>\n\n        <p>An element that has an <code>[xsl:]version</code>\n        attribute whose value is less than or equal to\n        <code>2.0</code> disables forwards-compatible behavior for\n        itself, its attributes, its descendants and their\n        attributes. The compatibility behavior established by an\n        element overrides any compatibility behavior established by\n        an ancestor element.</p>\n\n        <p>These rules do not apply to the <code>version</code>\n        attribute of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> element,\n        which has an entirely different purpose: it is used to\n        define the version of the output method to be used for\n        serialization.</p>\n\n        <p>Within a section of a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where forwards-compatible\n        behavior is enabled:</p>\n\n        <ul>\n          <li>\n            <p>if an element in the XSLT namespace appears as a\n            child of the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n            element, and XSLT 2.0 does not allow such elements to\n            occur as children of the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n            element, then the element and its content <span class = \"verb\">must</span> be ignored.</p>\n          </li>\n\n          <li>\n            <p>if an element has an attribute that XSLT 2.0 does\n            not allow the element to have, then the attribute\n            <span class = \"verb\">must</span> be ignored.</p>\n          </li>\n\n          <li>\n            <p>if an element in the XSLT namespace appears as part\n            of a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n            and XSLT 2.0 does not allow such elements to appear as\n            part of a sequence constructor, then:</p>\n\n            <ol class = \"enumar\">\n              <li>\n                <p>If the element has one or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n                children, then no error is reported either\n                statically or dynamically, and the result of\n                evaluating the instruction is the concatenation of\n                the sequences formed by evaluating the sequence\n                constructors within its <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n                children, in document order. Siblings of the\n                <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n                elements are ignored, even if they are valid XSLT\n                2.0 instructions.</p>\n              </li>\n\n              <li>\n                <p>If the element has no <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n                children, then a static error is reported in the\n                same way as if forwards-compatible behavior were\n                not enabled.</p>\n              </li>\n            </ol>\n          </li>\n        </ul>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e4106\" id = \"d5e4106\"></a>Example: Forwards\n            Compatible Behavior\n          </div>\n\n          <p><span>For example, an XSLT 2.0 <a title = \"processor\" href = \"#dt-processor\">processor</a> will</span> process\n          the following stylesheet without error, although the\n          stylesheet includes elements from the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a> that are not defined in this\n          specification:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:stylesheet version=\"17.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:exciting-new-17.0-feature&gt;\n      &lt;xsl:fly-to-the-moon/&gt;\n      &lt;xsl:fallback&gt;\n        &lt;html&gt;\n          &lt;head&gt;\n            &lt;title&gt;XSLT 17.0 required&lt;/title&gt;\n          &lt;/head&gt;\n          &lt;body&gt;\n            &lt;p&gt;Sorry, this stylesheet requires XSLT 17.0.&lt;/p&gt;\n          &lt;/body&gt;\n        &lt;/html&gt;\n      &lt;/xsl:fallback&gt;\n    &lt;/xsl:exciting-new-17.0-feature&gt;\n  &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre>\n          </div>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>If a stylesheet depends crucially on a <a title = \"declaration\" href = \"#dt-declaration\">declaration</a>\n          introduced by a version of XSLT after 2.0, then the\n          stylesheet can use an <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> element\n          with <code>terminate=\"yes\"</code> (see <a href = \"#message\"><i>17 Messages</i></a>) to ensure that\n          implementations that conform to an earlier version of\n          XSLT will not silently ignore the <a title = \"declaration\" href = \"#dt-declaration\">declaration</a>.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e4139\" id = \"d5e4139\"></a>Example: Testing the\n            XSLT Version\n          </div>\n\n          <p>For example,</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:stylesheet version=\"18.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n  &lt;xsl:important-new-17.0-declaration/&gt;\n\n  &lt;xsl:template match=\"/\"&gt;\n    &lt;xsl:choose&gt;\n      &lt;xsl:when test=\"number(system-property('xsl:version')) lt 17.0\"&gt;\n        &lt;xsl:message terminate=\"yes\"&gt;\n          &lt;xsl:text&gt;Sorry, this stylesheet requires XSLT 17.0.&lt;/xsl:text&gt;\n        &lt;/xsl:message&gt;\n      &lt;/xsl:when&gt;\n      &lt;xsl:otherwise&gt;\n        ...\n      &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n  &lt;/xsl:template&gt;\n  ...\n&lt;/xsl:stylesheet&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"combining-modules\" id = \"combining-modules\"></a>3.10 Combining Stylesheet\n        Modules</h3>\n\n        <p>XSLT provides two mechanisms to construct a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> from\n        multiple <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a>:</p>\n\n        <ul>\n          <li>\n            <p>an inclusion mechanism that allows stylesheet\n            modules to be combined without changing the semantics\n            of the modules being combined, and</p>\n          </li>\n\n          <li>\n            <p>an import mechanism that allows stylesheet modules\n            to override each other.</p>\n          </li>\n        </ul>\n\n        <div class = \"div3\">\n          <h4><a name = \"locating-modules\" id = \"locating-modules\"></a>3.10.1 Locating Stylesheet\n          Modules</h4>\n\n          <p>The include and import mechanisms use two\n          declarations, <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> and\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>,\n          which are defined in the sections that follow.</p>\n\n          <p>These declarations use an <code>href</code> attribute,\n          whose value is a <a title = \"URI Reference\" href = \"#dt-uri-reference\">URI reference</a>, to identify the\n          <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> to be\n          included or imported. If the value of this attribute is a\n          relative URI, it is resolved <span>as described in\n          <a href = \"#uri-references\"><i>5.8 URI\n          References</i></a></span>.</p>\n\n          <p>After resolving against the base URI, the way in which\n          the URI reference is used to locate a\n          <span>representation of a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a>, and\n          the way in which the stylesheet module is constructed\n          from that representation, are</span> <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          In particular, it is implementation-defined which URI\n          schemes are supported, whether fragment identifiers are\n          supported, and what media types are supported.\n          Conventionally, the URI is a reference to a resource\n          containing the stylesheet module as a source XML\n          document, or it may include a fragment identifier that\n          selects an embedded stylesheet module within a source XML\n          document; but the implementation is free to use other\n          mechanisms to locate the stylesheet module identified by\n          the URI reference.</p>\n\n          <p>The referenced <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> may be any\n          of the four kinds of stylesheet module: that is, it may\n          be <a title = \"standalone stylesheet module\" href = \"#dt-standalone-stylesheet-module\">standalone</a> or\n          <a title = \"embedded stylesheet module\" href = \"#dt-embedded-stylesheet-module\">embedded</a>, and it may\n          be <a title = \"standard stylesheet module\" href = \"#dt-standard-stylesheet-module\">standard</a> or\n          <a title = \"simplified stylesheet module\" href = \"#dt-simplified-stylesheet-module\">simplified</a>. If it\n          is a <a title = \"simplified stylesheet module\" href = \"#dt-simplified-stylesheet-module\">simplified stylesheet\n          module</a> then it is transformed into the equivalent\n          <a title = \"standard stylesheet module\" href = \"#dt-standard-stylesheet-module\">standard stylesheet\n          module</a> by applying the transformation described in\n          <a href = \"#simplified-stylesheet\"><i>3.7 Simplified\n          Stylesheet Modules</i></a>.</p>\n\n          <p>Implementations <span class = \"verb\">may</span> choose\n          to accept URI references containing a fragment identifier\n          defined by reference to the XPointer specification (see\n          <a href = \"#xptr-framework\">[XPointer Framework]</a>). Note\n          that if the implementation does not support the use of\n          fragment identifiers in the URI reference, then it will\n          not be possible to include an <a title = \"embedded stylesheet module\" href = \"#dt-embedded-stylesheet-module\">embedded stylesheet\n          module</a>.</p>\n\n          <p><a name = \"err-XTSE0165\" id = \"err-XTSE0165\"><span class = \"error\">[ERR XTSE0165]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the processor is not able to retrieve the resource\n          identified by the URI reference, or if the resource that\n          is retrieved does not contain a stylesheet module\n          conforming to this specification.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"include\" id = \"include\"></a>3.10.2 Stylesheet\n          Inclusion</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-include\" id = \"XSLT_element-include\"></a><code>&lt;!-- Category: declaration\n          --&gt;<br/>\n          &lt;xsl:include<br/>\n          &#160;&#160;<b>href</b> =\n          <var>uri-reference</var>&#160;/&gt;</code></p>\n\n          <p>A stylesheet module may include another stylesheet\n          module using an <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declaration.</p>\n\n          <p>The <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declaration has a <span class = \"verb\">required</span>\n          <code>href</code> attribute whose value is a URI\n          reference identifying the stylesheet module to be\n          included. This attribute is used as described in <a href = \"#locating-modules\"><i>3.10.1 Locating Stylesheet\n          Modules</i></a>.</p>\n\n          <p><a name = \"err-XTSE0170\" id = \"err-XTSE0170\"><span class = \"error\">[ERR XTSE0170]</span></a> An <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          <span class = \"verb\">must</span> be a <a title = \"top-level\" href = \"#dt-top-level\">top-level</a> element.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stylesheet-level\" id = \"dt-stylesheet-level\" title = \"stylesheet level\"></a>A <b>stylesheet level</b> is a\n          collection of <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> connected\n          using <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declarations: specifically, two stylesheet modules\n          <var>A</var> and <var>B</var> are part of the same\n          stylesheet level if one of them includes the other by\n          means of an <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declaration, or if there is a third stylesheet module\n          <var>C</var> that is in the same stylesheet level as both\n          <var>A</var> and <var>B</var>.<span class = \"definition\">]</span></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-declaration-order\" id = \"dt-declaration-order\" title = \"declaration order\"></a>The <a title = \"declaration\" href = \"#dt-declaration\">declarations</a> within a <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet\n          level</a> have a total ordering known as <b>declaration\n          order</b>. The order of declarations within a stylesheet\n          level is the same as the document order that would result\n          if each stylesheet module were inserted textually in\n          place of the <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          that references it.<span class = \"definition\">]</span> In\n          other respects, however, the effect of <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> is not\n          equivalent to the effect that would be obtained by\n          textual inclusion.</p>\n\n          <p><a name = \"err-XTSE0180\" id = \"err-XTSE0180\"><span class = \"error\">[ERR XTSE0180]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a stylesheet module directly or indirectly includes\n          itself.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It is not intrinsically an error for a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to\n            include the same module more than once. However, doing\n            so can cause errors because of duplicate definitions.\n            Such multiple inclusions are less obvious when they are\n            indirect. For example, if stylesheet <var>B</var>\n            includes stylesheet <var>A</var>, stylesheet\n            <var>C</var> includes stylesheet <var>A</var>, and\n            stylesheet <var>D</var> includes both stylesheet\n            <var>B</var> and stylesheet <var>C</var>, then\n            <var>A</var> will be included indirectly by\n            <var>D</var> twice. If all of <var>B</var>,\n            <var>C</var> and <var>D</var> are used as independent\n            stylesheets, then the error can be avoided by\n            separating everything in <var>B</var> other than the\n            inclusion of <var>A</var> into a separate stylesheet\n            <var>B'</var> and changing <var>B</var> to contain just\n            inclusions of <var>B'</var> and <var>A</var>, similarly\n            for <var>C</var>, and then changing <var>D</var> to\n            include <var>A</var>, <var>B'</var>, <var>C'</var>.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"import\" id = \"import\"></a>3.10.3 Stylesheet\n          Import</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-import\" id = \"XSLT_element-import\"></a><code>&lt;!-- Category: declaration\n          --&gt;<br/>\n          &lt;xsl:import<br/>\n          &#160;&#160;<b>href</b> =\n          <var>uri-reference</var>&#160;/&gt;</code></p>\n\n          <p>A stylesheet module may import another <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> using an\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n          <a title = \"declaration\" href = \"#dt-declaration\">declaration</a>. Importing a stylesheet\n          <span>module</span> is the same as including it (see\n          <a href = \"#include\"><i>3.10.2 Stylesheet\n          Inclusion</i></a>) except that <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a> and other\n          <a title = \"declaration\" href = \"#dt-declaration\">declarations</a> in the importing\n          <span>module</span> take precedence over template rules\n          and declarations in the imported <span>module</span>;\n          this is described in more detail below.</p>\n\n          <p>The <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> declaration\n          has a <span class = \"verb\">required</span>\n          <code>href</code> attribute whose value is a URI\n          reference identifying the stylesheet module to be\n          included. This attribute is used as described in <a href = \"#locating-modules\"><i>3.10.1 Locating Stylesheet\n          Modules</i></a>.</p>\n\n          <p><a name = \"err-XTSE0190\" id = \"err-XTSE0190\"><span class = \"error\">[ERR XTSE0190]</span></a> An <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> element\n          <span class = \"verb\">must</span> be a <a title = \"top-level\" href = \"#dt-top-level\">top-level</a> element.</p>\n\n          <p><a name = \"err-XTSE0200\" id = \"err-XTSE0200\"><span class = \"error\">[ERR XTSE0200]</span></a> The <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> element\n          children <span class = \"verb\">must</span> precede all other\n          element children of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element, including any <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          children and any <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data\n          elements</a>.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e4538\" id = \"d5e4538\"></a>Example: Using\n              <code>xsl:import</code>\n            </div>\n\n            <p>For example,</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:stylesheet version=\"2.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;xsl:import href=\"article.xsl\"/&gt;\n  &lt;xsl:import href=\"bigfont.xsl\"/&gt;\n  &lt;xsl:attribute-set name=\"note-style\"&gt;\n    &lt;xsl:attribute name=\"font-style\"&gt;italic&lt;/xsl:attribute&gt;\n  &lt;/xsl:attribute-set&gt;\n&lt;/xsl:stylesheet&gt;\n</pre>\n            </div>\n          </div>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-import-tree\" id = \"dt-import-tree\" title = \"import tree\"></a>The <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet levels</a> making up a\n          <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> are treated as forming an\n          <b>import tree</b>. In the import tree, each stylesheet\n          level has one child for each <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> declaration\n          that it contains.<span class = \"definition\">]</span> The\n          ordering of the children is the <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a> of the\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n          declarations within their stylesheet level.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-import-precedence\" id = \"dt-import-precedence\" title = \"import precedence\"></a>A <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> <var>D</var> in the\n          stylesheet is defined to have lower <b>import\n          precedence</b> than another declaration <var>E</var> if\n          the stylesheet level containing <var>D</var> would be\n          visited before the stylesheet level containing\n          <var>E</var> in a post-order traversal of the import tree\n          (that is, a traversal of the import tree in which a\n          stylesheet level is visited after its children). Two\n          declarations within the same stylesheet level have the\n          same import precedence.<span class = \"definition\">]</span></p>\n\n          <p>For example, suppose</p>\n\n          <ul>\n            <li>\n              <p>stylesheet module <var>A</var> imports stylesheet\n              modules <var>B</var> and <var>C</var> in that\n              order;</p>\n            </li>\n\n            <li>\n              <p>stylesheet module <var>B</var> imports stylesheet\n              module <var>D</var>;</p>\n            </li>\n\n            <li>\n              <p>stylesheet module <var>C</var> imports stylesheet\n              module <var>E</var>.</p>\n            </li>\n          </ul>\n\n          <p>Then the import tree has the following structure:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n         A\n         |\n     +---+---+\n     |       |\n     B       C\n     |       |\n     D       E\n</pre>\n          </div>\n\n          <p>The order of import precedence (lowest first) is\n          <var>D</var>, <var>B</var>, <var>E</var>, <var>C</var>,\n          <var>A</var>.</p>\n\n          <p>In general, a <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> with higher import\n          precedence takes precedence over a declaration with lower\n          import precedence. This is defined in detail for each\n          kind of declaration.</p>\n\n          <p><a name = \"err-XTSE0210\" id = \"err-XTSE0210\"><span class = \"error\">[ERR XTSE0210]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a stylesheet module directly or indirectly imports\n          itself.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The case where a stylesheet module with a particular\n            URI is imported several times is not treated specially.\n            The effect is exactly the same as if several stylesheet\n            modules with different URIs but identical content were\n            imported. This might or might not cause an error,\n            depending on the content of the stylesheet module.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"embedded\" id = \"embedded\"></a>3.11 Embedded\n        Stylesheet Modules</h3>\n\n        <p>An <a title = \"embedded stylesheet module\" href = \"#dt-embedded-stylesheet-module\">embedded stylesheet\n        module</a> is a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> whose\n        containing element is not the outermost element of the\n        containing XML document. Both <a title = \"standard stylesheet module\" href = \"#dt-standard-stylesheet-module\">standard stylesheet\n        modules</a> and <a title = \"simplified stylesheet module\" href = \"#dt-simplified-stylesheet-module\">simplified\n        stylesheet modules</a> may be embedded in this way.</p>\n\n        <p>Two situations where embedded stylesheets may be useful\n        are:</p>\n\n        <ul>\n          <li>\n            <p>The stylesheet may be embedded in the source\n            document to be transformed.</p>\n          </li>\n\n          <li>\n            <p>The stylesheet may be embedded in an XML document\n            that describes a sequence of processing of which the\n            XSLT transformation forms just one part.</p>\n          </li>\n        </ul>\n\n        <p>The <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element <span class = \"verb\">may</span> have an\n        <code>id</code> attribute to facilitate reference to the\n        stylesheet module within the containing document.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>In order for such an attribute value to be used as a\n          fragment identifier in a URI, the <span>XDM attribute\n          node</span> must generally have the <code>is-id</code>\n          property: see <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-is-id\">Section\n          5.5 is-id Accessor</a><sup><small>DM</small></sup>. This\n          property will typically be set if the attribute is\n          defined in a DTD as being of type <code>ID</code>, or if\n          is defined in a schema as being of type\n          <code>xs:ID</code>. It is also necessary that the media\n          type of the containing document should support the use of\n          ID values as fragment identifiers. Such support is\n          widespread in existing products, and is expected to be\n          endorsed in respect of the media type\n          <code>application/xml</code> by a future revision of\n          <a href = \"#RFC3023\">[RFC3023]</a>.</p>\n\n          <p>An alternative, if the implementation supports it, is\n          to use an <code>xml:id</code> attribute. XSLT allows this\n          attribute (like other namespaced attributes) to appear on\n          any <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n          element</a>.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e4734\" id = \"d5e4734\"></a>Example: The\n            <code>xml-stylesheet</code> Processing Instruction\n          </div>\n\n          <p>The following example shows how the\n          <code>xml-stylesheet</code> processing instruction (see\n          <a href = \"#xml-stylesheet\">[XML Stylesheet]</a>) can be\n          used to allow a source document to contain its own\n          stylesheet. The URI reference uses a relative URI with a\n          fragment identifier to locate the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;?xml-stylesheet type=\"application/xslt+xml\" href=\"#style1\"?&gt;\n&lt;!DOCTYPE doc SYSTEM \"doc.dtd\"&gt;\n&lt;doc&gt;\n&lt;head&gt;\n&lt;xsl:stylesheet id=\"style1\"\n                version=\"2.0\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"&gt;\n&lt;xsl:import href=\"doc.xsl\"/&gt;\n&lt;xsl:template match=\"id('foo')\"&gt;\n  &lt;fo:block font-weight=\"bold\"&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n&lt;xsl:template match=\"xsl:stylesheet\"&gt;\n  &lt;!-- ignore --&gt;\n&lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;para id=\"foo\"&gt;\n...\n&lt;/para&gt;\n&lt;/body&gt;\n&lt;/doc&gt;\n</pre>\n          </div>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>A stylesheet module that is embedded in the document\n          to which it is to be applied typically needs to contain a\n          <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> that specifies that\n          <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          elements are to be ignored.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The above example uses the pseudo-attribute\n          <code>type=\"application/xslt+xml\"</code> in the\n          <code>xml-stylesheet</code> processing instruction to\n          denote an XSLT stylesheet. This usage is subject to\n          <span>confirmation</span>: see <a href = \"#xslt-media-type\"><i>3.4 XSLT Media Type</i></a>. In the\n          absence of a registered media type for XSLT stylesheets,\n          some vendors' products have adopted different\n          conventions, notably <code>type=\"text/xsl\"</code>.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Support for the <code>xml-stylesheet</code> processing\n          instruction is not required for conformance with this\n          Recommendation. <span>Implementations are not constrained\n          in the mechanisms they use to identify a stylesheet when\n          a transformation is initiated: see <a href = \"#initiating\"><i>2.3 Initiating a\n          Transformation</i></a>.</span></p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"conditional-inclusion\" id = \"conditional-inclusion\"></a>3.12 Conditional Element\n        Inclusion</h3>\n\n        <p>Any element in the XSLT namespace may have a\n        <code>use-when</code> attribute whose value is an XPath\n        expression that can be evaluated statically. If the\n        attribute is present and the <a href = \"http://www.w3.org/TR/xpath20/#dt-ebv\">effective boolean\n        value</a><sup><small>XP</small></sup> of the expression is\n        false, then the element, together with all the nodes having\n        that element as an ancestor, is effectively excluded from\n        the <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a>. When a node\n        is effectively excluded from a stylesheet module the\n        stylesheet module has the same effect as if the node were\n        not there. Among other things this means that no static or\n        dynamic errors will be reported in respect of the element\n        and its contents, other than errors in the\n        <code>use-when</code> attribute itself.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This does not apply to XML parsing or validation\n          errors, which will be reported in the usual way. <span>It\n          also does not apply to attributes that are necessarily\n          processed before <code>[xsl:]use-when</code>, examples\n          being <code>xml:space</code> and\n          <code>[xsl:]xpath-default-namespace</code></span>.</p>\n        </div>\n\n        <p>A <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>,\n        <span>or any other element within a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet\n        module</a> that is not in the XSLT namespace,</span> may\n        similarly carry an <code>xsl:use-when</code> attribute.</p>\n\n        <p>If the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n        <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n        element itself is effectively excluded, the effect is to\n        exclude all the children of the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n        <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n        element, but not the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n        <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n        element or its attributes.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This allows all the declarations that depend on the\n          same condition to be included in one stylesheet module,\n          and for their inclusion or exclusion to be controlled by\n          a single <code>use-when</code> attribute at the level of\n          the module.</p>\n        </div>\n\n        <p>Conditional element exclusion happens after stripping of\n        whitespace text nodes from the stylesheet, as described in\n        <a href = \"#stylesheet-stripping\"><i>4.2 Stripping Whitespace\n        from the Stylesheet</i></a>.</p>\n\n        <p>There are no syntactic constraints on the XPath\n        expression that can be used as the value of the\n        <code>use-when</code> attribute. However, there are severe\n        constraints on the information provided in its evaluation\n        context. These constraints are designed to ensure that the\n        expression can be evaluated at the earliest possible stage\n        of stylesheet processing, without any dependency on\n        information contained in the stylesheet itself or in any\n        source document.</p>\n\n        <p>Specifically, the components of the static and dynamic\n        context are defined by the following two tables:</p>\n\n        <table border = \"1\" cellpadding = \"5\" width = \"100%\">\n          <caption>\n            Static Context Components for <code>use-when</code>\n            Expressions\n          </caption>\n          <col align = \"left\" width = \"30%\" span = \"1\"/>\n          <col align = \"left\" span = \"1\"/>\n\n          <thead>\n            <tr>\n              <th>Component</th>\n\n              <th>Value</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td valign = \"top\">XPath 1.0 compatibility mode</td>\n\n              <td>false</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope namespaces</td>\n\n              <td>determined by the in-scope namespaces for the\n              containing element in the stylesheet</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Default element/type namespace</td>\n\n              <td>determined by the\n              <code>xpath-default-namespace</code> attribute if\n              present (see <a href = \"#unprefixed-qnames\"><i>5.2\n              Unprefixed QNames in Expressions and\n              Patterns</i></a>); otherwise the null namespace</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Default function namespace</td>\n\n              <td>The <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n              namespace</a></td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope type definitions</td>\n\n              <td>The type definitions that would be available in\n              the absence of any <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n              declaration</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope element declarations</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope attribute declarations</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope variables</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope functions</td>\n\n              <td>The <a title = \"core function\" href = \"#dt-core-function\">core functions</a> defined in\n              <a href = \"#xpath-functions\">[Functions and\n              Operators]</a>, together with the functions <a href = \"#function-element-available\"><code>element-available</code></a>,\n              <a href = \"#function-function-available\"><code>function-available</code></a>,\n              <span><a href = \"#function-type-available\"><code>type-available</code></a>,</span>\n              and <a href = \"#function-system-property\"><code>system-property</code></a>\n              defined in this specification, plus <span>the set of\n              extension functions that are present in the static\n              context of every XPath expression (other than a\n              use-when expression) within the content of the\n              element that is the parent of the\n              <code>use-when</code> attribute</span>. Note that\n              <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a>\n              are <em>not</em> included in the context, which means\n              that the function <a href = \"#function-function-available\"><code>function-available</code></a>\n              will return <code>false</code> in respect of such\n              functions. <span>The effect of this rule is to ensure\n              that <a href = \"#function-function-available\"><code>function-available</code></a>\n              returns true in respect of functions that can be\n              called within the scope of the <code>use-when</code>\n              attribute. It also has the effect that these\n              extensions functions will be recognized within the\n              <code>use-when</code> attribute itself; however, the\n              fact that a function is available in this sense gives\n              no guarantee that a call on the function will\n              succeed.</span></td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">In scope collations</td>\n\n              <td>Implementation-defined</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Default collation</td>\n\n              <td>The Unicode Codepoint Collation</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Base URI</td>\n\n              <td>The base URI of the containing element in the\n              stylesheet</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Statically known documents</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Statically known collections</td>\n\n              <td>None</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <p>&#160;</p>\n\n        <table border = \"1\" cellpadding = \"5\" width = \"100%\">\n          <caption>\n            Dynamic Context Components for <code>use-when</code>\n            Expressions\n          </caption>\n          <col align = \"left\" width = \"30%\" span = \"1\"/>\n          <col align = \"left\" span = \"1\"/>\n\n          <thead>\n            <tr>\n              <th>Component</th>\n\n              <th>Value</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td valign = \"top\">Context item, position, and\n              size</td>\n\n              <td>Undefined</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Dynamic variables</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Current date and time</td>\n\n              <td>Implementation-defined</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Implicit timezone</td>\n\n              <td>Implementation-defined</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Available documents</td>\n\n              <td>None</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">Available collections</td>\n\n              <td>None</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <p>Within a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a>, all\n        expressions contained in <code>[xsl:]use-when</code>\n        attributes are evaluated in a single <a href = \"http://www.w3.org/TR/xpath-functions/#execution-scope\">execution\n        scope</a><sup><small>FO</small></sup>. This need not be the\n        same execution scope as that used for\n        <code>[xsl]:use-when</code> expressions in other stylesheet\n        modules, or as that used when evaluating XPath expressions\n        appearing elsewhere in the stylesheet module. This means\n        that a function such as <a href = \"http://www.w3.org/TR/xpath-functions/#func-current-date\"><code>\n        current-date</code></a><sup><small>FO</small></sup> will\n        return the same result when called in different\n        <code>[xsl:]use-when</code> expressions within the same\n        stylesheet module, but will not necessarily return the same\n        result as the same call in an <code>[xsl:]use-when</code>\n        expression within a different stylesheet module, or as a\n        call on the same function executed during the\n        transformation proper.</p>\n\n        <p>The use of <code>[xsl:]use-when</code> is illustrated in\n        the following examples.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e5094\" id = \"d5e5094\"></a>Example: Using\n            Conditional Exclusion to Achieve Portability\n          </div>\n\n          <p>This example demonstrates the use of the\n          <code>use-when</code> attribute to achieve portability of\n          a stylesheet across schema-aware and non-schema-aware\n          processors.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:import-schema schema-location=\"http://example.com/schema\"\n              use-when=\"system-property('xsl:is-schema-aware')='yes'\"/&gt;\n\n&lt;xsl:template match=\"/\" \n              use-when=\"system-property('xsl:is-schema-aware')='yes'\" \n              priority=\"2\"&gt;\n  &lt;xsl:result-document validation=\"strict\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/xsl:result-document&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:apply-templates/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The effect of these declarations is that a\n          non-schema-aware processor ignores the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          declaration and the first template rule, and therefore\n          generates no errors in respect of the schema-related\n          constructs in these declarations.</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e5109\" id = \"d5e5109\"></a>Example: Including\n            Variant Stylesheet Modules\n          </div>\n\n          <p>This example includes different stylesheet modules\n          depending on which XSLT processor is in use.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:include href=\"module-A.xsl\" \n     use-when=\"system-property('xsl:vendor')='vendor-A'\"/&gt;\n&lt;xsl:include href=\"module-B.xsl\" \n     use-when=\"system-property('xsl:vendor')='vendor-B'\"/&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"built-in-types\" id = \"built-in-types\"></a>3.13\n        Built-in Types</h3>\n\n        <p>Every XSLT 2.0 processor includes the following named\n        type definitions in the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        components</a>:</p>\n\n        <ul>\n          <li>\n            <p>All the primitive atomic types defined in <a href = \"#xmlschema-2\">[XML Schema Part 2]</a>, with the\n            exception of <code>xs:NOTATION</code>. That is:\n            <code>xs:string</code>, <code>xs:boolean</code>,\n            <code>xs:decimal</code>, <code>xs:double</code>,\n            <code>xs:float</code>, <code>xs:date</code>,\n            <code>xs:time</code>, <code>xs:dateTime</code>,\n            <code>xs:duration</code>, <code>xs:QName</code>,\n            <code>xs:anyURI</code>, <code>xs:gDay</code>,\n            <code>xs:gMonthDay</code>, <code>xs:gMonth</code>,\n            <code>xs:gYearMonth</code>, <code>xs:gYear</code>,\n            <code>xs:base64Binary</code>, and\n            <code>xs:hexBinary</code>.</p>\n          </li>\n\n          <li>\n            <p>The derived atomic type <code>xs:integer</code>\n            defined in <a href = \"#xmlschema-2\">[XML Schema Part\n            2]</a>.</p>\n          </li>\n\n          <li>\n            <p>The types <code>xs:anyType</code> and\n            <code>xs:anySimpleType</code>.</p>\n          </li>\n\n          <li>\n            <p>The following types defined in <a href = \"#xpath20\">[XPath 2.0]</a>:\n            <span><code>xs:yearMonthDuration</code></span>,\n            <span><code>xs:dayTimeDuration</code></span>,\n            <span><code>xs:anyAtomicType</code></span>,\n            <span><code>xs:untyped</code></span>, and\n            <span><code>xs:untypedAtomic</code></span>.</p>\n          </li>\n        </ul>\n\n        <p>A <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n        processor</a> additionally supports:</p>\n\n        <ul>\n          <li>\n            <p>All other built-in types defined in <a href = \"#xmlschema-2\">[XML Schema Part 2]</a></p>\n          </li>\n\n          <li>\n            <p>User-defined types, and element and attribute\n            declarations, that are imported using an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n            declaration as described in <a href = \"#import-schema\"><i>3.14 Importing Schema\n            Components</i></a>. These may include both simple and\n            complex types.</p>\n          </li>\n        </ul>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The names that are imported from the XML Schema\n          namespace do not include all the names of top-level types\n          defined in either the Schema for Schemas or the Schema\n          for Datatypes. The Schema for Datatypes, as well as\n          defining built-in types such as <code>xs:integer</code>\n          and <code>xs:double</code>, also defines types that are\n          intended for use only within the Schema for DataTypes,\n          such as <code>xs:derivationControl</code>. A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that is\n          designed to process XML Schema documents as its input or\n          output may import the Schema for Schemas.</p>\n        </div>\n\n        <p>An implementation may define mechanisms that allow\n        additional <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> to be added to\n        the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        components</a> for the stylesheet. For example, the\n        mechanisms used to define <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a> (see\n        <a href = \"#extension-functions\"><i>18.1 Extension\n        Functions</i></a>) may also be used to import the types\n        used in the interface to such functions.</p>\n\n        <p>These <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> are the only\n        ones that may be referenced in XPath expressions within the\n        stylesheet, or in the <code>[xsl:]type</code> and\n        <code>as</code> attributes of those elements that permit\n        these attributes.</p>\n\n        <p>For a Basic XSLT Processor, schema built-in types that\n        are not included in the static context (for example,\n        <code>xs:NCName</code>) are \"unknown types\" in the sense of\n        <a href = \"http://www.w3.org/TR/xpath20/#id-sequencetype-matching\">Section\n        2.5.4 SequenceType\n        Matching</a><sup><small>XP</small></sup>. In the language\n        of that section, a Basic XSLT Processor <span class = \"verb\">must</span> be able to determine whether these\n        unknown types are derived from known schema types such as\n        <code>xs:string</code>. The purpose of this rule is to\n        ensure that system functions such as <a href = \"http://www.w3.org/TR/xpath-functions/#func-local-name-from-QName\">\n        <code>local-name-from-QName</code></a><sup><small>FO</small></sup>,\n        which is defined to return an <code>xs:NCName</code>,\n        behave correctly. A stylesheet that uses a Basic XSLT\n        Processor will not be able to test whether the returned\n        value is an <code>xs:NCName</code>, but it will be able to\n        use it as if it were an <code>xs:string</code>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"import-schema\" id = \"import-schema\"></a>3.14\n        Importing Schema Components</h3>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The facilities described in this section are not\n          available with a <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>. They\n          require a <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n          processor</a>, as described in <a href = \"#conformance\"><i>21 Conformance</i></a>.</p>\n        </div>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-import-schema\" id = \"XSLT_element-import-schema\"></a><code>&lt;!-- Category:\n        declaration --&gt;<br/>\n        &lt;xsl:import-schema<br/>\n        &#160;&#160;namespace? = <var>uri-reference</var><br/>\n        &#160;&#160;schema-location? =\n        <var>uri-reference</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: xs:schema? --&gt;<br/>\n        &lt;/xsl:import-schema&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration is used to identify <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> (that is,\n        top-level type definitions and top-level element and\n        attribute declarations) that need to be available\n        statically, that is, before any source document is\n        available. Names of such components used statically within\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> must refer to an <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        component</a>, which means they must either be built-in\n        types as defined in <a href = \"#built-in-types\"><i>3.13\n        Built-in Types</i></a>, or they must be imported using an\n        <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration.</p>\n\n        <p>The <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration identifies a namespace containing the names of\n        the components to be imported (or indicates that components\n        whose names are in no namespace are to be imported). The\n        effect is that the names of top-level element and attribute\n        declarations and type definitions from this namespace (or\n        non-namespace) become available for use within XPath\n        expressions in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, and within other\n        stylesheet constructs such as the <code>type</code> and\n        <code>as</code> attributes of various <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n        elements</a>.</p>\n\n        <p>The same schema components are available in all\n        stylesheet modules; importing components in one stylesheet\n        module makes them available throughout the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n        <p>The <code>namespace</code> and\n        <code>schema-location</code> attributes are both\n        optional.</p>\n\n        <p>If the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        element contains an <code>xs:schema</code> element, then\n        the <code>schema-location</code> attribute must be absent,\n        and the <code>namespace</code> attribute must either have\n        the same value as the <code>targetNamespace</code>\n        attribute of the <code>xs:schema</code> element (if\n        present), or must be absent, in which case its effective\n        value is that of the <code>targetNamespace</code> attribute\n        of the <code>xs:schema</code> element if present or the\n        zero-length string otherwise.</p>\n\n        <p><a name = \"err-XTSE0215\" id = \"err-XTSE0215\"><span class = \"error\">[ERR XTSE0215]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        element that contains an <code>xs:schema</code> element has\n        a <code>schema-location</code> attribute, or if it has a\n        <code>namespace</code> attribute that conflicts with the\n        target namespace of the contained schema.</p>\n\n        <p>If two <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declarations specify the same namespace, or if both specify\n        no namespace, then only the one with highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n        precedence</a> is used. If this leaves more than one, then\n        all the declarations at the highest import precedence are\n        used (which may cause conflicts, as described below).</p>\n\n        <p>After discarding any <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declarations under the above rule, the effect of the\n        remaining <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declarations is defined in terms of a hypothetical document\n        called the synthetic schema document, which is constructed\n        as follows. The synthetic schema document defines an\n        arbitrary target namespace that is different from any\n        namespace actually used by the application, and it contains\n        <code>xs:import</code> elements corresponding one-for-one\n        with the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declarations in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, with the following\n        correspondence:</p>\n\n        <ul>\n          <li>\n            <p>The <code>namespace</code> attribute of the\n            <code>xs:import</code> element is copied from the\n            <code>namespace</code> attribute of the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n            declaration if it is <span>explicitly present, or is\n            implied by the <code>targetNamespace</code> attribute\n            of a contained <code>xs:schema</code> element,</span>\n            and is absent if it is absent.</p>\n          </li>\n\n          <li>\n            <p>The <code>schemaLocation</code> attribute of the\n            <code>xs:import</code> element is copied from the\n            <code>schema-location</code> attribute of the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n            declaration if present, and is absent if it is absent.\n            <span>If there is a contained <code>xs:schema</code>\n            element, the effective value of the\n            <code>schemaLocation</code> attribute is a URI\n            referencing a document containing a copy of the\n            <code>xs:schema</code> element.</span></p>\n          </li>\n\n          <li>\n            <p>The base URI of the <code>xs:import</code> element\n            is the same as the base URI of the <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n            declaration.</p>\n          </li>\n        </ul>\n\n        <p>The schema components included in the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n        components</a> (that is, the components whose names are\n        available for use within the stylesheet) are the top-level\n        element and attribute declarations and type definitions\n        that are available for reference within the synthetic\n        schema document. See <a href = \"#xmlschema-1\">[XML Schema\n        Part 1]</a> (section 4.2.3, <em>References to schema\n        components across namespaces</em>).</p>\n\n        <p><a name = \"err-XTSE0220\" id = \"err-XTSE0220\"><span class = \"error\">[ERR XTSE0220]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the synthetic schema document does not satisfy the\n        constraints described in <a href = \"#xmlschema-1\">[XML Schema\n        Part 1]</a> (section 5.1, <em>Errors in Schema Construction\n        and Structure</em>). This includes, without loss of\n        generality, conflicts such as multiple definitions of the\n        same name.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The synthetic schema document does not need to be\n          constructed by a real implementation. It is purely a\n          mechanism for defining the semantics of <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          in terms of rules that already exist within the XML\n          Schema specification. In particular, it implicitly\n          defines the rules that determine whether the set of\n          <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          declarations are mutually consistent.</p>\n\n          <p>These rules do not cause names to be imported\n          transitively. The fact that a name is available for\n          reference within a schema document A does not of itself\n          make the name available for reference in a stylesheet\n          that imports the target namespace of schema document A.\n          (See <a href = \"#xmlschema-1\">[XML Schema Part 1]</a>\n          section 3.15.3, Constraints on XML Representations of\n          Schemas.) The stylesheet must import all the namespaces\n          containing names that it actually references.</p>\n\n          <p>The <code>namespace</code> attribute indicates that a\n          schema for the given namespace is required by the\n          <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. This information may be\n          enough on its own to enable an implementation to locate\n          the required schema components. The\n          <code>namespace</code> attribute may be omitted to\n          indicate that a schema for names in no namespace is being\n          imported. The zero-length string is not a valid namespace\n          URI, and is therefore not a valid value for the\n          <code>namespace</code> attribute.</p>\n\n          <p>The <code>schema-location</code> attribute is a\n          <a title = \"URI Reference\" href = \"#dt-uri-reference\">URI\n          Reference</a> that gives a hint indicating where a schema\n          document or other resource containing the required\n          definitions may be found. It is likely that a <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n          processor</a> will be able to process a schema document\n          found at this location.</p>\n\n          <p>The XML Schema specification gives implementations\n          flexibility in how to handle multiple imports for the\n          same namespace. Multiple imports do not cause errors if\n          the definitions do not conflict.</p>\n\n          <p>A consequence of these rules is that it is not\n          intrinsically an error if no schema document can be\n          located for a namespace identified in an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          declaration. This will cause an error only if it results\n          in the stylesheet containing references to names that\n          have not been imported.</p>\n\n          <p>An inline schema document (using an\n          <code>xs:schema</code> element as a child of the\n          <code>xsl:import-schema</code> element) has the same\n          status as an external schema document, in the sense that\n          it acts as a hint for a source of schema components in\n          the relevant namespace. To ensure that the inline schema\n          document is always used, it is advisable to use a target\n          namespace that is unique to this schema document.</p>\n        </div>\n\n        <p>The use of a namespace in an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration does not by itself associate any namespace\n        prefix with the namespace. If names from the namespace are\n        used within the stylesheet module then a namespace\n        declaration must be included in the stylesheet module, in\n        the usual way.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e5611\" id = \"d5e5611\"></a>Example: An Inline\n            Schema Document\n          </div>\n\n          <p>The following example shows an inline schema document.\n          This declares a simple type <code>local:yes-no</code>,\n          which the stylesheet then uses in the declaration of a\n          variable.</p>\n\n          <p>The example assumes the namespace declaration\n          <code>xmlns:local=\"http://localhost/ns/yes-no\"</code></p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:import-schema&gt;\n  &lt;xs:schema targetNamespace=\"http://localhost/ns/yes-no\"\n             xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"&gt;\n    &lt;xs:simpleType name=\"local:yes-no\"&gt;\n      &lt;xs:restriction base=\"xs:string\"&gt;\n        &lt;xs:enumeration value=\"yes\"/&gt;\n        &lt;xs:enumeration value=\"no\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:schema&gt;\n&lt;/xsl:import-schema&gt;\n\n&lt;xs:variable name=\"condition\" select=\"'yes'\" as=\"local:yes-no\"/&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"data-model\" id = \"data-model\"></a>4 Data\n      Model</h2>\n\n      <p>The data model used by XSLT is the XPath 2.0 and XQuery\n      1.0 data model <span>(XDM)</span>, as defined in <a href = \"#xpath-datamodel\">[Data Model]</a>. XSLT operates on source,\n      result and stylesheet documents using the same data\n      model.</p>\n\n      <p>This section elaborates on some particular features of\n      <span>XDM</span> as it is used by XSLT:</p>\n\n      <p>The rules in <a href = \"#stylesheet-stripping\"><i>4.2\n      Stripping Whitespace from the Stylesheet</i></a> and <a href = \"#strip\"><i>4.4 Stripping Whitespace from a Source\n      Tree</i></a> make use of the concept of a whitespace text\n      node.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-whitespace-text-node\" id = \"dt-whitespace-text-node\" title = \"whitespace text node\"></a>A <b>whitespace text node</b> is a\n      text node whose content consists entirely of whitespace\n      characters (that is, #x09, #x0A, #x0D, or #x20).<span class = \"definition\">]</span></p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>Features of a source XML document that are not\n        represented in the <span>XDM tree</span> will have no\n        effect on the operation of an XSLT stylesheet. Examples of\n        such features are entity references, CDATA sections,\n        character references, whitespace within element tags, and\n        the choice of single or double quotes around attribute\n        values.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xml-versions\" id = \"xml-versions\"></a>4.1 XML\n        Versions</h3>\n\n        <p>The <span>XDM</span> data model defined in <a href = \"#xpath-datamodel\">[Data Model]</a> is capable of\n        representing either an XML 1.0 document (conforming to\n        <a href = \"#REC-xml\">[XML 1.0]</a> and <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a>) or an XML 1.1\n        document (conforming to <a href = \"#xml11\">[XML 1.1]</a> and\n        <a href = \"#xml-names11\">[Namespaces in XML 1.1]</a>), and it\n        makes no distinction between the two. In principle,\n        therefore, XSLT 2.0 can be used with either of these XML\n        versions.</p>\n\n        <p>Construction of the <span>XDM tree</span> is outside the\n        scope of this specification, so XSLT 2.0 places no formal\n        requirements on an XSLT processor to accept input from\n        either XML 1.0 documents or XML 1.1 documents or both. This\n        specification does define a serialization capability (see\n        <a href = \"#serialization\"><i>20 Serialization</i></a>),\n        though from a conformance point of view it is an optional\n        feature. Although facilities are described for serializing\n        the <span>XDM tree</span> as either XML 1.0 or XML 1.1 (and\n        controlling the choice), there is again no formal\n        requirement on an XSLT processor to support either or both\n        of these XML versions as serialization targets.</p>\n\n        <p>Because the <span>XDM tree</span> is the same whether\n        the original document was XML 1.0 or XML 1.1, the semantics\n        of XSLT processing do not depend on the version of XML used\n        by the original document. There is no reason in principle\n        why all the input and output documents used in a single\n        transformation must conform to the same version of XML.</p>\n\n        <p>Some of the syntactic constructs in XSLT 2.0 and XPath\n        2.0, for example the productions <a href = \"http://www.w3.org/TR/2000/REC-xml-20001006#NT-Char\">Char</a><sup>\n        <small>XML</small></sup> and <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n        <small>Names</small></sup>, are defined by reference to the\n        XML and XML Namespaces specifications. There are slight\n        variations between the XML 1.0 and XML 1.1 versions of\n        these productions. <span>Implementations <span class = \"verb\">may</span> support either version; it is\n        <span class = \"verb\">recommended</span> that an XSLT 2.0\n        processor that implements the 1.1 versions <span class = \"verb\">should</span> also provide a mode that supports the\n        1.0 versions. It is thus <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        whether the XSLT processor supports XML 1.0 with XML\n        Namespaces 1.0, or XML 1.1 with XML Namespaces 1.1, or\n        supports both versions at user option.</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The specification referenced as <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a> was actually\n          published without a version number.</p>\n        </div>\n\n        <p>At the time of writing there is no published version of\n        <a href = \"#xmlschema-2\">[XML Schema Part 2]</a> that\n        references the XML 1.1 specifications. This means that data\n        types such as <code>xs:NCName</code> and <code>xs:ID</code>\n        are constrained by the XML 1.0 rules, and do not allow the\n        full range of values permitted by XML 1.1. This situation\n        will not be resolved until a new version of <a href = \"#xmlschema-2\">[XML Schema Part 2]</a> becomes available;\n        in the meantime, it is <span class = \"verb\">recommended</span> that implementers wishing to\n        support XML 1.1 should consult <a href = \"#SCHEMA-AND-XML-1.1\">[XML Schema 1.0 and XML 1.1]</a> for\n        guidance. An XSLT 2.0 processor that supports XML 1.1\n        <span class = \"verb\">should</span> implement the rules in\n        later versions of <a href = \"#xmlschema-2\">[XML Schema Part\n        2]</a> as they become available.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"stylesheet-stripping\" id = \"stylesheet-stripping\"></a>4.2 Stripping Whitespace from\n        the Stylesheet</h3>\n\n        <p>The tree representing the stylesheet is preprocessed as\n        follows:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>All comments and processing instructions are\n            removed.</p>\n          </li>\n\n          <li>\n            <p>Any text nodes that are now adjacent to each other\n            are merged.</p>\n          </li>\n\n          <li>\n            <p>Any <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a>\n            that satisfies both the following conditions is removed\n            from the tree:</p>\n\n            <ul>\n              <li>\n                <p>The parent of the text node is not an <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n                element</p>\n              </li>\n\n              <li>\n                <p>The text node does not have an ancestor element\n                that has an <code>xml:space</code> attribute with a\n                value of <code>preserve</code>, unless there is a\n                closer ancestor element having an\n                <code>xml:space</code> attribute with a value of\n                <code>default</code>.</p>\n              </li>\n            </ul>\n          </li>\n\n          <li>\n            <p>Any <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a>\n            whose parent is one of the following elements is\n            removed from the tree, regardless of any\n            <code>xml:space</code> attributes:</p>\n\n            <blockquote>\n              <p><a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a><br/>\n\n              <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a><br/>\n\n              <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a><br/>\n\n              <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a><br/>\n\n              <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a><br/>\n\n              <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a><br/>\n\n              <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a><br/>\n              <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a><br/>\n\n              <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a><br/>\n\n              <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a></p>\n            </blockquote>\n          </li>\n\n          <li>\n            <p>Any <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a>\n            whose following-sibling node is an <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> or <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element is\n            removed from the tree, regardless of any\n            <code>xml:space</code> attributes.</p>\n          </li>\n        </ol>\n\n        <p><a name = \"err-XTSE0260\" id = \"err-XTSE0260\"><span class = \"error\">[ERR XTSE0260]</span></a> Within an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>\n        that is <span class = \"verb\">required</span> to be empty, any\n        content other than comments or processing instructions,\n        including any <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a>\n        preserved using the <code>xml:space=\"preserve\"</code>\n        attribute, is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Using <code>xml:space=\"preserve\"</code> in parts of\n          the stylesheet that contain <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructors</a> will\n          cause all text nodes in that part of the stylesheet,\n          including those that contain whitespace only, to be\n          copied to the result of the sequence constructor. When\n          the result of the sequence constructor is used to form\n          the content of an element, this can cause errors if such\n          text nodes are followed by attribute nodes generated\n          using <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>If an <code>xml:space</code> attribute is specified on\n          a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>,\n          it will be copied to the result tree in the same way as\n          any other attribute.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"stripping-annotations\" id = \"stripping-annotations\"></a>4.3 Stripping Type Annotations\n        from a Source Tree</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-annotation\" id = \"dt-annotation\" title = \"type annotation\"></a>The term <b>type annotation</b> is\n        used in this specification to refer to the value returned\n        by the <code>dm:type-name</code> accessor of a node: see\n        <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-type-name\">Section\n        5.14 type-name\n        Accessor</a><sup><small>DM</small></sup>.<span class = \"definition\">]</span></p>\n\n        <p>There is sometimes a requirement to write stylesheets\n        that produce the same results whether or not the source\n        documents have been validated against a schema. To achieve\n        this, an option is provided to remove any <a title = \"type annotation\" href = \"#dt-annotation\">type\n        annotations</a> on element and attribute nodes in a\n        <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a>, replacing them with an annotation of\n        <span><code>xs:untyped</code></span> in the case of element\n        nodes, and <span><code>xs:untypedAtomic</code></span> in\n        the case of attribute nodes.</p>\n\n        <p>Such stripping of <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a> can be requested by\n        specifying <code>input-type-annotations=\"strip\"</code> on\n        the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element. This attribute has three permitted values:\n        <code>strip</code>, <code>preserve</code>, and\n        <code>unspecified</code>. The default value is\n        <code>unspecified</code>. Stripping of type annotations\n        takes place if at least one <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        specifies <code>input-type-annotations=\"strip\"</code>.</p>\n\n        <p><a name = \"err-XTSE0265\" id = \"err-XTSE0265\"><span class = \"error\">[ERR XTSE0265]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        there is a <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        that specifies <code>input-type-annotations=\"strip\"</code>\n        and another <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> that\n        specifies\n        <code>input-type-annotations=\"preserve\"</code>.</p>\n\n        <p>The <a title = \"source tree\" href = \"#dt-source-tree\">source\n        trees</a> to which this applies are the same as those\n        affected by <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> and\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>:\n        see <a href = \"#strip\"><i>4.4 Stripping Whitespace from a\n        Source Tree</i></a>.</p>\n\n        <p>When type annotations are stripped, the following\n        changes are made to the source tree:</p>\n\n        <ul>\n          <li>\n            <p>The type annotation of every element node is changed\n            to <code>xs:untyped</code></p>\n          </li>\n\n          <li>\n            <p>The type annotation of every attribute node is\n            changed to <code>xs:untypedAtomic</code></p>\n          </li>\n\n          <li>\n            <p>The typed value of every element and attribute node\n            is set to be the same as its string value, as an\n            instance of <code>xs:untypedAtomic</code>.</p>\n          </li>\n\n          <li>\n            <p>The <code>is-nilled</code> property of every element\n            node is set to <code>false</code>.</p>\n          </li>\n        </ul>\n\n        <p>The values of the <code>is-id</code> and\n        <code>is-idrefs</code> properties are not changed.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Stripping type annotations does not necessarily return\n          the document to the state it would be in had validation\n          not taken place. In particular, any defaulted elements\n          and attributes that were added to the tree by the\n          validation process will still be present <span>, and\n          elements and attributes validated as IDs will still be\n          accessible using the <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n          <small>FO</small></sup> function</span>.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"strip\" id = \"strip\"></a>4.4 Stripping Whitespace\n        from a Source Tree</h3>\n\n        <p>A <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a> supplied as input to the transformation process\n        may contain <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> that\n        are of no interest, and that do not need to be retained by\n        the transformation. Conceptually, an XSLT <a title = \"processor\" href = \"#dt-processor\">processor</a> makes a copy\n        of the source tree from which unwanted <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> have\n        been removed. This process is referred to as whitespace\n        stripping.</p>\n\n        <p>For the purposes of this section, the term <b>source\n        tree</b> means the document containing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>, and\n        any document returned by the functions <a href = \"#function-document\"><code>document</code></a>, <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup>, or <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n        collection</code></a><sup><small>FO</small></sup>. It does\n        not include documents passed as the values of <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a> or\n        returned from <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>.</p>\n\n        <p>The stripping process takes as input a set of element\n        names whose child <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> are to\n        be preserved. The way in which this set of element names is\n        established using the <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> and\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        declarations is described later in this section.</p>\n\n        <p>A <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a> is\n        preserved if either of the following apply:</p>\n\n        <ul>\n          <li>\n            <p>The element name of the parent of the text node is\n            in the set of whitespace-preserving element names.</p>\n          </li>\n\n          <li>\n            <p>An ancestor element of the text node has an\n            <code>xml:space</code> attribute with a value of\n            <code>preserve</code>, and no closer ancestor element\n            has <code>xml:space</code> with a value of\n            <code>default</code>.</p>\n          </li>\n        </ul>\n\n        <p>Otherwise, the <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a> is\n        stripped.</p>\n\n        <p>The <code>xml:space</code> attributes are not removed\n        from the tree.</p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-strip-space\" id = \"XSLT_element-strip-space\"></a><code>&lt;!-- Category:\n        declaration --&gt;<br/>\n        &lt;xsl:strip-space<br/>\n        &#160;&#160;<b>elements</b> =\n        <var>tokens</var>&#160;/&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-preserve-space\" id = \"XSLT_element-preserve-space\"></a><code>&lt;!-- Category:\n        declaration --&gt;<br/>\n        &lt;xsl:preserve-space<br/>\n        &#160;&#160;<b>elements</b> =\n        <var>tokens</var>&#160;/&gt;</code></p>\n\n        <p>The set of whitespace-preserving element names is\n        specified by <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> and\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        <a title = \"declaration\" href = \"#dt-declaration\">declarations</a>. Whether an element name\n        is included in the set of whitespace-preserving names is\n        determined by the best match among all the <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> or\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        declarations: it is included if and only if there is no\n        match or the best match is an <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        element. The <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> and\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        elements each have an <code>elements</code> attribute whose\n        value is a whitespace-separated list of <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NameTest\">NameTests</a><sup>\n        <small>XP</small></sup>; an element name matches an\n        <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n        or <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        element if it matches one of the <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NameTest\">NameTests</a><sup>\n        <small>XP</small></sup>. An element matches a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NameTest\">NameTest</a><sup>\n        <small>XP</small></sup> if and only if the <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NameTest\">NameTest</a><sup>\n        <small>XP</small></sup> would be true for the element as an\n        XPath node test. When more than one <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> and\n        <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n        element matches, the best matching element is determined by\n        the best matching <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NameTest\">NameTest</a><sup>\n        <small>XP</small></sup>. This is determined in the same way\n        as with <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a>:</p>\n\n        <ul>\n          <li>\n            <p>First, any match with lower <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n            precedence</a> than another match is ignored.</p>\n          </li>\n\n          <li>\n            <p>Next, any match that has a lower <a title = \"default priority\" href = \"#dt-default-priority\">default\n            priority</a> than the <a title = \"default priority\" href = \"#dt-default-priority\">default priority</a> of another\n            match is ignored.</p>\n          </li>\n        </ul>\n\n        <p><a name = \"err-XTRE0270\" id = \"err-XTRE0270\"><span class = \"error\">[ERR XTRE0270]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n        this leaves more than one match<span>, unless all the\n        matched declarations are equivalent (that is, they are all\n        <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a> or\n        they are all <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>)</span>.\n        <span>The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is to select, from the matches that are left, the one that\n        occurs last in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</span></p>\n\n        <p>If an element in a source document has a <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>\n        that is a simple type or a complex type with simple\n        content, then any whitespace text nodes among its children\n        are preserved, regardless of any <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n        declarations. The reason for this is that stripping a\n        whitespace text node from an element with simple content\n        could make the element invalid: for example, it could cause\n        the <code>minLength</code> facet to be violated.</p>\n\n        <p>Stripping of <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a> happens before\n        stripping of whitespace text nodes, so this\n        <span>situation</span> will not occur if\n        <code>input-type-annotations=\"strip\"</code> is\n        specified.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>In <a href = \"#xpath-datamodel\">[Data Model]</a>,\n          processes are described for constructing an <span>XDM\n          tree</span> from an Infoset or from a PSVI. Those\n          processes deal with whitespace according to their own\n          rules, and the provisions in this section apply to the\n          resulting tree. In practice this means that elements that\n          are defined in a DTD or a Schema to contain element-only\n          content will have <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a>\n          stripped, regardless of the <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n          and <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n          declarations in the stylesheet.</p>\n\n          <p>However, source trees are not necessarily constructed\n          using those processes; indeed, they are not necessarily\n          constructed by parsing XML documents. Nothing in the XSLT\n          specification constrains how the source tree is\n          constructed, or what happens to <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a>\n          during its construction. The provisions in this section\n          relate only to whitespace text nodes that are present in\n          the tree supplied as input to the XSLT processor. The\n          XSLT processor cannot preserve whitespace text nodes\n          unless they were actually present in the supplied\n          tree.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"id-in-data-model\" id = \"id-in-data-model\"></a>4.5 Attribute Types and DTD\n        Validation</h3>\n\n        <p>The mapping from the Infoset to the <span>XDM</span>\n        data model, described in <a href = \"#xpath-datamodel\">[Data\n        Model]</a>, does not retain attribute types. This means,\n        for example, that an attribute described in the DTD as\n        having attribute type <code>NMTOKENS</code> will be\n        annotated in <span>the XDM tree</span> as\n        <span><code>xs:untypedAtomic</code></span> rather than\n        <code>xs:NMTOKENS</code>, and its typed value will consist\n        of a single <span><code>xs:untypedAtomic</code></span>\n        value rather than a sequence of <code>xs:NMTOKEN</code>\n        values.</p>\n\n        <p>Attributes with a DTD-derived type of ID, IDREF, or\n        IDREFS will be marked in the <span>XDM tree</span> as\n        having the <code>is-id</code> or <code>is-idrefs</code>\n        properties. It is these properties, rather than any\n        <a title = \"type annotation\" href = \"#dt-annotation\">type\n        annotation</a>, that are examined by the functions <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n        <small>FO</small></sup> and <a href = \"http://www.w3.org/TR/xpath-functions/#func-idref\"><code>idref</code></a><sup>\n        <small>FO</small></sup> described in <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"limits\" id = \"limits\"></a>4.6 Limits</h3>\n\n        <p>The XDM data model (see <a href = \"#xpath-datamodel\">[Data\n        Model]</a>) leaves it to the host language to define\n        limits. This section describes the limits that apply to\n        XSLT.</p>\n\n        <p>Limits on some primitive data types are defined in\n        <a href = \"#xmlschema-2\">[XML Schema Part 2]</a>. Other\n        limits, listed below, are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n        Note that this does not necessarily mean that each limit\n        must be a simple constant: it may vary depending on\n        environmental factors such as available resources.</p>\n\n        <p>The following limits are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>For the <code>xs:decimal</code> type, the maximum\n            number of decimal digits (the <code>totalDigits</code>\n            facet). This must be at least 18 digits. (Note,\n            however, that support for the full value range of\n            <code>xs:unsignedLong</code> requires 20 digits.)</p>\n          </li>\n\n          <li>\n            <p>For the types <code>xs:date</code>,\n            <code>xs:time</code>, <code>xs:dateTime</code>,\n            <code>xs:gYear</code>, and <code>xs:gYearMonth</code>:\n            the range of values of the year component, which must\n            be at least +0001 to +9999; and the maximum number of\n            fractional second digits, which must be at least 3.</p>\n          </li>\n\n          <li>\n            <p>For the <code>xs:duration</code> type: the maximum\n            absolute values of the years, months, days, hours,\n            minutes, and seconds components.</p>\n          </li>\n\n          <li>\n            <p>For the\n            <span><code>xs:yearMonthDuration</code></span> type:\n            the maximum absolute value, expressed as an integer\n            number of months.</p>\n          </li>\n\n          <li>\n            <p>For the <span><code>xs:dayTimeDuration</code></span>\n            type: the maximum absolute value, expressed as a\n            decimal number of seconds.</p>\n          </li>\n\n          <li>\n            <p>For the types <code>xs:string</code>,\n            <code>xs:hexBinary</code>,\n            <code>xs:base64Binary</code>, <code>xs:QName</code>,\n            <code>xs:anyURI</code>, <code>xs:NOTATION</code>, and\n            types derived from them: the maximum length of the\n            value.</p>\n          </li>\n\n          <li>\n            <p>For sequences, the maximum number of items in a\n            sequence.</p>\n          </li>\n        </ol>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"d-o-e-in-data-model\" id = \"d-o-e-in-data-model\"></a>4.7 Disable Output Escaping</h3>\n\n        <p>For backwards compatibility reasons, XSLT 2.0 continues\n        to support the <code>disable-output-escaping</code> feature\n        introduced in XSLT 1.0. This is an optional feature and\n        implementations are not <span class = \"verb\">required</span>\n        to support it. A new facility, that of named <a title = \"character map\" href = \"#dt-character-map\">character maps</a>\n        (see <a href = \"#character-maps\"><i>20.1 Character\n        Maps</i></a>) is introduced in XSLT 2.0. It provides\n        similar capabilities to\n        <code>disable-output-escaping</code>, but without\n        distorting the data model.</p>\n\n        <p>If an <a title = \"implementation\" href = \"#dt-implementation\">implementation</a> supports the\n        <code>disable-output-escaping</code> attribute of <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>, (see\n        <a href = \"#disable-output-escaping\"><i>20.2 Disabling Output\n        Escaping</i></a>), then the data model for trees\n        constructed by the <a title = \"processor\" href = \"#dt-processor\">processor</a> is augmented with a boolean\n        value representing the value of this property. <span>This\n        boolean value, however, can be set only within a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a> that is being passed to the\n        serializer.</span></p>\n\n        <p>Conceptually, each character in a text node on\n        <span>such</span> a result tree has a boolean property\n        indicating whether the serializer <span>is to</span>\n        disable the normal rules for escaping of special characters\n        (for example, outputting of <code>&amp;</code> as\n        <code>&amp;amp;</code>) in respect of this character or\n        attribute node.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>In practice, the nodes in a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> will often be streamed directly from the\n          XSLT processor to the serializer. In such an\n          implementation, <code>disable-output-escaping</code> can\n          be viewed not so much a property stored with nodes in the\n          tree, but rather as additional information passed across\n          the interface between the XSLT processor and the\n          serializer.</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"constructs\" id = \"constructs\"></a>5 Features of\n      the XSLT Language</h2>\n\n      <div class = \"div2\">\n        <h3><a name = \"qname\" id = \"qname\"></a>5.1 Qualified Names</h3>\n\n        <p>The name of a stylesheet-defined object, specifically a\n        <a title = \"named template\" href = \"#dt-named-template\">named\n        template</a>, a <a title = \"mode\" href = \"#dt-mode\">mode</a>,\n        an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute set</a>, a <a title = \"key\" href = \"#dt-key\">key</a>, a <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal-format</a>, a <a title = \"variable\" href = \"#dt-variable\">variable</a> or <a title = \"parameter\" href = \"#dt-parameter\">parameter</a>, a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>, a named\n        <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>, <span>or a\n        <a title = \"character map\" href = \"#dt-character-map\">character\n        map</a></span> is specified as a <a title = \"QName\" href = \"#dt-qname\">QName</a> <span>using the syntax for <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-QName\">QName</a><sup>\n        <small>Names</small></sup> as defined in <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a></span>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-qname\" id = \"dt-qname\" title = \"QName\"></a>A <b>QName</b> is always\n        written in the form <code>(NCName \":\")? NCName</code>, that\n        is, a local name optionally preceded by a namespace prefix.\n        When two QNames are compared, however, they are considered\n        equal if the corresponding <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QNames</a> are the same, as\n        described below.<span class = \"definition\">]</span></p>\n\n        <p>Because an atomic value of type <code>xs:QName</code> is\n        sometimes referred to loosely as a QName, this\n        specification also uses the term <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> to emphasize\n        that it is referring to a <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-QName\">QName</a><sup>\n        <small>Names</small></sup> in its lexical form rather than\n        its expanded form. This term is used especially when\n        strings containing lexical QNames are manipulated as\n        run-time values.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-lexical-qname\" id = \"dt-lexical-qname\" title = \"lexical QName\"></a>A <b>lexical QName</b> is a string\n        representing a <a title = \"QName\" href = \"#dt-qname\">QName</a>\n        in the form <code>(NCName \":\")? NCName</code>, that is, a\n        local name optionally preceded by a namespace\n        prefix.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-defining-element\" id = \"dt-defining-element\" title = \"defining element\"></a><span>A string in the form of a\n        lexical QName</span> may occur as the value of an attribute\n        node in a stylesheet module, or within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> contained\n        in such an attribute node, or as the result of evaluating\n        an XPath expression contained in such an attribute node.\n        The element containing this attribute node is referred to\n        as the <b>defining element</b> of the QName.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-expanded-qname\" id = \"dt-expanded-qname\" title = \"expanded-QName\"></a>An <b>expanded-QName</b>\n        <span>contains a pair of values, namely a local name and an\n        optional namespace URI. It may also contain a namespace\n        prefix.</span> Two expanded-QNames are equal if the\n        namespace URIs are the same (or both absent) and the local\n        names are the same. <span>The prefix plays no part in the\n        comparison, but is used only if the expanded-QName needs to\n        be converted back to a string.</span><span class = \"definition\">]</span></p>\n\n        <p>If the QName has a prefix, then the prefix is expanded\n        into a URI reference using the namespace declarations in\n        effect on its <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a>. The <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> consisting of the\n        local part of the name and the possibly null URI reference\n        is used as the name of the object. The default namespace of\n        the defining element (<span>see <a href = \"http://www.w3.org/TR/xpath-datamodel/#ElementNode\">Section\n        6.2 Element Nodes</a><sup><small>DM</small></sup></span>)\n        is <em>not</em> used for unprefixed names.</p>\n\n        <p>There are <span>three</span> cases where the default\n        namespace <span>of the <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a></span>\n        <em>is</em> used when expanding an unprefixed QName:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>Where a QName is used to define the name of an\n            element being constructed. This applies both to cases\n            where the name is known statically (that is, the name\n            of a literal result element) and to cases where it is\n            computed dynamically (the value of the\n            <code>name</code> attribute of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n            instruction).</p>\n          </li>\n\n          <li>\n            <p>The default namespace is used when expanding the\n            first argument of the function <a href = \"#function-element-available\"><code>element-available</code></a>.</p>\n          </li>\n\n          <li>\n            <p>The default namespace applies to any unqualified\n            element names appearing in the\n            <code>cdata-section-elements</code> attribute of\n            <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n            or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a></p>\n          </li>\n        </ol>\n\n        <p>In the case of an unprefixed QName used as a\n        <code>NameTest</code> within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> (see <a href = \"#expressions\"><i>5.3 Expressions</i></a>) <span>, and in\n        certain other contexts</span>, the namespace to be used in\n        expanding the QName may be specified by means of the\n        <code>[xsl:]xpath-default-namespace</code> attribute, as\n        specified in <a href = \"#unprefixed-qnames\"><i>5.2 Unprefixed\n        QNames in Expressions and Patterns</i></a>.</p>\n\n        <p><a name = \"err-XTSE0280\" id = \"err-XTSE0280\"><span class = \"error\">[ERR XTSE0280]</span></a> In the case of a\n        <span>prefixed</span> <a title = \"QName\" href = \"#dt-qname\">QName</a> used as the value of an attribute in\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, or appearing within an\n        XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> in the stylesheet, it is a\n        <a title = \"static error\" href = \"#dt-static-error\">static\n        error</a> if the <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a> has no\n        namespace node whose name matches the prefix of the\n        <a title = \"QName\" href = \"#dt-qname\">QName</a>.</p>\n\n        <p><a name = \"err-XTDE0290\" id = \"err-XTDE0290\"><span class = \"error\">[ERR XTDE0290]</span></a> Where the result of\n        evaluating an XPath expression (or an attribute value\n        template) is required to be a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>, <span>then\n        unless otherwise specified</span> it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a> has no\n        namespace node whose name matches the prefix of the\n        <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n        QName</a>. <span>This error <span class = \"verb\">may</span>\n        be signaled as a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of the\n        expression can be determined statically.</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"unprefixed-qnames\" id = \"unprefixed-qnames\"></a>5.2 Unprefixed QNames in\n        Expressions and Patterns</h3>\n\n        <p>The attribute <code>[xsl:]xpath-default-namespace</code>\n        (see <a href = \"#standard-attributes\"><i>3.5 Standard\n        Attributes</i></a>) may be used on an element in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        to define the namespace that will be used for an unprefixed\n        element name <span>or type name</span> within an XPath\n        expression, and in certain other contexts listed below.</p>\n\n        <p>The value of the attribute is the namespace URI to be\n        used.</p>\n\n        <p>For any element in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, this attribute has an\n        effective value, which is the value of the\n        <code>[xsl:]xpath-default-namespace</code> on that element\n        or on the innermost containing element that specifies such\n        an attribute, or the zero-length string if no containing\n        element specifies such an attribute.</p>\n\n        <p>For any element in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, the effective value of\n        this attribute determines the value of the <em>default\n        namespace for element and type names</em> in the static\n        context of any XPath expression contained in an attribute\n        of that element <span>(including XPath expressions in\n        <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        templates</a>)</span>. The effect of this is specified in\n        <a href = \"#xpath20\">[XPath 2.0]</a>; in summary, it\n        determines the namespace used for any unprefixed type name\n        in the SequenceType production, and for any element name\n        appearing in a path expression or in the SequenceType\n        production.</p>\n\n        <p>The effective value of this attribute similarly applies\n        to <span>any of the following constructs appearing within\n        its scope</span>:</p>\n\n        <ul>\n          <li>\n            <p>any unprefixed element name or type name used in a\n            <a title = \"pattern\" href = \"#dt-pattern\">pattern</a></p>\n          </li>\n\n          <li>\n            <p>any unprefixed element name used in the\n            <code>elements</code> attribute of the <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n            or <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n            instructions</p>\n          </li>\n\n          <li>\n            <p>any unprefixed element name or type name used in the\n            <code>as</code> attribute of an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a></p>\n          </li>\n\n          <li>\n            <p>any unprefixed type name used in the\n            <code>type</code> attribute of an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT\n            element</a></p>\n          </li>\n\n          <li>\n            <p>any unprefixed type name used in the\n            <code>xsl:type</code> attribute of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n            element</a>.</p>\n          </li>\n        </ul>\n\n        <p>The <code>[xsl:]xpath-default-namespace</code> attribute\n        <span class = \"verb\">must</span> be in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n        namespace</a> if and only if its parent element is\n        <em>not</em> in the XSLT namespace.</p>\n\n        <p>If the effective value of the attribute is a zero-length\n        string, which will be the case if it is explicitly set to a\n        zero-length string or if it is not specified at all, then\n        an unprefixed element name or type name refers to a name\n        that is in no namespace. The default namespace <span>of the\n        parent element (see <a href = \"http://www.w3.org/TR/xpath-datamodel/#ElementNode\">Section\n        6.2 Element Nodes</a><sup><small>DM</small></sup>)</span>\n        is <em>not</em> used.</p>\n\n        <p>The attribute does not affect other names, for example\n        function names, variable names, or template names, or\n        strings that are interpreted as <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QNames</a> during\n        stylesheet evaluation, such as the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n        value</a> of the <code>name</code> attribute of <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> or the\n        string supplied as the first argument to the <a href = \"#function-key\"><code>key</code></a> function.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"expressions\" id = \"expressions\"></a>5.3\n        Expressions</h3>\n\n        <p>XSLT uses the expression language defined by XPath 2.0\n        <a href = \"#xpath20\">[XPath 2.0]</a>. Expressions are used in\n        XSLT for a variety of purposes including:</p>\n\n        <ul>\n          <li>\n            <p>selecting nodes for processing;</p>\n          </li>\n\n          <li>\n            <p>specifying conditions for different ways of\n            processing a node;</p>\n          </li>\n\n          <li>\n            <p>generating text to be inserted in a <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a>.</p>\n          </li>\n        </ul>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-expression\" id = \"dt-expression\" title = \"expression\"></a>Within this specification, the term\n        <b>XPath expression</b>, or simply <b>expression</b>, means\n        a string that matches the production <span><a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Expr\">Expr</a><sup>\n        <small>XP</small></sup></span> defined in <a href = \"#xpath20\">[XPath 2.0]</a>.<span class = \"definition\">]</span></p>\n\n        <p>An XPath expression may occur as the value of certain\n        attributes on XSLT-defined elements, and also within curly\n        brackets in <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        templates</a>.</p>\n\n        <p>Except where <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a> is enabled (see <a href = \"#forwards\"><i>3.9\n        Forwards-Compatible Processing</i></a>), it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the value of such an attribute, or the text between curly\n        brackets in an attribute value template, does not match the\n        XPath production <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Expr\">Expr</a><sup>\n        <small>XP</small></sup>, or if it fails to satisfy other\n        static constraints defined in the XPath specification, for\n        example that all variable references <span class = \"verb\">must</span> refer to <a title = \"variable\" href = \"#dt-variable\">variables</a> that are in scope. <span>Error\n        codes are defined in <a href = \"#xpath20\">[XPath\n        2.0]</a>.</span></p>\n\n        <p>The transformation fails with a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> is evaluated and raises a\n        dynamic error. <span>Error codes are defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</span></p>\n\n        <p>The transformation fails with a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> raises a\n        type error, or if the result of evaluating the XPath\n        <a title = \"expression\" href = \"#dt-expression\">expression</a>\n        is evaluated and raises a type error, or if the XPath\n        processor signals a type error during static analysis of an\n        <a title = \"expression\" href = \"#dt-expression\">expression</a>.\n        <span>Error codes are defined in <a href = \"#xpath20\">[XPath\n        2.0]</a>.</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-required-type\" id = \"dt-required-type\" title = \"required type\"></a>The context within a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where an\n        XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> <span>appears may\n        specify</span> the <b>required type</b> of the expression.\n        The required type indicates the type of the value that the\n        expression is expected to return.<span class = \"definition\">]</span> If no required type is specified, the\n        expression may return any value: in effect, the required\n        type is then <code>item()*</code>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-function-conversion-rules\" id = \"dt-function-conversion-rules\" title = \"function conversion rules\"></a>Except where otherwise\n        indicated, the actual value of an <a title = \"expression\" href = \"#dt-expression\">expression</a> is converted to the\n        <a title = \"required type\" href = \"#dt-required-type\">required\n        type</a> using the <b>function conversion rules</b>. These\n        are the rules defined in <a href = \"#xpath20\">[XPath 2.0]</a>\n        for converting the supplied argument of a function call to\n        the required type of that argument, as defined in the\n        function signature. The relevant rules are those that apply\n        when <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n        is set to <code>false</code>.<span class = \"definition\">]</span></p>\n\n        <p>This specification also invokes the XPath 2.0 <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a> to convert the result of evaluating an XSLT\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> to a\n        required type (for example, the sequence constructor\n        enclosed in an <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>, <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>, or\n        <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n        element).</p>\n\n        <p>Any <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a> or <a title = \"type errors\" href = \"#dt-type-error\">type error</a> that\n        occurs when applying the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a> to convert a value to a required type results in\n        the transformation failing, in the same way as if the error\n        had occurred while evaluating an expression.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Note the distinction between the two kinds of error\n          that may occur. Attempting to convert an integer to a\n          date is a type error, because such a conversion is never\n          possible. Type errors can be reported statically if they\n          can be detected statically, whether or not the construct\n          in question is ever evaluated. Attempting to convert the\n          string <code>2003-02-29</code> to a date is a dynamic\n          error rather than a type error, because the problem is\n          with this particular value, not with its type. Dynamic\n          errors are reported only if the instructions or\n          expressions that cause them are actually evaluated.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"static-and-dynamic-context\" id = \"static-and-dynamic-context\"></a>5.4 The Static and Dynamic\n        Context</h3>\n\n        <p>XPath defines the concept of an <a href = \"http://www.w3.org/TR/xpath20/#dt-expression-context\">expression\n        context</a><sup><small>XP</small></sup> which contains all\n        the information that can affect the result of evaluating an\n        <a title = \"expression\" href = \"#dt-expression\">expression</a>.\n        The expression context has two parts, the <a href = \"http://www.w3.org/TR/xpath20/#dt-static-context\">static\n        context</a><sup><small>XP</small></sup>, and the <a href = \"http://www.w3.org/TR/xpath20/#dt-dynamic-context\">dynamic\n        context</a><sup><small>XP</small></sup>. The components\n        that make up the expression context are defined in the\n        XPath specification (see <a href = \"http://www.w3.org/TR/xpath20/#context\">Section 2.1\n        Expression Context</a><sup><small>XP</small></sup>). This\n        section describes the way in which these components are\n        initialized when an XPath expression is contained within an\n        XSLT stylesheet.</p>\n\n        <p>As well as providing values for the static and dynamic\n        context components defined in the XPath specification, XSLT\n        defines additional context components of its own. These\n        context components are used by XSLT instructions (for\n        example, <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a> and\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>),\n        and also by the functions in the extended function library\n        described in this specification.</p>\n\n        <p>The following four sections describe:</p>\n\n        <blockquote>\n          <p><a href = \"#static-context\"><i>5.4.1 Initializing the\n          Static Context</i></a><br/>\n          <a href = \"#additional-static-context\"><i>5.4.2 Additional\n          Static Context Components used by XSLT</i></a><br/>\n          <a href = \"#xpath-dynamic-context\"><i>5.4.3 Initializing\n          the Dynamic Context</i></a><br/>\n          <a href = \"#additional-dynamic-context\"><i>5.4.4 Additional\n          Dynamic Context Components used by XSLT</i></a></p>\n        </blockquote>\n\n        <div class = \"div3\">\n          <h4><a name = \"static-context\" id = \"static-context\"></a>5.4.1 Initializing the Static\n          Context</h4>\n\n          <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-static-context\">static\n          context</a><sup><small>XP</small></sup> of an XPath\n          expression appearing in an XSLT stylesheet is initialized\n          as follows. In these rules, the term <b>containing\n          element</b> means the element within the stylesheet that\n          is the parent of the attribute whose value contains the\n          XPath expression in question, and the term <b>enclosing\n          element</b> means the containing element or any of its\n          ancestors.</p>\n\n          <ul>\n            <li>\n              <p><a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility\n              mode</a> is set to true if and only if the containing\n              element occurs in part of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards\n              compatible behavior</a> is enabled (see <a href = \"#backwards\"><i>3.8 Backwards-Compatible\n              Processing</i></a>).</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-static-namespaces\">statically\n              known namespaces</a><sup><small>XP</small></sup> are\n              the namespace declarations that are in scope for the\n              containing element.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-def-elemtype-ns\">default\n              element/type\n              namespace</a><sup><small>XP</small></sup> is the\n              namespace defined by the\n              <code>[xsl:]xpath-default-namespace</code> attribute\n              on the innermost enclosing element that has such an\n              attribute, as described in <a href = \"#unprefixed-qnames\"><i>5.2 Unprefixed QNames in\n              Expressions and Patterns</i></a>. The value of this\n              attribute is a namespace URI. <span>If there is no\n              <code>[xsl:]xpath-default-namespace</code> attribute\n              on an enclosing element, the default namespace for\n              element names and type names is the null\n              namespace.</span></p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-def-fn-ns\">default\n              function namespace</a><sup><small>XP</small></sup> is\n              the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n              namespace</a>, defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>.\n              This means that it is not necessary to declare this\n              namespace in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, nor is it necessary\n              to use the prefix <code>fn</code> (or any other\n              prefix) in calls to the <a title = \"core function\" href = \"#dt-core-function\">core functions</a>.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-issd\">in-scope\n              schema definitions</a><sup><small>XP</small></sup>\n              for the XPath expression are the same as the\n              <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n              components</a> for the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, and are as specified\n              in <a href = \"#built-in-types\"><i>3.13 Built-in\n              Types</i></a>.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-in-scope-variables\">\n              in-scope variables</a><sup><small>XP</small></sup>\n              are <span>defined by</span> the <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable binding\n              elements</a> that are in scope for the containing\n              element (see <a href = \"#variables-and-parameters\"><i>9\n              Variables and Parameters</i></a>).</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-function-signature\">\n              function signatures</a><sup><small>XP</small></sup>\n              are the <a title = \"core function\" href = \"#dt-core-function\">core functions</a> defined in\n              <a href = \"#xpath-functions\">[Functions and\n              Operators]</a>, the constructor functions for all the\n              atomic types in the <a href = \"http://www.w3.org/TR/xpath20/#dt-issd\">in-scope\n              schema definitions</a><sup><small>XP</small></sup>,\n              the additional functions defined in this\n              specification, the <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n              functions</a> defined in the stylesheet, plus any\n              <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>\n              bound using <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n              mechanisms (see <a href = \"#extension\"><i>18\n              Extensibility and Fallback</i></a>).</p>\n\n              <div class = \"note\">\n                <p class = \"prefix\"><b>Note:</b></p>\n\n                <p>It follows from the above that a conformant XSLT\n                processor must implement the entire library of\n                <a title = \"core function\" href = \"#dt-core-function\">core functions</a> defined in\n                <a href = \"#xpath-functions\">[Functions and\n                Operators]</a>.</p>\n              </div>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-static-collations\">statically\n              known collations</a><sup><small>XP</small></sup> are\n              <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n              <span>However, the set of in-scope collations\n              <span class = \"verb\">must</span> always include the\n              Unicode codepoint collation, defined in <a href = \"http://www.w3.org/TR/xpath-functions/#string-compare\">\n              Section 7.3 Equality and Comparison of\n              Strings</a><sup><small>FO</small></sup>.</span></p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-def-collation\">default\n              collation</a><sup><small>XP</small></sup> is defined\n              by the value of the\n              <code>[xsl:]default-collation</code> attribute on the\n              innermost enclosing element that has such an\n              attribute. For details, see <a href = \"#default-collation-attribute\"><i>3.6.1 The\n              default-collation attribute</i></a>.</p>\n\n              <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-default-collation\" id = \"dt-default-collation\" title = \"default collation\"></a>In this specification\n              the term <b>default collation</b> means the collation\n              that is used by XPath operators such as\n              <code>eq</code> and <code>lt</code> appearing in\n              XPath expressions within the stylesheet.<span class = \"definition\">]</span></p>\n\n              <p>This collation is also used by default when\n              comparing strings in the evaluation of the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> and <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n              elements. This <span class = \"verb\">may</span> also\n              (but need not necessarily) be the same as the default\n              collation used for <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n              within the stylesheet. Collations used by <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> are\n              described in <a href = \"#collating-sequences\"><i>13.1.3\n              Sorting Using Collations</i></a>.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-base-uri\">base\n              URI</a><sup><small>XP</small></sup> is the base URI\n              of the containing element. The concept of the base\n              URI of a node is defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-base-uri\">Section\n              5.2 base-uri\n              Accessor</a><sup><small>DM</small></sup></p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"additional-static-context\" id = \"additional-static-context\"></a>5.4.2 Additional Static\n          Context Components used by XSLT</h4>\n\n          <p>Some of the components of the XPath static context are\n          used also by <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a>. For example, the\n          <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element\n          makes use of the collations defined in the static\n          context, and attributes such as <code>type</code> and\n          <code>as</code> may reference types defined in the\n          <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n          components</a>.</p>\n\n          <p>Many top-level declarations in a stylesheet, and\n          attributes on the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element, affect the behavior of instructions within the\n          stylesheet. Each of these constructs is described in its\n          appropriate place in this specification.</p>\n\n          <p>A number of these constructs are of particular\n          significance because they are used by functions defined\n          in XSLT, which are added to the library of functions\n          available for use in XPath expressions within the\n          stylesheet. These are:</p>\n\n          <ul>\n            <li>\n              <p>The set of named keys, used by the <a href = \"#function-key\"><code>key</code></a> function</p>\n            </li>\n\n            <li>\n              <p>The set of named decimal formats, used by the\n              <a href = \"#function-format-number\"><code>format-number</code></a>\n              function</p>\n            </li>\n\n            <li>\n              <p>The values of system properties, used by the\n              <a href = \"#function-system-property\"><code>system-property</code></a>\n              function</p>\n            </li>\n\n            <li>\n              <p>The set of available instructions, used by the\n              <a href = \"#function-element-available\"><code>element-available</code></a>\n              function</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"xpath-dynamic-context\" id = \"xpath-dynamic-context\"></a>5.4.3 Initializing the\n          Dynamic Context</h4>\n\n          <p>For convenience, the dynamic context is described in\n          two parts: the <a title = \"focus\" href = \"#dt-focus\">focus</a>, which represents the place in the\n          source document that is currently being processed, and a\n          collection of additional context variables.</p>\n\n          <p>A number of functions specified in <a href = \"#xpath-functions\">[Functions and Operators]</a> are\n          defined to be <a href = \"http://www.w3.org/TR/xpath-functions/#stable\">stable</a><sup>\n          <small>FO</small></sup>, meaning that if they are called\n          twice during the same <a href = \"http://www.w3.org/TR/xpath-functions/#execution-scope\">execution\n          scope</a><sup><small>FO</small></sup>, with the same\n          arguments, then they return the same results (see\n          <a href = \"http://www.w3.org/TR/xpath-functions/#terminology\">\n          Section 1.7 Terminology</a><sup><small>FO</small></sup>).\n          In XSLT, the execution of a stylesheet defines the\n          execution scope. This means, for example, that if the\n          function <a href = \"http://www.w3.org/TR/xpath-functions/#func-current-dateTime\">\n          <code>current-dateTime</code></a><sup><small>FO</small></sup>\n          is called repeatedly during a transformation, it produces\n          the same result each time. By implication, the components\n          of the dynamic context on which these functions depend\n          are also stable for the duration of the transformation.\n          Specifically, the following components defined in\n          <a href = \"http://www.w3.org/TR/xpath20/#eval_context\">Section\n          2.1.2 Dynamic Context</a><sup><small>XP</small></sup>\n          must be stable: <em>function implementations</em>,\n          <em>current dateTime</em>, <em>implicit timezone</em>,\n          <em>available documents</em>, <em>available\n          collections</em>, and <em>default collection</em>. The\n          values of global variables and stylesheet parameters are\n          also stable for the duration of a transformation. The\n          focus is <em>not</em> stable; the additional dynamic\n          context components defined in <a href = \"#additional-dynamic-context\"><i>5.4.4 Additional Dynamic\n          Context Components used by XSLT</i></a> are also\n          <em>not</em> stable.</p>\n\n          <p>As specified in <a href = \"#xpath-functions\">[Functions\n          and Operators]</a>, implementations may provide user\n          options that relax the requirement for the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n          <small>FO</small></sup> and <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n          collection</code></a><sup><small>FO</small></sup>\n          functions (and therefore, by implication, the <a href = \"#function-document\"><code>document</code></a> function)\n          to return stable results. By default, however, the\n          functions must be stable. The manner in which such user\n          options are provided, if at all, is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n          <p>XPath expressions contained in\n          <code>[xsl:]use-when</code> attributes are not considered\n          to be evaluated \"during the transformation\" as defined\n          above. For details see <a href = \"#conditional-inclusion\"><i>3.12 Conditional Element\n          Inclusion</i></a>.</p>\n\n          <div class = \"div4\">\n            <h5><a name = \"focus\" id = \"focus\"></a>5.4.3.1 Maintaining\n            Position: the Focus</h5>\n\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-focus\" id = \"dt-focus\" title = \"focus\"></a>When a\n            <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is\n            evaluated, the <a title = \"processor\" href = \"#dt-processor\">processor</a> keeps track of which\n            items are being processed by means of a set of implicit\n            variables referred to collectively as the\n            <b>focus</b>.<span class = \"definition\">]</span> More\n            specifically, the focus consists of the following three\n            values:</p>\n\n            <ul>\n              <li>\n                <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-context-item\" id = \"dt-context-item\" title = \"context item\"></a>The <b>context item</b> is the\n                item currently being processed. An item (see\n                <a href = \"#xpath-datamodel\">[Data Model]</a>) is\n                either an atomic value (such as an integer, date,\n                or string), or a node. The context item is\n                initially set to the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>\n                supplied when the transformation is invoked (see\n                <a href = \"#initiating\"><i>2.3 Initiating a\n                Transformation</i></a>). It changes whenever\n                instructions such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n                and <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>\n                are used to process a sequence of items; each item\n                in such a sequence becomes the context item while\n                that item is being processed.<span class = \"definition\">]</span> The context item is returned\n                by the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> <code>.</code>\n                (dot).</p>\n              </li>\n\n              <li>\n                <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-context-position\" id = \"dt-context-position\" title = \"context position\"></a>The <b>context\n                position</b> is the position of the context item\n                within the sequence of items currently being\n                processed. It changes whenever the context item\n                changes. When an instruction such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n                or <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>\n                is used to process a sequence of items, the first\n                item in the sequence is processed with a context\n                position of 1, the second item with a context\n                position of 2, and so on.<span class = \"definition\">]</span> The context position is\n                returned by the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n                <code>position()</code>.</p>\n              </li>\n\n              <li>\n                <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-context-size\" id = \"dt-context-size\" title = \"context size\"></a>The <b>context size</b> is the\n                number of items in the sequence of items currently\n                being processed. It changes whenever instructions\n                such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n                and <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>\n                are used to process a sequence of items; during the\n                processing of each one of those items, the context\n                size is set to the count of the number of items in\n                the sequence (or equivalently, the position of the\n                last item in the sequence).<span class = \"definition\">]</span> The context size is returned\n                by the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n                <code>last()</code>.</p>\n              </li>\n            </ul>\n\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-context-node\" id = \"dt-context-node\" title = \"context node\"></a>If the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is a node (as\n            distinct from an atomic value such as an integer), then\n            it is also referred to as the <b>context node</b>. The\n            context node is not an independent variable, it changes\n            whenever the context item changes. When the context\n            item is an atomic value, there is no context\n            node.<span class = \"definition\">]</span> The context node\n            is returned by the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n            <code>self::node()</code>, and it is used as the\n            starting node for all relative path expressions.</p>\n\n            <p>Where the containing element of an XPath expression\n            is an <a title = \"instruction\" href = \"#dt-instruction\">instruction</a> or a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n            element</a>, the initial context item, context\n            position, and context size for the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> are\n            the same as the <a title = \"context item\" href = \"#dt-context-item\">context item</a>, <a title = \"context position\" href = \"#dt-context-position\">context\n            position</a>, and <a title = \"context size\" href = \"#dt-context-size\">context size</a> for the evaluation\n            of the containing instruction or literal result\n            element.</p>\n\n            <p>In other cases (for example, where the containing\n            element is <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>, <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>,\n            or <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>),\n            the rules are given in the specification of the\n            containing element.</p>\n\n            <p>The <a href = \"#function-current\"><code>current</code></a> function\n            can be used within any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> to select the item\n            that was supplied as the context item to the XPath\n            expression by the XSLT processor. Unlike <code>.</code>\n            (dot) this is unaffected by changes to the context item\n            that occur within the XPath expression. The <a href = \"#function-current\"><code>current</code></a> function\n            is described in <a href = \"#current-function\"><i>16.6.1\n            current</i></a>.</p>\n\n            <p>On completion of an instruction that changes the\n            <a title = \"focus\" href = \"#dt-focus\">focus</a> (such as\n            <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n            or <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>), the\n            focus reverts to its previous value.</p>\n\n            <p>When a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> is\n            called, the focus within the body of the function is\n            initially undefined. <span>The focus is also undefined\n            on initial entry to the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> if no <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a> is\n            supplied.</span></p>\n\n            <p>When the focus is undefined, evaluation of any\n            <a title = \"expression\" href = \"#dt-expression\">expression</a> that references the\n            context item, context position, or context size results\n            in a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n            error</a> [XPDY0002]</p>\n\n            <p>The description above gives an outline of the way\n            the <a title = \"focus\" href = \"#dt-focus\">focus</a> works.\n            Detailed rules for the effect of each instruction are\n            given separately with the description of that\n            instruction. In the absence of specific rules, an\n            instruction uses the same focus as its parent\n            instruction.</p>\n\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-singleton-focus\" id = \"dt-singleton-focus\" title = \"singleton focus\"></a>A <b>singleton focus</b> based on\n            a node <var>N</var> has the <a title = \"context item\" href = \"#dt-context-item\">context item</a> (and therefore\n            the <a title = \"context node\" href = \"#dt-context-node\">context node</a>) set to\n            <var>N</var>, and the <a title = \"context position\" href = \"#dt-context-position\">context position</a> and\n            <a title = \"context size\" href = \"#dt-context-size\">context\n            size</a> both set to 1 (one).<span class = \"definition\">]</span></p>\n          </div>\n\n          <div class = \"div4\">\n            <h5><a name = \"evaluation-context\" id = \"evaluation-context\"></a>5.4.3.2 Other components of\n            the XPath Dynamic Context</h5>\n\n            <p>The previous section explained how the <a title = \"focus\" href = \"#dt-focus\">focus</a> for an XPath\n            expression appearing in an XSLT stylesheet is\n            initialized. This section explains how the other\n            components of the <a href = \"http://www.w3.org/TR/xpath20/#dt-dynamic-context\">dynamic\n            context</a><sup><small>XP</small></sup> of an XPath\n            expression are initialized.</p>\n\n            <ul>\n              <li>\n                <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-variable-values\">dynamic\n                variables</a><sup><small>XP</small></sup> are the\n                current values of the in-scope <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable binding\n                elements</a>.</p>\n              </li>\n\n              <li>\n                <p>The <em>current date and time</em> represents an\n                <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n                point in time during processing of the\n                transformation; it does not change during the\n                course of the transformation.</p>\n              </li>\n\n              <li>\n                <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-timezone\">implicit\n                timezone</a><sup><small>XP</small></sup> is\n                <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n              </li>\n\n              <li>\n                <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-known-docs\">available\n                documents</a><sup><small>XP</small></sup>, and the\n                <a href = \"http://www.w3.org/TR/xpath20/#dt-known-collections\">\n                available\n                collections</a><sup><small>XP</small></sup> are\n                determined as part of the process for initiating a\n                transformation (see <a href = \"#initiating\"><i>2.3\n                Initiating a Transformation</i></a>).</p>\n\n                <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-known-docs\">available\n                documents</a><sup><small>XP</small></sup> are\n                defined as part of the XPath 2.0 dynamic context to\n                support the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>\n                doc</code></a><sup><small>FO</small></sup>\n                function, but this component is also referenced by\n                the similar XSLT <a href = \"#function-document\"><code>document</code></a>\n                function: see <a href = \"#document\"><i>16.1 Multiple\n                Source Documents</i></a>. This variable defines a\n                mapping between URIs passed to the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>\n                doc</code></a><sup><small>FO</small></sup> or\n                <a href = \"#function-document\"><code>document</code></a>\n                function and the document nodes that are\n                returned.</p>\n\n                <div class = \"note\">\n                  <p class = \"prefix\"><b>Note:</b></p>\n\n                  <p>Defining this as part of the evaluation\n                  context is a formal way of specifying that the\n                  way in which URIs get turned into document nodes\n                  is outside the control of the language\n                  specification, and depends entirely on the\n                  run-time environment in which the transformation\n                  takes place.</p>\n                </div>\n\n                <p>The XSLT-defined <a href = \"#function-document\"><code>document</code></a>\n                function allows the use of URI references\n                containing fragment identifiers. The interpretation\n                of a fragment identifier depends on the media type\n                of the resource representation. Therefore, the\n                information supplied in <a href = \"http://www.w3.org/TR/xpath20/#dt-known-docs\">available\n                documents</a><sup><small>XP</small></sup> for XSLT\n                processing must provide not only a mapping from\n                URIs to document nodes as required by XPath, but\n                also a mapping from URIs to media types.</p>\n              </li>\n\n              <li>\n                <p>The <a href = \"http://www.w3.org/TR/xpath20/#dt-default-collection\">\n                default collection</a><sup><small>XP</small></sup>\n                is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n                This allows options such as setting the default\n                collection to be an empty sequence, or to be\n                undefined.</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"additional-dynamic-context\" id = \"additional-dynamic-context\"></a>5.4.4 Additional Dynamic\n          Context Components used by XSLT</h4>\n\n          <p>In addition to the values that make up the <a title = \"focus\" href = \"#dt-focus\">focus</a>, an XSLT processor\n          maintains a number of other dynamic context components\n          that reflect aspects of the evaluation context. These\n          components are fully described in the sections of the\n          specification that maintain and use them. They are:</p>\n\n          <ul>\n            <li>\n              <p>The <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template\n              rule</a>, which is the <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> most recently\n              invoked by an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n              <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n              or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n              instruction: see <a href = \"#apply-imports\"><i>6.7\n              Overriding Template Rules</i></a>;</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"current mode\" href = \"#dt-current-mode\">current mode</a>, which is the\n              <a title = \"mode\" href = \"#dt-mode\">mode</a> set by the\n              most recent call of <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n              (for a full definition see <a href = \"#modes\"><i>6.5\n              Modes</i></a>);</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"current group\" href = \"#dt-current-group\">current group</a> and <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a>,\n              which provide information about the collection of\n              items currently being processed by an <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n              instruction: see <a href = \"#current-group\"><i>14.1 The\n              Current Group</i></a> and <a href = \"#current-grouping-key\"><i>14.2 The Current Grouping\n              Key</i></a>;</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"current captured substrings\" href = \"#dt-current-captured-substrings\">current captured\n              substrings</a>: this is a sequence of strings, which\n              is maintained when a string is matched against a\n              regular expression using the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n              instruction, and which is accessible using the\n              <a href = \"#function-regex-group\"><code>regex-group</code></a>\n              function: see <a href = \"#regex-group\"><i>15.2 Captured\n              Substrings</i></a>.</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"output state\" href = \"#dt-output-state\">output state</a>: this is a flag\n              whose two possible values are <a title = \"final output state\" href = \"#dt-final-output-state\">final output state</a> and\n              <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n              state</a>. This flag indicates whether instructions\n              are currently writing to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> or to\n              an internal data structure. The initial setting is\n              <a title = \"final output state\" href = \"#dt-final-output-state\">final output state</a>, and\n              it is switched to <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n              state</a> by instructions such as <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>.\n              For more details, see <a href = \"#creating-result-trees\"><i>19.1 Creating Final\n              Result Trees</i></a>.</p>\n            </li>\n          </ul>\n\n          <p>The following non-normative table summarizes the\n          initial state of each of the components in the evaluation\n          context, and the instructions which cause the state of\n          the component to change.</p>\n\n          <table border = \"1\" cellpadding = \"5\">\n            <thead>\n              <tr>\n                <th align = \"left\">Component</th>\n\n                <th align = \"left\">Initial Setting</th>\n\n                <th align = \"left\">Set by</th>\n\n                <th align = \"left\">Cleared by</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td valign = \"top\"><a title = \"focus\" href = \"#dt-focus\">focus</a></td>\n\n                <td valign = \"top\">singleton focus based on the\n                <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>\n                if supplied</td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n                <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n                <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n                <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a></td>\n\n                <td valign = \"top\">calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"current template rule\" href = \"#dt-current-template-rule\">current template\n                rule</a></td>\n\n                <td valign = \"top\"><span>If a <a title = \"named template\" href = \"#dt-named-template\">named\n                template</a> is supplied as the entry point to the\n                transformation, then null; otherwise the <a title = \"initial template\" href = \"#dt-initial-template\">initial\n                template</a></span></td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n                <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n                <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n                <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n                and <span><a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a></span>,\n                and calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a>.\n                Also cleared while evaluating global variables or\n                default values of stylesheet parameters, and the\n                sequence constructors contained in <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> and\n                <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>.</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"current mode\" href = \"#dt-current-mode\">current mode</a></td>\n\n                <td valign = \"top\">the initial <a title = \"mode\" href = \"#dt-mode\">mode</a></td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a></td>\n\n                <td valign = \"top\">calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"current group\" href = \"#dt-current-group\">current group</a></td>\n\n                <td valign = \"top\">empty sequence</td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a></td>\n\n                <td valign = \"top\">calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping\n                key</a></td>\n\n                <td valign = \"top\">empty sequence</td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a></td>\n\n                <td valign = \"top\">calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"current captured substrings\" href = \"#dt-current-captured-substrings\">current captured\n                substrings</a></td>\n\n                <td valign = \"top\">empty sequence</td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a></td>\n\n                <td valign = \"top\"><a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>;\n                calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\"><a title = \"output state\" href = \"#dt-output-state\">output state</a></td>\n\n                <td valign = \"top\"><a title = \"final output state\" href = \"#dt-final-output-state\">final output\n                state</a></td>\n\n                <td valign = \"top\">Set to <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n                state</a> by instructions such as <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>,\n                <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n                etc., and by calls on <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet\n                functions</a></td>\n\n                <td valign = \"top\">None</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"patterns\" id = \"patterns\"></a>5.5 Patterns</h3>\n\n        <p>A <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> identifies the nodes\n        to which it applies by means of a pattern. As well as being\n        used in template rules, patterns are used for numbering\n        (see <a href = \"#number\"><i>12 Numbering</i></a>), for\n        grouping (see <a href = \"#grouping\"><i>14 Grouping</i></a>),\n        and for declaring <a title = \"\" href = \"#key\">keys</a> (see\n        <a href = \"#key\"><i>16.3 Keys</i></a>).</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-pattern\" id = \"dt-pattern\" title = \"pattern\"></a>A <b>pattern</b>\n        specifies a set of conditions on a node. A node that\n        satisfies the conditions matches the pattern; a node that\n        does not satisfy the conditions does not match the pattern.\n        The syntax for patterns is a subset of the syntax for\n        <a title = \"expression\" href = \"#dt-expression\">expressions</a>.<span class = \"definition\">]</span> As explained in detail below, a node\n        matches a pattern if the node can be selected by\n        <span>deriving an equivalent expression, and</span>\n        evaluating this expression with respect to some possible\n        context.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"pattern-examples\" id = \"pattern-examples\"></a>5.5.1 Examples of Patterns</h4>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e8032\" id = \"d5e8032\"></a>Example: Patterns\n            </div>\n\n            <p>Here are some examples of patterns:</p>\n\n            <ul>\n              <li>\n                <p><code>para</code> matches any <code>para</code>\n                element.</p>\n              </li>\n\n              <li>\n                <p><code>*</code> matches any element.</p>\n              </li>\n\n              <li>\n                <p><code>chapter|appendix</code> matches any\n                <code>chapter</code> element and any\n                <code>appendix</code> element.</p>\n              </li>\n\n              <li>\n                <p><code>olist/entry</code> matches any\n                <code>entry</code> element with an\n                <code>olist</code> parent.</p>\n              </li>\n\n              <li>\n                <p><code>appendix//para</code> matches any\n                <code>para</code> element with an\n                <code>appendix</code> ancestor element.</p>\n              </li>\n\n              <li>\n                <p><code>schema-element(us:address)</code> matches\n                any element that is annotated as an instance of the\n                type defined by the schema element declaration\n                <code>us:address</code>, and whose name is either\n                <code>us:address</code> or the name of another\n                element in its substitution group.</p>\n              </li>\n\n              <li>\n                <p><code>attribute(*, xs:date)</code> matches any\n                attribute annotated as being of type\n                <code>xs:date</code>.</p>\n              </li>\n\n              <li>\n                <p><code>/</code> matches a document node.</p>\n              </li>\n\n              <li>\n                <p><code>document-node()</code> matches a document\n                node.</p>\n              </li>\n\n              <li>\n                <p>\n                <code>document-node(schema-element(my:invoice))</code>\n                matches the document node of a document whose\n                document element <span>is named\n                <code>my:invoice</code> and matches the type\n                defined by the global element declaration</span>\n                <code>my:invoice</code>.</p>\n              </li>\n\n              <li>\n                <p><code>text()</code> matches any text node.</p>\n              </li>\n\n              <li>\n                <p><code>node()</code> matches any node other than\n                an attribute node, namespace node, or document\n                node.</p>\n              </li>\n\n              <li>\n                <p><code>id(\"W33\")</code> matches the element with\n                unique ID <code>W33</code>.</p>\n              </li>\n\n              <li>\n                <p><code>para[1]</code> matches any\n                <code>para</code> element that is the first\n                <code>para</code> child element of its parent.\n                <span>It also matches a parentless\n                <code>para</code> element.</span></p>\n              </li>\n\n              <li>\n                <p><code>//para</code> matches any\n                <code>para</code> element that has a parent\n                node.</p>\n              </li>\n\n              <li>\n                <p><code>bullet[position() mod 2 = 0]</code>\n                matches any <code>bullet</code> element that is an\n                even-numbered <code>bullet</code> child of its\n                parent.</p>\n              </li>\n\n              <li>\n                <p><code>div[@class=\"appendix\"]//p</code> matches\n                any <code>p</code> element with a <code>div</code>\n                ancestor element that has a <code>class</code>\n                attribute with value <code>appendix</code>.</p>\n              </li>\n\n              <li>\n                <p><code>@class</code> matches any\n                <code>class</code> attribute (<em>not</em> any\n                element that has a <code>class</code>\n                attribute).</p>\n              </li>\n\n              <li>\n                <p><code>@*</code> matches any attribute node.</p>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"pattern-syntax\" id = \"pattern-syntax\"></a>5.5.2 Syntax of Patterns</h4>\n\n          <p><a name = \"err-XTSE0340\" id = \"err-XTSE0340\"><span class = \"error\">[ERR XTSE0340]</span></a> Where an attribute is\n          defined to contain a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the pattern does not match the production <a href = \"#NT-Pattern\">Pattern</a>. Every pattern is a legal XPath\n          <a title = \"expression\" href = \"#dt-expression\">expression</a>, but the converse is not\n          true: <code>2+2</code> is an example of a legal XPath\n          expression that is not a pattern. The XPath expressions\n          that can be used as patterns are those that match the\n          grammar for <a href = \"#NT-Pattern\">Pattern</a>, given\n          below.</p>\n\n          <p>Informally, a <a href = \"#NT-Pattern\">Pattern</a> is a\n          set of path expressions separated by <code>|</code>,\n          where each step in the path expression is constrained to\n          be an <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-AxisStep\">AxisStep</a><sup>\n          <small>XP</small></sup> that uses only the\n          <code>child</code> or <code>attribute</code> axes.\n          Patterns may also use the <code>//</code> operator. A\n          <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Predicate\">Predicate</a><sup>\n          <small>XP</small></sup> within the <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-PredicateList\">PredicateList</a><sup>\n          <small>XP</small></sup> in a pattern can contain\n          arbitrary XPath expressions (enclosed between square\n          brackets) in the same way as a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Predicate\">predicate</a><sup>\n          <small>XP</small></sup> in a path expression.</p>\n\n          <p>Patterns may start with an <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n          <small>FO</small></sup> or <a href = \"#function-key\"><code>key</code></a> function call,\n          provided that the value to be matched is supplied as\n          either a literal or a reference to a <a title = \"variable\" href = \"#dt-variable\">variable</a> or <a title = \"parameter\" href = \"#dt-parameter\">parameter</a>, and the key name (in\n          the case of the <a href = \"#function-key\"><code>key</code></a> function) is\n          supplied as a string literal. <span>These patterns will\n          never match a node in a tree whose root is not a document\n          node.</span></p>\n\n          <p>If a pattern occurs in part of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where\n          <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled (see <a href = \"#backwards\"><i>3.8\n          Backwards-Compatible Processing</i></a>), then <span>the\n          semantics of the pattern are defined on the basis that\n          the equivalent XPath expression is evaluated with\n          <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n          set to true.</span></p>\n\n          <h5><a name = \"d5e8328\" id = \"d5e8328\"></a>Patterns</h5>\n\n          <table class = \"scrap\" summary = \"Scrap\">\n            <tbody>\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-Pattern\" id = \"NT-Pattern\"></a>[1]&#160;&#160;&#160;</td>\n\n                <td><code>Pattern</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"#NT-PathPattern\">PathPattern</a></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td></td>\n\n                <td></td>\n\n                <td></td>\n\n                <td><code>| <a href = \"#NT-Pattern\">Pattern</a> '|'\n                <a href = \"#NT-PathPattern\">PathPattern</a></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-PathPattern\" id = \"NT-PathPattern\"></a>[2]&#160;&#160;&#160;</td>\n\n                <td><code>PathPattern</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"#NT-RelativePathPattern\">RelativePathPattern</a></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td></td>\n\n                <td></td>\n\n                <td></td>\n\n                <td><code>| '/' <a href = \"#NT-RelativePathPattern\">RelativePathPattern</a>?</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td></td>\n\n                <td></td>\n\n                <td></td>\n\n                <td><code>| '//' <a href = \"#NT-RelativePathPattern\">RelativePathPattern</a></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td></td>\n\n                <td></td>\n\n                <td></td>\n\n                <td><code>| <a href = \"#NT-IdKeyPattern\">IdKeyPattern</a> (('/' | '//')\n                <a href = \"#NT-RelativePathPattern\">RelativePathPattern</a>)?</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-RelativePathPattern\" id = \"NT-RelativePathPattern\"></a>[3]&#160;&#160;&#160;</td>\n\n                <td><code>RelativePathPattern</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"#NT-PatternStep\">PatternStep</a>\n                (('/' | '//') <a href = \"#NT-RelativePathPattern\">RelativePathPattern</a>)?</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-PatternStep\" id = \"NT-PatternStep\"></a>[4]&#160;&#160;&#160;</td>\n\n                <td><code>PatternStep</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"#NT-PatternAxis\">PatternAxis</a>? <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NodeTest\">NodeTest</a><sup>\n                <small>XP</small></sup> <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-PredicateList\">\n                PredicateList</a><sup><small>XP</small></sup></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-PatternAxis\" id = \"NT-PatternAxis\"></a>[5]&#160;&#160;&#160;</td>\n\n                <td><code>PatternAxis</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code>('child' '::' | 'attribute' '::' |\n                '@')</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-IdKeyPattern\" id = \"NT-IdKeyPattern\"></a>[6]&#160;&#160;&#160;</td>\n\n                <td><code>IdKeyPattern</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code>'id' '(' <a href = \"#NT-IdValue\">IdValue</a> ')'</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td></td>\n\n                <td></td>\n\n                <td></td>\n\n                <td><code>| 'key' '(' <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral\">\n                StringLiteral</a><sup><small>XP</small></sup> ','\n                <a href = \"#NT-KeyValue\">KeyValue</a> ')'</code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-IdValue\" id = \"NT-IdValue\"></a>[7]&#160;&#160;&#160;</td>\n\n                <td><code>IdValue</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral\">\n                StringLiteral</a><sup><small>XP</small></sup> |\n                <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-VarRef\">VarRef</a><sup>\n                <small>XP</small></sup></code></td>\n              </tr>\n\n              <tr valign = \"baseline\">\n                <td><a name = \"NT-KeyValue\" id = \"NT-KeyValue\"></a>[8]&#160;&#160;&#160;</td>\n\n                <td><code>KeyValue</code></td>\n\n                <td>&#160;&#160;&#160;::=&#160;&#160;&#160;</td>\n\n                <td><code><a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Literal\">Literal</a><sup>\n                <small>XP</small></sup> | <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-VarRef\">VarRef</a><sup>\n                <small>XP</small></sup></code></td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p>The constructs <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NodeTest\">NodeTest</a><sup>\n          <small>XP</small></sup>, <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-PredicateList\">PredicateList</a><sup>\n          <small>XP</small></sup>, <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-VarRef\">VarRef</a><sup>\n          <small>XP</small></sup>, <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Literal\">Literal</a><sup>\n          <small>XP</small></sup>, and <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral\">StringLiteral</a><sup>\n          <small>XP</small></sup> are part of the XPath expression\n          language, and are defined in <a href = \"#xpath20\">[XPath\n          2.0]</a>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"pattern-semantics\" id = \"pattern-semantics\"></a>5.5.3 The Meaning of a\n          Pattern</h4>\n\n          <p>The meaning of a pattern is defined formally as\n          follows.</p>\n\n          <p>First we define the concept of an <em>equivalent\n          expression</em>. In general, the equivalent expression is\n          the XPath expression that takes the same lexical form as\n          the pattern as written. However, if the pattern contains\n          a <code>PathPattern</code> that is a\n          <code>RelativePathPattern</code>, then the first\n          <code>PatternStep</code> <var>PS</var> of this\n          <code>RelativePathPattern</code> is adjusted to allow it\n          to match a parentless element or attribute node, as\n          follows:</p>\n\n          <ul>\n            <li>\n              <p>If the <code>NodeTest</code> in <var>PS</var> is\n              <code>document-node()</code> (optionally with\n              arguments), and if no explicit axis is specified,\n              then the axis in step <var>PS</var> is taken as\n              <code>self</code> rather than <code>child</code>.</p>\n            </li>\n\n            <li>\n              <p>If <var>PS</var> uses the child axis (explicitly\n              or implicitly), and if the <code>NodeTest</code> in\n              <var>PS</var> is not <code>document-node()</code>\n              (optionally with arguments), then the axis in step\n              <var>PS</var> is replaced by\n              <code>child-or-top</code>, which is defined as\n              follows. If the context node is a parentless element,\n              comment, processing-instruction, or text node then\n              the <code>child-or-top</code> axis selects the\n              context node; otherwise it selects the children of\n              the context node. It is a forwards axis whose\n              principal node kind is element.</p>\n            </li>\n\n            <li>\n              <p>If <var>PS</var> uses the attribute axis, then the\n              axis in step <var>PS</var> is replaced by\n              <code>attribute-or-top</code>, which is defined as\n              follows. If the context node is an attribute node\n              with no parent, then the\n              <code>attribute-or-top</code> axis selects the\n              context node; otherwise it selects the attributes of\n              the context node. It is a forwards axis whose\n              principal node kind is attribute.</p>\n            </li>\n          </ul>\n\n          <p>The axes <code>child-or-top</code> and\n          <code>attribute-or-top</code> are introduced only for\n          definitional purposes. They cannot be used explicitly in\n          a user-written pattern or expression.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The purpose of these adjustments is to ensure that a\n            pattern such as <code>person</code> matches any element\n            named <code>person</code>, even if it has no parent;\n            and similarly, that the pattern <code>@width</code>\n            matches any attribute named <code>width</code>, even a\n            parentless attribute. The rule also ensures that a\n            pattern using a <code>NodeTest</code> of the form\n            <code>document-node(...)</code> matches a document\n            node. The pattern <code>node()</code> will match any\n            element, text node, comment, or processing instruction,\n            whether or not it has a parent. For backwards\n            compatibility reasons, the pattern <code>node()</code>,\n            when used without an explicit axis, does not match\n            document nodes, attribute nodes, or namespace nodes.\n            The rules are also phrased to ensure that positional\n            patterns of the form <code>para[1]</code> continue to\n            count nodes relative to their parent, if they have\n            one.</p>\n          </div>\n\n          <p>Let the equivalent expression, calculated according to\n          these rules, be <var>EE</var>.</p>\n\n          <p>To determine whether a node <var>N</var> matches the\n          pattern, evaluate the <a title = \"expression\" href = \"#dt-expression\">expression</a>\n          <code>root(.)//(<var>EE</var>)</code> with a <a title = \"singleton focus\" href = \"#dt-singleton-focus\">singleton\n          focus</a> based on <var>N</var>. If the result is a\n          sequence of nodes that includes <var>N</var>, then node\n          <var>N</var> matches the pattern; otherwise node\n          <var>N</var> does not match the pattern.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e8624\" id = \"d5e8624\"></a>Example: The\n              Semantics of Patterns\n            </div>\n\n            <p>The pattern <code>p</code> matches any\n            <code>p</code> element, because a <code>p</code>\n            element will always be present in the result of\n            evaluating the <a title = \"expression\" href = \"#dt-expression\">expression</a>\n            <code>root(.)//(child-or-top::p)</code>. Similarly,\n            <code>/</code> matches <span>a document node, and only\n            a document node,</span> because the result of the\n            <a title = \"expression\" href = \"#dt-expression\">expression</a>\n            <code>root(.)//(/)</code> returns the root node of the\n            tree containing the context node <span>if and only if\n            it is a document node.</span></p>\n\n            <p>The pattern <code>node()</code> matches all nodes\n            selected by the expression\n            <code>root(.)//(child-or-top::node())</code>, that is,\n            all element, text, comment, and processing instruction\n            nodes, whether or not they have a parent. It does not\n            match attribute or namespace nodes because the\n            expression does not select nodes using the attribute or\n            namespace axes. <span>It does not match document nodes\n            because for backwards compatibility reasons the\n            <code>child-or-top</code> axis does not match a\n            document node.</span></p>\n          </div>\n\n          <p>Although the semantics of patterns are specified\n          formally in terms of expression evaluation, it is\n          possible to understand pattern matching using a different\n          model. In a pattern, <code>|</code> indicates\n          alternatives; a pattern with one or more <code>|</code>\n          separated alternatives matches if any one of the\n          alternatives matches. A pattern such as\n          <code>book/chapter/section</code> can be examined from\n          right to left. A node will only match this pattern if it\n          is a <code>section</code> element; and then, only if its\n          parent is a <code>chapter</code>; and then, only if the\n          parent of that <code>chapter</code> is a\n          <code>book</code>. When the pattern uses the\n          <code>//</code> operator, one can still read it from\n          right to left, but this time testing the ancestors of a\n          node rather than its parent. For example\n          <code>appendix//section</code> matches every\n          <code>section</code> element that has an ancestor\n          <code>appendix</code> element.</p>\n\n          <p>The formal definition, however, is useful for\n          understanding the meaning of a pattern such as\n          <code>para[1]</code>. This matches any node selected by\n          the expression\n          <code>root(.)//(child-or-top::para[1])</code>: that is,\n          any <code>para</code> element that is the first\n          <code>para</code> child of its parent, <span>or a\n          <code>para</code> element that has no parent.</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>An implementation, of course, may use any algorithm\n            it wishes for evaluating patterns, so long as the\n            result corresponds with the formal definition above. An\n            implementation that followed the formal definition by\n            evaluating the equivalent expression and then testing\n            the membership of a specific node in the result would\n            probably be very inefficient.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"pattern-errors\" id = \"pattern-errors\"></a>5.5.4 Errors in Patterns</h4>\n\n          <p>Any <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a> or <a title = \"type errors\" href = \"#dt-type-error\">type error</a> that\n          occurs during the evaluation of a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> against a particular node\n          is treated as a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable error</a> even if the\n          error would not be recoverable under other circumstances.\n          The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to treat the pattern as not matching that\n          node.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The reason for this provision is that it is\n            difficult for the stylesheet author to predict which\n            predicates in a pattern will actually be evaluated. In\n            the case of match patterns in template rules, it is not\n            even possible to predict which patterns will be\n            evaluated against a particular node. Making errors in\n            patterns recoverable enables an implementation, if it\n            chooses to do so, to report such errors while\n            stylesheets are under development, while masking them\n            if they occur during production running.</p>\n          </div>\n\n          <p>One particular optimization is <span class = \"verb\">required</span> by this specification: for a\n          <a href = \"#NT-PathPattern\">PathPattern</a> that starts\n          with <code>/</code> or <code>//</code> or with an\n          <a href = \"#NT-IdKeyPattern\">IdKeyPattern</a>, the result\n          of testing this pattern against a node in a tree whose\n          root is not a document node must be a non-match, rather\n          than a dynamic error. This rule applies to each <a href = \"#NT-PathPattern\">PathPattern</a> within a <a href = \"#NT-Pattern\">Pattern</a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Without the above rule, any attempt to apply\n            templates to a parentless element node would create the\n            risk of a dynamic error if the stylesheet has a\n            template rule specifying <code>match=\"/\"</code>.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"attribute-value-templates\" id = \"attribute-value-templates\"></a>5.6 Attribute Value\n        Templates</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-attribute-value-template\" id = \"dt-attribute-value-template\" title = \"attribute value template\"></a>In an attribute that is\n        designated as an <b>attribute value template</b>, such as\n        an attribute of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>, an\n        <a title = \"expression\" href = \"#dt-expression\">expression</a>\n        can be used by surrounding the expression with curly\n        brackets (<code>{}</code>)<span class = \"definition\">]</span>.</p>\n\n        <p>An attribute value template consists of an alternating\n        sequence of fixed parts and variable parts. A variable part\n        consists of an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> enclosed in curly brackets\n        (<code>{}</code>). A fixed part may contain any characters,\n        except that a left curly bracket <span class = \"verb\">must</span> be written as <code>{{</code> and a\n        right curly bracket <span class = \"verb\">must</span> be\n        written as <code>}}</code>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>An expression within a variable part may contain an\n          unescaped curly bracket within a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral\">StringLiteral</a><sup>\n          <small>XP</small></sup> <span>or within a\n          comment</span>.</p>\n        </div>\n\n        <p><a name = \"err-XTSE0350\" id = \"err-XTSE0350\"><span class = \"error\">[ERR XTSE0350]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an unescaped left curly bracket appears in a fixed part of\n        an attribute value template without a matching right curly\n        bracket.</p>\n\n        <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the string contained\n        between matching curly brackets in an attribute value\n        template does not match the XPath production <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Expr\">Expr</a><sup>\n        <small>XP</small></sup>, or if it contains other XPath\n        static errors. The error is signaled using the appropriate\n        XPath error code.</p>\n\n        <p><a name = \"err-XTSE0370\" id = \"err-XTSE0370\"><span class = \"error\">[ERR XTSE0370]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an unescaped right curly bracket occurs in a fixed part of\n        an attribute value template.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-effective-value\" id = \"dt-effective-value\" title = \"effective value\"></a>The result of evaluating an attribute\n        value template is referred to as the <b>effective value</b>\n        of the attribute.<span class = \"definition\">]</span> The\n        effective value is the string obtained by concatenating the\n        expansions of the fixed and variable parts:</p>\n\n        <ul>\n          <li>\n            <p>The expansion of a fixed part is obtained by\n            replacing any double curly brackets (<code>{{</code> or\n            <code>}}</code>) by the corresponding single curly\n            bracket.</p>\n          </li>\n\n          <li>\n            <p>The expansion of a variable part is obtained by\n            evaluating the enclosed XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> and converting the\n            resulting value to a string. <span>This conversion is\n            done using the rules given in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing\n            Simple Content</i></a>.</span></p>\n          </li>\n        </ul>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This process can generate dynamic errors, for example\n          if the sequence contains an element with a complex\n          content type (which cannot be atomized).</p>\n        </div>\n\n        <p>If <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n        behavior</a> is enabled for the attribute, the rules for\n        converting the value of the expression to a string are\n        modified as follows. After <a title = \"atomize\" href = \"#dt-atomization\">atomizing</a> the result of the\n        expression, all items other than the first item in the\n        resulting sequence are discarded, and the effective value\n        is obtained by converting the first item in the sequence to\n        a string. If the atomized sequence is empty, the result is\n        a zero-length string.</p>\n\n        <p>Curly brackets are not treated specially in an attribute\n        value in an XSLT <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> unless the attribute is\n        specifically designated as one that permits an attribute\n        value template; in an element syntax summary, the value of\n        such attributes is surrounded by curly brackets.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Not all attributes are designated as attribute value\n          templates. Attributes whose value is an <a title = \"expression\" href = \"#dt-expression\">expression</a> or\n          <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>,\n          attributes of <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> elements and attributes\n          that refer to named XSLT objects are\n          <span>generally</span> not designated as attribute value\n          templates <span>(an exception is the <code>format</code>\n          attribute of <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>)</span>.\n          Namespace declarations are not <span>XDM attribute\n          nodes</span> and are therefore never treated as attribute\n          value templates.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e8932\" id = \"d5e8932\"></a>Example: Attribute\n            Value Templates\n          </div>\n\n          <p>The following example creates an <code>img</code>\n          result element from a <code>photograph</code> element in\n          the source; the value of the <code>src</code> and\n          <code>width</code> attributes are computed using XPath\n          expressions enclosed in attribute value templates:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"image-dir\" select=\"'/images'\"/&gt;\n\n&lt;xsl:template match=\"photograph\"&gt;\n  &lt;img src=\"{$image-dir}/{href}\" width=\"{size/@width}\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>With this source</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;photograph&gt;\n  &lt;href&gt;headquarters.jpg&lt;/href&gt;\n  &lt;size width=\"300\"/&gt;\n&lt;/photograph&gt;\n</pre>\n          </div>\n\n          <p>the result would be</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;img src=\"/images/headquarters.jpg\" width=\"300\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e8959\" id = \"d5e8959\"></a>Example: Producing a\n            Space-Separated List\n          </div>\n\n          <p>The following example shows how the values in a\n          sequence are output as a space-separated list. The\n          following literal result element:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;temperature readings=\"{10.32, 5.50, 8.31}\"/&gt;\n</pre>\n          </div>\n\n          <p>produces the output node:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;temperature readings=\"10.32 5.5 8.31\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>Curly brackets are <em>not</em> recognized recursively\n        inside expressions.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e8975\" id = \"d5e8975\"></a>Example: Curly\n            Brackets can not be Nested\n          </div>\n\n          <p>For example:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;a href=\"#{id({@ref})/title}\"&gt;\n</pre>\n          </div>\n\n          <p>is <em>not</em> allowed. Instead, use simply:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;a href=\"#{id(@ref)/title}\"&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"sequence-constructors\" id = \"sequence-constructors\"></a>5.7 Sequence Constructors</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-sequence-constructor\" id = \"dt-sequence-constructor\" title = \"sequence constructor\"></a>A <b>sequence\n        constructor</b> is a sequence of zero or more sibling nodes\n        in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that can be evaluated to\n        return a sequence of nodes and atomic values. The way that\n        the resulting sequence is used depends on the containing\n        instruction.<span class = \"definition\">]</span></p>\n\n        <p>Many <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a>, <span>and also</span>\n        <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result elements</a>,\n        are defined to take a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> as\n        their content.</p>\n\n        <p>Four kinds of nodes may be encountered in a sequence\n        constructor:</p>\n\n        <ul>\n          <li>\n            <p><em>Text nodes</em> appearing in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> (if\n            they have not been removed in the process of whitespace\n            stripping: see <a href = \"#stylesheet-stripping\"><i>4.2\n            Stripping Whitespace from the Stylesheet</i></a>) are\n            copied to create a new parentless text node in the\n            result sequence.</p>\n          </li>\n\n          <li>\n            <p><a title = \"literal result element\" href = \"#dt-literal-result-element\">Literal result\n            elements</a> are evaluated to create a new parentless\n            element node, having the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> as the\n            literal result element, which is added to the result\n            sequence: see <a href = \"#literal-result-element\"><i>11.1\n            Literal Result Elements</i></a></p>\n          </li>\n\n          <li>\n            <p>XSLT <a title = \"instruction\" href = \"#dt-instruction\">instructions</a> produce a sequence\n            of zero, one, or more items as their result. These\n            items are added to the result sequence. For most XSLT\n            instructions, these items are nodes, but some\n            instructions (<a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a> and\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>) can\n            also produce atomic values. Several instructions, such\n            as <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, return\n            a newly constructed parentless node (which may have its\n            own attributes, namespaces, children, and other\n            descendants). Other instructions, such as <a href = \"#XSLT_element-if\"><code>xsl:if</code></a>, pass on the\n            items produced by their own nested sequence\n            constructors. The <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>\n            instruction may return atomic values, or existing\n            nodes.</p>\n          </li>\n\n          <li>\n            <p><a title = \"extension instruction\" href = \"#dt-extension-instruction\">Extension instructions</a>\n            (see <a href = \"#extension-instruction\"><i>18.2 Extension\n            Instructions</i></a>) also produce a sequence of items\n            as their result. The items in this sequence are added\n            to the result sequence.</p>\n          </li>\n        </ul>\n\n        <p>There are several ways the result of a sequence\n        constructor may be used.</p>\n\n        <ul>\n          <li>\n            <p>The sequence may be bound to a variable or returned\n            from a stylesheet function, in which case it becomes\n            available as a value to be manipulated in arbitrary\n            ways by XPath expressions. The sequence is bound to a\n            variable when the sequence constructor appears within\n            one of the elements <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>,\n            <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>, or\n            <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>,\n            when this instruction has an <code>as</code> attribute.\n            The sequence is returned from a stylesheet function\n            when the sequence constructor appears within the\n            <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n            element.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>This will typically expose to the stylesheet\n              elements, attributes, and other nodes that have not\n              yet been attached to a parent node in a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.\n              The semantics of XPath expressions when applied to\n              parentless nodes are well-defined; however, such\n              expressions should be used with care. For example,\n              the expression <code>/</code> <span>causes a type\n              error if the root of the tree containing the context\n              node is not a document node.</span>.</p>\n\n              <p>Parentless attribute nodes require particular care\n              because they have no namespace nodes associated with\n              them. <span>A parentless attribute node is not\n              permitted to contain namespace-sensitive content (for\n              example, a QName or an XPath expression) because\n              there is no information enabling the prefix to be\n              resolved to a namespace URI.</span> Parentless\n              attributes can be useful in an application (for\n              example, they provide an alternative to the use of\n              attribute sets: see <a href = \"#attribute-sets\"><i>10.2\n              Named Attribute Sets</i></a>) but they need to be\n              handled with care.</p>\n            </div>\n          </li>\n\n          <li>\n            <p>The sequence may be returned as the result of the\n            containing element. This happens when the instruction\n            containing the sequence constructor is <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>,\n            <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n            <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n            <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n            <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a>,\n            <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>,\n            <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n            <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n            <a href = \"#XSLT_element-if\"><code>xsl:if</code></a>, <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>,\n            <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>,\n            <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>,\n            <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a>,\n            <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>,\n            <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>, or\n            <a href = \"#XSLT_element-when\"><code>xsl:when</code></a></p>\n          </li>\n\n          <li>\n            <p>The sequence may be used to construct the content of\n            a new element or document node. This happens when the\n            sequence constructor appears as the content of a\n            <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n            element</a>, or of one of the instructions <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a>,\n            <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,</span>\n            or <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>. It\n            also happens when the sequence constructor is contained\n            in one of the elements <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>,\n            <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>, or\n            <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>,\n            when this instruction has no <code>as</code> attribute.\n            For details, see <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n            Complex Content</i></a>.</p>\n          </li>\n\n          <li>\n            <p>The sequence may be used to construct the <a title = \"string value\" href = \"#dt-string-value\">string value</a>\n            of an attribute node, <span>text node</span>, namespace\n            node, comment node, or processing instruction node.\n            This happens when the sequence constructor is contained\n            in one of the elements <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <span><a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a></span>,\n            <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>,\n            <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a>, or\n            <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>.\n            For details, see <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing\n            Simple Content</i></a>.</p>\n          </li>\n        </ul>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The term <em><span>sequence</span> constructor</em>\n          replaces <em>template</em> as used in XSLT 1.0. The\n          change is made partly for clarity (to avoid confusion\n          with <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a> and <a title = \"named template\" href = \"#dt-named-template\">named\n          templates</a>), but also to reflect a more formal\n          definition of the semantics. Whereas XSLT 1.0 described a\n          template as a sequence of instructions that write to the\n          result tree, XSLT 2.0 describes a <span>sequence</span>\n          constructor as something that can be evaluated to return\n          a sequence of <span>items</span>; what happens to these\n          items depends on the containing instruction.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"constructing-complex-content\" id = \"constructing-complex-content\"></a>5.7.1 Constructing\n          Complex Content</h4>\n\n          <p>This section describes how the sequence obtained by\n          evaluating a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> may\n          be used to construct the children of a newly constructed\n          document node, or the children, attributes and namespaces\n          of a newly constructed element node. The sequence of\n          items may be obtained by evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          contained in an instruction such as <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n          <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n          <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,\n          or a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n          element</a>.</p>\n\n          <p>When constructing the content of an element, the\n          <code>inherit-namespaces</code> attribute of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> or\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction, or the <code>xsl:inherit-namespaces</code>\n          property of the literal result element, determines\n          whether namespace nodes are to be inherited. The effect\n          of this attribute is described in the rules that\n          follow.</p>\n\n          <p>The sequence is processed as follows <span>(applying\n          the rules in the order they are listed)</span>:</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>The containing instruction may generate attribute\n              nodes and/or namespace nodes, as specified in the\n              rules for the individual instruction. For example,\n              these nodes may be produced by expanding an\n              <code>[xsl:]use-attribute-sets</code> attribute, or\n              by expanding the attributes of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n              element</a>. Any such nodes are prepended to the\n              sequence produced by evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n              constructor</a>.</p>\n            </li>\n\n            <li>\n              <p>Any atomic value in the sequence is cast to a\n              string.</p>\n\n              <div class = \"note\">\n                <p class = \"prefix\"><b>Note:</b></p>\n\n                <p>Casting from <code>xs:QName</code> or\n                <code>xs:NOTATION</code> to <code>xs:string</code>\n                always succeeds, because these values retain a\n                prefix for this purpose. However, there is no\n                guarantee that the prefix used will always be\n                meaningful in the context where the resulting\n                string is used.</p>\n              </div>\n            </li>\n\n            <li>\n              <p>Any consecutive sequence of strings within the\n              result sequence is converted to a single text node,\n              whose <a title = \"string value\" href = \"#dt-string-value\">string value</a> contains the\n              content of each of the strings in turn, with a single\n              space (#x20) used as a separator between successive\n              strings.</p>\n            </li>\n\n            <li>\n              <p>Any document node within the result sequence is\n              replaced by a sequence containing each of its\n              children, in document order.</p>\n            </li>\n\n            <li>\n              <p>Zero-length text nodes within the result sequence\n              are removed.</p>\n            </li>\n\n            <li>\n              <p>Adjacent text nodes within the result sequence are\n              merged into a single text node.</p>\n            </li>\n\n            <li>\n              <p>Invalid namespace and attribute nodes are detected\n              as follows.</p>\n\n              <p><a name = \"err-XTDE0410\" id = \"err-XTDE0410\"><span class = \"error\">[ERR\n              XTDE0410]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n              error</a> if the result sequence used to construct\n              the content of an element node contains a namespace\n              node or attribute node that is preceded in the\n              sequence by a node that is neither a namespace node\n              nor an attribute node.</p>\n\n              <p><a name = \"err-XTDE0420\" id = \"err-XTDE0420\"><span class = \"error\">[ERR\n              XTDE0420]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n              error</a> if the result sequence used to construct\n              the content of a document node contains a namespace\n              node or attribute node.</p>\n\n              <p><a name = \"err-XTDE0430\" id = \"err-XTDE0430\"><span class = \"error\">[ERR\n              XTDE0430]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n              error</a> if the result sequence contains two or more\n              namespace nodes having the same name but different\n              <a title = \"string value\" href = \"#dt-string-value\">string values</a> (that is,\n              namespace nodes that map the same prefix to different\n              namespace URIs).</p>\n\n              <p><a name = \"err-XTDE0440\" id = \"err-XTDE0440\"><span class = \"error\">[ERR\n              XTDE0440]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n              error</a> if the result sequence contains a namespace\n              node with no name and the element node being\n              constructed has a null namespace URI (that is, it is\n              an error to define a default namespace when the\n              element is in no namespace).</p>\n            </li>\n\n            <li>\n              <p>If the result sequence contains two or more\n              namespace nodes with the same name (or no name) and\n              the same <a title = \"string value\" href = \"#dt-string-value\">string value</a> (that is, two\n              namespace nodes mapping the same prefix to the same\n              namespace URI), then all but one of the duplicate\n              nodes are discarded.</p>\n\n              <div class = \"note\">\n                <p class = \"prefix\"><b>Note:</b></p>\n\n                <p>Since the order of namespace nodes is undefined,\n                it is not significant which of the duplicates is\n                retained.</p>\n              </div>\n            </li>\n\n            <li>\n              <p>If an attribute <var>A</var> in the result\n              sequence has the same name as another attribute\n              <var>B</var> that appears later in the result\n              sequence, then attribute <var>A</var> is discarded\n              from the result sequence.</p>\n            </li>\n\n            <li>\n              <p>Each node in the resulting sequence is attached as\n              a namespace, attribute, or child of the newly\n              constructed element or document node. Conceptually\n              this involves making a deep copy of the node; in\n              practice, however, copying the node will only be\n              necessary if the existing node can be referenced\n              independently of the parent to which it is being\n              attached. When copying an element or processing\n              instruction node, its base URI property is changed to\n              be the same as that of its new parent, unless it has\n              an <code>xml:base</code> attribute (see <a href = \"#xmlbase\">[XML Base]</a>) that overrides this. If\n              the <span>copied</span> element has an\n              <code>xml:base</code> attribute, its base URI is the\n              value of that attribute, resolved (if it is relative)\n              against the base URI of the new parent node.</p>\n            </li>\n\n            <li>\n              <p>If the newly constructed node is an element node,\n              then namespace fixup is applied to this node, as\n              described in <a href = \"#namespace-fixup\"><i>5.7.3\n              Namespace Fixup</i></a>.</p>\n            </li>\n\n            <li>\n              <p>If the newly constructed node is an element node,\n              and if namespaces are inherited, then each namespace\n              node of the newly constructed element (including any\n              produced as a result of the namespace fixup process)\n              is copied to each descendant element of the newly\n              constructed element, unless that element or an\n              intermediate element already has a namespace node\n              with the same name (or absence of a name) <span>or\n              that descendant element or an intermediate element is\n              in no namespace and the namespace node has no\n              name</span>.</p>\n            </li>\n          </ol>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e9419\" id = \"d5e9419\"></a>Example: A\n              Sequence Constructor for Complex Content\n            </div>\n\n            <p>Consider the following stylesheet fragment:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;td&gt;\n  &lt;xsl:attribute name=\"valign\"&gt;top&lt;/xsl:attribute&gt;\n  &lt;xsl:value-of select=\"@description\"/&gt;\n&lt;/td&gt;\n</pre>\n            </div>\n\n            <p>This fragment consists of a literal result element\n            <code>td</code>, containing a sequence constructor that\n            consists of two instructions: <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a> and\n            <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>. The\n            sequence constructor is evaluated to produce a sequence\n            of two nodes: a parentless attribute node, and a\n            parentless text node. The <code>td</code> instruction\n            causes a <code>td</code> element to be created; the new\n            attribute therefore becomes an attribute of the new\n            <code>td</code> element, while the text node created by\n            the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n            instruction becomes a child of the <code>td</code>\n            element (unless it is zero-length, in which case it is\n            discarded).</p>\n          </div>\n\n          <p>&#160;</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e9453\" id = \"d5e9453\"></a>Example: Space\n              Separators in Element Content\n            </div>\n\n            <p>Consider the following stylesheet fragment:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;doc&gt;\n  &lt;e&gt;&lt;xsl:sequence select=\"1 to 5\"/&gt;&lt;/e&gt;\n  &lt;f&gt;\n    &lt;xsl:for-each select=\"1 to 5\"&gt;\n      &lt;xsl:value-of select=\".\"/&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/f&gt;\n&lt;/doc&gt;\n</pre>\n            </div>\n\n            <p>This produces the output (when indented):</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;doc&gt;\n  &lt;e&gt;1 2 3 4 5&lt;/e&gt;\n  &lt;f&gt;12345&lt;/f&gt;\n&lt;/doc&gt;\n</pre>\n            </div>\n\n            <p>The difference between the two cases is that for the\n            <code>e</code> element, the sequence constructor\n            generates a sequence of five atomic values, which are\n            therefore separated by spaces. For the <code>f</code>\n            element, the content is a sequence of five text nodes,\n            which are concatenated without space separation.</p>\n\n            <p>It is important to be aware of the distinction\n            between <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>,\n            which returns the value of its <code>select</code>\n            expression unchanged, and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>,\n            which constructs a text node.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"constructing-simple-content\" id = \"constructing-simple-content\"></a>5.7.2 Constructing\n          Simple Content</h4>\n\n          <p>The <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a>,\n          <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>,\n          <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a><span>,\n          and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a></span>\n          elements create nodes that cannot have children.\n          <span>Specifically, the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction creates an attribute node, <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> creates a\n          comment node, <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n          creates a processing instruction node, <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          creates a namespace node, and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> creates\n          a text node. The string value of the new node is\n          constructed using either the <code>select</code>\n          attribute of the instruction, or the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n          forms the content of the instruction. The\n          <code>select</code> attribute allows the content to be\n          specified by means of an XPath expression, while the\n          sequence constructor allows it to be specified by means\n          of a sequence of XSLT instructions. The\n          <code>select</code> attribute or sequence constructor is\n          evaluated to produce a result sequence,</span> and the\n          <a title = \"string value\" href = \"#dt-string-value\">string\n          value</a> of the new node is derived from this result\n          sequence according to the rules below.</p>\n\n          <p>These rules are also used to compute the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n          value</a> of an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a>. In this case the sequence being processed\n          is the result of evaluating an XPath expression enclosed\n          between curly brackets, and the separator is a single\n          space character.</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>Zero-length text nodes in the sequence are\n              discarded.</p>\n            </li>\n\n            <li>\n              <p>Adjacent text nodes in the sequence are merged\n              into a single text node.</p>\n            </li>\n\n            <li>\n              <p>The sequence is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>.</p>\n            </li>\n\n            <li>\n              <p>Every value in the atomized sequence is cast to a\n              string.</p>\n            </li>\n\n            <li>\n              <p>The strings within the resulting sequence are\n              concatenated, with a (possibly zero-length) separator\n              inserted between successive strings. <span>The\n              default separator is a single space.</span> In the\n              case of <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n              and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>, a\n              different separator can be specified using the\n              <code>separator</code> attribute of the instruction;\n              it is permissible for this to be a zero-length\n              string, in which case the strings are concatenated\n              with no separator. In the case of <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a>,\n              <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>,\n              and <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a><span>\n              , and when expanding an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n              template</a></span>, the default separator cannot be\n              changed.</p>\n            </li>\n\n            <li>\n              <p>In the case of <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>,\n              any leading spaces in the resulting string are\n              removed.</p>\n            </li>\n\n            <li>\n              <p>The <span>resulting string</span> forms the\n              <a title = \"string value\" href = \"#dt-string-value\">string value</a> of the new\n              attribute, namespace, comment,\n              processing-instruction, or text node.</p>\n            </li>\n          </ol>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e9607\" id = \"d5e9607\"></a>Example: Space\n              Separators in Attribute Content\n            </div>\n\n            <p>Consider the following stylesheet fragment:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;doc&gt;\n  &lt;xsl:attribute name=\"e\" select=\"1 to 5\"/&gt;\n  &lt;xsl:attribute name=\"f\"&gt;\n    &lt;xsl:for-each select=\"1 to 5\"&gt;\n      &lt;xsl:value-of select=\".\"/&gt;\n    &lt;/xsl:for-each&gt;\n  &lt;/xsl:attribute&gt;\n&lt;/doc&gt;\n</pre>\n            </div>\n\n            <p>This produces the output:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;doc e=\"1 2 3 4 5\" f=\"12345\"/&gt;\n</pre>\n            </div>\n\n            <p>The difference between the two cases is that for the\n            <code>e</code> attribute, the sequence constructor\n            generates a sequence of five atomic values, which are\n            therefore separated by spaces. For the <code>f</code>\n            attribute, the content is supplied as a sequence of\n            five text nodes, which are concatenated without space\n            separation.</p>\n\n            <p>Specifying <code>separator=\"\"</code> on the first\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n            instruction would cause the attribute value to be\n            <code>e=\"12345\"</code>. A <code>separator</code>\n            attribute on the second <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n            instruction would have no effect, since the separator\n            only affects the way adjacent atomic values are\n            handled: separators are never inserted between adjacent\n            text nodes.</p>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>If an attribute value template contains a sequence\n            of fixed and variable parts, no additional whitespace\n            is inserted between the expansions of the fixed and\n            variable parts. For example, the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n            value</a> of the attribute <code>a=\"chapters{4 to\n            6}\"</code> is <code>a=\"chapters4 5 6\"</code>.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"namespace-fixup\" id = \"namespace-fixup\"></a>5.7.3 Namespace Fixup</h4>\n\n          <p>In a tree supplied to or constructed by an XSLT\n          processor, the constraints relating to namespace nodes\n          that are specified in <a href = \"#xpath-datamodel\">[Data\n          Model]</a> <span class = \"verb\">must</span> be satisfied.\n          For example</p>\n\n          <ul>\n            <li>\n              <p>If an element node has an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> with a\n              non-null namespace URI, then that element node\n              <span><span class = \"verb\">must</span></span> have at\n              least one namespace node whose <a title = \"string value\" href = \"#dt-string-value\">string\n              value</a> is the same as that namespace URI.</p>\n            </li>\n\n            <li>\n              <p>If an element node has an attribute node whose\n              <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> has a\n              non-null namespace URI, then the element <span class = \"verb\">must</span> have at least one namespace node\n              whose <a title = \"string value\" href = \"#dt-string-value\">string value</a> is the same as\n              that namespace URI and whose name is non-empty.</p>\n            </li>\n\n            <li>\n              <p>Every element <span class = \"verb\">must</span> have\n              a namespace node whose <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> has\n              local-part <code>xml</code> and whose <a title = \"string value\" href = \"#dt-string-value\">string\n              value</a> is\n              <code>http://www.w3.org/XML/1998/namespace</code>.\n              The namespace prefix <code>xml</code> must not be\n              associated with any other namespace URI, and the\n              namespace URI\n              <code>http://www.w3.org/XML/1998/namespace</code>\n              must not be associated with any other prefix.</p>\n            </li>\n\n            <li>\n              <p>A namespace node <span class = \"verb\">must\n              not</span> have the name <code>xmlns</code>.</p>\n            </li>\n          </ul>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-namespace-fixup\" id = \"dt-namespace-fixup\" title = \"namespace fixup\"></a>The rules for the individual XSLT\n          instructions that construct a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> (see <a href = \"#creating-new-nodes\"><i>11 Creating Nodes and\n          Sequences</i></a>) prescribe some of the situations in\n          which namespace nodes are written to the tree. These\n          rules, however, are not sufficient to ensure that the\n          prescribed constraints are always satisfied. The XSLT\n          processor <span class = \"verb\">must</span> therefore add\n          additional namespace nodes to satisfy these constraints.\n          This process is referred to as <b>namespace\n          fixup</b>.<span class = \"definition\">]</span></p>\n\n          <p>The actual namespace nodes that are added to the tree\n          by the namespace fixup process are <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>,\n          provided firstly, that at the end of the process the\n          above constraints <span class = \"verb\">must</span> all be\n          satisfied, and secondly, that a namespace node\n          <span class = \"verb\">must not</span> be added to the tree\n          unless the namespace node is necessary either to satisfy\n          these constraints, or to enable the tree to be serialized\n          using the original namespace prefixes from the source\n          document or <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n          <p>Namespace fixup <span class = \"verb\">must not</span>\n          result in an element having multiple namespace nodes with\n          the same name.</p>\n\n          <p>Namespace fixup <span class = \"verb\">may</span>, if\n          necessary to resolve conflicts, change the namespace\n          prefix contained in the QName value that holds the name\n          of an element or attribute node. <span>This includes the\n          option to add or remove a prefix.</span> However,\n          namespace fixup <span class = \"verb\">must not</span> change\n          the prefix component contained in a value of type\n          <code>xs:QName</code> or <code>xs:NOTATION</code> that\n          forms the typed value of an element or attribute\n          node.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Namespace fixup is not used to create namespace\n            declarations for <code>xs:QName</code> or\n            <code>xs:NOTATION</code> values appearing in the\n            content of an element or attribute.</p>\n\n            <p>Where values acquire such types as the result of\n            validation, namespace fixup does not come into play,\n            because namespace fixup happens before validation: in\n            this situation, it is the user's responsibility to\n            ensure that the element being validated has the\n            required namespace nodes to enable validation to\n            succeed.</p>\n\n            <p>Where existing elements are copied along with their\n            existing type annotations\n            (<code>validation=\"preserve\"</code>) the rules require\n            that existing namespace nodes are also copied, so that\n            any namespace-sensitive values remain valid.</p>\n\n            <p>Where existing attributes are copied along with\n            their existing type annotations, the rules of the XDM\n            data model require that a parentless attribute node\n            cannot contain a namespace-sensitive typed value; this\n            means that it is an error to copy an attribute using\n            <code>validation=\"preserve\"</code> if it contains\n            namespace-sensitive content.</p>\n          </div>\n\n          <p><a name = \"err-XTDE0485\" id = \"err-XTDE0485\"><span class = \"error\">[ERR XTDE0485]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if namespace fixup is performed on an element\n          that contains among the typed values of the element and\n          its attributes two values of type <code>xs:QName</code>\n          or <code>xs:NOTATION</code> containing conflicting\n          namespace prefixes, that is, two values that use the same\n          prefix to refer to different namespace URIs.</p>\n\n          <p>Namespace fixup is applied to every element that is\n          constructed using a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n          element</a>, or one of the instructions <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, or <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>. An\n          implementation is not <span class = \"verb\">required</span>\n          to perform namespace fixup for elements in any source\n          document, that is, for a document in the initial input\n          sequence, documents loaded using the <a href = \"#function-document\"><code>document</code></a>, <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n          <small>FO</small></sup> or <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n          collection</code></a><sup><small>FO</small></sup>\n          function, documents supplied as the value of a <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a>, or\n          documents returned by an <a title = \"extension function\" href = \"#dt-extension-function\">extension function</a> or\n          <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n          instruction</a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>A source document (an input document, a document\n            returned by the <a href = \"#function-document\"><code>document</code></a>,\n            <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\">\n            <code>doc</code></a><sup><small>FO</small></sup> or\n            <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\">\n            <code>collection</code></a><sup><small>FO</small></sup>\n            functions, a document returned by an extension function\n            or extension instruction, or a document supplied as a\n            stylesheet parameter) is required to satisfy the\n            constraints described in <a href = \"#xpath-datamodel\">[Data Model]</a>, including the\n            constraints imposed by the namespace fixup process. The\n            effect of supplying a pseudo-document that does not\n            meet these constraints is undefined.</p>\n          </div>\n\n          <p>In an Infoset (see <a href = \"#xml-infoset\">[XML\n          Information Set]</a>) created from a document conforming\n          to <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a>,\n          it will always be true that if a parent element has an\n          in-scope namespace with a non-empty namespace prefix,\n          then its child elements will also have an in-scope\n          namespace with the same namespace prefix, though possibly\n          with a different namespace URI. This constraint is\n          removed in <a href = \"#xml-names11\">[Namespaces in XML\n          1.1]</a>. XSLT 2.0 supports the creation of result trees\n          that do not satisfy this constraint: the namespace fixup\n          process does not add a namespace node to an element\n          merely because its parent node in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> has\n          such a namespace node. <span>However, the process of\n          constructing the children of a new element, which is\n          described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n          Complex Content</i></a>, does cause the namespaces of a\n          parent element to be inherited by its children unless\n          this is prevented using\n          <code>[xsl:]inherit-namespaces=\"no\"</code> on the\n          instruction that creates the parent element.</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>This has implications on serialization, defined in\n            <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n            Serialization]</a>. It means that it is possible to\n            create <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> that\n            cannot be faithfully serialized as XML 1.0 documents.\n            When such a result tree is serialized as XML 1.0,\n            namespace declarations written for the parent element\n            will be inherited by its child elements as if the\n            corresponding namespace nodes were present on the child\n            element<span>, except in the case of the default\n            namespace, which can be undeclared using the construct\n            <code>xmlns=\"\"</code></span>. When the same result tree\n            is serialized as XML 1.1, however, it is possible to\n            undeclare any namespace on the child element <span>(for\n            example, <code>xmlms:foo=\"\"</code>)</span> to prevent\n            this inheritance taking place.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"uri-references\" id = \"uri-references\"></a>5.8\n        URI References</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-uri-reference\" id = \"dt-uri-reference\" title = \"URI Reference\"></a>Within this specification, the term\n        <b>URI Reference</b>, unless otherwise stated, refers to a\n        string in the lexical space of the <code>xs:anyURI</code>\n        data type as defined in <a href = \"#xmlschema-2\">[XML Schema\n        Part 2]</a>.<span class = \"definition\">]</span> Note that\n        this is a wider definition than that in <a href = \"#RFC3986\">[RFC3986]</a>: <span>in particular, it is\n        designed to accommodate Internationalized Resource\n        Identifiers (IRIs) as described in <a href = \"#RFC3987\">[RFC3987]</a>, and thus allows the use of\n        non-ASCII characters without escaping.</span></p>\n\n        <p>URI References are used in XSLT with three main\n        roles:</p>\n\n        <blockquote>\n          <p>As namespace URIs<br/>\n          As collation URIs<br/>\n          As identifiers for resources such as stylesheet modules;\n          these resources are typically accessible using a protocol\n          such as HTTP. Examples of such identifiers are the URIs\n          used in the <code>href</code> attributes of <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>, <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>, and\n          <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>.</p>\n        </blockquote>\n\n        <p>The rules for namespace URIs are given in <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a> and <a href = \"#xml-names11\">[Namespaces in XML 1.1]</a>. Those\n        specifications deprecate the use of relative URIs as\n        namespace URIs.</p>\n\n        <p>The rules for collation URIs are given in <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n\n        <p>URI references used to identify external resources must\n        conform to the same rules as the locator attribute\n        (<code>href</code>) defined in section 5.4 of <a href = \"#xlink\">[XLink]</a>. If the URI reference is relative,\n        then it is resolved (unless otherwise specified) against\n        the base URI of the containing element node, according to\n        the rules of <span><a href = \"#RFC3986\">[RFC3986]</a></span>,\n        after first escaping all characters that need to be escaped\n        to make it a valid RFC3986 URI reference. (But a relative\n        URI in the <code>href</code> attribute of <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        is resolved against the <a title = \"base output URI\" href = \"#dt-base-output-uri\">Base Output URI</a>.)</p>\n\n        <p>Other URI references appearing in an XSLT stylesheet\n        document, for example the system identifiers of external\n        entities or the value of the <code>xml:base</code>\n        attribute, must follow the rules in their respective\n        specifications.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"rules\" id = \"rules\"></a>6 Template Rules</h2>\n\n      <p>Template rules define the processing that can be applied\n      to nodes that match a particular <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"defining-templates\" id = \"defining-templates\"></a>6.1 Defining Templates</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-template\" id = \"XSLT_element-template\"></a><code>&lt;!-- Category: declaration\n        --&gt;<br/>\n        &lt;xsl:template<br/>\n        &#160;&#160;match? = <var>pattern</var><br/>\n        &#160;&#160;name? = <var>qname</var><br/>\n        &#160;&#160;priority? = <var>number</var><br/>\n        &#160;&#160;mode? = <var>tokens</var><br/>\n        &#160;&#160;as? = <var>sequence-type</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-param\">xsl:param</a>*,\n        <var>sequence-constructor</var>) --&gt;<br/>\n        &lt;/xsl:template&gt;</code></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-template\" id = \"dt-template\" title = \"template\"></a>An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n        declaration defines a <b>template</b>, which contains a\n        <span><a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a></span>\n        for creating nodes and/or atomic values. A template can\n        serve either as a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>, invoked by matching\n        nodes against a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, or as a <a title = \"named template\" href = \"#dt-named-template\">named\n        template</a>, invoked explicitly by name. It is also\n        possible for the same template to serve in both\n        capacities.<span class = \"definition\">]</span></p>\n\n        <p><a name = \"err-XTSE0500\" id = \"err-XTSE0500\"><span class = \"error\">[ERR XTSE0500]</span></a> An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        <span class = \"verb\">must</span> have either a\n        <code>match</code> attribute or a <code>name</code>\n        attribute, or both. An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        that has no <code>match</code> attribute <span class = \"verb\">must</span> have no <code>mode</code> attribute and\n        no <code>priority</code> attribute.</p>\n\n        <p>If an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        has a <code>match</code> attribute, then it is a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>.\n        If it has a <code>name</code> attribute, then it is a\n        <a title = \"named template\" href = \"#dt-named-template\">named\n        template</a>.</p>\n\n        <p>A <a title = \"template\" href = \"#dt-template\">template</a>\n        may be invoked in a number of ways, depending on whether it\n        is a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>, a <a title = \"named template\" href = \"#dt-named-template\">named\n        template</a>, or both. The result of invoking the template\n        is the result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        contained in the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        (see <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>).</p>\n\n        <p>If an <code>as</code> attribute is present, the\n        <code>as</code> attribute defines the required type of the\n        result. The result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is then\n        converted to the required type using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>. If no <code>as</code> attribute is specified,\n        the default value is <code>item()*</code>, which permits\n        any value. No conversion then takes place.</p>\n\n        <p><a name = \"err-XTTE0505\" id = \"err-XTTE0505\"><span class = \"error\">[ERR XTTE0505]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        cannot be converted to the required type.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"defining-template-rules\" id = \"defining-template-rules\"></a>6.2 Defining Template\n        Rules</h3>\n\n        <p>This section describes <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a>. <a title = \"named template\" href = \"#dt-named-template\">Named\n        templates</a> are described in <a href = \"#named-templates\"><i>10.1 Named Templates</i></a>.</p>\n\n        <p>A <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> is specified using\n        the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        <span>with a <code>match</code> attribute</span>. The\n        <code>match</code> attribute is a <a href = \"#NT-Pattern\">Pattern</a> that identifies the node or nodes\n        to which the rule applies. The result of applying the\n        template rule is the result of evaluating the\n        <span>sequence</span> constructor contained in the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element,\n        with the matching node used as the <a title = \"context node\" href = \"#dt-context-node\">context node</a>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10170\" id = \"d5e10170\"></a>Example: A simple\n            Template Rule\n          </div>\n\n          <p>For example, an XML document might contain:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\nThis is an &lt;emph&gt;important&lt;/emph&gt; point.\n</pre>\n          </div>\n\n          <p>The following <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> matches\n          <code>emph</code> elements and produces a\n          <code>fo:wrapper</code> element with a\n          <code>font-weight</code> property of\n          <code>bold</code>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"emph\"&gt;\n  &lt;fo:wrapper font-weight=\"bold\" xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/fo:wrapper&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>A <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> is evaluated when an\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction selects a node that matches the pattern\n        specified in the <code>match</code> attribute. The <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction is described in the next section. If several\n        template rules match a selected node, only one of them is\n        evaluated, as described in <a href = \"#conflict\"><i>6.4\n        Conflict Resolution for Template Rules</i></a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"applying-templates\" id = \"applying-templates\"></a>6.3 Applying Template Rules</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-apply-templates\" id = \"XSLT_element-apply-templates\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:apply-templates<br/>\n        &#160;&#160;select? = <var>expression</var><br/>\n        &#160;&#160;mode? = <var>token</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a> | <a href = \"#XSLT_element-with-param\">xsl:with-param</a>)* --&gt;<br/>\n        &lt;/xsl:apply-templates&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction takes as input a sequence of nodes (typically\n        nodes in a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a>), and produces as output\n        a sequence of items; these will often be nodes to be added\n        to a <a title = \"result tree\" href = \"#dt-result-tree\">result\n        tree</a>.</p>\n\n        <p>If the instruction has one or more <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> children, then\n        the input sequence is sorted as described in <a href = \"#sorting\"><i>13 Sorting</i></a>. The result of this sort\n        is referred to below as the <b>sorted sequence</b>; if\n        there are no <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements, then\n        the sorted sequence is the same as the input sequence.</p>\n\n        <p>Each node in the input sequence is processed by finding\n        a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> whose <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> matches that node.\n        If there is more than one, the best among them is chosen,\n        using rules described in <a href = \"#conflict\"><i>6.4\n        Conflict Resolution for Template Rules</i></a>. If there is\n        no template rule whose pattern matches the node, a built-in\n        template rule is used (see <a href = \"#built-in-rule\"><i>6.6\n        Built-in Template Rules</i></a>). The chosen template rule\n        is evaluated. The rule that matches the <var>N</var>th node\n        in the sorted sequence is evaluated with that node as the\n        <a title = \"context item\" href = \"#dt-context-item\">context\n        item</a>, with <var>N</var> as the <a title = \"context position\" href = \"#dt-context-position\">context\n        position</a>, and with the length of the sorted sequence as\n        the <a title = \"context size\" href = \"#dt-context-size\">context\n        size</a>. Each template rule that is evaluated produces a\n        sequence of items as its result. The resulting sequences\n        (one for each node in the sorted sequence) are then\n        concatenated, to form a single sequence. They are\n        concatenated retaining the order of the nodes in the sorted\n        sequence. The final concatenated sequence forms the result\n        of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10281\" id = \"d5e10281\"></a>Example: Applying\n            Template Rules\n          </div>\n\n          <p>Suppose the source document is as follows:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;message&gt;Proceed &lt;emph&gt;at once&lt;/emph&gt; to the exit!&lt;/message&gt;\n</pre>\n          </div>\n\n          <p>This can be processed using the two template rules\n          shown below.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"message\"&gt;\n  &lt;p&gt;\n    &lt;xsl:apply-templates select=\"child::node()\"/&gt;\n  &lt;/p&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"emph\"&gt;\n  &lt;b&gt;\n    &lt;xsl:apply-templates select=\"child::node()\"/&gt;\n  &lt;/b&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>There is no template rule for the document node; the\n          built-in template rule for this node will cause the\n          <code>message</code> element to be processed. The\n          template rule for the <code>message</code> element causes\n          a <code>p</code> element to be written to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>; the\n          contents of this <code>p</code> element are constructed\n          as the result of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction. This instruction selects the three child\n          nodes of the <code>message</code> element (a text node\n          containing the value \"<code>Proceed</code> \", an\n          <code>emph</code> element node, and a text node\n          containing the value \" <code>to the exit!</code>\"). The\n          two text nodes are processed using the built-in template\n          rule for text nodes, which returns a copy of the text\n          node. The <code>emph</code> element is processed using\n          the explicit template rule that specifies\n          <code>match=\"emph\"</code>.</p>\n\n          <p>When the <code>emph</code> element is processed, this\n          template rule constructs a <code>b</code> element. The\n          contents of the <code>b</code> element are constructed by\n          means of another <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction, which in this case selects a single node\n          (the text node containing the value \"<code>at\n          once</code>\"). This is again processed using the built-in\n          template rule for text nodes, which returns a copy of the\n          text node.</p>\n\n          <p>The final result of the <code>match=\"message\"</code>\n          template rule thus consists of a <code>p</code> element\n          node with three children: a text node containing the\n          value \"<code>Proceed</code> \", a <code>b</code> element\n          that is the parent of a text node containing the value\n          \"<code>at once</code>\", and a text node containing the\n          value \" <code>to the exit!</code>\". This <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>\n          might be serialized as:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;p&gt;Proceed &lt;b&gt;at once&lt;/b&gt; to the exit!&lt;/p&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>The default value of the <code>select</code> attribute\n        is <code>child::node()</code>, which causes all the\n        children of context node to be processed.</p>\n\n        <p><a name = \"err-XTTE0510\" id = \"err-XTTE0510\"><span class = \"error\">[ERR XTTE0510]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if an\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction with no <code>select</code> attribute is\n        evaluated when the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is not a node.</p>\n\n        <p>A <code>select</code> attribute can be used to process\n        nodes selected by an expression instead of processing all\n        children. The value of the <code>select</code> attribute is\n        an <a title = \"expression\" href = \"#dt-expression\">expression</a>. The expression\n        <span class = \"verb\">must</span> evaluate to a sequence of\n        nodes (it can contain zero, one, or more nodes).</p>\n\n        <p><a name = \"err-XTTE0520\" id = \"err-XTTE0520\"><span class = \"error\">[ERR XTTE0520]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        sequence returned by the <code>select</code> expression\n        contains an item that is not a node.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>In XSLT 1.0, the <code>select</code> attribute\n          selected a set of nodes, which by default were processed\n          in document order. In XSLT 2.0, it selects a sequence of\n          nodes. In cases that would have been valid in XSLT 1.0,\n          the expression will return a sequence of nodes in\n          document order, so the effect is the same.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10435\" id = \"d5e10435\"></a>Example: Applying\n            Templates to Selected Nodes\n          </div>\n\n          <p>The following example processes all of the\n          <code>given-name</code> children of the\n          <code>author</code> elements that are children of\n          <code>author-group</code>:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"author-group\"&gt;\n  &lt;fo:wrapper&gt;\n    &lt;xsl:apply-templates select=\"author/given-name\"/&gt;\n  &lt;/fo:wrapper&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10451\" id = \"d5e10451\"></a>Example: Applying\n            Templates to Nodes that are not Descendants\n          </div>\n\n          <p>It is also possible to process elements that are not\n          descendants of the context node. This example assumes\n          that a <code>department</code> element has\n          <code>group</code> children and <code>employee</code>\n          descendants. It finds an employee's department and then\n          processes the <code>group</code> children of the\n          <code>department</code>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"employee\"&gt;\n  &lt;fo:block&gt;\n    Employee &lt;xsl:apply-templates select=\"name\"/&gt; belongs to group\n    &lt;xsl:apply-templates select=\"ancestor::department/group\"/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10473\" id = \"d5e10473\"></a>Example: Matching\n            by Schema-Defined Types\n          </div>\n\n          <p>It is possible to write template rules that are\n          matched according to the schema-defined type of an\n          element or attribute. The following example applies\n          different formatting to the children of an element\n          depending on their type:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"product\"&gt;\n  &lt;table&gt;\n    &lt;xsl:apply-templates select=\"*\"/&gt;\n  &lt;/table&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"product/*\" priority=\"3\"&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;xsl:value-of select=\"name()\"/&gt;&lt;/td&gt;\n    &lt;td&gt;&lt;xsl:next-match/&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"product/element(*, xs:decimal) | \n                     product/element(*, xs:double)\" priority=\"2\"&gt;  \n  &lt;xsl:value-of select=\"format-number(xs:double(.), '#,###0.00')\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"product/element(*, xs:date)\" priority=\"2\"&gt;\n  &lt;xsl:value-of select=\"format-date(., '[Mn] [D], [Y]')\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"product/*\" priority=\"1.5\"&gt;\n  &lt;xsl:value-of select=\".\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n          instruction is described in <a href = \"#apply-imports\"><i>6.7 Overriding Template\n          Rules</i></a>.</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10487\" id = \"d5e10487\"></a>Example:\n            Re-ordering Elements in the Result Tree\n          </div>\n\n          <p>Multiple <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          elements can be used within a single template to do\n          simple reordering. The following example creates two HTML\n          tables. The first table is filled with domestic sales\n          while the second table is filled with foreign sales.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"product\"&gt;\n  &lt;table&gt;\n    &lt;xsl:apply-templates select=\"sales/domestic\"/&gt;\n  &lt;/table&gt;\n  &lt;table&gt;\n    &lt;xsl:apply-templates select=\"sales/foreign\"/&gt;\n  &lt;/table&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e10497\" id = \"d5e10497\"></a>Example:\n            Processing Recursive Structures\n          </div>\n\n          <p>It is possible for there to be two matching\n          descendants where one is a descendant of the other. This\n          case is not treated specially: both descendants will be\n          processed as usual.</p>\n\n          <p>For example, given a source document</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;doc&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/doc&gt;\n</pre>\n          </div>\n\n          <p>the rule</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"doc\"&gt;\n  &lt;xsl:apply-templates select=\".//div\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>will process both the outer <code>div</code> and inner\n          <code>div</code> elements.</p>\n\n          <p>This means that if the template rule for the\n          <code>div</code> element processes its own children, then\n          these grandchildren will be processed more than once,\n          which is probably not what is required. The solution is\n          to process one level at a time in a recursive descent, by\n          using <code>select=\"div\"</code> in place of\n          <code>select=\".//div\"</code></p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p><span>The <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction is most commonly used</span> to process nodes\n          that are descendants of the context node. Such use of\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          cannot result in non-terminating processing loops.\n          However, when <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          is used to process elements that are not descendants of\n          the context node, the possibility arises of\n          non-terminating loops. For example,</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"foo\"&gt;\n  &lt;xsl:apply-templates select=\".\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>Implementations may be able to detect such loops in\n          some cases, but the possibility exists that a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> may\n          enter a non-terminating loop that an implementation is\n          unable to detect. This may present a denial of service\n          security risk.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"conflict\" id = \"conflict\"></a>6.4 Conflict\n        Resolution for Template Rules</h3>\n\n        <p>It is possible for a node in a source document to match\n        more than one <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>. <span>When this\n        happens, only one template rule is evaluated for the\n        node.</span> The template rule to be used is determined as\n        follows:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>First, only the matching template rule or rules with\n            the highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> are\n            considered. Other matching template rules with lower\n            precedence are eliminated from consideration.</p>\n          </li>\n\n          <li>\n            <p>Next, of the remaining matching rules, only those\n            with the highest priority are considered. Other\n            matching template rules with lower priority are\n            eliminated from consideration. The priority of a\n            template rule is specified by the <code>priority</code>\n            attribute on the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n            declaration.</p>\n\n            <p><a name = \"err-XTSE0530\" id = \"err-XTSE0530\"><span class = \"error\">[ERR\n            XTSE0530]</span></a> The value of this attribute\n            <span class = \"verb\">must</span> <span>conform to the\n            rules for the <code>xs:decimal</code> type defined in\n            <a href = \"#xmlschema-2\">[XML Schema Part 2]</a>.\n            Negative values are permitted.</span>.</p>\n\n            <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-default-priority\" id = \"dt-default-priority\" title = \"default priority\"></a>If no <code>priority</code>\n            attribute is specified on the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n            element, a <b>default priority</b> is computed, based\n            on the syntax of the pattern supplied in the\n            <code>match</code> attribute.<span class = \"definition\">]</span> The rules are as follows:</p>\n\n            <ul>\n              <li>\n                <p>If the pattern contains multiple alternatives\n                separated by <code>|</code> , then the template\n                rule is treated equivalently to a set of template\n                rules, one for each alternative. However, it is not\n                an error if a node matches more than one of the\n                alternatives.</p>\n              </li>\n\n              <li>\n                <p>If the pattern has the form <code>/</code>, then\n                the priority is −0.5.</p>\n              </li>\n\n              <li>\n                <p>If the pattern has the form of a <a title = \"QName\" href = \"#dt-qname\">QName</a> optionally\n                preceded by a <a href = \"#NT-PatternAxis\">PatternAxis</a> or has the form\n                <code>processing-instruction(</code><a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-StringLiteral\">\n                StringLiteral</a><sup><small>XP</small></sup><code>)</code>\n                or <code>processing-instruction(</code><a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n                <small>Names</small></sup><code>)</code> optionally\n                preceded by a <a href = \"#NT-PatternAxis\">PatternAxis</a>, then the\n                priority is 0.</p>\n              </li>\n\n              <li>\n                <p>If the pattern has the form of an <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-ElementTest\">\n                ElementTest</a><sup><small>XP</small></sup> or\n                <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-AttributeTest\">\n                AttributeTest</a><sup><small>XP</small></sup>,\n                optionally preceded by a <a href = \"#NT-PatternAxis\">PatternAxis</a>, then the\n                priority is as shown in the table below. In this\n                table, the symbols <var>E</var>, <var>A</var>, and\n                <var>T</var> represent an arbitrary element name,\n                attribute name, and type name respectively, while\n                the symbol <code>*</code> represents itself. The\n                presence or absence of the <span>symbol\n                <code>?</code> following a type name</span> does\n                not affect the priority.</p>\n\n                <table border = \"1\" cellpadding = \"5\">\n                  <thead>\n                    <tr>\n                      <th align = \"left\">Format</th>\n\n                      <th align = \"left\">Priority</th>\n\n                      <th align = \"left\">Notes</th>\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    <tr>\n                      <td><code>element()</code></td>\n\n                      <td>−0.5</td>\n\n                      <td>(equivalent to <code>*</code>)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>element(*)</code></td>\n\n                      <td>−0.5</td>\n\n                      <td>(equivalent to <code>*</code>)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>attribute()</code></td>\n\n                      <td>−0.5</td>\n\n                      <td>(equivalent to <code>@*</code>)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>attribute(*)</code></td>\n\n                      <td>−0.5</td>\n\n                      <td>(equivalent to <code>@*</code>)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>element(<var>E</var>)</code></td>\n\n                      <td>0</td>\n\n                      <td>(equivalent to E)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>element(*,<var>T</var>)</code></td>\n\n                      <td>0</td>\n\n                      <td>(matches by type only)</td>\n                    </tr>\n\n                    <tr>\n                      <td><code>attribute(<var>A</var>)</code></td>\n\n                      <td>0</td>\n\n                      <td>(equivalent to <code>@A</code>)</td>\n                    </tr>\n\n                    <tr>\n                      <td>\n                      <code>attribute(*,<var>T</var>)</code></td>\n\n                      <td>0</td>\n\n                      <td>(matches by type only)</td>\n                    </tr>\n\n                    <tr>\n                      <td>\n                      <code>element(<var>E</var>,<var>T</var>)</code></td>\n\n                      <td>0.25</td>\n\n                      <td>(matches by name and type)</td>\n                    </tr>\n\n                    <tr>\n                      <td>\n                      <code>schema-element(<var>E</var>)</code></td>\n\n                      <td>0.25</td>\n\n                      <td>(matches by substitution group and\n                      type)</td>\n                    </tr>\n\n                    <tr>\n                      <td>\n                      <code>attribute(<var>A</var>,<var>T</var>)</code></td>\n\n                      <td>0.25</td>\n\n                      <td>(matches by name and type)</td>\n                    </tr>\n\n                    <tr>\n                      <td>\n                      <code>schema-attribute(<var>A</var>)</code></td>\n\n                      <td>0.25</td>\n\n                      <td>(matches by name and type)</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </li>\n\n              <li>\n                <p>If the pattern has the form of a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-DocumentTest\">\n                DocumentTest</a><sup><small>XP</small></sup>, then\n                if it includes no <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-ElementTest\">\n                ElementTest</a><sup><small>XP</small></sup>\n                <span>or <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SchemaElementTest\">\n                SchemaElementTest</a><sup><small>XP</small></sup></span>\n                the priority is −0.5. If it does include an\n                <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-ElementTest\">\n                ElementTest</a><sup><small>XP</small></sup>\n                <span>or <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SchemaElementTest\">\n                SchemaElementTest</a><sup><small>XP</small></sup></span>,\n                then the priority is the same as the priority of\n                that <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-ElementTest\">\n                ElementTest</a><sup><small>XP</small></sup>\n                <span>or <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SchemaElementTest\">\n                SchemaElementTest</a><sup><small>XP</small></sup></span>,\n                computed according to the table above.</p>\n              </li>\n\n              <li>\n                <p>If the pattern has the form <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n                <small>Names</small></sup><code>:*</code> or\n                <code>*:</code><a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n                <small>Names</small></sup>, optionally preceded by\n                a <a href = \"#NT-PatternAxis\">PatternAxis</a>, then\n                the priority is −0.25.</p>\n              </li>\n\n              <li>\n                <p>If the pattern is any other <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-NodeTest\">NodeTest</a><sup>\n                <small>XP</small></sup>, optionally preceded by a\n                <a href = \"#NT-PatternAxis\">PatternAxis</a>, then the\n                priority is −0.5.</p>\n              </li>\n\n              <li>\n                <p>Otherwise, the priority is 0.5.</p>\n              </li>\n            </ul>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>In many cases this means that highly selective\n              patterns have higher priority than less selective\n              patterns. The most common kind of pattern (a pattern\n              that tests for a node of a <span>particular kind,\n              with a particular <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> or a\n              particular type)</span> has priority 0. The next less\n              specific kind of pattern (a pattern that tests for a\n              node of a particular kind and an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> with a\n              particular namespace URI) has priority −0.25.\n              Patterns less specific than this (patterns that just\n              test for nodes <span>of a given kind</span>) have\n              priority −0.5. <span>Patterns that specify both the\n              name and the required type have a priority of +0.25,\n              putting them above patterns that only specify the\n              name <em>or</em> the type.</span> Patterns more\n              specific than <span>this, for example patterns that\n              include predicates or that specify the ancestry of\n              the required node,</span> have priority 0.5.</p>\n\n              <p>However, it is not invariably true that a more\n              selective pattern has higher priority than a less\n              selective pattern. For example, the priority of the\n              pattern <code>node()[self::*]</code> is higher than\n              that of the pattern <code>salary</code>.\n              <span>Similarly, the patterns <code>attribute(*,\n              xs:decimal)</code> and <code>attribute(*,\n              xs:short)</code> have the same priority, despite the\n              fact that the latter pattern matches a subset of the\n              nodes matched by the former.</span> Therefore, to\n              achieve clarity in a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> it is good practice\n              to allocate explicit priorities.</p>\n            </div>\n          </li>\n        </ol>\n\n        <p><a name = \"err-XTRE0540\" id = \"err-XTRE0540\"><span class = \"error\">[ERR XTRE0540]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n        the conflict resolution algorithm for template rules leaves\n        more than one matching template rule. The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is to select, from the matching template rules that are\n        left, the one that occurs last in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"modes\" id = \"modes\"></a>6.5 Modes</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-mode\" id = \"dt-mode\" title = \"mode\"></a><b>Modes</b> allow a node in a\n        <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a> to be processed multiple times, each time\n        producing a different result. They also allow different\n        sets of <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a> to be active when\n        processing different trees, for example when processing\n        documents loaded using the <a href = \"#function-document\"><code>document</code></a> function\n        (see <a href = \"#document\"><i>16.1 Multiple Source\n        Documents</i></a>) or when processing <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary\n        trees</a>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-default-mode\" id = \"dt-default-mode\" title = \"default mode\"></a>There is always a <b>default mode</b>\n        available. The default mode is an unnamed <a title = \"mode\" href = \"#dt-mode\">mode</a>, and it is used when no\n        <code>mode</code> attribute is specified on an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction.<span class = \"definition\">]</span></p>\n\n        <p>Every <a title = \"mode\" href = \"#dt-mode\">mode</a> other\n        than the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a> is identified by a\n        <a title = \"QName\" href = \"#dt-qname\">QName</a>.</p>\n\n        <p>A <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> is applicable to one\n        or more modes. The modes to which it is applicable are\n        defined by the <code>mode</code> attribute of the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element.\n        If the attribute is omitted, then the template rule is\n        applicable to the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a>. If the attribute is\n        present, then its value <span class = \"verb\">must</span> be a\n        non-empty whitespace-separated list of tokens, each of\n        which defines a mode to which the template rule is\n        applicable. Each token <span class = \"verb\">must</span> be\n        one of the following:</p>\n\n        <ul>\n          <li>\n            <p>a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which\n            is expanded as described in <a href = \"#qname\"><i>5.1\n            Qualified Names</i></a> to define the name of the\n            mode</p>\n          </li>\n\n          <li>\n            <p>the token <code>#default</code>, to indicate that\n            the template rule is applicable to the <a title = \"default mode\" href = \"#dt-default-mode\">default\n            mode</a></p>\n          </li>\n\n          <li>\n            <p>the token <code>#all</code>, to indicate that the\n            template rule is applicable to all modes <span>(that\n            is, to the default mode and to every mode that is named\n            in an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n            instruction or <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n            declaration anywhere in the stylesheet)</span>.</p>\n          </li>\n        </ul>\n\n        <p><a name = \"err-XTSE0550\" id = \"err-XTSE0550\"><span class = \"error\">[ERR XTSE0550]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the list is empty, if the same token is included more than\n        once in the list, if the list contains an invalid token, or\n        if the token <code>#all</code> appears together with any\n        other value.</p>\n\n        <p>The <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        element also has an optional <code>mode</code> attribute.\n        The value of this attribute <span class = \"verb\">must</span>\n        either be a <a title = \"QName\" href = \"#dt-qname\">QName</a>,\n        which is expanded as described in <a href = \"#qname\"><i>5.1\n        Qualified Names</i></a> to define the name of a mode, or\n        the token <code>#default</code>, to indicate that the\n        <a title = \"default mode\" href = \"#dt-default-mode\">default\n        mode</a> is to be used, or the token <code>#current</code>,\n        to indicate that the <a title = \"current mode\" href = \"#dt-current-mode\">current mode</a> is to be used. If the\n        attribute is omitted, the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a> is used.</p>\n\n        <p>When searching for a template rule to process each node\n        selected by the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction, only those template rules that are applicable\n        to the selected mode are considered.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-current-mode\" id = \"dt-current-mode\" title = \"current mode\"></a>At any point in the processing of a\n        stylesheet, there is a <b>current mode</b>. When the\n        transformation is initiated, the current mode is the\n        <a title = \"default mode\" href = \"#dt-default-mode\">default\n        mode</a>, <span>unless a different initial mode has been\n        supplied, as described in <a href = \"#initiating\"><i>2.3\n        Initiating a Transformation</i></a>.</span> Whenever an\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction is evaluated, the current mode becomes the mode\n        selected by this instruction.<span class = \"definition\">]</span> When a stylesheet function is called,\n        the current mode becomes the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a>. No other instruction\n        changes the current mode. On completion of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction, <span>or on return from a stylesheet function\n        call,</span> the current mode reverts to its previous\n        value. The current mode is used when an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction uses the syntax <code>mode=\"#current\"</code>;\n        it is also used by the <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        <span>and <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n        instructions (see <a href = \"#apply-imports\"><i>6.7\n        Overriding Template Rules</i></a>).</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"built-in-rule\" id = \"built-in-rule\"></a>6.6\n        Built-in Template Rules</h3>\n\n        <p>When a node is selected by <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        and there is no template rule in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that can be used to\n        process that node, a built-in template rule is evaluated\n        instead.</p>\n\n        <p>The built-in template rules apply to all modes.</p>\n\n        <p>The built-in rule for document nodes and element nodes\n        is equivalent to calling <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        with no <code>select</code> attribute, and with the\n        <code>mode</code> attribute set to <code>#current</code>.\n        If the built-in rule was invoked with parameters, those\n        parameters are passed on in the implicit <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e11192\" id = \"d5e11192\"></a>Example: Using a\n            Built-In Template Rule\n          </div>\n\n          <p>For example, suppose the stylesheet contains the\n          following instruction:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:apply-templates select=\"title\" mode=\"mm\"&gt;\n  &lt;xsl:with-param name=\"init\" select=\"10\"/&gt;\n&lt;/xsl:apply-templates&gt;\n</pre>\n          </div>\n\n          <p>If there is no explicit template rule that matches the\n          <code>title</code> element, then the following implicit\n          rule is used:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"title\" mode=\"#all\"&gt;\n  &lt;xsl:param name=\"init\"/&gt;\n  &lt;xsl:apply-templates mode=\"#current\"&gt;\n    &lt;xsl:with-param name=\"init\" select=\"$init\"/&gt;\n  &lt;/xsl:apply-templates&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>The built-in <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> for text and\n        attribute nodes returns a text node containing the\n        <a title = \"string value\" href = \"#dt-string-value\">string\n        value</a> of the context node. It is effectively:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:template match=\"text()|@*\" mode=\"#all\"&gt;\n  &lt;xsl:value-of select=\"string(.)\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This text node may have a string value that is\n          zero-length.</p>\n        </div>\n\n        <p>The built-in <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> for processing\n        instructions and comments does nothing (it returns the\n        empty sequence).</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:template match=\"processing-instruction()|comment()\" mode=\"#all\"/&gt;\n</pre>\n        </div>\n\n        <p>The built-in <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> for namespace nodes\n        is also to do nothing. There is no pattern that can match a\n        namespace node, <span>so the built-in template rule is\n        always used when <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        selects a namespace node.</span></p>\n\n        <p>The built-in <a title = \"template rule\" href = \"#dt-template-rule\">template rules</a> have lower <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n        precedence</a> than all other template rules. Thus, the\n        stylesheet author can override a built-in template rule by\n        including an explicit template rule.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"apply-imports\" id = \"apply-imports\"></a>6.7\n        Overriding Template Rules</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-apply-imports\" id = \"XSLT_element-apply-imports\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:apply-imports&gt;<br/>\n        &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-with-param\">xsl:with-param</a>* --&gt;<br/>\n        &lt;/xsl:apply-imports&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-next-match\" id = \"XSLT_element-next-match\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:next-match&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-with-param\">xsl:with-param</a> | <a href = \"#XSLT_element-fallback\">xsl:fallback</a>)* --&gt;<br/>\n        &lt;/xsl:next-match&gt;</code></p>\n\n        <p>A <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> that is being used to\n        override another template rule (see <a href = \"#conflict\"><i>6.4 Conflict Resolution for Template\n        Rules</i></a>) can use the <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n        instruction to invoke the overridden template rule. The\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        instruction only considers template rules in imported\n        stylesheet modules; the <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n        instruction considers all other template rules of lower\n        <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> and/or\n        priority. <span>Both instructions will invoke the built-in\n        template rule for the node (see <a href = \"#built-in-rule\"><i>6.6 Built-in Template Rules</i></a>) if\n        no other template rule is found.</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-current-template-rule\" id = \"dt-current-template-rule\" title = \"current template rule\"></a>At any point in the\n        processing of a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, there may be a <b>current\n        template rule</b>. Whenever a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> is chosen\n        <span>as a result of evaluating <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n        or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>,\n        the template rule becomes the current template rule for the\n        evaluation of the rule's sequence constructor. When an\n        <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n        <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n        <span>or <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction is evaluated, or when evaluating a sequence\n        constructor contained in an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> or <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> element, or\n        when</span> a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> is called\n        (see <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n        Functions</i></a>), the current template rule becomes null\n        for the evaluation of that instruction or\n        function.<span class = \"definition\">]</span></p>\n\n        <p>The current template rule is not affected by invoking\n        named templates (see <a href = \"#named-templates\"><i>10.1\n        Named Templates</i></a>) or named attribute sets (see\n        <a href = \"#attribute-sets\"><i>10.2 Named Attribute\n        Sets</i></a>). While evaluating a <a title = \"global variable\" href = \"#dt-global-variable\">global\n        variable</a> <span>or the default value of a <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a></span>\n        (see <a href = \"#global-variables\"><i>9.5 Global Variables\n        and Parameters</i></a>) the current template rule is\n        null.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>These rules ensure that when <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n          or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a> is\n          called, the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is the same as when\n          the current template rule was invoked, and is always a\n          node.</p>\n        </div>\n\n        <p><span>Both <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        and <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n        search</span> for a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> that matches the\n        <a title = \"context node\" href = \"#dt-context-node\">context\n        node</a>, and that is applicable to the <a title = \"current mode\" href = \"#dt-current-mode\">current mode</a>\n        (see <a href = \"#modes\"><i>6.5 Modes</i></a>). In choosing a\n        template rule, <span>they use</span> the usual criteria\n        such as the priority and <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> of the\n        template rules, but <span>they consider as candidates only\n        a subset of the template rules in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. This subset differs\n        between the two instructions:</span></p>\n\n        <ul>\n          <li>\n            <p>The <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n            instruction considers as candidates only those template\n            rules contained in <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet levels</a> that are\n            descendants in the <a title = \"import tree\" href = \"#dt-import-tree\">import tree</a> of the <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet level</a> that\n            contains the <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template\n            rule</a>.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>This is <em>not</em> the same as saying that the\n              search considers all template rules whose import\n              precedence is lower than that of the current template\n              rule.</p>\n            </div>\n          </li>\n\n          <li>\n            <p>The <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n            instruction considers as candidates all those template\n            rules that come after the <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template rule</a>\n            in the ordering of template rules implied by the\n            conflict resolution rules given in <a href = \"#conflict\"><i>6.4 Conflict Resolution for Template\n            Rules</i></a>. That is, it considers all template rules\n            with lower <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> than the\n            <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template rule</a>,\n            plus the template rules that are at the same import\n            precedence that have lower priority than the current\n            template rule. If the processor has recovered from the\n            error that occurs when two matching template rules have\n            the same import precedence and priority, then it also\n            considers all matching template rules with the same\n            import precedence and priority that occur before the\n            current template rule in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>As explained in <a href = \"#conflict\"><i>6.4\n              Conflict Resolution for Template Rules</i></a>, a\n              template rule whose match pattern contains multiple\n              alternatives separated by <code>|</code> is treated\n              equivalently to a set of template rules, one for each\n              alternative. This means that where the same node\n              matches more than one alternative, and the\n              alternatives have different priority, it is possible\n              for an <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n              instruction to cause the current template rule to be\n              invoked recursively. This situation does not occur\n              when the alternatives have the same priority.</p>\n            </div>\n          </li>\n        </ul>\n\n        <p>If no matching template rule is found that satisfies\n        these criteria, the built-in template rule for the node\n        <span>kind</span> is used (see <a href = \"#built-in-rule\"><i>6.6 Built-in Template\n        Rules</i></a>).</p>\n\n        <p>An <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n        instruction may use <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a> child\n        elements to pass parameters to the chosen <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>\n        (see <a href = \"#with-param\"><i>10.1.1 Passing Parameters to\n        Templates</i></a>). It also passes on any <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel\n        parameters</a> as described in <a href = \"#tunnel-params\"><i>10.1.2 Tunnel Parameters</i></a>.</p>\n\n        <p><a name = \"err-XTDE0560\" id = \"err-XTDE0560\"><span class = \"error\">[ERR XTDE0560]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n        is evaluated when the <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template rule</a>\n        is null.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e11507\" id = \"d5e11507\"></a>Example: Using\n            <code>xsl:apply-imports</code>\n          </div>\n\n          <p>For example, suppose the stylesheet\n          <code>doc.xsl</code> contains a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> for\n          <code>example</code> elements:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"example\"&gt;\n  &lt;pre&gt;&lt;xsl:apply-templates/&gt;&lt;/pre&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>Another stylesheet could import <code>doc.xsl</code>\n          and modify the treatment of <code>example</code> elements\n          as follows:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:import href=\"doc.xsl\"/&gt;\n\n&lt;xsl:template match=\"example\"&gt;\n  &lt;div style=\"border: solid red\"&gt;\n     &lt;xsl:apply-imports/&gt;\n  &lt;/div&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The combined effect would be to transform an\n          <code>example</code> into an element of the form:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;div style=\"border: solid red\"&gt;&lt;pre&gt;...&lt;/pre&gt;&lt;/div&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>An <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n        instruction appearing as a child of an <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n        instruction is ignored by an XSLT 2.0 processor, but can be\n        used to define fallback behavior when the stylesheet is\n        processed by an XSLT 1.0 processor in forwards-compatible\n        mode.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"for-each\" id = \"for-each\"></a>7 Repetition</h2>\n\n      <p class = \"element-syntax\"><a name = \"XSLT_element-for-each\" id = \"XSLT_element-for-each\"></a><code>&lt;!-- Category: instruction\n      --&gt;<br/>\n      &lt;xsl:for-each<br/>\n      &#160;&#160;<b>select</b> = <var>expression</var>&gt;<br/>\n      &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>*,\n      <var>sequence-constructor</var>) --&gt;<br/>\n      &lt;/xsl:for-each&gt;</code></p>\n\n      <p>The <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> instruction\n      processes each item in a sequence of items, evaluating the\n      <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> within\n      the <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>\n      instruction once for each item in that sequence.</p>\n\n      <p>The <code>select</code> attribute is <span class = \"verb\">required</span>, and the <a title = \"expression\" href = \"#dt-expression\">expression</a> <span class = \"verb\">must</span> evaluate to a sequence, called the input\n      sequence. If there is an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element present\n      (see <a href = \"#sorting\"><i>13 Sorting</i></a>) the input\n      sequence is sorted to produce a sorted sequence. Otherwise,\n      the sorted sequence is the same as the input sequence.</p>\n\n      <p>The <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> instruction\n      contains a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>. The\n      <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is\n      evaluated once for each item in the sorted sequence, with the\n      <a title = \"focus\" href = \"#dt-focus\">focus</a> set as\n      follows:</p>\n\n      <ul>\n        <li>\n          <p>The <a title = \"context item\" href = \"#dt-context-item\">context item</a> is the item being\n          processed. If this is a node, it will also be the\n          <a title = \"context node\" href = \"#dt-context-node\">context\n          node</a>. If it is not a node, there will be no context\n          node: that is, <span>any attempt to reference the context\n          node will result in a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a>.</span></p>\n        </li>\n\n        <li>\n          <p>The <a title = \"context position\" href = \"#dt-context-position\">context position</a> is the\n          position of this item in the sorted sequence.</p>\n        </li>\n\n        <li>\n          <p>The <a title = \"context size\" href = \"#dt-context-size\">context size</a> is the size of the\n          sorted sequence (which is the same as the size of the\n          input sequence).</p>\n        </li>\n      </ul>\n\n      <p>For each item in the input sequence, evaluating the\n      <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> produces\n      a sequence of items (see <a href = \"#sequence-constructors\"><i>5.7 Sequence\n      Constructors</i></a>). These output sequences are\n      concatenated; <span>if item <var>Q</var> follows item\n      <var>P</var> in the sorted sequence, then the result of\n      evaluating the sequence constructor with <var>Q</var> as the\n      context item is concatenated after the result of evaluating\n      the sequence constructor with <var>P</var> as the context\n      item.</span> The result of the <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> instruction\n      is the concatenated sequence of items.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>With XSLT 1.0, the selected nodes were processed in\n        document order. With XSLT 2.0, XPath expressions that would\n        have been valid under XPath 1.0 (such as path expressions\n        and union expressions) will return a sequence of nodes that\n        is already in document order, so backwards compatibility is\n        maintained.</p>\n      </div>\n\n      <div class = \"example\">\n        <div class = \"exampleHeader\">\n          <a name = \"d5e11663\" id = \"d5e11663\"></a>Example: Using\n          <code>xsl:for-each</code>\n        </div>\n\n        <p>For example, given an XML document with this\n        structure</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;customers&gt;\n  &lt;customer&gt;\n    &lt;name&gt;...&lt;/name&gt;\n    &lt;order&gt;...&lt;/order&gt;\n    &lt;order&gt;...&lt;/order&gt;\n  &lt;/customer&gt;\n  &lt;customer&gt;\n    &lt;name&gt;...&lt;/name&gt;\n    &lt;order&gt;...&lt;/order&gt;\n    &lt;order&gt;...&lt;/order&gt;\n  &lt;/customer&gt;\n&lt;/customers&gt;\n</pre>\n        </div>\n\n        <p>the following would create an HTML document containing a\n        table with a row for each <code>customer</code> element</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:template match=\"/\"&gt;\n  &lt;html&gt;\n    &lt;head&gt;\n      &lt;title&gt;Customers&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;table&gt;\n        &lt;tbody&gt;\n          &lt;xsl:for-each select=\"customers/customer\"&gt;\n            &lt;tr&gt;\n              &lt;th&gt;\n                &lt;xsl:apply-templates select=\"name\"/&gt;\n              &lt;/th&gt;\n              &lt;xsl:for-each select=\"order\"&gt;\n                &lt;td&gt;\n                  &lt;xsl:apply-templates/&gt;\n                &lt;/td&gt;\n              &lt;/xsl:for-each&gt;\n            &lt;/tr&gt;\n          &lt;/xsl:for-each&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/body&gt;\n  &lt;/html&gt;\n&lt;/xsl:template&gt;\n</pre>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"conditionals\" id = \"conditionals\"></a>8\n      Conditional Processing</h2>\n\n      <p>There are two instructions in XSLT that support\n      conditional processing: <a href = \"#XSLT_element-if\"><code>xsl:if</code></a> and <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a>. The <a href = \"#XSLT_element-if\"><code>xsl:if</code></a> instruction provides\n      simple if-then conditionality; the <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> instruction\n      supports selection of one choice when there are several\n      possibilities.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"xsl-if\" id = \"xsl-if\"></a>8.1 Conditional\n        Processing with <a href = \"#XSLT_element-if\"><code>xsl:if</code></a></h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-if\" id = \"XSLT_element-if\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:if<br/>\n        &#160;&#160;<b>test</b> = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:if&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-if\"><code>xsl:if</code></a>\n        element has a mandatory <code>test</code> attribute, which\n        specifies an <a title = \"expression\" href = \"#dt-expression\">expression</a>. The content is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n        <p>The result of the <a href = \"#XSLT_element-if\"><code>xsl:if</code></a> instruction depends\n        on the <a href = \"http://www.w3.org/TR/xpath20/#dt-ebv\">effective boolean\n        value</a><sup><small>XP</small></sup> of the expression in\n        the <code>test</code> attribute. The rules for determining\n        the effective boolean value of an expression are given in\n        <a href = \"#xpath20\">[XPath 2.0]</a>: they are the same as\n        the rules used for XPath conditional expressions.</p>\n\n        <p>If the effective boolean value of the <a title = \"expression\" href = \"#dt-expression\">expression</a> is true,\n        then the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is\n        evaluated (see <a href = \"#sequence-constructors\"><i>5.7\n        Sequence Constructors</i></a>), and the resulting node\n        sequence is returned as the result of the <a href = \"#XSLT_element-if\"><code>xsl:if</code></a> instruction;\n        otherwise, <span>the sequence constructor is not evaluated,\n        and</span> the empty sequence is returned.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e11752\" id = \"d5e11752\"></a>Example: Using\n            <code>xsl:if</code>\n          </div>\n\n          <p>In the following example, the names in a group of\n          names are formatted as a comma separated list:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"namelist/name\"&gt;\n  &lt;xsl:apply-templates/&gt;\n  &lt;xsl:if test=\"not(position()=last())\"&gt;, &lt;/xsl:if&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The following colors every other table row yellow:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"item\"&gt;\n  &lt;tr&gt;\n    &lt;xsl:if test=\"position() mod 2 = 0\"&gt;\n       &lt;xsl:attribute name=\"bgcolor\"&gt;yellow&lt;/xsl:attribute&gt;\n    &lt;/xsl:if&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/tr&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xsl-choose\" id = \"xsl-choose\"></a>8.2\n        Conditional Processing with <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a></h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-choose\" id = \"XSLT_element-choose\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:choose&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-when\">xsl:when</a>+, <a href = \"#XSLT_element-otherwise\">xsl:otherwise</a>?) --&gt;<br/>\n        &lt;/xsl:choose&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-when\" id = \"XSLT_element-when\"></a><code>&lt;xsl:when<br/>\n        &#160;&#160;<b>test</b> = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:when&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-otherwise\" id = \"XSLT_element-otherwise\"></a><code>&lt;xsl:otherwise&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:otherwise&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> element\n        selects one among a number of possible alternatives. It\n        consists of a sequence of one or more <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> elements followed\n        by an optional <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a>\n        element. Each <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> element has a\n        single attribute, <code>test</code>, which specifies an\n        <a title = \"expression\" href = \"#dt-expression\">expression</a>.\n        The content of the <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> and <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a>\n        elements is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n        <p>When an <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> element is\n        processed, each of the <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> elements is\n        tested in turn (that is, in <span>the order that</span> the\n        elements appear in the stylesheet), until one of the\n        <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> elements\n        is satisfied. <span>If none of the <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> elements is\n        satisfied, then the <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a> element\n        is considered, as described below.</span></p>\n\n        <p>An <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n        element is satisfied if the <a href = \"http://www.w3.org/TR/xpath20/#dt-ebv\">effective boolean\n        value</a><sup><small>XP</small></sup> of the <a title = \"expression\" href = \"#dt-expression\">expression</a> in its\n        <code>test</code> attribute is <code>true</code>. The rules\n        for determining the effective boolean value of an\n        expression are given in <a href = \"#xpath20\">[XPath 2.0]</a>:\n        they are the same as the rules used for XPath conditional\n        expressions.</p>\n\n        <p>The content of the first, and only the first, <a href = \"#XSLT_element-when\"><code>xsl:when</code></a> element that is\n        satisfied is evaluated, and the resulting sequence is\n        returned as the result of the <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> instruction.\n        If no <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n        element is satisfied, the content of the <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a> element\n        is evaluated, and the resulting sequence is returned as the\n        result of the <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> instruction.\n        If no <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n        element is satisfied, and no <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a> element\n        is present, the result of the <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> instruction\n        is an empty sequence.</p>\n\n        <p>Only the <span>sequence</span> constructor of the\n        selected <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n        or <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a>\n        instruction is evaluated. The <code>test</code> expressions\n        for <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n        instructions after the selected one are not evaluated.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e11904\" id = \"d5e11904\"></a>Example: Using\n            <code>xsl:choose</code>\n          </div>\n\n          <p>The following example enumerates items in an ordered\n          list using arabic numerals, letters, or roman numerals\n          depending on the depth to which the ordered lists are\n          nested.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"orderedlist/listitem\"&gt;\n  &lt;fo:list-item indent-start='2pi'&gt;\n    &lt;fo:list-item-label&gt;\n      &lt;xsl:variable name=\"level\"\n                    select=\"count(ancestor::orderedlist) mod 3\"/&gt;\n      &lt;xsl:choose&gt;\n        &lt;xsl:when test='$level=1'&gt;\n          &lt;xsl:number format=\"i\"/&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:when test='$level=2'&gt;\n          &lt;xsl:number format=\"a\"/&gt;\n        &lt;/xsl:when&gt;\n        &lt;xsl:otherwise&gt;\n          &lt;xsl:number format=\"1\"/&gt;\n        &lt;/xsl:otherwise&gt;\n      &lt;/xsl:choose&gt;\n      &lt;xsl:text&gt;. &lt;/xsl:text&gt;\n    &lt;/fo:list-item-label&gt;\n    &lt;fo:list-item-body&gt;\n      &lt;xsl:apply-templates/&gt;\n    &lt;/fo:list-item-body&gt;\n  &lt;/fo:list-item&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"variables-and-parameters\" id = \"variables-and-parameters\"></a>9 Variables and\n      Parameters</h2>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-variable-binding-element\" id = \"dt-variable-binding-element\" title = \"variable-binding element\"></a>The two elements <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> and\n      <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> are\n      referred to as <b>variable-binding elements</b> <span class = \"definition\">]</span>.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-variable\" id = \"dt-variable\" title = \"variable\"></a>The\n      <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>\n      element declares a <b>variable</b>, which may be a <a title = \"global variable\" href = \"#dt-global-variable\">global\n      variable</a> or a <a title = \"local variable\" href = \"#dt-local-variable\">local variable</a>.<span class = \"definition\">]</span></p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-parameter\" id = \"dt-parameter\" title = \"parameter\"></a>The\n      <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n      declares a <b>parameter</b>, which may be a <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a>, a\n      <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a>, or a\n      <a title = \"function parameter\" href = \"#dt-function-parameter\">function parameter</a>. A parameter\n      is a <a title = \"variable\" href = \"#dt-variable\">variable</a>\n      with the additional property that its value can be set by the\n      caller when the stylesheet, the template, or the function is\n      invoked.<span class = \"definition\">]</span></p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-value\" id = \"dt-value\" title = \"value\"></a>A variable is a\n      binding between a name and a value. The <b>value</b> of a\n      variable is any sequence (of nodes and/or atomic values), as\n      defined in <a href = \"#xpath-datamodel\">[Data\n      Model]</a>.<span class = \"definition\">]</span></p>\n\n      <div class = \"div2\">\n        <h3><a name = \"variables\" id = \"variables\"></a>9.1\n        Variables</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-variable\" id = \"XSLT_element-variable\"></a><code>&lt;!-- Category: declaration\n        --&gt;<br/>\n        &lt;!-- Category: instruction --&gt;<br/>\n        &lt;xsl:variable<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var><br/>\n        &#160;&#160;select? = <var>expression</var><br/>\n        &#160;&#160;as? = <var>sequence-type</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:variable&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n        has a <span class = \"verb\">required</span> <code>name</code>\n        attribute, which specifies the name of the variable. The\n        value of the <code>name</code> attribute is a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is expanded as\n        described in <a href = \"#qname\"><i>5.1 Qualified\n        Names</i></a>.</p>\n\n        <p>The <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n        has an optional <code>as</code> attribute, which specifies\n        the <a title = \"required type\" href = \"#dt-required-type\">required type</a> of the variable. The\n        value of the <code>as</code> attribute is a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SequenceType\">SequenceType</a><sup>\n        <small>XP</small></sup>, as defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-supplied-value\" id = \"dt-supplied-value\" title = \"supplied value\"></a>The value of the variable is computed\n        using the <a title = \"expression\" href = \"#dt-expression\">expression</a> given in the\n        <code>select</code> attribute or the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, as\n        described in <a href = \"#variable-values\"><i>9.3 Values of\n        Variables and Parameters</i></a>. This value is referred to\n        as the <b>supplied value</b> of the variable.<span class = \"definition\">]</span> <span>If the <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n        has a <code>select</code> attribute, then the sequence\n        constructor <span class = \"verb\">must</span> be\n        empty.</span></p>\n\n        <p>If the <code>as</code> attribute is specified, then the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the variable is\n        converted to the required type, using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>.</p>\n\n        <p><a name = \"err-XTTE0570\" id = \"err-XTTE0570\"><span class = \"error\">[ERR XTTE0570]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of a variable\n        cannot be converted to the required type.</p>\n\n        <p>If the <code>as</code> attribute is omitted, the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the variable is\n        used directly, and no conversion takes place.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"parameters\" id = \"parameters\"></a>9.2\n        Parameters</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-param\" id = \"XSLT_element-param\"></a><code>&lt;!-- Category: declaration\n        --&gt;<br/>\n        &lt;xsl:param<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var><br/>\n        &#160;&#160;select? = <var>expression</var><br/>\n        &#160;&#160;as? = <var>sequence-type</var><br/>\n        &#160;&#160;required? = \"yes\" | \"no\"<br/>\n        &#160;&#160;tunnel? = \"yes\" | \"no\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:param&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        element may be used as a child of <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>, to\n        define a parameter to the transformation; or as a child of\n        <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n        to define a parameter to a template, which may be supplied\n        when the template is invoked using <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>;\n        or as a child of <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> to define\n        a parameter to a stylesheet function, which may be supplied\n        when the function is called from an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>.</p>\n\n        <p>The <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        element has a <span class = \"verb\">required</span>\n        <code>name</code> attribute, which specifies the name of\n        the parameter. The value of the <code>name</code> attribute\n        is a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is\n        expanded as described in <a href = \"#qname\"><i>5.1 Qualified\n        Names</i></a>.</p>\n\n        <p><a name = \"err-XTSE0580\" id = \"err-XTSE0580\"><span class = \"error\">[ERR XTSE0580]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        two parameters of a template or of a stylesheet function\n        have the same name.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>For rules concerning stylesheet parameters, see\n          <a href = \"#global-variables\"><i>9.5 Global Variables and\n          Parameters</i></a>. Local variables may <a title = \"shadows\" href = \"#dt-shadows\">shadow</a> template\n          parameters and function parameters: see <a href = \"#scope-of-variables\"><i>9.7 Scope of\n          Variables</i></a>.</p>\n        </div>\n\n        <p>The <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the parameter is\n        the value supplied by the caller. If no value was supplied\n        by the caller, and if the parameter is not mandatory, then\n        the supplied value is computed using the <a title = \"expression\" href = \"#dt-expression\">expression</a> given in\n        the <code>select</code> attribute or the contained\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, as\n        described in <a href = \"#variable-values\"><i>9.3 Values of\n        Variables and Parameters</i></a>. <span>If the <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element has a\n        <code>select</code> attribute, then the sequence\n        constructor <span class = \"verb\">must</span> be\n        empty.</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This specification does not dictate whether and when\n          the default value of a parameter is evaluated. For\n          example, if the default is specified as\n          <code>&lt;xsl:param\n          name=\"p\"&gt;&lt;foo/&gt;&lt;/xsl:param&gt;</code>, then\n          it is not specified whether a distinct <code>foo</code>\n          element node will be created on each invocation of the\n          template, or whether the same <code>foo</code> element\n          node will be used for each invocation. However, it is\n          permissible for the default value to depend on the values\n          of other parameters, or on the evaluation context, in\n          which case the default must effectively be evaluated on\n          each invocation.</p>\n        </div>\n\n        <p>The <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        element has an optional <code>as</code> attribute, which\n        specifies the <a title = \"required type\" href = \"#dt-required-type\">required type</a> of the parameter. The\n        value of the <code>as</code> attribute is a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SequenceType\">SequenceType</a><sup>\n        <small>XP</small></sup>, as defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n\n        <p>If the <code>as</code> attribute is specified, then the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the parameter is\n        converted to the required type, using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>.</p>\n\n        <p><a name = \"err-XTTE0590\" id = \"err-XTTE0590\"><span class = \"error\">[ERR XTTE0590]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        conversion of the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of a parameter to\n        its required type fails.</p>\n\n        <p>If the <code>as</code> attribute is omitted, the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the parameter is\n        used directly, and no conversion takes place.</p>\n\n        <p>The optional <code>required</code> attribute may be used\n        to indicate that a parameter is mandatory. This attribute\n        may be specified for <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a> and\n        for <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameters</a>; it\n        <span class = \"verb\">must not</span> be specified for\n        <a title = \"function parameter\" href = \"#dt-function-parameter\">function parameters</a>, which are\n        always mandatory. <span>A parameter is mandatory if it is a\n        <a title = \"function parameter\" href = \"#dt-function-parameter\">function parameter</a> or if the\n        <code>required</code> attribute is present and has the\n        value <code>yes</code>. Otherwise, the parameter is\n        optional. If the parameter is mandatory, then</span> the\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n        <span class = \"verb\">must</span> be empty and <span class = \"verb\">must not</span> have a <code>select</code>\n        attribute.</p>\n\n        <p><a name = \"err-XTTE0600\" id = \"err-XTTE0600\"><span class = \"error\">[ERR XTTE0600]</span></a> If a default value is\n        given explicitly, that is, if there is either a\n        <code>select</code> attribute or a non-empty <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, then\n        it is a <a title = \"type errors\" href = \"#dt-type-error\">type\n        error</a> if the default value cannot be converted to the\n        required type, using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>.</p>\n\n        <p>If an optional parameter has no <code>select</code>\n        attribute and has an empty <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n        and if there is no <code>as</code> attribute, then the\n        default value of the parameter is a zero length string.</p>\n\n        <p><a name = \"err-XTDE0610\" id = \"err-XTDE0610\"><span class = \"error\">[ERR XTDE0610]</span></a> If an optional parameter\n        has no <code>select</code> attribute and has an empty\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, and if\n        there is an <code>as</code> attribute, then the default\n        value of the parameter is an empty sequence. If the empty\n        sequence is not a valid instance of the required type\n        defined in the <code>as</code> attribute, then the\n        parameter is treated as a required parameter, which means\n        that it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the caller supplies no value for the\n        parameter.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The effect of these rules is that specifying\n          <code>&lt;xsl:param name=\"p\" as=\"xs:date\"\n          select=\"2\"/&gt;</code> is an error, but if the default\n          value of the parameter is never used, then the processor\n          has discretion whether or not to report the error. By\n          contrast, <code>&lt;xsl:param name=\"p\"\n          as=\"xs:date\"/&gt;</code> is treated as if\n          <code>required=\"yes\"</code> had been specified: the empty\n          sequence is not a valid instance of <code>xs:date</code>,\n          so in effect there is no default value and the parameter\n          is therefore treated as being mandatory.</p>\n        </div>\n\n        <p>The optional <code>tunnel</code> attribute may be used\n        to indicate that a parameter is a <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel\n        parameter</a>. The default is <code>no</code>; the value\n        <code>yes</code> may be specified only for <a title = \"template parameter\" href = \"#dt-template-parameter\">template\n        parameters</a>. Tunnel parameters are described in <a href = \"#tunnel-params\"><i>10.1.2 Tunnel Parameters</i></a></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"variable-values\" id = \"variable-values\"></a>9.3\n        Values of Variables and Parameters</h3>\n\n        <p>A <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding element</a>\n        may specify the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the <a title = \"variable\" href = \"#dt-variable\">variable</a> or <a title = \"parameter\" href = \"#dt-parameter\">parameter</a> in\n        <span>four</span> different ways.</p>\n\n        <ul>\n          <li>\n            <p>If the <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n            element</a> has a <code>select</code> attribute, then\n            the value of the attribute <span class = \"verb\">must</span> be an <a title = \"expression\" href = \"#dt-expression\">expression</a> and the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied\n            value</a> of the variable is the value that results\n            from evaluating the expression. In this case, the\n            content of the variable-binding element <span class = \"verb\">must</span> be empty.</p>\n          </li>\n\n          <li>\n            <p>If the <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n            element</a> has empty content and <span>has neither a\n            <code>select</code> attribute nor an <code>as</code>\n            attribute</span>, then the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of the\n            variable is a zero-length string. Thus</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:variable name=\"x\"/&gt;\n</pre>\n            </div>\n\n            <p>is equivalent to</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:variable name=\"x\" select=\"''\"/&gt;\n</pre>\n            </div>\n          </li>\n\n          <li>\n            <p>If a <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n            element</a> has no <code>select</code> attribute and\n            has non-empty content (that is, the variable-binding\n            element has one or more child nodes), and has no\n            <code>as</code> attribute, then the content of the\n            variable-binding element specifies the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied\n            value</a>. The content of the variable-binding element\n            is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>; a\n            new document is constructed with a document node having\n            as its children the sequence of nodes that results from\n            evaluating the sequence constructor and then applying\n            the rules given in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n            Complex Content</i></a>. The value of the variable is\n            then a singleton sequence containing this document\n            node. For further information, see <a href = \"#temporary-trees\"><i>9.4 Creating implicit document\n            nodes</i></a>.</p>\n          </li>\n\n          <li>\n            <p>If a <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n            element</a> has an <code>as</code> attribute but no\n            <code>select</code> attribute, then the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied\n            value</a> is the sequence that results from evaluating\n            the (possibly empty) <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n            constructor</a> contained within the variable-binding\n            element (see <a href = \"#sequence-constructors\"><i>5.7\n            Sequence Constructors</i></a>).</p>\n          </li>\n        </ul>\n\n        <p>These combinations are summarized in the table\n        below.</p>\n\n        <table border = \"1\" cellpadding = \"5\">\n          <col width = \"12%\" span = \"1\"/>\n          <col width = \"12%\" span = \"1\"/>\n          <col width = \"12%\" span = \"1\"/>\n          <col span = \"1\"/>\n\n          <thead>\n            <tr>\n              <th align = \"left\">select attribute</th>\n\n              <th align = \"left\">as attribute</th>\n\n              <th align = \"left\">content</th>\n\n              <th align = \"left\">Effect</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr>\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">empty</td>\n\n              <td valign = \"top\">Value is obtained by evaluating the\n              <code>select</code> attribute</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">empty</td>\n\n              <td valign = \"top\">Value is obtained by evaluating the\n              <code>select</code> attribute, adjusted to the type\n              required by the <code>as</code> attribute</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">Static error</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">Static error</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">empty</td>\n\n              <td valign = \"top\">Value is a zero-length string</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">empty</td>\n\n              <td valign = \"top\">Value is an empty sequence, provided\n              the <code>as</code> attribute permits an empty\n              sequence</td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\"><span>Value is a document node whose\n              content is obtained by evaluating the sequence\n              constructor</span></td>\n            </tr>\n\n            <tr>\n              <td valign = \"top\">absent</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">present</td>\n\n              <td valign = \"top\">Value is obtained by evaluating the\n              sequence constructor, adjusted to the type required\n              by the <code>as</code> attribute</td>\n            </tr>\n          </tbody>\n        </table>\n\n        <p><a name = \"err-XTSE0620\" id = \"err-XTSE0620\"><span class = \"error\">[ERR XTSE0620]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding element</a>\n        has a <code>select</code> attribute and has non-empty\n        content.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e12625\" id = \"d5e12625\"></a>Example: Values of\n            Variables\n          </div>\n\n          <p>The value of the following variable is the sequence of\n          integers (1, 2, 3):</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"i\" as=\"xs:integer*\" select=\"1 to 3\"/&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is an integer,\n          assuming that the attribute <code>@size</code> exists,\n          and is annotated either as an integer, or as\n          <span><code>xs:untypedAtomic</code></span>:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"i\" as=\"xs:integer\" select=\"@size\"/&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is a zero-length\n          string:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"z\"/&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is document node\n          containing an empty element as a child:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"doc\"&gt;&lt;c/&gt;&lt;/xsl:variable&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is sequence of\n          integers (2, 4, 6):</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"seq\" as=\"xs:integer*\"&gt;\n  &lt;xsl:for-each select=\"1 to 3\"&gt;\n    &lt;xsl:sequence select=\".*2\"/&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:variable&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is sequence of\n          parentless attribute nodes:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"attset\" as=\"attribute()+\"&gt;\n  &lt;xsl:attribute name=\"x\"&gt;2&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"y\"&gt;3&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"z\"&gt;4&lt;/xsl:attribute&gt;    \n&lt;/xsl:variable&gt;\n</pre>\n          </div>\n\n          <p>The value of the following variable is an empty\n          sequence:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"empty\" as=\"empty-sequence()\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>The actual value of the variable depends on the\n        <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a>, as described\n        above, and the required type, which is determined by the\n        value of the <code>as</code> attribute.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e12672\" id = \"d5e12672\"></a>Example: Pitfalls\n            with Numeric Predicates\n          </div>\n\n          <p>When a variable is used to select nodes by position,\n          be careful not to do:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"n\"&gt;2&lt;/xsl:variable&gt;\n...\n&lt;xsl:value-of select=\"td[$n]\"/&gt;\n</pre>\n          </div>\n\n          <p>This will output the values of all the <code>td</code>\n          elements, space-separated (or in backwards compatibility\n          mode, the value of the first <code>td</code> element),\n          because the variable <code>n</code> will be bound to a\n          node, not a number. Instead, do one of the following:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"n\" select=\"2\"/&gt;\n...\n&lt;xsl:value-of select=\"td[$n]\"/&gt;\n</pre>\n          </div>\n\n          <p>or</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"n\"&gt;2&lt;/xsl:variable&gt;\n...\n&lt;xsl:value-of select=\"td[position()=$n]\"/&gt;\n</pre>\n          </div>\n\n          <p>or</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"n\" as=\"xs:integer\"&gt;2&lt;/xsl:variable&gt;\n...\n&lt;xsl:value-of select=\"td[$n]\"/&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"temporary-trees\" id = \"temporary-trees\"></a>9.4\n        <span>Creating implicit document nodes</span></h3>\n\n        <p>A document node is created implicitly when evaluating an\n        <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>,\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>, or\n        <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n        element that has non-empty content and that has no\n        <code>as</code> attribute. This element is referred to as\n        the variable-binding element. The value of the <a title = \"variable\" href = \"#dt-variable\">variable</a> is a single\n        node, the document node of the <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a>. The content\n        of the document node is formed from the result of\n        evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        contained within the variable-binding element, as described\n        in <a href = \"#constructing-complex-content\"><i>5.7.1\n        Constructing Complex Content</i></a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The construct:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"tree\"&gt;\n  &lt;a/&gt;\n&lt;/xsl:variable&gt;\n</pre>\n          </div>\n\n          <p>can be regarded as a shorthand for:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"tree\" as=\"document-node()\"&gt;\n  &lt;xsl:document validation=\"preserve\"&gt;\n    &lt;a/&gt;\n  &lt;/xsl:document&gt;  \n&lt;/xsl:variable&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>The base URI of the document node is taken from the base\n        URI of the variable binding element in the stylesheet. (See\n        <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-base-uri\">Section\n        5.2 base-uri Accessor</a><sup><small>DM</small></sup> in\n        <a href = \"#xpath-datamodel\">[Data Model]</a>)</p>\n\n        <p>No document-level validation takes place (which means,\n        for example, that there is no checking that ID values are\n        unique). However, type annotations on nodes within the new\n        tree are copied unchanged.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The base URI of other nodes in the tree is determined\n          by the rules for constructing complex content. The effect\n          of these rules is that the base URI of a node in the\n          temporary tree is determined as if all the nodes in the\n          temporary tree came from a single entity whose URI was\n          the base URI of the <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n          element</a>. Thus, the base URI of the document node will\n          be equal to the base URI of the variable-binding element;\n          an <code>xml:base</code> attribute within the temporary\n          tree will change the base URI for its parent element and\n          that element's descendants, just as it would within a\n          document constructed by parsing.</p>\n        </div>\n\n        <p>The <code>document-uri</code> and\n        <code>unparsed-entities</code> properties of the new\n        document node are set to empty.</p>\n\n        <p>A <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> is available for\n        processing in exactly the same way as any source document.\n        For example, its nodes are accessible using path\n        expressions, and they can be processed using instructions\n        such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        and <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>. Also,\n        the <a href = \"#function-key\"><code>key</code></a> and\n        <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n        <small>FO</small></sup> functions can be used to find nodes\n        within a temporary tree <span>rooted at a document\n        node</span>, provided that at the time the function is\n        called, the context item is a node within the temporary\n        tree.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e12785\" id = \"d5e12785\"></a>Example: Two-Phase\n            Transformation\n          </div>\n\n          <p>For example, the following stylesheet uses a temporary\n          tree as the intermediate result of a two-phase\n          transformation, using different <a title = \"mode\" href = \"#dt-mode\">modes</a> for the two phases (see <a href = \"#modes\"><i>6.5 Modes</i></a>). <span>Typically, the\n          template rules in module <code>phase1.xsl</code> will be\n          declared with <code>mode=\"phase1\"</code>, while those in\n          module <code>phase2.xsl</code> will be declared with\n          <code>mode=\"phase2\"</code>:</span></p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:stylesheet\n  version=\"2.0\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;xsl:import href=\"phase1.xsl\"/&gt;\n&lt;xsl:import href=\"phase2.xsl\"/&gt;\n\n&lt;xsl:variable name=\"intermediate\"&gt;\n  &lt;xsl:apply-templates select=\"/\" mode=\"phase1\"/&gt;\n&lt;/xsl:variable&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:apply-templates select=\"$intermediate\" mode=\"phase2\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n          </div>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The algorithm for matching nodes against template\n          rules is exactly the same regardless which tree the nodes\n          come from. <span>If different template rules are to be\n          used when processing different trees, then unless</span>\n          nodes from different trees can be distinguished by means\n          of <a title = \"pattern\" href = \"#dt-pattern\">patterns</a>, it\n          is a good idea to use <a title = \"mode\" href = \"#dt-mode\">modes</a> to ensure that each tree is\n          processed using the appropriate set of template\n          rules.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"global-variables\" id = \"global-variables\"></a>9.5 Global Variables and\n        Parameters</h3>\n\n        <p>Both <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> and\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> are\n        allowed as <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> elements<span>: that is,\n        they may appear as children of the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element.</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-global-variable\" id = \"dt-global-variable\" title = \"global variable\"></a>A top-level <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding element</a>\n        declares a <b>global variable</b> that is visible\n        everywhere (except where it is <a title = \"shadows\" href = \"#dt-shadows\">shadowed</a> by another binding).<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stylesheet-parameter\" id = \"dt-stylesheet-parameter\" title = \"stylesheet parameter\"></a>A top-level <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n        declares a <b>stylesheet parameter</b>. A stylesheet\n        parameter is a global variable with the additional property\n        that its value can be supplied by the caller when a\n        transformation is initiated.<span class = \"definition\">]</span> <span>As described in <a href = \"#parameters\"><i>9.2 Parameters</i></a>, a stylesheet\n        parameter may be declared as being mandatory, or may have a\n        default value specified for use when no value is supplied\n        by the caller.</span> <span>The mechanism by which the\n        caller supplies a value for a stylesheet parameter is\n        <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</span>\n        An XSLT <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">must</span> provide such a mechanism.</p>\n\n        <p>It is an error if no value is supplied for a mandatory\n        stylesheet parameter <span class = \"error\">[see <a href = \"#err-XTDE0050\">ERR XTDE0050</a>]</span>.</p>\n\n        <p>If a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains more than one\n        binding for a global variable of a particular name, then\n        the binding with the highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> is\n        used.</p>\n\n        <p><a name = \"err-XTSE0630\" id = \"err-XTSE0630\"><span class = \"error\">[ERR XTSE0630]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains more than one\n        binding of a global variable with the same name and same\n        <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a><span>, unless\n        it also contains another binding with the same name and\n        higher import precedence</span>.</p>\n\n        <p>For a global variable or the default value of a\n        stylesheet parameter, the <a title = \"expression\" href = \"#dt-expression\">expression</a> or <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        specifying the variable value is evaluated with a <a title = \"singleton focus\" href = \"#dt-singleton-focus\">singleton\n        focus</a> based on the <span>root</span> node of the\n        <span>tree</span> containing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>. An\n        XPath error will be reported if the evaluation of a global\n        variable or parameter references the context item, context\n        position, or context size when no initial context node is\n        supplied. <span>The values of other components of the\n        dynamic context are the initial values as defined in\n        <a href = \"#xpath-dynamic-context\"><i>5.4.3 Initializing the\n        Dynamic Context</i></a> and <a href = \"#additional-dynamic-context\"><i>5.4.4 Additional Dynamic\n        Context Components used by XSLT</i></a></span>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e12936\" id = \"d5e12936\"></a>Example: A\n            Stylesheet Parameter\n          </div>\n\n          <p>The following example declares a global parameter\n          <code>para-font-size</code>, which is referenced in an\n          <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:param name=\"para-font-size\" as=\"xs:string\"&gt;12pt&lt;/xsl:param&gt;\n\n&lt;xsl:template match=\"para\"&gt;\n &lt;fo:block font-size=\"{$para-font-size}\"&gt;\n   &lt;xsl:apply-templates/&gt;\n &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The implementation <span>must</span> provide a\n          mechanism allowing the user to supply a value for the\n          parameter <code>para-font-size</code> when invoking the\n          stylesheet; the value <code>12pt</code> acts as a\n          default.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"local-variables\" id = \"local-variables\"></a>9.6\n        Local Variables and Parameters</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-local-variable\" id = \"dt-local-variable\" title = \"local variable\"></a>As well as being allowed as <a title = \"declaration\" href = \"#dt-declaration\">declaration</a>\n        elements, the <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n        is also allowed in <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructors</a>. Such\n        a variable is known as a <b>local variable</b>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-template-parameter\" id = \"dt-template-parameter\" title = \"template parameter\"></a> An <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element may\n        appear as a child of an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element,\n        before any non-<a href = \"#XSLT_element-param\"><code>xsl:param</code></a> children of\n        that element. Such a parameter is known as a <b>template\n        parameter</b>. A template parameter is a <a title = \"local variable\" href = \"#dt-local-variable\">local\n        variable</a> with the additional property that its value\n        can be set when the template is called, using any of the\n        instructions <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n        <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>.<span class = \"definition\">\n        ]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-function-parameter\" id = \"dt-function-parameter\" title = \"function parameter\"></a> An <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element may\n        appear as a child of an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> element,\n        before any non-<a href = \"#XSLT_element-param\"><code>xsl:param</code></a> children of\n        that element. Such a parameter is known as a <b>function\n        parameter</b>. A function parameter is a <a title = \"local variable\" href = \"#dt-local-variable\">local\n        variable</a> with the additional property that its value\n        can be set when the function is called, using a function\n        call in an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>.<span class = \"definition\">]</span></p>\n\n        <p>The result of evaluating a local <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> or\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n        (that is, the contribution it makes to the result of the\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> it is\n        part of) is an empty sequence.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"scope-of-variables\" id = \"scope-of-variables\"></a>9.7 Scope of Variables</h3>\n\n        <p>For any <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n        element</a>, there is a region <span>(more specifically, a\n        set of element nodes)</span> of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> within which the\n        binding is visible. The set of variable bindings in scope\n        for an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> consists of those bindings\n        that are visible at the point in the stylesheet where the\n        expression occurs.</p>\n\n        <p>A global <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable binding element</a>\n        is visible everywhere in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> (including other <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet\n        modules</a>) except within the <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> or\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n        itself and any region where it is <a title = \"shadows\" href = \"#dt-shadows\">shadowed</a> by another variable binding.</p>\n\n        <p>A local <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable binding element</a>\n        is visible for all following siblings and their\n        descendants<span>, with two exceptions: it is not visible\n        in any region where it is <a title = \"shadows\" href = \"#dt-shadows\">shadowed</a> by another variable binding, and\n        it is not visible within the subtree rooted at an <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n        instruction that is a sibling of the variable binding\n        element.</span> The binding is not visible for the <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> or\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n        itself.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-shadows\" id = \"dt-shadows\" title = \"shadows\"></a>A binding\n        <b>shadows</b> another binding if the binding occurs at a\n        point where the other binding is visible, and the bindings\n        have the same name. <span class = \"definition\">]</span> It is\n        not an error if a binding established by a local <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> or\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        <a title = \"shadows\" href = \"#dt-shadows\">shadows</a> a global\n        binding. In this case, the global binding will not be\n        visible in the region of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where it is shadowed by the\n        other binding.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13122\" id = \"d5e13122\"></a>Example: Local\n            Variable Shadowing a Global Variable\n          </div>\n\n          <p>The following is allowed:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:param name=\"x\" select=\"1\"/&gt;\n&lt;xsl:template name=\"foo\"&gt;\n  &lt;xsl:variable name=\"x\" select=\"2\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>It is also not an error if a binding established by a\n        local <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n        <a title = \"shadows\" href = \"#dt-shadows\">shadows</a> a binding\n        established by another local <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> or\n        <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13143\" id = \"d5e13143\"></a>Example: Misuse of\n            Variable Shadowing\n          </div>\n\n          <p>The following is not an error, but the effect is\n          probably not what was intended. The template outputs\n          <code>&lt;x value=\"1\"/&gt;</code>, because the\n          declaration of the inner variable named <code>$x</code>\n          has no effect on the value of the outer variable named\n          <code>$x</code>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"x\" select=\"1\"/&gt;\n&lt;xsl:template name=\"foo\"&gt;\n  &lt;xsl:for-each select=\"1 to 5\"&gt;\n    &lt;xsl:variable name=\"x\" select=\"$x+1\"/&gt;\n  &lt;/xsl:for-each&gt;\n  &lt;x value=\"{$x}\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Once a variable has been given a value, the value\n          cannot subsequently be changed. XSLT does not provide an\n          equivalent to the assignment operator available in many\n          procedural programming languages.</p>\n\n          <p>This is because an assignment operator would make it\n          harder to create an implementation that processes a\n          document other than in a batch-like way, starting at the\n          beginning and continuing through to the end.</p>\n        </div>\n\n        <p>As well as global variables and local variables, an\n        XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> may also declare range\n        variables for use locally within an expression. For\n        details, see <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n\n        <p>Where a reference to a variable occurs in an XPath\n        expression, it is resolved first by reference to range\n        variables that are in scope, then by reference to local\n        variables and parameters, and finally by reference to\n        global variables and parameters. A range variable may\n        shadow a local variable or a global variable. XPath also\n        allows a range variable to shadow another range\n        variable.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"circularity\" id = \"circularity\"></a>9.8 Circular\n        Definitions</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-circularity\" id = \"dt-circularity\" title = \"circularity\"></a>A <b>circularity</b> is said to exist if\n        a construct such as a <a title = \"global variable\" href = \"#dt-global-variable\">global variable</a>, an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute set</a>,\n        or a <a title = \"key\" href = \"#dt-key\">key</a> is defined in\n        terms of itself. For example, if the <a title = \"expression\" href = \"#dt-expression\">expression</a> or <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        specifying the value of a <a title = \"global variable\" href = \"#dt-global-variable\">global variable</a> <var>X</var>\n        references a global variable <var>Y</var>, then the value\n        for <var>Y</var> <span class = \"verb\">must</span> be computed\n        before the value of <var>X</var>. A circularity exists if\n        it is impossible to do this for all global variable\n        definitions.<span class = \"definition\">]</span></p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13219\" id = \"d5e13219\"></a>Example: Circular\n            Variable Definitions\n          </div>\n\n          <p>The following two declarations create a\n          circularity:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"x\" select=\"$y+1\"/&gt;\n&lt;xsl:variable name=\"y\" select=\"$x+1\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13226\" id = \"d5e13226\"></a>Example:\n            Circularity involving Variables and Functions\n          </div>\n\n          <p>The definition of a global variable can be circular\n          even if no other variable is involved. For example the\n          following two declarations (see <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n          Functions</i></a> for an explanation of the <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n          element) also create a circularity:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"x\" select=\"my:f()\"/&gt;\n\n&lt;xsl:function name=\"my:f\"&gt;\n  &lt;xsl:sequence select=\"$x\"/&gt;\n&lt;/xsl:function&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13238\" id = \"d5e13238\"></a>Example:\n            Circularity involving Variables and Templates\n          </div>\n\n          <p>The definition of a variable is also circular if the\n          evaluation of the variable invokes an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction and the variable is referenced in the pattern\n          used in the <code>match</code> attribute of any template\n          rule in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. For example the\n          following definition is circular:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"x\"&gt;\n  &lt;xsl:apply-templates select=\"//param[1]\"/&gt;\n&lt;/xsl:variable&gt;\n\n&lt;xsl:template match=\"param[$x]\"&gt;1&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e13254\" id = \"d5e13254\"></a>Example:\n            Circularity involving Variables and Keys\n          </div>\n\n          <p>Similarly, a variable definition is circular if it\n          causes a call on the <a href = \"#function-key\"><code>key</code></a> function, and the\n          definition of that <a title = \"\" href = \"#key\">key</a> refers\n          to that variable in its <code>match</code> or\n          <code>use</code> attributes. So the following definition\n          is circular:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"x\" select=\"my:f(10)\"/&gt;\n\n&lt;xsl:function name=\"my:f\"&gt;\n  &lt;xsl:param name=\"arg1\"/&gt;\n  &lt;xsl:sequence select=\"key('k', $arg1)\"/&gt;\n&lt;/xsl:function&gt;\n\n&lt;xsl:key name=\"k\" match=\"item[@code=$x]\" use=\"@desc\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p><a name = \"err-XTDE0640\" id = \"err-XTDE0640\"><span class = \"error\">[ERR XTDE0640]</span></a> In general, a <a title = \"circularity\" href = \"#dt-circularity\">circularity</a> in a\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a>. However, as with all other dynamic errors, an\n        implementation will signal the error only if it actually\n        executes the instructions and expressions that participate\n        in the circularity. Because different implementations may\n        optimize the execution of a stylesheet in different ways,\n        it is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n        whether a particular circularity will actually be\n        signaled.</p>\n\n        <p>For example, in the following declarations, the function\n        declares a <span>local variable <code>$b</code>, but it\n        returns a result that does not require the variable to be\n        evaluated. It is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n        whether the value is actually evaluated</span>, and it is\n        therefore implementation-dependent whether the circularity\n        is signaled as an error:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:variable name=\"x\" select=\"my:f(1)/&gt;\n\n&lt;xsl:function name=\"my:f\"&gt;\n  &lt;xsl:param name=\"a\"/&gt;\n  &lt;xsl:variable name=\"b\" select=\"$x\"/&gt;  \n  &lt;xsl:sequence select=\"$a + 2\"/&gt;\n&lt;/xsl:function&gt;\n</pre>\n        </div>\n\n        <p>Circularities usually involve global variables or\n        parameters, but they can also exist between <a title = \"\" href = \"#key\">key</a> definitions (see <a href = \"#key\"><i>16.3\n        Keys</i></a>), between named <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute sets</a> (see <a href = \"#attribute-sets\"><i>10.2 Named Attribute Sets</i></a>), or\n        between any combination of these constructs. For example, a\n        circularity exists if a key definition invokes a function\n        that references an attribute set that calls the <a href = \"#function-key\"><code>key</code></a> function, supplying\n        the name of the original key definition as an argument.</p>\n\n        <p>Circularity is not the same as recursion. Stylesheet\n        functions (see <a href = \"#stylesheet-functions\"><i>10.3\n        Stylesheet Functions</i></a>) and named templates (see\n        <a href = \"#named-templates\"><i>10.1 Named Templates</i></a>)\n        may call other functions and named templates without\n        restriction. With careless coding, recursion may be\n        non-terminating. Implementations are <span class = \"verb\">required</span> to signal circularity as a <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a>,\n        but they are not <span class = \"verb\">required</span> to\n        detect non-terminating recursion.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"callable-components\" id = \"callable-components\"></a>10 Callable Components</h2>\n\n      <p>This section describes three constructs that can be used\n      to provide subroutine-like functionality that can be invoked\n      from anywhere in the stylesheet: named templates (see\n      <a href = \"#named-templates\"><i>10.1 Named Templates</i></a>),\n      named attribute sets (see <a href = \"#attribute-sets\"><i>10.2\n      Named Attribute Sets</i></a>) and <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a> (see\n      <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n      Functions</i></a>).</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"named-templates\" id = \"named-templates\"></a>10.1\n        Named Templates</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-call-template\" id = \"XSLT_element-call-template\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:call-template<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-with-param\">xsl:with-param</a>* --&gt;<br/>\n        &lt;/xsl:call-template&gt;</code></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-named-template\" id = \"dt-named-template\" title = \"named template\"></a>Templates can be invoked by name. An\n        <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n        element with a <code>name</code> attribute defines a\n        <b>named template</b>.<span class = \"definition\">]</span> The\n        value of the <code>name</code> attribute is a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is expanded as\n        described in <a href = \"#qname\"><i>5.1 Qualified\n        Names</i></a>. If an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        has a <code>name</code> attribute, it may, but need not,\n        also have a <code>match</code> attribute. An <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction invokes a template by name; it has a\n        <span class = \"verb\">required</span> <code>name</code>\n        attribute that identifies the template to be invoked.\n        Unlike <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        the <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction does not change the <a title = \"focus\" href = \"#dt-focus\">focus</a>.</p>\n\n        <p>The <code>match</code>, <code>mode</code> and\n        <code>priority</code> attributes on an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        <span>have no effect when</span> the <a title = \"template\" href = \"#dt-template\">template</a> is invoked by an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction. Similarly, the <code>name</code> attribute on\n        an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n        <span>has no effect when</span> the template is invoked by\n        an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n        instruction.</p>\n\n        <p><a name = \"err-XTSE0650\" id = \"err-XTSE0650\"><span class = \"error\">[ERR XTSE0650]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction whose <code>name</code> attribute does not\n        match the <code>name</code> attribute of any <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n        <p><a name = \"err-XTSE0660\" id = \"err-XTSE0660\"><span class = \"error\">[ERR XTSE0660]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains more than one\n        <a title = \"template\" href = \"#dt-template\">template</a> with\n        the same name and the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a><span>,\n        unless it also contains a <a title = \"template\" href = \"#dt-template\">template</a> with the same name and higher\n        <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a></span>.</p>\n\n        <p>The target <a title = \"template\" href = \"#dt-template\">template</a> for an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction is the template whose <code>name</code>\n        attribute matches the <code>name</code> attribute of the\n        <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction and that has higher <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n        precedence</a> than any other template with this name. The\n        result of evaluating an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n        instruction is the sequence produced by evaluating the\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        contained in its target <a title = \"template\" href = \"#dt-template\">template</a> (see <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>).</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"with-param\" id = \"with-param\"></a>10.1.1\n          Passing Parameters to Templates</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-with-param\" id = \"XSLT_element-with-param\"></a><code>&lt;xsl:with-param<br/>\n\n          &#160;&#160;<b>name</b> = <var>qname</var><br/>\n          &#160;&#160;select? = <var>expression</var><br/>\n          &#160;&#160;as? = <var>sequence-type</var><br/>\n          &#160;&#160;tunnel? = \"yes\" | \"no\"&gt;<br/>\n          &#160;&#160;&lt;!-- Content:\n          <var>sequence-constructor</var> --&gt;<br/>\n          &lt;/xsl:with-param&gt;</code></p>\n\n          <p>Parameters are passed to templates using the <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          element. The <span class = \"verb\">required</span>\n          <code>name</code> attribute specifies the name of the\n          <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> (the\n          variable the value of whose binding is to be replaced).\n          The value of the <code>name</code> attribute is a\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is\n          expanded as described in <a href = \"#qname\"><i>5.1\n          Qualified Names</i></a>.</p>\n\n          <p><a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a> is\n          allowed within <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <span>and <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>.</p>\n\n          <p><a name = \"err-XTSE0670\" id = \"err-XTSE0670\"><span class = \"error\">[ERR XTSE0670]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a single <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n          element contains two or more <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          elements with <span>matching <code>name</code>\n          attributes</span>.</p>\n\n          <p>The value of the parameter is specified in the same\n          way as for <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> and\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> (see\n          <a href = \"#variable-values\"><i>9.3 Values of Variables and\n          Parameters</i></a>)<span>, taking account of the values\n          of the <code>select</code> and <code>as</code> attributes\n          and the content of the <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          element, if any.</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It is possible to have an <code>as</code> attribute\n            on the <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n            element that differs from the <code>as</code> attribute\n            on the corresponding <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n            describing the formal parameters of the called\n            template.</p>\n\n            <p>In this situation, the supplied value of the\n            parameter will first be processed according to the\n            rules of the <code>as</code> attribute on the <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n            element, and the resulting value will then be further\n            processed according to the rules of the <code>as</code>\n            attribute on the <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n            element.</p>\n\n            <p>For example, suppose the supplied value is a node\n            with <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>\n            <span><code>xs:untypedAtomic</code></span>, and the\n            <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n            element specifies <code>as=\"xs:integer\"</code>, while\n            the <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n            element specifies <code>as=\"xs:double\"</code>. Then the\n            node will first be atomized and the resulting untyped\n            atomic value will be cast to <code>xs:integer</code>.\n            If this succeeds, the <code>xs:integer</code> will then\n            be promoted to an <code>xs:double</code>.</p>\n          </div>\n\n          <p>The <a title = \"focus\" href = \"#dt-focus\">focus</a> used\n          for computing the value specified by the <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          element is the same as that used for the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>, or\n          <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          element within which it occurs.</p>\n\n          <p><a name = \"err-XTSE0680\" id = \"err-XTSE0680\"><span class = \"error\">[ERR XTSE0680]</span></a> In the case of <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> to pass a\n          <span>non-tunnel</span> parameter named <var>x</var> to a\n          template that does not have a <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> named\n          <var>x</var><span>, unless <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled for the <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          instruction</span>. This is not an error in the case of\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <span>and <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>;\n          in these cases the parameter is simply ignored.</p>\n\n          <p>The optional <code>tunnel</code> attribute may be used\n          to indicate that a parameter is a <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel\n          parameter</a>. The default is <code>no</code>. Tunnel\n          parameters are described in <a href = \"#tunnel-params\"><i>10.1.2 Tunnel Parameters</i></a></p>\n\n          <p><a name = \"err-XTSE0690\" id = \"err-XTSE0690\"><span class = \"error\">[ERR XTSE0690]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a template that is invoked using <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          declares a <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a>\n          specifying <code>required=\"yes\"</code> <span>and not\n          specifying <code>tunnel=\"yes\"</code></span>, if no value\n          for this parameter is supplied by the calling\n          instruction.</p>\n\n          <p><a name = \"err-XTDE0700\" id = \"err-XTDE0700\"><span class = \"error\">[ERR XTDE0700]</span></a> In other cases, it is a\n          <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the template that is invoked declares a\n          <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> with\n          <code>required=\"yes\"</code> and no value for this\n          parameter is supplied by the calling instruction.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e13826\" id = \"d5e13826\"></a>Example: A Named\n              Template\n            </div>\n\n            <p>This example defines a named template for a\n            <code>numbered-block</code> with an argument to control\n            the format of the number.</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:template name=\"numbered-block\"&gt;\n  &lt;xsl:param name=\"format\"&gt;1. &lt;/xsl:param&gt;\n  &lt;fo:block&gt;\n    &lt;xsl:number format=\"{$format}\"/&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"ol//ol/li\"&gt;\n  &lt;xsl:call-template name=\"numbered-block\"&gt;\n    &lt;xsl:with-param name=\"format\"&gt;a. &lt;/xsl:with-param&gt;\n  &lt;/xsl:call-template&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Arguments to <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a> are\n            supplied as part of an XPath function call: see\n            <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n            Functions</i></a></p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"tunnel-params\" id = \"tunnel-params\"></a>10.1.2\n          Tunnel Parameters</h4>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-tunnel-parameter\" id = \"dt-tunnel-parameter\" title = \"tunnel parameter\"></a>A parameter passed to a template\n          may be defined as a <b>tunnel parameter</b>. Tunnel\n          parameters have the property that they are automatically\n          passed on by the called template to any further templates\n          that it calls, and so on recursively.<span class = \"definition\">]</span> Tunnel parameters thus allow values\n          to be set that are accessible during an entire phase of\n          stylesheet processing, without the need for each template\n          that is used during that phase to be aware of the\n          parameter.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Tunnel parameters are conceptually similar to\n            dynamically-scoped variables in some functional\n            programming languages.</p>\n          </div>\n\n          <p>A <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameter</a> is created by\n          using an <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          element that specifies <code>tunnel=\"yes\"</code>. A\n          template that requires access to the value of a tunnel\n          parameter must declare it using an <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element that\n          also specifies <code>tunnel=\"yes\"</code>.</p>\n\n          <p>On any template call using an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n          or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n          instruction, a set of <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameters</a> is passed\n          from the calling template to the called template. This\n          set consists of any parameters explicitly created using\n          <code>&lt;xsl:with-param tunnel=\"yes\"&gt;</code>,\n          overlaid on a base set of tunnel parameters. If the\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n          or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n          instruction has an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n          declaration as an ancestor element in the stylesheet,\n          then the base set consists of the tunnel parameters that\n          were passed to that template; otherwise (for example, if\n          the instruction is within a global variable declaration,\n          an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute set</a> declaration, or a\n          <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>), the\n          base set is empty. If a parameter created using\n          <code>&lt;xsl:with-param tunnel=\"yes\"&gt;</code> has the\n          same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> as a parameter in\n          the base set, then the parameter created using <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          overrides the parameter in the base set; otherwise, the\n          parameter created using <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a> is\n          added to the base set.</p>\n\n          <p>When a template accesses the value of a <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel\n          parameter</a> by declaring it with <code>xsl:param\n          tunnel=\"yes\"</code>, this does not remove the parameter\n          from the base set of tunnel parameters that is passed on\n          to any templates called by this template.</p>\n\n          <p>Two sibling <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          elements must have distinct parameter names, even if one\n          is a <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameter</a> and the other\n          is not. Equally, two sibling <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> elements\n          representing <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameters</a> must\n          have distinct parameter names, even if one is a <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel\n          parameter</a> and the other is not. However, the tunnel\n          parameters that are implicitly passed in a template call\n          may have names that duplicate the names of non-tunnel\n          parameters that are explicitly passed on the same\n          call.</p>\n\n          <p><a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">Tunnel parameters</a> are not\n          passed in calls to <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a>.</p>\n\n          <p>All other options of <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a> and\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> are\n          available with <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameters</a> just as with\n          non-tunnel parameters. For example, parameters may be\n          declared as mandatory or optional, a default value may be\n          specified, and a required type may be specified. If any\n          conversion is required from the supplied value of a\n          tunnel parameter to the required type specified in\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>, then\n          the converted value is used within the receiving\n          template, but the value that is passed on in any further\n          template calls is the original supplied value before\n          conversion. Equally, any default value is local to the\n          template: specifying a default value for a tunnel\n          parameter does not change the set of tunnel parameters\n          that is passed on in further template calls.</p>\n\n          <p>The set of <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameters</a> that is\n          passed to the <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> is empty.</p>\n\n          <p><a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">Tunnel parameters</a> are passed\n          unchanged through a built-in template rule (see <a href = \"#built-in-rule\"><i>6.6 Built-in Template\n          Rules</i></a>).</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e13990\" id = \"d5e13990\"></a>Example: Using\n              Tunnel Parameters\n            </div>\n\n            <p>Suppose that the equations in a scientific paper are\n            to be sequentially numbered, but that the format of the\n            number depends on the context in which the equations\n            appear. It is possible to reflect this using a rule of\n            the form:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:template match=\"equation\"&gt;\n  &lt;xsl:param name=\"equation-format\" select=\"'(1)'\" tunnel=\"yes\"/&gt;\n  &lt;xsl:number level=\"any\" format=\"{$equation-format}\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n\n            <p>At any level of processing above this level, it is\n            possible to determine how the equations will be\n            numbered, for example:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:template match=\"appendix\"&gt;\n  ...\n  &lt;xsl:apply-templates&gt;\n    &lt;xsl:with-param name=\"equation-format\" select=\"'[i]'\" tunnel=\"yes\"/&gt;\n  &lt;/xsl:apply-templates&gt;\n  ...\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n\n            <p>The parameter value is passed transparently through\n            all the intermediate layers of template rules until it\n            reaches the rule with <code>match=\"equation\"</code>.\n            The effect is similar to using a global variable,\n            except that the parameter can take different values\n            during different phases of the transformation.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"attribute-sets\" id = \"attribute-sets\"></a>10.2\n        Named Attribute Sets</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-attribute-set\" id = \"XSLT_element-attribute-set\"></a><code>&lt;!-- Category:\n        declaration --&gt;<br/>\n        &lt;xsl:attribute-set<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var><br/>\n        &#160;&#160;use-attribute-sets? =\n        <var>qnames</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-attribute\">xsl:attribute</a>* --&gt;<br/>\n        &lt;/xsl:attribute-set&gt;</code></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-attribute-set\" id = \"dt-attribute-set\" title = \"attribute set\"></a>The <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        element defines a named <b>attribute set</b>: that is, a\n        collection of attribute <span>definitions</span> that can\n        be used repeatedly on different constructed\n        elements.<span class = \"definition\">]</span></p>\n\n        <p>The <span class = \"verb\">required</span> <code>name</code>\n        attribute specifies the name of the attribute set. The\n        value of the <code>name</code> attribute is a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is expanded as\n        described in <a href = \"#qname\"><i>5.1 Qualified\n        Names</i></a>. The content of the <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        element consists of zero or more <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instructions that are evaluated to produce the attributes\n        in the set.</p>\n\n        <p>The result of evaluating an attribute set is a sequence\n        of attribute nodes. Evaluating the same attribute set more\n        than once can produce different results, because although\n        an attribute set does not have parameters, it may contain\n        expressions or instructions whose value depends on the\n        evaluation context.</p>\n\n        <p><a title = \"attribute set\" href = \"#dt-attribute-set\">Attribute sets</a> are used by\n        specifying a <code>use-attribute-sets</code> attribute on\n        the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n        or <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n        instruction, or by specifying an\n        <code>xsl:use-attribute-sets</code> attribute on a literal\n        result element. An attribute set may be defined in terms of\n        other attribute sets by using the\n        <code>use-attribute-sets</code> attribute on the <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        element itself. The value of the\n        <code>[xsl:]use-attribute-sets</code> attribute is in each\n        case a whitespace-separated list of names of attribute\n        sets. Each name is specified as a <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is expanded as described in\n        <a href = \"#qname\"><i>5.1 Qualified Names</i></a>.</p>\n\n        <p>Specifying a <code>use-attribute-sets</code> attribute\n        is broadly equivalent to adding <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instructions for each of the attributes in each of the\n        named attribute sets to the beginning of the content of the\n        instruction with the <code>[xsl:]use-attribute-sets</code>\n        attribute, in the same order in which the names of the\n        attribute sets are specified in the\n        <code>use-attribute-sets</code> attribute.</p>\n\n        <p>More formally, an <code>xsl:use-attribute-sets</code>\n        attribute is expanded using the following recursive\n        algorithm, or any algorithm that produces the same\n        results:</p>\n\n        <ul>\n          <li>\n            <p>The value of the attribute is tokenized as a list of\n            QNames.</p>\n          </li>\n\n          <li>\n            <p>Each QName in the list is processed, in order, as\n            follows:</p>\n\n            <ul>\n              <li>\n                <p>The QName must match the <code>name</code>\n                attribute of one or more <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n                declarations in the stylesheet.</p>\n              </li>\n\n              <li>\n                <p>Each <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n                declaration whose name matches is processed as\n                follows. Where two such declarations have different\n                <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>, the\n                one with lower import precedence is processed\n                first. Where two declarations have the same import\n                precedence, they are processed in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</p>\n\n                <ul>\n                  <li>\n                    <p>If the <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n                    declaration has a\n                    <code>use-attribute-sets</code> attribute, the\n                    attribute is expanded by applying this\n                    algorithm recursively.</p>\n                  </li>\n\n                  <li>\n                    <p>If the <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n                    declaration contains one or more <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n                    instructions, these instructions are evaluated\n                    (following the rules for evaluating a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n                    constructor</a>: see <a href = \"#sequence-constructors\"><i>5.7 Sequence\n                    Constructors</i></a>) to produce a sequence of\n                    attribute nodes. These attribute nodes are\n                    appended to the result sequence.</p>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n\n        <p>The <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instructions are evaluated using the same <a title = \"focus\" href = \"#dt-focus\">focus</a> as is used for evaluating the\n        element that is the parent of the\n        <code>[xsl:]use-attribute-sets</code> attribute forming the\n        initial input to the algorithm. However, the static context\n        for the evaluation depends on the position of the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction in the stylesheet: thus, only local variables\n        declared within an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction, and global variables, are visible.</p>\n\n        <p>The set of attribute nodes produced by expanding\n        <code>xsl:use-attribute-sets</code> may include several\n        attributes with the same name. When the attributes are\n        added to an element node, only the last of the duplicates\n        will take effect.</p>\n\n        <p>The way in which each instruction uses the results of\n        expanding the <code>[xsl:]use-attribute-sets</code>\n        attribute is described in the specification for the\n        relevant instruction: see <a href = \"#literal-result-element\"><i>11.1 Literal Result\n        Elements</i></a>, <a href = \"#xsl-element\"><i>11.2 Creating\n        Element Nodes Using xsl:element</i></a> , and <a href = \"#copying\"><i>11.9 Copying Nodes</i></a>.</p>\n\n        <p><a name = \"err-XTSE0710\" id = \"err-XTSE0710\"><span class = \"error\">[ERR XTSE0710]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the value of the <code>use-attribute-sets</code> attribute\n        of an <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n        <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, or\n        <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        element, or the <code>xsl:use-attribute-sets</code>\n        attribute of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>, is\n        not a <span>whitespace-separated</span> sequence of\n        <a title = \"QName\" href = \"#dt-qname\">QNames</a>, or if it\n        contains a QName that does not match the <code>name</code>\n        attribute of any <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        declaration in the stylesheet.</p>\n\n        <p><a name = \"err-XTSE0720\" id = \"err-XTSE0720\"><span class = \"error\">[ERR XTSE0720]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        element directly or indirectly references itself via the\n        names contained in the <code>use-attribute-sets</code>\n        attribute.</p>\n\n        <p>Each attribute node produced by expanding an attribute\n        set has a <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> determined by the\n        rules for the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction that created the attribute node: see <a href = \"#annotation-for-constructed-attribute\"><i>11.3.1 Setting\n        the Type Annotation for a Constructed Attribute\n        Node</i></a>. These type annotations may be preserved,\n        stripped, or replaced as determined by the rules for the\n        instruction that creates the element in which the\n        attributes are used.</p>\n\n        <p>Attribute sets are used as follows:</p>\n\n        <ul>\n          <li>\n            <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> and <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n            instructions have an <code>use-attribute-sets</code>\n            attribute. The sequence of attribute nodes produced by\n            evaluating this attribute is prepended to the sequence\n            produced by evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n            contained within the instruction.</p>\n          </li>\n\n          <li>\n            <p><a title = \"literal result element\" href = \"#dt-literal-result-element\">Literal result\n            elements</a> allow an\n            <code>xsl:use-attribute-sets</code> attribute, which is\n            evaluated in the same way as the\n            <code>use-attribute-sets</code> attribute of <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> and\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>. The\n            sequence of attribute nodes produced by evaluating this\n            attribute is prepended to the sequence of attribute\n            nodes produced by evaluating the attributes of the\n            literal result element, which in turn is prepended to\n            the sequence produced by evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n            contained with the literal result element.</p>\n          </li>\n        </ul>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e14293\" id = \"d5e14293\"></a>Example: Using\n            Attribute Sets\n          </div>\n\n          <p>The following example creates a named <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute\n          set</a> <code>title-style</code> and uses it in a\n          <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"chapter/heading\"&gt;\n  &lt;fo:block font-stretch=\"condensed\" xsl:use-attribute-sets=\"title-style\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:attribute-set name=\"title-style\"&gt;\n  &lt;xsl:attribute name=\"font-size\"&gt;12pt&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"font-weight\"&gt;bold&lt;/xsl:attribute&gt;\n&lt;/xsl:attribute-set&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e14309\" id = \"d5e14309\"></a>Example:\n            Overriding Attributes in an Attribute Set\n          </div>\n\n          <p>The following example creates a named attribute set\n          <code>base-style</code> and uses it in a template rule\n          with multiple specifications of the attributes:</p>\n\n          <dl>\n            <dt class = \"label\">font-family</dt>\n\n            <dd>\n              <p>is specified only in the attribute set</p>\n            </dd>\n\n            <dt class = \"label\">font-size</dt>\n\n            <dd>\n              <p>is specified in the attribute set, is specified on\n              the literal result element, and in an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n              instruction</p>\n            </dd>\n\n            <dt class = \"label\">font-style</dt>\n\n            <dd>\n              <p>is specified in the attribute set, and on the\n              literal result element</p>\n            </dd>\n\n            <dt class = \"label\">font-weight</dt>\n\n            <dd>\n              <p>is specified in the attribute set, and in an\n              <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n              instruction</p>\n            </dd>\n          </dl>\n\n          <p>Stylesheet fragment:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:attribute-set name=\"base-style\"&gt;\n  &lt;xsl:attribute name=\"font-family\"&gt;Univers&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"font-size\"&gt;10pt&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"font-style\"&gt;normal&lt;/xsl:attribute&gt;\n  &lt;xsl:attribute name=\"font-weight\"&gt;normal&lt;/xsl:attribute&gt;\n&lt;/xsl:attribute-set&gt;\n\n&lt;xsl:template match=\"o\"&gt;\n  &lt;fo:block xsl:use-attribute-sets=\"base-style\"\n            font-size=\"12pt\"\n            font-style=\"italic\"&gt;\n    &lt;xsl:attribute name=\"font-size\"&gt;14pt&lt;/xsl:attribute&gt;\n    &lt;xsl:attribute name=\"font-weight\"&gt;bold&lt;/xsl:attribute&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>Result:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;fo:block font-family=\"Univers\"\n          font-size=\"14pt\"\n          font-style=\"italic\"\n          font-weight=\"bold\"&gt;\n...\n&lt;/fo:block&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"stylesheet-functions\" id = \"stylesheet-functions\"></a>10.3 Stylesheet Functions</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stylesheet-function\" id = \"dt-stylesheet-function\" title = \"stylesheet function\"></a>An <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n        declaration declares the name, parameters, and\n        implementation of a <b>stylesheet function</b> that can be\n        called from any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> within the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.<span class = \"definition\">]</span></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-function\" id = \"XSLT_element-function\"></a><code>&lt;!-- Category: declaration\n        --&gt;<br/>\n        &lt;xsl:function<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var><br/>\n        &#160;&#160;as? = <var>sequence-type</var><br/>\n        &#160;&#160;override? = \"yes\" | \"no\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-param\">xsl:param</a>*,\n        <var>sequence-constructor</var>) --&gt;<br/>\n        &lt;/xsl:function&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n        declaration defines a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> that can\n        be called from any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> used in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        (including an XPath expression used within a predicate in a\n        <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>). The\n        <code>name</code> attribute specifies the name of the\n        function. The value of the <code>name</code> attribute is a\n        <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is\n        expanded as described in <a href = \"#qname\"><i>5.1 Qualified\n        Names</i></a>.</p>\n\n        <p>An <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n        declaration can only appear as a top-level element in a\n        <span>stylesheet module</span>.</p>\n\n        <p><a name = \"err-XTSE0740\" id = \"err-XTSE0740\"><span class = \"error\">[ERR XTSE0740]</span></a> A <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>\n        <span class = \"verb\">must</span> have a prefixed name, to\n        remove any risk of a clash with a function in the default\n        function namespace. It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the name has no\n        prefix..</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>To prevent the namespace declaration used for the\n          function name appearing in the result document, use the\n          <code>exclude-result-prefixes</code> attribute on the\n          <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element: see <a href = \"#lre-namespaces\"><i>11.1.3\n          Namespace Nodes for Literal Result Elements</i></a>.</p>\n\n          <p>The prefix <span class = \"verb\">must not</span> refer to\n          a <a title = \"reserved namespace\" href = \"#dt-reserved-namespace\">reserved namespace</a>:\n          <span class = \"error\">[see <a href = \"#err-XTSE0080\">ERR\n          XTSE0080</a>]</span></p>\n        </div>\n\n        <p>The content of the <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> element\n        consists of zero or more <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> elements that\n        specify the formal arguments of the function, followed by\n        <span>a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n        defines the value to be returned by the\n        function.</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-arity\" id = \"dt-arity\" title = \"arity\"></a>The <b>arity</b> of a\n        stylesheet function is the number of <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> elements in the\n        function definition.<span class = \"definition\">]</span>\n        Optional arguments are not allowed.</p>\n\n        <p><a name = \"err-XTSE0760\" id = \"err-XTSE0760\"><span class = \"error\">[ERR XTSE0760]</span></a> Because arguments to a\n        stylesheet function call <span class = \"verb\">must</span> all\n        be specified, the <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> elements within\n        an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> element\n        <span class = \"verb\">must not</span> specify a default value:\n        this means they <span class = \"verb\">must</span> be empty,\n        and <span class = \"verb\">must not</span> have a\n        <code>select</code> attribute.</p>\n\n        <p>A <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> is\n        included in the <em>in-scope functions</em> of the static\n        context for all XPath expressions used in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>,\n        unless</p>\n\n        <ul>\n          <li>\n            <p>there is another <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>\n            with the same name and <a title = \"arity\" href = \"#dt-arity\">arity</a>, and higher <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n            precedence</a>, or</p>\n          </li>\n\n          <li>\n            <p>the <code>override</code> attribute has the value\n            <code>no</code> and there is already a function with\n            the same name and <a title = \"arity\" href = \"#dt-arity\">arity</a> in the in-scope functions.</p>\n          </li>\n        </ul>\n\n        <p>The optional <code>override</code> attribute defines\n        what happens if this function has the same name and\n        <a title = \"arity\" href = \"#dt-arity\">arity</a> as a function\n        provided by the implementer or made available in the static\n        context using an implementation-defined mechanism. If the\n        <code>override</code> attribute has the value\n        <code>yes</code>, then this function is used in preference;\n        if it has the value <code>no</code>, then the other\n        function is used in preference. The default value is\n        <code>yes</code>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Specifying <code>override=\"yes\"</code> ensures\n          interoperable behavior: the same code will execute with\n          all processors. Specifying <code>override=\"no\"</code> is\n          useful when writing a fallback implementation of a\n          function that is available with some processors but not\n          others: it allows the vendor's implementation of the\n          function <span>(or a user's implementation written as an\n          extension function)</span> to be used in preference to\n          the stylesheet implementation, which is useful when the\n          <span>extension function</span> is more efficient.</p>\n\n          <p>The <code>override</code> attribute does <em>not</em>\n          affect the rules for deciding which of several <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet functions</a> with\n          the same name and <a title = \"arity\" href = \"#dt-arity\">arity</a> takes precedence.</p>\n        </div>\n\n        <p><a name = \"err-XTSE0770\" id = \"err-XTSE0770\"><span class = \"error\">[ERR XTSE0770]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> for\n        a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to contain two or more\n        functions with the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>, the same <a title = \"arity\" href = \"#dt-arity\">arity</a>, and the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n        precedence</a>, unless there is another function with the\n        same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> and arity, and a\n        higher import precedence.</p>\n\n        <p>As defined in XPath, the function that is executed as\n        the result of a function call is identified by looking in\n        the in-scope functions of the static context for a function\n        whose name and <a title = \"arity\" href = \"#dt-arity\">arity</a>\n        matches the name and number of arguments in the function\n        call.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Functions are not polymorphic. Although the XPath\n          function call mechanism allows two functions to have the\n          same name and different <a title = \"arity\" href = \"#dt-arity\">arity</a>, it does not allow them to be\n          distinguished by the types of their arguments.</p>\n        </div>\n\n        <p>The optional <code>as</code> attribute indicates the\n        <a title = \"required type\" href = \"#dt-required-type\">required\n        type</a> of the result of the function. The value of the\n        <code>as</code> attribute is a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-SequenceType\">SequenceType</a><sup>\n        <small>XP</small></sup>, as defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n\n        <p><a name = \"err-XTTE0780\" id = \"err-XTTE0780\"><span class = \"error\">[ERR XTTE0780]</span></a> If the <code>as</code>\n        attribute is specified, then the result evaluated by the\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> (see\n        <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>) is converted to the required type,\n        using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>. It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if this conversion fails.\n        If the <code>as</code> attribute is omitted, the calculated\n        result is used as supplied, and no conversion takes\n        place.</p>\n\n        <p>If a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> has been\n        defined with a particular <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>, then a call on\n        <a href = \"#function-function-available\"><code>function-available</code></a>\n        will return true when called with an argument that is a\n        <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n        QName</a> that expands to this same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>.</p>\n\n        <p>The <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n        elements define the formal arguments to the function. These\n        are interpreted positionally. When the function is called\n        using a function-call in an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>, the first argument\n        supplied is assigned to the first <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element, the\n        second argument supplied is assigned to the second <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element, and so\n        on.</p>\n\n        <p>The <code>as</code> attribute of the <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element defines\n        the required type of the parameter. The rules for\n        converting the values of the actual arguments supplied in\n        the function call to the types required by each <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element are\n        defined in <a href = \"#xpath20\">[XPath 2.0]</a>. The rules\n        that apply are those for the case where <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n        is set to <code>false</code>.</p>\n\n        <p><a name = \"err-XTTE0790\" id = \"err-XTTE0790\"><span class = \"error\">[ERR XTTE0790]</span></a> If the value of a\n        parameter to a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> cannot be\n        converted to the required type, a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> is signaled.</p>\n\n        <p>If the <code>as</code> attribute is omitted, no\n        conversion takes place and any value is accepted.</p>\n\n        <p>Within the body of a stylesheet function, the <a title = \"focus\" href = \"#dt-focus\">focus</a> is initially undefined;\n        this means that any attempt to reference the context item,\n        context position, or context size is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a>. <span>[XPDY0002]</span></p>\n\n        <p>It is not possible within the body of the <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> to access\n        the values of local variables that were in scope in the\n        place where the function call was written. Global\n        variables, however, remain available.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e14761\" id = \"d5e14761\"></a>Example: A\n            Stylesheet Function\n          </div>\n\n          <p>The following example creates a recursive <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> named\n          <code>str:reverse</code> that reverses the words in a\n          supplied sentence, and then invokes this function from\n          within a <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a>.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:transform \n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n  xmlns:str=\"http://example.com/namespace\"\n  version=\"2.0\"\n  exclude-result-prefixes=\"str\"&gt;\n\n&lt;xsl:function name=\"str:reverse\" as=\"xs:string\"&gt;\n  &lt;xsl:param name=\"sentence\" as=\"xs:string\"/&gt;\n  &lt;xsl:sequence  \n     select=\"if (contains($sentence, ' '))\n             then concat(str:reverse(substring-after($sentence, ' ')),\n                         ' ',\n                         substring-before($sentence, ' '))\n             else $sentence\"/&gt;\n&lt;/xsl:function&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n&lt;output&gt;\n  &lt;xsl:value-of select=\"str:reverse('DOG BITES MAN')\"/&gt;\n&lt;/output&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:transform&gt;\n</pre>\n          </div>\n\n          <p>An alternative way of writing the same function is to\n          implement the conditional logic at the XSLT level,\n          thus:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:function name=\"str:reverse\" as=\"xs:string\"&gt;\n  &lt;xsl:param name=\"sentence\" as=\"xs:string\"/&gt;\n  &lt;xsl:choose&gt;\n    &lt;xsl:when test=\"contains($sentence, ' ')\"&gt;  \n      &lt;xsl:sequence select=\"concat(str:reverse(substring-after($sentence, ' ')),\n                                ' ',\n                                substring-before($sentence, ' '))\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n      &lt;xsl:sequence select=\"$sentence\"/&gt;\n    &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n&lt;/xsl:function&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e14781\" id = \"d5e14781\"></a>Example: Declaring\n            the Return Type of a Function\n          </div>\n\n          <p>The following example illustrates the use of the\n          <code>as</code> attribute in a function definition. It\n          returns a string containing the representation of its\n          integer argument, expressed as a roman numeral. For\n          example, the function call <code>num:roman(7)</code> will\n          return the string <code>\"vii\"</code>. This example uses\n          the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n          instruction, described in <a href = \"#number\"><i>12\n          Numbering</i></a>. The <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n          returns a text node, and the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n          rules</a> are invoked to convert this text node to the\n          type declared in the <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n          element, namely <code>xs:string</code>. So the text node\n          is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>\n          to a string.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:function name=\"num:roman\" as=\"xs:string\"&gt;\n  &lt;xsl:param name=\"value\" as=\"xs:integer\"/&gt;\n  &lt;xsl:number value=\"$value\" format=\"i\"/&gt;\n&lt;/xsl:function&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"creating-new-nodes\" id = \"creating-new-nodes\"></a>11 Creating Nodes and Sequences</h2>\n\n      <p>This section describes instructions that directly create\n      new nodes, or sequences of nodes and atomic values.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"literal-result-element\" id = \"literal-result-element\"></a>11.1 Literal Result\n        Elements</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-literal-result-element\" id = \"dt-literal-result-element\" title = \"literal result element\"></a>In a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, an\n        element in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that does not belong to the\n        <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n        namespace</a> and that is not an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a> (see\n        <a href = \"#extension-instruction\"><i>18.2 Extension\n        Instructions</i></a>) is classified as a <b>literal result\n        element</b>.<span class = \"definition\">]</span> A literal\n        result element is evaluated to construct a new element node\n        with the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> <span>(that is, the\n        same namespace URI, local name, and namespace\n        prefix)</span>. The result of evaluating a literal result\n        element is a node sequence containing one element, the\n        newly constructed element node.</p>\n\n        <p>The content of the element is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> (see\n        <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>). The sequence obtained by evaluating\n        this sequence constructor, after prepending any attribute\n        nodes produced as described in <a href = \"#attributes-for-lres\"><i>11.1.2 Attribute Nodes for\n        Literal Result Elements</i></a> and namespace nodes\n        produced as described in <a href = \"#lre-namespaces\"><i>11.1.3 Namespace Nodes for Literal\n        Result Elements</i></a>, is used to construct the content\n        of the element, following the rules in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a></p>\n\n        <p>The base URI of the new element is copied from the base\n        URI of the literal result element in the stylesheet, unless\n        the content of the new element includes an\n        <code>xml:base</code> attribute, in which case the base URI\n        of the new element is the value of that attribute, resolved\n        (if it is a relative URI) against the base URI of the\n        literal result element in the stylesheet. (Note, however,\n        that this is only relevant when creating a parentless\n        element. When the literal result element is copied to form\n        a child of an element or document node, the base URI of the\n        new copy is taken from that of its new parent.)</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"setting-annotation-for-lre\" id = \"setting-annotation-for-lre\"></a>11.1.1 Setting the Type\n          Annotation for Literal Result Elements</h4>\n\n          <p>The attributes <code>xsl:type</code> and\n          <code>xsl:validation</code> may be used on a literal\n          result element to invoke validation of the contents of\n          the element against a type definition or element\n          declaration in a schema, and to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotation</a> that the new element node will carry.\n          These attributes also affect the type annotation carried\n          by any elements and attributes that have the new element\n          node as an ancestor. These two attributes are both\n          optional, and if one is specified then the other\n          <span class = \"verb\">must</span> be omitted.</p>\n\n          <p>The value of the <code>xsl:validation</code>\n          attribute, if present, must be one of the values\n          <code>strict</code>, <code>lax</code>,\n          <code>preserve</code>, or <code>strip</code>. The value\n          of the <code>xsl:type</code> attribute, if present, must\n          be a <a title = \"QName\" href = \"#dt-qname\">QName</a>\n          identifying a type definition that is present in the\n          <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n          components</a> for the stylesheet. Neither attribute may\n          be specified as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template.</a> The effect of these attributes is described\n          in <a href = \"#validation\"><i>19.2 Validation</i></a>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"attributes-for-lres\" id = \"attributes-for-lres\"></a>11.1.2 Attribute Nodes for\n          Literal Result Elements</h4>\n\n          <p>Attribute nodes for a literal result element may be\n          created by including <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instructions within the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.\n          Additionally, attribute nodes are created corresponding\n          to the attributes of the literal result element in the\n          stylesheet, and as a result of expanding the\n          <code>xsl:use-attribute-sets</code> attribute of the\n          literal result element, if present.</p>\n\n          <p>The sequence that is used to construct the content of\n          the literal result element (as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n          Complex Content</i></a>) is the concatenation of the\n          following four sequences, in order:</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>The sequence of namespace nodes produced as\n              described in <a href = \"#lre-namespaces\"><i>11.1.3\n              Namespace Nodes for Literal Result\n              Elements</i></a>.</p>\n            </li>\n\n            <li>\n              <p>The sequence of attribute nodes produced by\n              expanding the <code>xsl:use-attribute-sets</code>\n              attribute (if present) following the rules given in\n              <a href = \"#attribute-sets\"><i>10.2 Named Attribute\n              Sets</i></a></p>\n            </li>\n\n            <li>\n              <p>The attributes produced by processing the\n              attributes of the literal result element itself,\n              other than attributes in the <a title = \"\" href = \"#xslt-namespace\">XSLT namespace</a>. The way these\n              are processed is described below.</p>\n            </li>\n\n            <li>\n              <p>The sequence produced by evaluating the contained\n              <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n              if the element is not empty.</p>\n            </li>\n          </ol>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The significance of this order is that an attribute\n            produced by an <code>xsl:attribute</code><span>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, or\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a></span>\n            instruction in the content of the literal result\n            element takes precedence over an attribute produced by\n            expanding an attribute of the literal result element\n            itself, which in turn takes precedence over an\n            attribute produced by expanding the\n            <code>xsl:use-attribute-sets</code> attribute. This is\n            because of the rules in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n            Complex Content</i></a>, which specify that when two or\n            more attributes in the sequence have the same name, all\n            but the last of the duplicates are discarded.</p>\n\n            <p>Although the above rules place namespace nodes\n            before attributes, this is not strictly necessary,\n            because the rules in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n            Complex Content</i></a> allow the namespaces and\n            attributes to appear in any order so long as both come\n            before other kinds of node. The order of namespace\n            nodes and attribute nodes in the sequence has no effect\n            on the relative position of the nodes in document order\n            once they are added to a tree.</p>\n          </div>\n\n          <p>Each attribute of the literal result element, other\n          than an attribute in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>, is processed to\n          produce an attribute for the element in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n\n          <p>The value of such an attribute is interpreted as an\n          <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a>: it can therefore contain <a title = \"expression\" href = \"#dt-expression\">expressions</a>\n          contained in curly brackets (<code>{}</code>). The new\n          attribute node will have the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> <span>(that is,\n          the same namespace URI, local name, and namespace\n          prefix)</span> as the attribute in the stylesheet tree,\n          and its <a title = \"string value\" href = \"#dt-string-value\">string value</a> will be the same as\n          the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          attribute in the stylesheet tree. The <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotation</a> on the attribute will initially be\n          <span><code>xs:untypedAtomic</code></span>, and the\n          <a title = \"typed value\" href = \"#dt-typed-value\">typed\n          value</a> of the attribute node will be the same as its\n          <a title = \"string value\" href = \"#dt-string-value\">string\n          value</a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The eventual <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of the attribute\n            in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> depends on the\n            <code>xsl:validation</code> and <code>xsl:type</code>\n            attributes of the parent literal result element, and on\n            the instructions used to create its ancestor elements.\n            If the <code>xsl:validation</code> attribute is set to\n            <code>preserve</code> or <code>strip</code>, the type\n            annotation will be\n            <span><code>xs:untypedAtomic</code></span>, and the\n            <a title = \"typed value\" href = \"#dt-typed-value\">typed\n            value</a> of the attribute node will be the same as its\n            <a title = \"string value\" href = \"#dt-string-value\">string\n            value</a>. If the <code>xsl:validation</code> attribute\n            is set to <code>strict</code> or <code>lax</code>, or\n            if the <code>xsl:type</code> attribute is used, the\n            type annotation on the attribute will be set as a\n            result of the schema validation process applied to the\n            parent element. If neither attribute is present, the\n            type annotation on the attribute will be\n            <span><code>xs:untypedAtomic</code></span>.</p>\n          </div>\n\n          <p>If the name of a constructed attribute is\n          <code>xml:id</code>, the processor must perform attribute\n          value normalization by effectively applying the <a href = \"http://www.w3.org/TR/xpath-functions/#func-normalize-space\">\n          <code>normalize-space</code></a><sup><small>FO</small></sup>\n          function to the value of the attribute, and the resulting\n          attribute node must be given the <code>is-id</code>\n          property.</p>\n\n          <p><a name = \"err-XTRE0795\" id = \"err-XTRE0795\"><span class = \"error\">[ERR XTRE0795]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          the name of a constructed attribute is\n          <code>xml:space</code> and the value is not either\n          <code>default</code> or <code>preserve</code>. The\n          <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to construct the attribute with the value\n          as requested.. This applies whether the attribute is\n          constructed using a literal result element, or by using\n          the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, or\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instructions.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The <code>xml:base</code>, <code>xml:lang</code>,\n            <code>xml:space</code>, and <code>xml:id</code>\n            attributes have two effects in XSLT. They behave as\n            standard XSLT attributes, which means for example that\n            if they appear on a literal result element, they will\n            be copied to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> in the same way as\n            any other attribute. In addition, they have their\n            standard meaning as defined in the core XML\n            specifications. Thus, an <code>xml:base</code>\n            attribute in the stylesheet affects the base URI of the\n            element on which it appears, and an\n            <code>xml:space</code> attribute affects the\n            interpretation of <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a>\n            within that element. One consequence of this is that it\n            is inadvisable to write these attributes as attribute\n            value templates: although an XSLT processor will\n            understand this notation, the XML parser will not. See\n            also <a href = \"#namespace-aliasing\"><i>11.1.4 Namespace\n            Aliasing</i></a> which describes how to use <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n            with these attributes.</p>\n\n            <p>The same is true of the schema-defined attributes\n            <code>xsi:type</code>, <code>xsi:nil</code>,\n            <span><code>xsi:noNamespaceSchemaLocation</code></span>,\n            and <code>xsi:schemaLocation</code>. If the stylesheet\n            is processed by a schema processor, these attributes\n            will be recognized and interpreted by the schema\n            processor, but <span>in addition the XSLT processor\n            treats them like any other attribute on a literal\n            result element: that is, their <a title = \"effective value\" href = \"#dt-effective-value\">effective\n            value</a> (after expanding <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n            templates</a>) is copied to the result tree in the same\n            way as any other attribute.</span> If the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> is\n            validated, the copied attributes will again be\n            recognized and interpreted by the schema processor.</p>\n\n            <p>None of these attributes will be generated in the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a> unless the stylesheet writes them to the\n            result tree explicitly, in the same way as any other\n            attribute.</p>\n          </div>\n\n          <p><a name = \"err-XTSE0805\" id = \"err-XTSE0805\"><span class = \"error\">[ERR XTSE0805]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if an attribute on a literal result element is in the\n          <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, unless it is one of the attributes\n          explicitly defined in this specification.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>If there is a need to create attributes in the XSLT\n            namespace, this can be achieved using <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>, or\n            by means of the <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n            declaration.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"lre-namespaces\" id = \"lre-namespaces\"></a>11.1.3 Namespace Nodes for Literal\n          Result Elements</h4>\n\n          <p>The created element node will have a copy of the\n          namespace nodes that were present on the element node in\n          the stylesheet tree with the exception of any namespace\n          node whose <a title = \"string value\" href = \"#dt-string-value\">string value</a> is designated as an\n          <b>excluded namespace</b>. Special considerations apply\n          to aliased namespaces: see <a href = \"#namespace-aliasing\"><i>11.1.4 Namespace\n          Aliasing</i></a></p>\n\n          <p>The following namespaces are designated as excluded\n          namespaces:</p>\n\n          <ul>\n            <li>\n              <p>The <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> URI\n              (<code>http://www.w3.org/1999/XSL/Transform</code>)</p>\n            </li>\n\n            <li>\n              <p>A namespace URI declared as an extension namespace\n              (see <a href = \"#extension-instruction\"><i>18.2\n              Extension Instructions</i></a>)</p>\n            </li>\n\n            <li>\n              <p>A namespace URI designated by using an\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              either on the literal result element itself or on an\n              ancestor element. The attribute <span class = \"verb\">must</span> be in the XSLT namespace only if\n              its parent element is <em>not</em> in the XSLT\n              namespace.</p>\n\n              <p>The value of the attribute is either\n              <code>#all</code>, or a whitespace-separated list of\n              tokens, each of which is either a namespace prefix or\n              <code>#default</code>. The namespace bound to each of\n              the prefixes is designated as an excluded\n              namespace.</p>\n\n              <p><a name = \"err-XTSE0808\" id = \"err-XTSE0808\"><span class = \"error\">[ERR\n              XTSE0808]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a\n              namespace prefix is used within the\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              and there is no namespace binding in scope for that\n              prefix.</p>\n\n              <p>The default namespace of the parent element of the\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              (see <a href = \"http://www.w3.org/TR/xpath-datamodel/#ElementNode\">Section\n              6.2 Element Nodes</a><sup><small>DM</small></sup>)\n              may be designated as an excluded namespace by\n              including <code>#default</code> in the list of\n              namespace prefixes.</p>\n\n              <p><a name = \"err-XTSE0809\" id = \"err-XTSE0809\"><span class = \"error\">[ERR\n              XTSE0809]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value\n              <code>#default</code> is used within the\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              and the parent element of the\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              has no default namespace.</p>\n\n              <p>The value <code>#all</code> indicates that all\n              namespaces that are in scope for the stylesheet\n              element that is the parent of the\n              <code>[xsl:]exclude-result-prefixes</code> attribute\n              are designated as excluded namespaces.</p>\n\n              <p>The designation of a namespace as an excluded\n              namespace is effective within the subtree of the\n              stylesheet module rooted at the element bearing the\n              <code>[xsl:]exclude-result-prefixes</code> attribute;\n              a subtree rooted at an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n              element does not include any stylesheet modules\n              imported or included by children of that <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n              element.</p>\n            </li>\n          </ul>\n\n          <p>The excluded namespaces, as described above,\n          <em>only</em> affect namespace nodes copied from the\n          stylesheet when processing a literal result element.\n          There is no guarantee that an excluded namespace will not\n          appear on the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> for some other reason.\n          Namespace nodes are also written to the result tree as\n          part of the process of namespace fixup (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace Fixup</i></a>), or\n          as the result of instructions such as <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> and <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>When a stylesheet uses a namespace declaration only\n            for the purposes of addressing a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a>, specifying the\n            prefix in the\n            <code>[xsl:]exclude-result-prefixes</code> attribute\n            will avoid superfluous namespace declarations in the\n            serialized <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>. The attribute is\n            also useful to prevent namespaces used solely for the\n            naming of stylesheet functions or extension functions\n            from appearing in the serialized result tree.</p>\n          </div>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e15344\" id = \"d5e15344\"></a>Example:\n              Excluding Namespaces from the Result Tree\n            </div>\n\n            <p>For example, consider the following stylesheet:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:stylesheet xsl:version=\"1.0\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  xmlns:a=\"a.uri\"\n  xmlns:b=\"b.uri\"&gt;\n  exclude-result-prefixes=\"#all\"&gt;\n  \n&lt;xsl:template match=\"/\"&gt;\n  &lt;foo xmlns:c=\"c.uri\" xmlns:d=\"d.uri\" xmlns:a2=\"a.uri\" \n       xsl:exclude-result-prefixes=\"c\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n            </div>\n\n            <p>The result of this stylesheet will be:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;foo xmlns:d=\"d.uri\"/&gt;\n</pre>\n            </div>\n\n            <p>The namespaces <code>a.uri</code> and\n            <code>b.uri</code> are excluded by virtue of the\n            <code>exclude-result-prefixes</code> attribute on the\n            <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n            element, and the namespace <code>c.uri</code> is\n            excluded by virtue of the\n            <code>xsl:exclude-result-prefixes</code> attribute on\n            the <code>foo</code> element. The setting\n            <code>#all</code> does not affect the namespace\n            <code>d.uri</code> because <code>d.uri</code> is not an\n            in-scope namespace for the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n            element. The element in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> does not have a\n            namespace node corresponding to\n            <code>xmlns:a2=\"a.uri\"</code> because the effect of\n            <code>exclude-result-prefixes</code> is to designate\n            the namespace URI <code>a.uri</code> as an excluded\n            namespace, irrespective of how many prefixes are bound\n            to this namespace URI.</p>\n\n            <p>If the stylesheet is changed so that the literal\n            result element has an attribute <code>b:bar=\"3\"</code>,\n            then the element in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> will typically have a\n            namespace declaration <code>xmlns:b=\"b.uri\"</code>\n            <span>(the processor may choose a different namespace\n            prefix if this is necessary to avoid conflicts)</span>.\n            The <code>exclude-result-prefixes</code> attribute\n            makes <code>b.uri</code> an excluded namespace, so the\n            namespace node is not automatically copied from the\n            stylesheet, but the presence of an attribute whose name\n            is in the namespace <code>b.uri</code> forces the\n            namespace fixup process (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace Fixup</i></a>) to\n            introduce a namespace node for this namespace.</p>\n          </div>\n\n          <p>A literal result element may have an optional\n          <code>xsl:inherit-namespaces</code> attribute, with the\n          value <code>yes</code> or <code>no</code>. The default\n          value is <code>yes</code>. If the value is set to\n          <code>yes</code>, or is omitted, then the namespace nodes\n          created for the newly constructed element are copied to\n          the children and descendants of the newly constructed\n          element, as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n          Complex Content</i></a>. If the value is set to\n          <code>no</code>, then these namespace nodes are not\n          automatically copied to the children. This may result in\n          namespace undeclarations (such as <code>xmlns=\"\"</code>\n          or, in the case of XML 1.1, <code>xmlns:p=\"\"</code>)\n          appearing on the child elements when a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> is serialized.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"namespace-aliasing\" id = \"namespace-aliasing\"></a>11.1.4 Namespace Aliasing</h4>\n\n          <p>When a stylesheet is used to define a transformation\n          whose output is itself a stylesheet module, or in certain\n          other cases where the result document uses namespaces\n          that it would be inconvenient to use in the stylesheet,\n          namespace aliasing can be used to declare a mapping\n          between a namespace URI used in the stylesheet and the\n          corresponding namespace URI to be used in the result\n          document.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-literal-namespace-uri\" id = \"dt-literal-namespace-uri\" title = \"literal namespace URI\"></a>A namespace URI in the\n          stylesheet tree that is being used to specify a namespace\n          URI in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> is called a <b>literal\n          namespace URI</b>.<span class = \"definition\">]</span></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-target-namespace-uri\" id = \"dt-target-namespace-uri\" title = \"target namespace URI\"></a>The namespace URI that\n          is to be used in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> as a substitute for a\n          <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> is\n          called the <b>target namespace URI</b>.<span class = \"definition\">]</span></p>\n\n          <p>Either of the <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> or\n          the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a> can\n          be <em>null</em>: this is treated as a reference to the\n          set of names that are in no namespace.</p>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-namespace-alias\" id = \"XSLT_element-namespace-alias\"></a><code>&lt;!-- Category:\n          declaration --&gt;<br/>\n          &lt;xsl:namespace-alias<br/>\n          &#160;&#160;<b>stylesheet-prefix</b> = <var>prefix</var>\n          | \"#default\"<br/>\n          &#160;&#160;<b>result-prefix</b> = <var>prefix</var> |\n          \"#default\"&#160;/&gt;</code></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-alias\" id = \"dt-alias\" title = \"alias\"></a>A stylesheet can use the\n          <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          element to declare that a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> is\n          being used as an <b>alias</b> for a <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace\n          URI</a>.<span class = \"definition\">]</span></p>\n\n          <p>The effect is that when names in the namespace\n          identified by the <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> are\n          copied to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>, the namespace URI in\n          the result tree will be the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>,\n          instead of the literal namespace URI. This applies\n          to:</p>\n\n          <ul>\n            <li>\n              <p>the namespace URI in the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of a\n              literal result element in the stylesheet</p>\n            </li>\n\n            <li>\n              <p>the namespace URI in the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of an\n              attribute specified on a literal result element in\n              the stylesheet</p>\n            </li>\n          </ul>\n\n          <p>Where namespace aliasing changes the namespace URI\n          part of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> containing the\n          name of an element or attribute node, the namespace\n          prefix in that expanded-QName is replaced by the prefix\n          indicated by the <code>result-prefix</code> attribute of\n          the <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          declaration.</p>\n\n          <p>The <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          element declares that the namespace URI bound to the\n          prefix specified by the <code>stylesheet-prefix</code> is\n          the <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a>,\n          and the namespace URI bound to the prefix specified by\n          the <code>result-prefix</code> attribute is the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>.\n          Thus, the <code>stylesheet-prefix</code> attribute\n          specifies the namespace URI that will appear in the\n          stylesheet, and the <code>result-prefix</code> attribute\n          specifies the corresponding namespace URI that will\n          appear in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n\n          <p>The default namespace (as declared by\n          <code>xmlns</code>) may be specified by using\n          <code>#default</code> instead of a prefix. <span>If no\n          default namespace is in force, specifying\n          <code>#default</code> denotes the null namespace URI.\n          This allows elements that are in no namespace in the\n          stylesheet to acquire a namespace in the result document,\n          or vice versa.</span></p>\n\n          <p>If a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> is\n          declared to be an alias for multiple different <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">target namespace URIs</a>,\n          then the declaration with the highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n          precedence</a> is used.</p>\n\n          <p><a name = \"err-XTSE0810\" id = \"err-XTSE0810\"><span class = \"error\">[ERR XTSE0810]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if there is more than one such declaration with the same\n          <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> and\n          the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> and\n          different values for the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>,\n          unless there is also an <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          declaration with the same <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> and\n          a higher import precedence.</p>\n\n          <p><a name = \"err-XTSE0812\" id = \"err-XTSE0812\"><span class = \"error\">[ERR XTSE0812]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a value other than <code>#default</code> is specified\n          for either the <code>stylesheet-prefix</code> or the\n          <code>result-prefix</code> attributes of the <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          element when there is no in-scope binding for that\n          namespace prefix.</p>\n\n          <p>When a literal result element is processed, its\n          namespace nodes are handled as follows:</p>\n\n          <ul>\n            <li>\n              <p>A namespace node whose string value is a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a>\n              is not copied to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n            </li>\n\n            <li>\n              <p>A namespace node whose string value is a <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>\n              is copied to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>, whether or not the\n              URI identifies an excluded namespace.</p>\n            </li>\n          </ul>\n\n          <p>In the event that the same URI is used as a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> and\n          a <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>, the\n          second of these rules takes precedence.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>These rules achieve the effect that the element\n            generated from the literal result element will have an\n            in-scope namespace node that binds the\n            <code>result-prefix</code> to the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>,\n            provided that the namespace declaration associating\n            this prefix with this URI is in scope for both the\n            <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n            instruction and for the literal result element.\n            Conversely, the <code>stylesheet-prefix</code> and the\n            <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a>\n            will not normally appear in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n          </div>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e15715\" id = \"d5e15715\"></a>Example: Using\n              <code>xsl:namespace-alias</code> to Generate a\n              Stylesheet\n            </div>\n\n            <p>When literal result elements are being used to\n            create element, attribute, or namespace nodes that use\n            the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> URI, the\n            stylesheet may use an alias.</p>\n\n            <p>For example, the stylesheet</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:stylesheet\n  version=\"2.0\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"\n  xmlns:axsl=\"file://namespace.alias\"&gt;\n\n&lt;xsl:namespace-alias stylesheet-prefix=\"axsl\" result-prefix=\"xsl\"/&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;axsl:stylesheet version=\"2.0\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/axsl:stylesheet&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"elements\"&gt;\n  &lt;axsl:template match=\"/\"&gt;\n     &lt;axsl:comment select=\"system-property('xsl:version')\"/&gt;\n     &lt;axsl:apply-templates/&gt;\n  &lt;/axsl:template&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"block\"&gt;\n  &lt;axsl:template match=\"{.}\"&gt;\n     &lt;fo:block&gt;&lt;axsl:apply-templates/&gt;&lt;/fo:block&gt;\n  &lt;/axsl:template&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n            </div>\n\n            <p>will generate an XSLT stylesheet from a document of\n            the form:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;elements&gt;\n&lt;block&gt;p&lt;/block&gt;\n&lt;block&gt;h1&lt;/block&gt;\n&lt;block&gt;h2&lt;/block&gt;\n&lt;block&gt;h3&lt;/block&gt;\n&lt;block&gt;h4&lt;/block&gt;\n&lt;/elements&gt;\n</pre>\n            </div>\n\n            <p>The output of the transformation will be a\n            stylesheet such as the following. Whitespace has been\n            added for clarity. Note that an implementation may\n            output different namespace prefixes from those\n            appearing in this example; however, the rules guarantee\n            that there will be a namespace node that binds the\n            prefix <code>xsl</code> to the URI\n            <code>http://www.w3.org/1999/XSL/Transform</code>,\n            which makes it safe to use the QName\n            <code>xsl:version</code> in the content of the\n            generated stylesheet.</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:stylesheet\n  version=\"2.0\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \n  xmlns:fo=\"http://www.w3.org/1999/XSL/Format\"&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:comment select=\"system-property('xsl:version')\"/&gt;\n  &lt;xsl:apply-templates/&gt;\n&lt;/xsl:template&gt;\n  \n&lt;xsl:template match=\"p\"&gt;\n  &lt;fo:block&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"h1\"&gt;\n  &lt;fo:block&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"h2\"&gt;\n  &lt;fo:block&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"h3\"&gt;\n  &lt;fo:block&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"h4\"&gt;\n  &lt;fo:block&gt;&lt;xsl:apply-templates/&gt;&lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n            </div>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It may be necessary also to use aliases for\n            namespaces other than the XSLT namespace URI. For\n            example, it can be useful to define an alias for the\n            namespace\n            <code>http://www.w3.org/2001/XMLSchema-instance</code>,\n            so that the stylesheet can use the attributes\n            <code>xsi:type</code>, <code>xsi:nil</code>, and\n            <code>xsi:schemaLocation</code> on a literal result\n            element, without running the risk that a schema\n            processor will interpret these as applying to the\n            stylesheet itself. Equally, literal result elements\n            belonging to a namespace dealing with digital\n            signatures might cause XSLT stylesheets to be\n            mishandled by general-purpose security software; using\n            an alias for the namespace would avoid the possibility\n            of such mishandling.</p>\n          </div>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e15762\" id = \"d5e15762\"></a>Example:\n              Aliasing the XML Namespace\n            </div>\n\n            <p>It is possible to define an alias for the XML\n            namespace.</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:stylesheet xmlns:axml=\"http://www.example.com/alias-xml\"\n                xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                version=\"2.0\"&gt;\n\n&lt;xsl:namespace-alias stylesheet-prefix=\"axml\" result-prefix=\"xml\"/&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;name axml:space=\"preserve\"&gt;\n    &lt;first&gt;James&lt;/first&gt;\n    &lt;xsl:text&gt; &lt;/xsl:text&gt;\n    &lt;last&gt;Clark&lt;/last&gt;\n  &lt;/name&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n            </div>\n\n            <p>produces the output:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;name xml:space=\"preserve\"&gt;&lt;first&gt;James&lt;/first&gt; &lt;last&gt;Clark&lt;/last&gt;&lt;/name&gt;\n</pre>\n            </div>\n\n            <p>This allows an <code>xml:space</code> attribute to\n            be generated in the output without affecting the way\n            the stylesheet is parsed. The same technique can be\n            used for other attributes such as\n            <code>xml:lang</code>, <code>xml:base</code>, and\n            <code>xml:id</code>.</p>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Namespace aliasing is only necessary when literal\n            result elements are used. The problem of reserved\n            namespaces does not arise when using <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> and\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a> to\n            construct the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>. Therefore, as an\n            alternative to using <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>,\n            it is always possible to achieve the desired effect by\n            replacing literal result elements with <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> and\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n            instructions.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xsl-element\" id = \"xsl-element\"></a>11.2\n        Creating Element Nodes Using <code>xsl:element</code></h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-element\" id = \"XSLT_element-element\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:element<br/>\n        &#160;&#160;<b>name</b> = { <var>qname</var> }<br/>\n        &#160;&#160;namespace? = { <var>uri-reference</var> }<br/>\n        &#160;&#160;inherit-namespaces? = \"yes\" | \"no\"<br/>\n        &#160;&#160;use-attribute-sets? = <var>qnames</var><br/>\n        &#160;&#160;type? = <var>qname</var><br/>\n        &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n        \"strip\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:element&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> instruction\n        allows an element to be created with a computed name. The\n        <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element to\n        be created is specified by a <span class = \"verb\">required</span> <code>name</code> attribute and an\n        optional <code>namespace</code> attribute.</p>\n\n        <p>The content of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> instruction\n        is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> for the\n        children, attributes, and namespaces of the created\n        element. The sequence obtained by evaluating this sequence\n        constructor (see <a href = \"#sequence-constructors\"><i>5.7\n        Sequence Constructors</i></a>) is used to construct the\n        content of the element, as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>.</p>\n\n        <p>The <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> element may\n        have a <code>use-attribute-sets</code> attribute, whose\n        value is a whitespace-separated list of QNames that\n        identify <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n        declarations. If this attribute is present, it is expanded\n        as described in <a href = \"#attribute-sets\"><i>10.2 Named\n        Attribute Sets</i></a> to produce a sequence of attribute\n        nodes. This sequence is prepended to the sequence produced\n        as a result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, as\n        described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>.</p>\n\n        <p>The result of evaluating the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n        instruction, except in error cases, is the newly\n        constructed element node.</p>\n\n        <p>The <code>name</code> attribute is interpreted as an\n        <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>, whose <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> <span class = \"verb\">must</span> be a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>.</p>\n\n        <p><a name = \"err-XTDE0820\" id = \"err-XTDE0820\"><span class = \"error\">[ERR XTDE0820]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is not a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n        QName</a>.</p>\n\n        <p><a name = \"err-XTDE0830\" id = \"err-XTDE0830\"><span class = \"error\">[ERR XTDE0830]</span></a> In the case of an\n        <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n        instruction with no <code>namespace</code> attribute, it is\n        a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is a <a title = \"QName\" href = \"#dt-qname\">QName</a> whose prefix is not declared in an\n        in-scope namespace declaration for the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n        instruction.</p>\n\n        <p>If the <code>namespace</code> attribute is not present\n        then the <a title = \"QName\" href = \"#dt-qname\">QName</a> is\n        expanded into an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using the namespace\n        declarations in effect for the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> element,\n        including any default namespace declaration.</p>\n\n        <p>If the <code>namespace</code> attribute is present, then\n        it too is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>. The <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a>\n        <span><span class = \"verb\">must</span> be in the lexical\n        space of the <code>xs:anyURI</code> type.</span> If the\n        string is zero-length, then the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element\n        has a null namespace URI. Otherwise, the string is used as\n        the namespace URI of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element to\n        be created. The local part of the <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> specified by the\n        <code>name</code> attribute is used as the local part of\n        the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element to\n        be created.</p>\n\n        <p><a name = \"err-XTDE0835\" id = \"err-XTDE0835\"><span class = \"error\">[ERR XTDE0835]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>namespace</code> attribute is not in the lexical\n        space of the <code>xs:anyURI</code> data type.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The <span>XDM</span> data model requires the name of a\n          node to be an instance of <code>xs:QName</code>, and XML\n          Schema defines the namespace part of an\n          <code>xs:QName</code> to be an instance of\n          <code>xs:anyURI</code>. However, the schema\n          specification, and the specifications that it refers to,\n          give implementations some flexibility in how strictly\n          they enforce these constraints.</p>\n        </div>\n\n        <p>The prefix of the <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> specified in the\n        <code>name</code> attribute (or the absence of a prefix) is\n        copied to the prefix part of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> representing\n        the name of the new element node. In the event of a\n        conflict <span>a prefix may subsequently be added, changed,\n        or removed</span> during the namespace fixup process (see\n        <a href = \"#namespace-fixup\"><i>5.7.3 Namespace\n        Fixup</i></a>).</p>\n\n        <p>The <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> instruction\n        has an optional <code>inherit-namespaces</code> attribute,\n        with the value <code>yes</code> or <code>no</code>. The\n        default value is <code>yes</code>. If the value is set to\n        <code>yes</code>, or is omitted, then the namespace nodes\n        created for the newly constructed element (whether these\n        were copied from those of the source node, or generated as\n        a result of namespace fixup) are copied to the children and\n        descendants of the newly constructed element, as described\n        in <a href = \"#constructing-complex-content\"><i>5.7.1\n        Constructing Complex Content</i></a>. If the value is set\n        to <code>no</code>, then these namespace nodes are not\n        automatically copied to the children. This may result in\n        namespace undeclarations (such as <code>xmlns=\"\"</code> or,\n        in the case of XML Namespaces 1.1, <code>xmlns:p=\"\"</code>)\n        appearing on the child elements when a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a> is serialized.</p>\n\n        <p>The base URI of the new element is copied from the base\n        URI of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> instruction\n        in the stylesheet, unless the content of the new element\n        includes an <code>xml:base</code> attribute, in which case\n        the base URI of the new element is the value of that\n        attribute, resolved (if it is a relative URI) against the\n        base URI of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> instruction\n        in the stylesheet. (Note, however, that this is only\n        relevant when creating parentless elements. When the new\n        element is copied to form a child of an element or document\n        node, the base URI of the new copy is taken from that of\n        its new parent.)</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"annotation-for-constructed-element\" id = \"annotation-for-constructed-element\"></a>11.2.1 Setting\n          the Type Annotation for a Constructed Element Node</h4>\n\n          <p>The optional attributes <code>type</code> and\n          <code>validation</code> may be used on the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction to invoke validation of the contents of the\n          element against a type definition or element declaration\n          in a schema, and to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotation</a> that the new element node will carry.\n          These attributes also affect the type annotation carried\n          by any elements and attributes that have the new element\n          node as an ancestor. These two attributes are both\n          optional, and if one is specified then the other\n          <span class = \"verb\">must</span> be omitted. The permitted\n          values of these attributes and their semantics are\n          described in <a href = \"#validation\"><i>19.2\n          Validation</i></a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The final type annotation of the element in the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a> also depends on the <code>type</code> and\n            <code>validation</code> attributes of the instructions\n            used to create the ancestors of the element.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-attributes\" id = \"creating-attributes\"></a>11.3 Creating Attribute Nodes\n        Using <code>xsl:attribute</code></h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-attribute\" id = \"XSLT_element-attribute\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:attribute<br/>\n        &#160;&#160;<b>name</b> = { <var>qname</var> }<br/>\n        &#160;&#160;namespace? = { <var>uri-reference</var> }<br/>\n        &#160;&#160;select? = <var>expression</var><br/>\n        &#160;&#160;separator? = { <var>string</var> }<br/>\n        &#160;&#160;type? = <var>qname</var><br/>\n        &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n        \"strip\"&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:attribute&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a> element\n        can be used to add attributes to result elements whether\n        created by literal result elements in the stylesheet or by\n        instructions such as <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> or <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>. The <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the attribute to\n        be created is specified by a <span class = \"verb\">required</span> <code>name</code> attribute and an\n        optional <code>namespace</code> attribute. <span>Except in\n        error cases,</span> the result of evaluating an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction is the newly constructed attribute node.</p>\n\n        <p>The string value of the new attribute node may be\n        defined either by using the <code>select</code> attribute,\n        or by the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n        forms the content of the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        element. These are mutually exclusive. If neither is\n        present, the value of the new attribute node will be a\n        zero-length string. The way in which the value is\n        constructed is specified in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a>.</p>\n\n        <p><a name = \"err-XTSE0840\" id = \"err-XTSE0840\"><span class = \"error\">[ERR XTSE0840]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <code>select</code> attribute of the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a> element\n        is present unless the element has empty content.</p>\n\n        <p>If the <code>separator</code> attribute is present, then\n        the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of this attribute\n        is used to separate adjacent items in the result sequence,\n        as described in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a>. In the absence of this attribute, the\n        default separator is a single space (#x20) when the content\n        is specified using the <code>select</code> attribute, or a\n        zero-length string when the content is specified using a\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n        <p>The <code>name</code> attribute is interpreted as an\n        <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a><span>, whose <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> <span class = \"verb\">must</span> be a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>.</span></p>\n\n        <p><a name = \"err-XTDE0850\" id = \"err-XTDE0850\"><span class = \"error\">[ERR XTDE0850]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is not a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n        QName</a>.</p>\n\n        <p><a name = \"err-XTDE0855\" id = \"err-XTDE0855\"><span class = \"error\">[ERR XTDE0855]</span></a> In the case of an\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction with no <code>namespace</code> attribute, it is\n        a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is the string\n        <code>xmlns</code>.</p>\n\n        <p><a name = \"err-XTDE0860\" id = \"err-XTDE0860\"><span class = \"error\">[ERR XTDE0860]</span></a> In the case of an\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction with no <code>namespace</code> attribute, it is\n        a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> whose prefix is\n        not declared in an in-scope namespace declaration for the\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction.</p>\n\n        <p>If the <code>namespace</code> attribute is not present,\n        then the <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> is expanded into an\n        <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using the namespace\n        declarations in effect for the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        element, <em>not</em> including any default namespace\n        declaration.</p>\n\n        <p>If the <code>namespace</code> attribute is present, then\n        it too is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>. The <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a>\n        <span><span class = \"verb\">must</span> be in the lexical\n        space of the <code>xs:anyURI</code> type.</span> If the\n        string is zero-length, then the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the\n        attribute has a null namespace URI. Otherwise, the string\n        is used as the namespace URI of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the attribute to\n        be created. The local part of the <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> specified by the\n        <code>name</code> attribute is used as the local part of\n        the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the attribute to\n        be created.</p>\n\n        <p><a name = \"err-XTDE0865\" id = \"err-XTDE0865\"><span class = \"error\">[ERR XTDE0865]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>namespace</code> attribute is not in the lexical\n        space of the <code>xs:anyURI</code> data type.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The same considerations apply as for elements:\n          <span class = \"error\">[see <a href = \"#err-XTDE0835\">ERR\n          XTDE0835</a>]</span> in <a href = \"#xsl-element\"><i>11.2\n          Creating Element Nodes Using xsl:element</i></a> .</p>\n        </div>\n\n        <p>The prefix of the <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> specified in the\n        <code>name</code> attribute (or the absence of a prefix) is\n        copied to the prefix part of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> representing\n        the name of the new attribute node. In the event of a\n        conflict this prefix (or absence of a prefix) may\n        subsequently be changed during the namespace fixup process\n        (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace\n        Fixup</i></a>). If the attribute is in a non-null namespace\n        and no prefix is specified, then the namespace fixup\n        process will invent a prefix.</p>\n\n        <p>If the name of a constructed attribute is\n        <code>xml:id</code>, <span>the processor must perform\n        attribute value normalization by effectively applying the\n        <a href = \"http://www.w3.org/TR/xpath-functions/#func-normalize-space\">\n        <code>normalize-space</code></a><sup><small>FO</small></sup>\n        function to the value of the attribute,</span> and the\n        resulting attribute node must be given the\n        <code>is-id</code> property. This applies whether the\n        attribute is constructed using the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n        instruction or whether it is constructed using an attribute\n        of a literal result element. This does not imply any\n        constraints on the value of the attribute, or on its\n        uniqueness, and it does not affect the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>\n        of the attribute, unless the containing document is\n        validated.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The effect of setting the <code>is-id</code> property\n          is that the parent element can be located within the\n          containing document by use of the <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n          <small>FO</small></sup> function. In effect, XSLT when\n          constructing a document performs some of the functions of\n          an <code>xml:id</code> processor, as defined in <a href = \"#xml-id\">[xml:id]</a>; the other aspects of\n          <code>xml:id</code> processing are performed during\n          validation.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e16466\" id = \"d5e16466\"></a>Example: Creating\n            a List-Valued Attribute\n          </div>\n\n          <p>The following instruction creates the attribute\n          <code>colors=\"red green blue\"</code>:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:attribute name=\"colors\" select=\"'red', 'green', 'blue'\"/&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e16476\" id = \"d5e16476\"></a>Example:\n            Namespaces are not Attributes\n          </div>\n\n          <p>It is not an error to write:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:attribute name=\"xmlns:xsl\" \n   namespace=\"file://some.namespace\"&gt;http://www.w3.org/1999/XSL/Transform&lt;/xsl:attribute&gt;\n</pre>\n          </div>\n\n          <p>However, this will not result in the namespace\n          declaration\n          <code>xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"</code>\n          being output. Instead, it will produce an attribute node\n          with local name <code>xsl</code>, and with a\n          system-allocated namespace prefix mapped to the namespace\n          URI <code>file://some.namespace</code>. This is because\n          the namespace fixup process is not allowed to use\n          <code>xmlns</code> as the name of a namespace node.</p>\n        </div>\n\n        <p>As described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>, <span>in a sequence that is used\n        to construct the content of an element,</span> any\n        attribute nodes <span class = \"verb\">must</span> appear in\n        the sequence before any element, text, comment, or\n        processing instruction nodes. Where the sequence contains\n        two or more attribute nodes with the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>, the one that comes\n        last is the only one that takes effect.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>If a collection of attributes is generated repeatedly,\n          this can be done conveniently by using named attribute\n          sets: see <a href = \"#attribute-sets\"><i>10.2 Named\n          Attribute Sets</i></a></p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"annotation-for-constructed-attribute\" id = \"annotation-for-constructed-attribute\"></a>11.3.1 Setting\n          the Type Annotation for a Constructed Attribute Node</h4>\n\n          <p>The optional attributes <code>type</code> and\n          <code>validation</code> may be used on the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction to invoke validation of the contents of the\n          attribute against a type definition or attribute\n          declaration in a schema, and to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotation</a> that the new attribute node will carry.\n          These two attributes are both optional, and if one is\n          specified then the other <span class = \"verb\">must</span>\n          be omitted. The permitted values of these attributes and\n          their semantics are described in <a href = \"#validation\"><i>19.2 Validation</i></a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The final <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of the attribute\n            in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> also depends on the\n            <code>type</code> and <code>validation</code>\n            attributes of the instructions used to create the\n            ancestors of the attribute.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-text-nodes\" id = \"creating-text-nodes\"></a>11.4 Creating Text Nodes</h3>\n\n        <p>This section describes three different ways of creating\n        text nodes: by means of literal text nodes in the\n        stylesheet, or by using the <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> and <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n        instructions. It is also possible to create text nodes\n        using the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n        described in <a href = \"#number\"><i>12 Numbering</i></a>.</p>\n\n        <p>If and when the sequence that results from evaluating a\n        <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is used\n        to form the content of a node, as described in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a> and <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>, adjacent text nodes in the\n        sequence are merged. Within the sequence itself, however,\n        they exist as distinct nodes.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e16577\" id = \"d5e16577\"></a>Example: A\n            sequence of text nodes\n          </div>\n\n          <p>The following function returns a sequence of three\n          text nodes:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:function name=\"f:wrap\"&gt;\n  &lt;xsl:param name=\"s\"/&gt;\n  &lt;xsl:text&gt;(&lt;/xsl:text&gt;\n  &lt;xsl:value-of select=\"$s\"/&gt;\n  &lt;xsl:text&gt;)&lt;/xsl:text&gt;\n&lt;/xsl:function&gt;\n</pre>\n          </div>\n\n          <p>When this function is called as follows:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:value-of select=\"f:wrap('---')\"/&gt;\n</pre>\n          </div>\n\n          <p>the result is:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n(---)\n</pre>\n          </div>\n\n          <p>No additional spaces are inserted, because the calling\n          <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          instruction merges adjacent text nodes before atomizing\n          the sequence. However, the result of the instruction:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:value-of select=\"data(f:wrap('---'))\"/&gt;\n</pre>\n          </div>\n\n          <p>is:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n( --- )\n</pre>\n          </div>\n\n          <p>because in this case the three text nodes are atomized\n          to form three strings, and spaces are inserted between\n          adjacent strings.</p>\n        </div>\n\n        <p>It is possible to construct text nodes whose string\n        value is zero-length. A zero-length text node, when\n        atomized, produces a zero-length string. However,\n        zero-length text nodes are ignored when they appear in a\n        sequence that is used to form the content of a node, as\n        described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a> and <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a>.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"literal-text-nodes\" id = \"literal-text-nodes\"></a>11.4.1 Literal Text Nodes</h4>\n\n          <p>A <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> can\n          contain text nodes. Each text node in a sequence\n          constructor remaining after <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> have\n          been stripped as specified in <a href = \"#stylesheet-stripping\"><i>4.2 Stripping Whitespace from\n          the Stylesheet</i></a> will construct a new text node\n          with the same <a title = \"string value\" href = \"#dt-string-value\">string value</a>. The resulting text\n          node is added to the result of the containing sequence\n          constructor.</p>\n\n          <p>Text is processed at the tree level. Thus, markup of\n          <code>&amp;lt;</code> in a template will be represented\n          in the stylesheet tree by a text node that includes the\n          character <code>&lt;</code>. This will create a text node\n          in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> that contains a\n          <code>&lt;</code> character, which will be represented by\n          the markup <code>&amp;lt;</code> (or an equivalent\n          character reference) when the result tree is serialized\n          as an XML document, unless otherwise specified using\n          <a title = \"character map\" href = \"#dt-character-map\">character maps</a> (see <a href = \"#character-maps\"><i>20.1 Character Maps</i></a>) or\n          <code>disable-output-escaping</code> (see <a href = \"#disable-output-escaping\"><i>20.2 Disabling Output\n          Escaping</i></a>).</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"xsl-text\" id = \"xsl-text\"></a>11.4.2 Creating\n          Text Nodes Using <code>xsl:text</code></h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-text\" id = \"XSLT_element-text\"></a><code>&lt;!-- Category: instruction\n          --&gt;<br/>\n          &lt;xsl:text<br/>\n          &#160;&#160;<span class = \"grayed\">[disable-output-escaping]?</span> = \"yes\" |\n          \"no\"&gt;<br/>\n          &#160;&#160;&lt;!-- Content: #PCDATA --&gt;<br/>\n          &lt;/xsl:text&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n          element is evaluated to contruct a new text node. The\n          content of the <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> element is a\n          single text node whose value forms the <a title = \"string value\" href = \"#dt-string-value\">string value</a>\n          of the <span>new</span> text node. An <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> element may be\n          empty, in which case the result of evaluating the\n          instruction is <span>a text node whose string value is\n          the zero-length string</span>.</p>\n\n          <p>The result of evaluating an <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> instruction is\n          the newly constructed text node.</p>\n\n          <p>A text node that is an immediate child of an <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> instruction\n          will not be stripped from the stylesheet tree, even if it\n          consists entirely of whitespace (see <a href = \"#strip\"><i>4.4 Stripping Whitespace from a Source\n          Tree</i></a>).</p>\n\n          <p>For the effect of the <a title = \"deprecated\" href = \"#dt-deprecated\">deprecated</a>\n          <code>disable-output-escaping</code> attribute, see\n          <a href = \"#disable-output-escaping\"><i>20.2 Disabling\n          Output Escaping</i></a></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It is not always necessary to use the <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> instruction\n            to write text nodes to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>. Literal text can be\n            written to the result tree by including it anywhere in\n            a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n            while computed text can be output using the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n            instruction. The principal reason for using <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> is that it\n            offers improved control over whitespace handling.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"value-of\" id = \"value-of\"></a>11.4.3\n          Generating Text with <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a></h4>\n\n          <p>Within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, the\n          <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          instruction can be used to generate computed text nodes.\n          The <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          instruction computes the text using an <a title = \"expression\" href = \"#dt-expression\">expression</a> that is\n          specified as the value of the <code>select</code>\n          attribute, or by means of contained instructions. This\n          might, for example, extract text from a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a> or\n          insert the value of a variable.</p>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-value-of\" id = \"XSLT_element-value-of\"></a><code>&lt;!-- Category:\n          instruction --&gt;<br/>\n          &lt;xsl:value-of<br/>\n          &#160;&#160;select? = <var>expression</var><br/>\n          &#160;&#160;separator? = { <var>string</var> }<br/>\n          &#160;&#160;<span class = \"grayed\">[disable-output-escaping]?</span> = \"yes\" |\n          \"no\"&gt;<br/>\n          &#160;&#160;&lt;!-- Content:\n          <var>sequence-constructor</var> --&gt;<br/>\n          &lt;/xsl:value-of&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          instruction is evaluated to construct a new text node;\n          the result of the instruction is the newly constructed\n          text node.</p>\n\n          <p>The string value of the new text node may be defined\n          either by using the <code>select</code> attribute, or by\n          the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> (see\n          <a href = \"#sequence-constructors\"><i>5.7 Sequence\n          Constructors</i></a>) that forms the content of the\n          <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          element. These are mutually exclusive, and one of them\n          must be present. The way in which the value is\n          constructed is specified in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing\n          Simple Content</i></a>.</p>\n\n          <p><a name = \"err-XTSE0870\" id = \"err-XTSE0870\"><span class = \"error\">[ERR XTSE0870]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the <code>select</code> attribute of the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> element\n          is present when the content of the element is non-empty,\n          or if the <code>select</code> attribute is absent when\n          the content is empty.</p>\n\n          <p>If the <code>separator</code> attribute is present,\n          then the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of this\n          attribute is used to separate adjacent items in the\n          result sequence, as described in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing\n          Simple Content</i></a>. In the absence of this attribute,\n          the default separator is a single space (#x20) when the\n          content is specified using the <code>select</code>\n          attribute, or a zero-length string when the content is\n          specified using a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n          <p>Special rules apply when <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled for the instruction. If no\n          <code>separator</code> attribute is present, and if the\n          <code>select</code> attribute is present, then all items\n          in the <a title = \"atomize\" href = \"#dt-atomization\">atomized</a> result sequence other than\n          the first are ignored.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e16837\" id = \"d5e16837\"></a>Example:\n              Generating a List with Separators\n            </div>\n\n            <p>The instruction:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;x&gt;&lt;xsl:value-of select=\"1 to 4\" separator=\"|\"/&gt;&lt;/x&gt;\n</pre>\n            </div>\n\n            <p>produces the output:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;x&gt;1|2|3|4&lt;/x&gt;\n</pre>\n            </div>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a> element\n            can be used to copy a sequence of nodes to the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a> without <a title = \"atomize\" href = \"#dt-atomization\">atomization</a>. See <a href = \"#copy-of\"><i>11.9.2 Deep Copy</i></a>.</p>\n          </div>\n\n          <p>For the effect of the <a title = \"deprecated\" href = \"#dt-deprecated\">deprecated</a>\n          <code>disable-output-escaping</code> attribute, see\n          <a href = \"#disable-output-escaping\"><i>20.2 Disabling\n          Output Escaping</i></a></p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-document-nodes\" id = \"creating-document-nodes\"></a>11.5 Creating Document\n        Nodes</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-document\" id = \"XSLT_element-document\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:document<br/>\n        &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n        \"strip\"<br/>\n        &#160;&#160;type? = <var>qname</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:document&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n        instruction is used to create a new document node. The\n        content of the <a href = \"#XSLT_element-document\"><code>xsl:document</code></a> element\n        is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> for the\n        children of the new document node. A document node is\n        created, and the sequence obtained by evaluating the\n        sequence constructor is used to construct the content of\n        the document, as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>. The <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> rooted at this\n        document node forms the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>.</p>\n\n        <p>Except in error situations, the result of evaluating the\n        <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n        instruction is a single node, the newly constructed\n        document node.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The new document is not serialized. To construct a\n          document that is to form a final result rather than an\n          intermediate result, use the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction described in <a href = \"#creating-result-trees\"><i>19.1 Creating Final Result\n          Trees</i></a>.</p>\n        </div>\n\n        <p>The optional attributes <code>type</code> and\n        <code>validation</code> may be used on the <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n        instruction to validate the contents of the new document,\n        and to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> that elements and\n        attributes within the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> will carry. The permitted\n        values and their semantics are described in <a href = \"#validating-document-nodes\"><i>19.2.2 Validating Document\n        Nodes</i></a>.</p>\n\n        <p>The base URI of the new document node is taken from the\n        base URI of the <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n        instruction.</p>\n\n        <p>The <code>document-uri</code> and\n        <code>unparsed-entities</code> properties of the new\n        document node are set to empty.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e16953\" id = \"d5e16953\"></a>Example: Checking\n            Uniqueness Constraints in a Temporary Tree\n          </div>\n\n          <p>The following example creates a temporary tree held in\n          a variable. The use of an enclosed <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n          instruction ensures that uniqueness constraints defined\n          in the schema for the relevant elements are checked.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"tree\" as=\"document-node()\"&gt;\n  &lt;xsl:document validation=\"strict\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/xsl:document&gt;\n&lt;/xsl:variable&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-processing-instructions\" id = \"creating-processing-instructions\"></a>11.6 Creating\n        Processing Instructions</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-processing-instruction\" id = \"XSLT_element-processing-instruction\"></a><code>&lt;!--\n        Category: instruction --&gt;<br/>\n        &lt;xsl:processing-instruction<br/>\n        &#160;&#160;<b>name</b> = { <var>ncname</var> }<br/>\n        &#160;&#160;select? = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:processing-instruction&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        element is evaluated to create a processing instruction\n        node.</p>\n\n        <p>The <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        element has a <span class = \"verb\">required</span>\n        <code>name</code> attribute that specifies the name of the\n        processing instruction node. The value of the\n        <code>name</code> attribute is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>.</p>\n\n        <p>The string value of the new processing-instruction node\n        may be defined either by using the <code>select</code>\n        attribute, or by the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n        forms the content of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        element. These are mutually exclusive. If neither is\n        present, the string value of the new processing-instruction\n        node will be a zero-length string. The way in which the\n        value is constructed is specified in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a>.</p>\n\n        <p><a name = \"err-XTSE0880\" id = \"err-XTSE0880\"><span class = \"error\">[ERR XTSE0880]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <code>select</code> attribute of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        element is present unless the element has empty\n        content.</p>\n\n        <p>Except in error situations, the result of evaluating the\n        <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        instruction is a single node, the newly constructed\n        processing instruction <span>node</span>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e17032\" id = \"d5e17032\"></a>Example: Creating\n            a Processing Instruction\n          </div>\n\n          <p>This instruction:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:processing-instruction name=\"xml-stylesheet\"\n  select=\"('href=&amp;quot;book.css&amp;quot;', 'type=&amp;quot;text/css&amp;quot;)\"/&gt;\n</pre>\n          </div>\n\n          <p>creates the processing instruction</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;?xml-stylesheet href=\"book.css\" type=\"text/css\"?&gt;\n</pre>\n          </div>\n\n          <p>Note that the <code>xml-stylesheet</code> processing\n          instruction contains <em>pseudo-attributes</em> in the\n          form <code>name=\"value\"</code>. Although these have the\n          same textual form as attributes in an element start tag,\n          they are not represented as <span>XDM</span> attribute\n          nodes, and cannot therefore be constructed using <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instructions.</p>\n        </div>\n\n        <p><a name = \"err-XTDE0890\" id = \"err-XTDE0890\"><span class = \"error\">[ERR XTDE0890]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is not both an <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n        <small>Names</small></sup> and a <a href = \"http://www.w3.org/TR/2000/REC-xml-20001006#NT-PITarget\">PITarget</a><sup>\n        <small>XML</small></sup>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p><span>Because these rules disallow the name\n          <code>xml</code>,</span> the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n          cannot be used to output an XML declaration. The <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n          should be used to control this instead (see <a href = \"#serialization\"><i>20 Serialization</i></a>).</p>\n        </div>\n\n        <p>If the result of evaluating the content of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        contains the string <code>?&gt;</code>, this string is\n        modified by inserting a space between the <code>?</code>\n        and <code>&gt;</code> characters.</p>\n\n        <p>The base URI of the new processing-instruction is copied\n        from the base URI of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n        element in the stylesheet. (Note, however, that this is\n        only relevant when creating a parentless processing\n        instruction. When the new processing instruction is copied\n        to form a child of an element or document node, the base\n        URI of the new copy is taken from that of its new\n        parent.)</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-namespace-nodes\" id = \"creating-namespace-nodes\"></a>11.7 Creating Namespace\n        Nodes</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-namespace\" id = \"XSLT_element-namespace\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:namespace<br/>\n        &#160;&#160;<b>name</b> = { <var>ncname</var> }<br/>\n        &#160;&#160;select? = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:namespace&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> element\n        is evaluated to create a namespace node. Except in error\n        situations, the result of evaluating the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n        instruction is a single node, the newly constructed\n        namespace node.</p>\n\n        <p>The <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> element\n        has a <span class = \"verb\">required</span> <code>name</code>\n        attribute that specifies the name of the namespace node\n        (that is, the namespace prefix). The value of the\n        <code>name</code> attribute is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>. If the <span><a title = \"effective value\" href = \"#dt-effective-value\">effective value</a></span> of the\n        <code>name</code> attribute is a zero-length string, a\n        namespace node is added for the default namespace.</p>\n\n        <p>The string value of the new namespace node (that is, the\n        namespace URI) may be defined either by using the\n        <code>select</code> attribute, or by the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n        forms the content of the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n        element. These are mutually exclusive. Since the string\n        value of a namespace node cannot be a zero-length string,\n        one of them must be present. The way in which the value is\n        constructed is specified in <a href = \"#constructing-simple-content\"><i>5.7.2 Constructing Simple\n        Content</i></a>.</p>\n\n        <p><a name = \"err-XTDE0905\" id = \"err-XTDE0905\"><span class = \"error\">[ERR XTDE0905]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the string value of the new namespace node is\n        not valid in the lexical space of the data type\n        <code>xs:anyURI</code>. <span class = \"error\">[see <a href = \"#err-XTDE0835\">ERR XTDE0835</a>]</span></p>\n\n        <p><a name = \"err-XTSE0910\" id = \"err-XTSE0910\"><span class = \"error\">[ERR XTSE0910]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <code>select</code> attribute of the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> element\n        is present when the element has content other than one or\n        more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n        instructions, or if the <code>select</code> attribute is\n        absent when the element has empty content.</p>\n\n        <p>Note the restrictions described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a> for the position of a namespace\n        node relative to other nodes in the node sequence returned\n        by a sequence constructor.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e17221\" id = \"d5e17221\"></a>Example:\n            Constructing a QName-Valued Attribute\n          </div>\n\n          <p>This literal result element:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;data xsi:type=\"xs:integer\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n  &lt;xsl:namespace name=\"xs\" select=\"'http://www.w3.org/2001/XMLSchema'\"/&gt;\n  &lt;xsl:text&gt;42&lt;/xsl:text&gt;\n&lt;/data&gt;\n</pre>\n          </div>\n\n          <p>would typically cause the output document to contain\n          the element:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;data xsi:type=\"xs:integer\"\n     xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;42&lt;/data&gt;\n</pre>\n          </div>\n\n          <p>In this case, the element is constructed using a\n          literal result element, and the namespace\n          <code>xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"</code>\n          could therefore have been added to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>\n          simply by declaring it as one of the in-scope namespaces\n          in the stylesheet. In practice, the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction is more likely to be useful in situations\n          where the element is constructed using an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction, which does not copy all the in-scope\n          namespaces from the stylesheet.</p>\n        </div>\n\n        <p><a name = \"err-XTDE0920\" id = \"err-XTDE0920\"><span class = \"error\">[ERR XTDE0920]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>name</code> attribute is neither a zero-length string\n        nor an <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n        <small>Names</small></sup>, or if it is\n        <code>xmlns</code>.</p>\n\n        <p><a name = \"err-XTDE0925\" id = \"err-XTDE0925\"><span class = \"error\">[ERR XTDE0925]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n        instruction generates a namespace node whose name is\n        <code>xml</code> and whose string value is not\n        <code>http://www.w3.org/XML/1998/namespace</code>, or a\n        namespace node whose string value is\n        <code>http://www.w3.org/XML/1998/namespace</code> and whose\n        name is not <code>xml</code>.</p>\n\n        <p><a name = \"err-XTDE0930\" id = \"err-XTDE0930\"><span class = \"error\">[ERR XTDE0930]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if evaluating the <span><code>select</code>\n        attribute or the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> of\n        an <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n        instruction</span> results in a zero-length string.</p>\n\n        <p>For details of other error conditions that may arise,\n        see <a href = \"#sequence-constructors\"><i>5.7 Sequence\n        Constructors</i></a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>It is rarely necessary to use <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> to\n          create a namespace node in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a>; in most\n          circumstances, the required namespace nodes will be\n          created automatically, as a side-effect of writing\n          elements or attributes that use the namespace. An example\n          where <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> is\n          needed is a situation where the required namespace is\n          used only within attribute values in the result document,\n          not in element or attribute names; especially where the\n          required namespace prefix or namespace URI is computed at\n          run-time and is not present in either the source document\n          or the stylesheet.</p>\n\n          <p>Adding a namespace node to the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> will never change\n          the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of any element or\n          attribute node in the result tree: that is, it will never\n          change the namespace URI of an element or attribute. It\n          <span>might</span>, however, constrain the choice of\n          prefixes when namespace fixup is performed.</p>\n\n          <p>Namespace prefixes for element and attribute names are\n          effectively established by the namespace fixup process\n          described in <a href = \"#namespace-fixup\"><i>5.7.3\n          Namespace Fixup</i></a>. The fixup process ensures that\n          an element has in-scope namespace nodes for the namespace\n          URIs used in the element name and in its attribute names,\n          and the serializer will typically use these namespace\n          nodes to determine the prefix to use in the serialized\n          output. The fixup process cannot generate namespace nodes\n          that are inconsistent with those already present in the\n          tree. This means that it is not possible for the\n          processor to decide the prefix to use for an element or\n          for any of its attributes until all the namespace nodes\n          for the element have been added.</p>\n\n          <p>If a namespace prefix is mapped to a particular\n          namespace URI using the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction, or by using <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a> to copy a\n          namespace node, this prevents the namespace fixup process\n          (and hence the serializer) from using the same prefix for\n          a different namespace URI on the same element.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e17356\" id = \"d5e17356\"></a>Example:\n            Conflicting Namespace Prefixes\n          </div>\n\n          <p>Given the instruction:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:element name=\"p:item\" xmlns:p=\"http://www.example.com/p\"&gt;\n  &lt;xsl:namespace name=\"p\"&gt;http://www.example.com/q&lt;/xsl:namespace&gt;\n&lt;/xsl:element&gt;\n</pre>\n          </div>\n\n          <p>a possible serialization of the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> is:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;ns0:item xmlns:ns0=\"http://www.example.com/p\" xmlns:p=\"http://www.example.com/q\"/&gt;\n</pre>\n          </div>\n\n          <p>The processor must invent a namespace prefix for the\n          URI <code>p.uri</code>; it cannot use the prefix\n          <code>p</code> because that prefix has been explicitly\n          associated with a different URI.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction cannot be used to generate a <b>namespace\n          undeclaration</b> of the form <code>xmlns=\"\"</code> (nor\n          the new forms of namespace undeclaration permitted in\n          <a href = \"#xml-names11\">[Namespaces in XML 1.1]</a>).\n          Namespace undeclarations are generated automatically by\n          the serializer if\n          <span><code>undeclare-prefixes=\"yes\"</code></span> is\n          specified on <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>, whenever a\n          parent element has a namespace node for the default\n          namespace prefix, and a child element has no namespace\n          node for that prefix.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-comments\" id = \"creating-comments\"></a>11.8 Creating Comments</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-comment\" id = \"XSLT_element-comment\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:comment<br/>\n        &#160;&#160;select? = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:comment&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> element is\n        evaluated to contruct a new comment node. Except in error\n        cases, the result of evaluating the <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> instruction\n        is a single node, the newly constructed comment node.</p>\n\n        <p>The string value of the new comment node may be defined\n        either by using the <code>select</code> attribute, or by\n        the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n        forms the content of the <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> element.\n        These are mutually exclusive. If neither is present, the\n        value of the new comment node will be a zero-length string.\n        The way in which the value is constructed is specified in\n        <a href = \"#constructing-simple-content\"><i>5.7.2\n        Constructing Simple Content</i></a>.</p>\n\n        <p><a name = \"err-XTSE0940\" id = \"err-XTSE0940\"><span class = \"error\">[ERR XTSE0940]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <code>select</code> attribute of the <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> element is\n        present unless the element has empty content.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e17444\" id = \"d5e17444\"></a>Example:\n            Generating a Comment Node\n          </div>\n\n          <p>For example, this</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:comment&gt;This file is automatically generated. Do not edit!&lt;/xsl:comment&gt;\n</pre>\n          </div>\n\n          <p>would create the comment</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;!--This file is automatically generated. Do not edit!--&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>In the generated comment node, the processor\n        <span class = \"verb\">must</span> insert a space after any\n        occurrence of <code>-</code> that is followed by another\n        <code>-</code> or that ends the comment.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"copying\" id = \"copying\"></a>11.9 Copying\n        Nodes</h3>\n\n        <div class = \"div3\">\n          <h4><a name = \"shallow-copy\" id = \"shallow-copy\"></a>11.9.1\n          Shallow Copy</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-copy\" id = \"XSLT_element-copy\"></a><code>&lt;!-- Category: instruction\n          --&gt;<br/>\n          &lt;xsl:copy<br/>\n          &#160;&#160;copy-namespaces? = \"yes\" | \"no\"<br/>\n          &#160;&#160;inherit-namespaces? = \"yes\" | \"no\"<br/>\n          &#160;&#160;use-attribute-sets? = <var>qnames</var><br/>\n          &#160;&#160;type? = <var>qname</var><br/>\n          &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n          \"strip\"&gt;<br/>\n          &#160;&#160;&lt;!-- Content:\n          <var>sequence-constructor</var> --&gt;<br/>\n          &lt;/xsl:copy&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction provides a way of copying the context item.\n          If the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is a node, evaluating\n          the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction constructs a copy of the context node, and\n          the result of the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> instruction is\n          this newly constructed node. <span>By default,</span> the\n          namespace nodes of the context node are automatically\n          copied as well, but the attributes and children of the\n          node are not automatically copied.</p>\n\n          <p>When the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is an atomic value,\n          the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction returns this value. <span>The <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, if\n          present, is not evaluated.</span></p>\n\n          <p>When the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is an attribute node,\n          text node, comment node, processing instruction node, or\n          namespace node, the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> instruction\n          returns a new node that is a copy of the context node.\n          The new node will have the same node kind, name, and\n          string value as the context node. <span>In the case of an\n          attribute node, it will also have the same values for the\n          <code>is-id</code> and <code>is-idrefs</code>\n          properties.</span> The <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n          if present, is not evaluated.</p>\n\n          <p><span>When the context item is a document node or\n          element node, the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> instruction\n          returns a new node that has the same node kind and name\n          as the context node. The content of the new node is\n          formed by evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          contained in the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction.</span> The sequence obtained by evaluating\n          this sequence constructor is used (after prepending any\n          attribute nodes or namespace nodes as described in the\n          following paragraphs) to construct the content of the\n          document or element node, as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n          Complex Content</i></a>.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e17557\" id = \"d5e17557\"></a>Example:\n              Identity Transformation\n            </div>\n\n            <p>The identity transformation can be written using\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> as\n            follows:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:template match=\"@*|node()\"&gt;\n  &lt;xsl:copy&gt;\n    &lt;xsl:apply-templates select=\"@*|node()\"/&gt;\n  &lt;/xsl:copy&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n\n            <p>This template rule can be used to copy any node in a\n            tree by applying template rules to its attributes and\n            children. It can be combined with additional template\n            rules that modify selected nodes, for example if all\n            nodes are to be copied except <code>note</code>\n            elements and their contents, this can be achieved by\n            using the identity template rule together with the\n            template rule:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:template match=\"note\"/&gt;\n</pre>\n            </div>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> instruction\n            is most useful when copying element nodes. In other\n            cases, the <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n            instruction is more flexible, because it has a\n            <code>select</code> attribute allowing selection of the\n            nodes or values to be copied.</p>\n          </div>\n\n          <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction has an optional\n          <code>use-attribute-sets</code> attribute, whose value is\n          a <span>whitespace-separated</span> list of QNames that\n          identify <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n          declarations. This attribute is used only when copying\n          element nodes. This list is expanded as described in\n          <a href = \"#attribute-sets\"><i>10.2 Named Attribute\n          Sets</i></a> to produce a sequence of attribute nodes.\n          This sequence is prepended to the sequence produced as a\n          result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n          constructor</a>.</p>\n\n          <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction has an optional <code>copy-namespaces</code>\n          attribute, with the value <code>yes</code> or\n          <code>no</code>. The default value is <code>yes</code>.\n          The attribute is used only when copying element nodes. If\n          the value is set to <code>yes</code>, or is omitted, then\n          all the namespace nodes of the source element are copied\n          as namespace nodes for the result element. These copied\n          namespace nodes are prepended to the sequence produced as\n          a result of evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> (it\n          is immaterial whether they come before or after any\n          attribute nodes produced by expanding the\n          <code>use-attribute-sets</code> attribute). If the value\n          is set to <code>no</code>, then the namespace nodes are\n          not copied. However, namespace nodes will still be added\n          to the result element as <span class = \"verb\">required</span> by the namespace fixup process:\n          see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace\n          Fixup</i></a>.</p>\n\n          <p>The <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction has an optional\n          <code>inherit-namespaces</code> attribute, with the value\n          <code>yes</code> or <code>no</code>. The default value is\n          <code>yes</code>. The attribute is used only when copying\n          element nodes. If the value is set to <code>yes</code>,\n          or is omitted, then the namespace nodes created for the\n          newly constructed element (whether these were copied from\n          those of the source node, or generated as a result of\n          namespace fixup) are copied to the children and\n          descendants of the newly constructed element, as\n          described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n          Complex Content</i></a>. If the value is set to\n          <code>no</code>, then these namespace nodes are not\n          automatically copied to the children. This may result in\n          namespace undeclarations (such as <code>xmlns=\"\"</code>\n          or, in the case of XML Namespaces 1.1,\n          <code>xmlns:p=\"\"</code>) appearing on the child elements\n          when a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is\n          serialized.</p>\n\n          <p><a name = \"err-XTTE0950\" id = \"err-XTTE0950\"><span class = \"error\">[ERR XTTE0950]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> to use\n          the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction to copy a node that has namespace-sensitive\n          content if the <code>copy-namespaces</code> attribute has\n          the value <code>no</code> and its explicit or implicit\n          <code>validation</code> attribute has the value\n          <code>preserve</code>. It is also a type error if either\n          of these instructions (with\n          <code>validation=\"preserve\"</code>) is used to copy an\n          attribute having namespace-sensitive content, unless the\n          parent element is also copied. A node has\n          namespace-sensitive content if its typed value contains\n          an item of type <code>xs:QName</code> or\n          <code>xs:NOTATION</code> or a type derived therefrom. The\n          reason this is an error is because the validity of the\n          content depends on the namespace context being\n          preserved.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>When attribute nodes are copied, whether with\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or\n            with <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>, the\n            processor does not automatically copy any associated\n            namespace information. The namespace used in the\n            attribute name itself will be declared by virtue of the\n            namespace fixup process (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace Fixup</i></a>)\n            when the attribute is added to an element in the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a>, but if namespace <span>prefixes</span> are\n            used in the content of the attribute (for example, if\n            the value of the attribute is an XPath expression) then\n            it is the responsibility of the stylesheet author to\n            ensure that suitable namespace nodes are added to the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a>. This can be achieved by copying the namespace\n            nodes using <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, or by\n            generating them using <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>.</p>\n          </div>\n\n          <p>The optional attributes <code>type</code> and\n          <code>validation</code> may be used on the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> instruction to\n          validate the contents of an element, attribute or\n          document node against a type definition, element\n          declaration, or attribute declaration in a schema, and\n          thus to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> that the new copy of\n          an element or attribute node will carry. These attributes\n          are ignored when copying an item that is not an element,\n          attribute or document node. When the node being copied is\n          an element or document node, these attributes also affect\n          the type annotation carried by any elements and\n          attributes that have the copied element or document node\n          as an ancestor. These two attributes are both optional,\n          and if one is specified then the other <span class = \"verb\">must</span> be omitted. The permitted values of\n          these attributes and their semantics are described in\n          <a href = \"#validation\"><i>19.2 Validation</i></a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The final <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of the node in the\n            <a title = \"result tree\" href = \"#dt-result-tree\">result\n            tree</a> also depends on the <code>type</code> and\n            <code>validation</code> attributes of the instructions\n            used to create the ancestors of the node.</p>\n          </div>\n\n          <p>The base URI of a node is copied<span>, except in the\n          case of an element node having an <code>xml:base</code>\n          attribute, in which case the base URI of the new node is\n          taken as the value of the <code>xml:base</code>\n          attribute, resolved if it is relative against the base\n          URI of the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>\n          instruction</span>. If the copied node is subsequently\n          attached as a child to a new element <span>or document\n          node</span>, the final copy of the node inherits its base\n          URI from its parent node, unless this is overridden using\n          an <code>xml:base</code> attribute.</p>\n\n          <p>When an <code>xml:id</code> attribute is copied, using\n          either the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction, it is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          whether the value of the attribute is subjected to\n          attribute value normalization (that is, effectively\n          applying the <a href = \"http://www.w3.org/TR/xpath-functions/#func-normalize-space\">\n          <code>normalize-space</code></a><sup><small>FO</small></sup>\n          function).</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>In most cases the value will already have been\n            subjected to attribute value normalization on the\n            source tree, but if this processing has not been\n            performed on the source tree, it is not an error for it\n            to be performed on the result tree.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"copy-of\" id = \"copy-of\"></a>11.9.2 Deep\n          Copy</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-copy-of\" id = \"XSLT_element-copy-of\"></a><code>&lt;!-- Category: instruction\n          --&gt;<br/>\n          &lt;xsl:copy-of<br/>\n          &#160;&#160;<b>select</b> = <var>expression</var><br/>\n          &#160;&#160;copy-namespaces? = \"yes\" | \"no\"<br/>\n          &#160;&#160;type? = <var>qname</var><br/>\n          &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n          \"strip\"&#160;/&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction can be used to construct a copy of a sequence\n          of nodes <span>and/or atomic values</span>, with each new\n          node containing copies of all the children, attributes,\n          and (by default) namespaces of the original node,\n          recursively. The result of evaluating the instruction is\n          a sequence of <span>items</span> corresponding one-to-one\n          with the supplied sequence, and retaining its order.</p>\n\n          <p>The <span class = \"verb\">required</span>\n          <code>select</code> attribute contains an <a title = \"expression\" href = \"#dt-expression\">expression</a>,\n          <span>whose value may be any sequence of nodes and atomic\n          values</span>. The items in this sequence are processed\n          as follows:</p>\n\n          <ul>\n            <li>\n              <p>If the item is an element node, a new element is\n              constructed and appended to the result sequence. The\n              new element will have the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> as the\n              original, and it will have <span>deep</span> copies\n              of the attribute nodes and children of the element\n              node.</p>\n\n              <p>The new element will also have namespace nodes\n              copied from the original element node, unless they\n              are excluded by <span>specifying\n              <code>copy-namespaces=\"no\"</code>. If this attribute\n              is omitted, or takes the value <code>yes</code>, then\n              all the namespace nodes of the original element are\n              copied to the new element. If it takes the value\n              <code>no</code>, then none of the namespace nodes are\n              copied: however, namespace nodes will still be\n              created in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> as <span class = \"verb\">required</span> by the namespace fixup\n              process: see <a href = \"#namespace-fixup\"><i>5.7.3\n              Namespace Fixup</i></a>. This attribute affects all\n              elements copied by this instruction: both elements\n              selected directly by the <code>select</code>\n              <a title = \"expression\" href = \"#dt-expression\">expression</a>, and elements that\n              are descendants of nodes selected by the\n              <code>select</code> expression.</span></p>\n\n              <p>The new element will have the same values of the\n              <code>is-id</code>, <code>is-idrefs</code>, and\n              <code>nilled</code> properties as the original\n              element.</p>\n            </li>\n\n            <li>\n              <p>If the item is a document node, the instruction\n              adds a new document node to the result sequence; the\n              children of this document node will be one-to-one\n              copies of the children of the original document node\n              (each copied according to the rules for its own node\n              kind).</p>\n            </li>\n\n            <li>\n              <p>If the item is an attribute or namespace node, or\n              a text node, a comment, or a processing instruction,\n              the same rules apply as with <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> (see\n              <a href = \"#shallow-copy\"><i>11.9.1 Shallow\n              Copy</i></a>).</p>\n            </li>\n\n            <li>\n              <p>If the item is an atomic value, the value is\n              appended to the result sequence, as with <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>.</p>\n            </li>\n          </ul>\n\n          <p>The optional attributes <code>type</code> and\n          <code>validation</code> may be used on the <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction to validate the contents of an element,\n          attribute or document node against a type definition,\n          element declaration, or attribute declaration in a schema\n          and thus to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> that the new\n          copy of an element or attribute node will carry. These\n          attributes are applied individually to each element,\n          attribute, and document node that is selected by the\n          expression in the <code>select</code> attribute. These\n          attributes are ignored when copying an item that is not\n          an element, attribute or document node.</p>\n\n          <p>The specified <code>type</code> and\n          <code>validation</code> apply directly only to elements,\n          attributes and document nodes created as copies of nodes\n          actually selected by the <code>select</code> expression,\n          they do not apply to nodes that are implicitly copied\n          because they have selected nodes as an ancestor. However,\n          these attributes do indirectly affect the <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotation</a> carried by such implicitly copied nodes,\n          as a consequence of the validation process.</p>\n\n          <p>These two attributes are both optional, and if one is\n          specified then the other <span class = \"verb\">must</span>\n          be omitted. The permitted values of these attributes and\n          their semantics are described in <a href = \"#validation\"><i>19.2 Validation</i></a>.</p>\n\n          <p>Errors may occur when copying namespace-sensitive\n          elements or attributes using\n          <code>validation=\"preserve\"</code>. <span class = \"error\">[see <a href = \"#err-XTTE0950\">ERR\n          XTTE0950</a>]</span>.</p>\n\n          <p>The base URI of a node is copied<span>, except in the\n          case of an element node having an <code>xml:base</code>\n          attribute, in which case the base URI of the new node is\n          taken as the value of the <code>xml:base</code>\n          attribute, resolved if it is relative against the base\n          URI of the <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction</span>. If the copied node is subsequently\n          attached as a child to a new element <span>or document\n          node</span>, the final copy of the node inherits its base\n          URI from its parent node, unless this is overridden using\n          an <code>xml:base</code> attribute.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"constructing-sequences\" id = \"constructing-sequences\"></a>11.10 Constructing\n        Sequences</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-sequence\" id = \"XSLT_element-sequence\"></a><code>&lt;!-- Category: instruction\n        --&gt;<br/>\n        &lt;xsl:sequence<br/>\n        &#160;&#160;<b>select</b> = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-fallback\">xsl:fallback</a>* --&gt;<br/>\n        &lt;/xsl:sequence&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>\n        instruction may be used within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> to\n        construct a sequence of nodes and/or atomic values. This\n        sequence is returned as the result of the instruction.\n        Unlike most other instructions, <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a> can\n        return a sequence containing existing nodes, rather than\n        constructing new nodes. When <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a> is used\n        to add atomic values to a sequence, the effect is very\n        similar to the <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n        instruction.</p>\n\n        <p>The items comprising the result sequence are selected\n        using the <code>select</code> attribute.</p>\n\n        <p>Any contained <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n        instructions are ignored by an XSLT 2.0 processor, but can\n        be used to define fallback behavior for an XSLT 1.0\n        processor running in forwards compatibility mode.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18039\" id = \"d5e18039\"></a>Example:\n            Constructing a Sequence of Integers\n          </div>\n\n          <p>For example, the following code:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"values\" as=\"xs:integer*\"&gt;\n    &lt;xsl:sequence select=\"(1,2,3,4)\"/&gt;\n    &lt;xsl:sequence select=\"(8,9,10)\"/&gt;\n&lt;/xsl:variable&gt;\n&lt;xsl:value-of select=\"sum($values)\"/&gt;\n</pre>\n          </div>\n\n          <p>produces the output: <code>37</code></p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18050\" id = \"d5e18050\"></a>Example: Using\n            <code>xsl:for-each</code> to Construct a Sequence\n          </div>\n\n          <p>The following code constructs a sequence containing\n          the value of the <code>@price</code> attribute for\n          selected elements (which we assume to be typed as\n          <code>xs:decimal</code>), or a computed price for those\n          elements that have no <code>@price</code> attribute. It\n          then returns the average price:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"prices\" as=\"xs:decimal*\"&gt;\n  &lt;xsl:for-each select=\"//product\"&gt;\n    &lt;xsl:choose&gt;\n      &lt;xsl:when test=\"@price\"&gt;\n        &lt;xsl:sequence select=\"@price\"/&gt;\n      &lt;/xsl:when&gt;\n      &lt;xsl:otherwise&gt;\n        &lt;xsl:sequence select=\"@cost * 1.5\"/&gt;\n      &lt;/xsl:otherwise&gt;\n    &lt;/xsl:choose&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:variable&gt;\n&lt;xsl:value-of select=\"avg($prices)\"/&gt;\n</pre>\n          </div>\n\n          <p>Note that the existing <code>@price</code> attributes\n          could equally have been added to the <code>$prices</code>\n          sequence using <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a> or\n          <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>.\n          However, <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a> would\n          create a copy of the attribute node, which is not needed\n          in this situation, while <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> would\n          create a new text node, which then has to be converted to\n          an <code>xs:decimal</code>. Using <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>, which\n          in this case atomizes the existing attribute node and\n          adds an <code>xs:decimal</code> atomic value to the\n          result sequence, is a more direct way of achieving the\n          same result.</p>\n\n          <p>This example could alternatively be solved at the\n          XPath level:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:value-of select=\"avg(//product/(+@price, @cost*1.5)[1])\"/&gt;\n</pre>\n          </div>\n\n          <p>(The apparently redundant <code>+</code> operator is\n          there to atomize the attribute value: the expression on\n          the right hand side of the <code>/</code> operator must\n          not return a mixture of nodes and atomic values.)</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"number\" id = \"number\"></a>12 Numbering</h2>\n\n      <p class = \"element-syntax\"><a name = \"XSLT_element-number\" id = \"XSLT_element-number\"></a><code>&lt;!-- Category: instruction\n      --&gt;<br/>\n      &lt;xsl:number<br/>\n      &#160;&#160;value? = <var>expression</var><br/>\n      &#160;&#160;select? = <var>expression</var><br/>\n      &#160;&#160;level? = \"single\" | \"multiple\" | \"any\"<br/>\n      &#160;&#160;count? = <var>pattern</var><br/>\n      &#160;&#160;from? = <var>pattern</var><br/>\n      &#160;&#160;format? = { <var>string</var> }<br/>\n      &#160;&#160;lang? = { <var>nmtoken</var> }<br/>\n      &#160;&#160;letter-value? = { \"alphabetic\" | \"traditional\"\n      }<br/>\n      &#160;&#160;ordinal? = { <var>string</var> }<br/>\n      &#160;&#160;grouping-separator? = { <var>char</var> }<br/>\n      &#160;&#160;grouping-size? = { <var>number</var>\n      }&#160;/&gt;</code></p>\n\n      <p>The <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n      instruction is used to create a formatted number. The result\n      of the instruction is a newly constructed text node\n      containing the formatted number as its <a title = \"string value\" href = \"#dt-string-value\">string value</a>.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-place-marker\" id = \"dt-place-marker\" title = \"place marker\"></a>The <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n      performs two tasks: firstly, determining a <b>place\n      marker</b> (this is a sequence of integers, to allow for\n      hierarchic numbering schemes such as <code>1.12.2</code> or\n      <code>3(c)ii</code>), and secondly, formatting the place\n      marker for output as a text node in the result\n      sequence.<span class = \"definition\">]</span> The place marker\n      to be formatted can either be supplied directly, in the\n      <code>value</code> attribute, or it can be computed based on\n      the position of <span>a selected node</span> within the tree\n      that contains it.</p>\n\n      <p><a name = \"err-XTSE0975\" id = \"err-XTSE0975\"><span class = \"error\">[ERR XTSE0975]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n      the <code>value</code> attribute of <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> is present\n      unless the <code>select</code>, <code>level</code>,\n      <code>count</code>, and <code>from</code> attributes are all\n      absent.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>The facilities described in this section are\n        specifically designed to enable the calculation and\n        formatting of section numbers, paragraph numbers, and the\n        like. For formatting of other numeric quantities, the\n        <a href = \"#function-format-number\"><code>format-number</code></a>\n        function may be more suitable: see <a href = \"#format-number\"><i>16.4 Number Formatting</i></a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"formatting-supplied-number\" id = \"formatting-supplied-number\"></a>12.1 Formatting a Supplied\n        Number</h3>\n\n        <p>The <a title = \"place marker\" href = \"#dt-place-marker\">place marker</a> to be formatted may be\n        specified by an expression. The <code>value</code>\n        attribute contains the <a title = \"expression\" href = \"#dt-expression\">expression</a>. The value of this\n        expression is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a> using the procedure defined\n        in <a href = \"#xpath20\">[XPath 2.0]</a>, and each value\n        <span><var>$V</var> in the atomized sequence is then\n        converted to the integer value returned by the XPath\n        expression\n        <code>xs:integer(round(number($V)))</code>.</span> The\n        resulting sequence of integers is used as the place marker\n        to be formatted.</p>\n\n        <p>If <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n        behavior</a> is enabled for the instruction, then:</p>\n\n        <ul>\n          <li>\n            <p>all items in the <a title = \"atomize\" href = \"#dt-atomization\">atomized</a> sequence after the first\n            are discarded;</p>\n          </li>\n\n          <li>\n            <p>If the atomized sequence is empty, it is replaced by\n            a sequence containing the <code>xs:double</code> value\n            <code>NaN</code> as its only item;</p>\n          </li>\n\n          <li>\n            <p>If any value in the sequence cannot be converted to\n            an integer (this includes the case where the sequence\n            contains a <code>NaN</code> value) then the string\n            <code>NaN</code> is inserted into the formatted result\n            string in its proper position. The error described in\n            the following paragraph does not apply in this\n            case.</p>\n          </li>\n        </ul>\n\n        <p><a name = \"err-XTDE0980\" id = \"err-XTDE0980\"><span class = \"error\">[ERR XTDE0980]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if any undiscarded item in the atomized sequence\n        supplied as the value of the <code>value</code> attribute\n        of <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n        cannot be converted to an integer, or if the resulting\n        integer is less than 0 (zero).</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The value zero does not arise when numbering nodes in\n          a source document, but it can arise in other numbering\n          sequences. It is permitted specifically because the rules\n          of the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n          are also invoked by functions such as <a href = \"#function-format-time\"><code>format-time</code></a>: the\n          minutes and seconds component of a time value can\n          legitimately be zero.</p>\n        </div>\n\n        <p>The resulting sequence is formatted as a string using\n        the <a title = \"effective value\" href = \"#dt-effective-value\">effective values</a> of the\n        attributes specified in <a href = \"#convert\"><i>12.3 Number\n        to String Conversion Attributes</i></a>; each of these\n        attributes is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>. After conversion, the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> element\n        constructs a new text node containing the resulting string,\n        and returns this node.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18312\" id = \"d5e18312\"></a>Example: Numbering\n            a Sorted List\n          </div>\n\n          <p>The following example numbers a sorted list:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"items\"&gt;\n  &lt;xsl:for-each select=\"item\"&gt;\n    &lt;xsl:sort select=\".\"/&gt;\n    &lt;p&gt;\n      &lt;xsl:number value=\"position()\" format=\"1. \"/&gt;\n      &lt;xsl:value-of select=\".\"/&gt;\n    &lt;/p&gt;\n  &lt;/xsl:for-each&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"numbering-based-on-position\" id = \"numbering-based-on-position\"></a>12.2 Numbering based on\n        Position in a Document</h3>\n\n        <p>If no <code>value</code> attribute is specified, then\n        the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n        instruction returns a new text node containing a formatted\n        <a title = \"place marker\" href = \"#dt-place-marker\">place\n        marker</a> that is based on the position of <span>a\n        selected node within its containing document. If the\n        <code>select</code> attribute is present, then the\n        expression contained in the <code>select</code> attribute\n        is evaluated to determine the selected node. If the\n        <code>select</code> attribute is omitted, then the selected\n        node is the <a title = \"context node\" href = \"#dt-context-node\">context node</a>.</span></p>\n\n        <p><a name = \"err-XTTE0990\" id = \"err-XTTE0990\"><span class = \"error\">[ERR XTTE0990]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n        instruction is evaluated, with no <code>value</code> or\n        <code>select</code> attribute, when the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is\n        not a node.</p>\n\n        <p><a name = \"err-XTTE1000\" id = \"err-XTTE1000\"><span class = \"error\">[ERR XTTE1000]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        result of evaluating the <code>select</code> attribute of\n        the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n        instruction is anything other than a single node.</p>\n\n        <p>The following attributes control how the selected node\n        is to be numbered:</p>\n\n        <ul>\n          <li>\n            <p>The <code>level</code> attribute specifies rules for\n            selecting the nodes that are taken into account in\n            allocating a number; it has the values\n            <code>single</code>, <code>multiple</code> or\n            <code>any</code>. The default is\n            <code>single</code>.</p>\n          </li>\n\n          <li>\n            <p>The <code>count</code> attribute is a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that specifies\n            which nodes are to be counted at those levels. If\n            <code>count</code> attribute is not specified, then it\n            defaults to the pattern that matches any node with the\n            same node <span>kind</span> as the\n            <span>selected</span> node and, if the\n            <span>selected</span> node has an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>, with the same\n            <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> as the\n            <span>selected</span> node.</p>\n          </li>\n\n          <li>\n            <p>The <code>from</code> attribute is a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that specifies\n            where counting starts.</p>\n          </li>\n        </ul>\n\n        <p>In addition, the attributes specified in <a href = \"#convert\"><i>12.3 Number to String Conversion\n        Attributes</i></a> are used for number to string\n        conversion, as in the case when the <code>value</code>\n        attribute is specified.</p>\n\n        <p>The <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> element first\n        constructs a sequence of positive integers using the\n        <code>level</code>, <code>count</code> and\n        <code>from</code> attributes. Where <code>level</code> is\n        <code>single</code> or <code>any</code>, this sequence will\n        either be empty or contain a single number; where\n        <code>level</code> is <code>multiple</code>, the sequence\n        may be of any length. The sequence is constructed as\n        follows:</p>\n\n        <p>Let <code>matches-count($node)</code> be a function that\n        returns true if and only if the given node\n        <code>$node</code> matches the pattern given in the\n        <code>count</code> attribute, or the implied pattern\n        (according to the rules given above) if the\n        <code>count</code> attribute is omitted.</p>\n\n        <p>Let <code>matches-from($node)</code> be a function that\n        returns true if and only if the given node\n        <code>$node</code> matches the pattern given in the\n        <code>from</code> attribute, <span>or if <code>$node</code>\n        is the root node of a tree. If the <code>from</code>\n        attribute is omitted, then the function returns true if and\n        only if <code>$node</code> is the root node of a\n        tree</span>.</p>\n\n        <p>Let <code>$S</code> be the selected node.</p>\n\n        <p>When <code>level=\"single\"</code>:</p>\n\n        <ul>\n          <li>\n            <p>Let <code>$A</code> be the node sequence selected by\n            the following expression:</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/ancestor-or-self::node()[matches-count(.)][1]</code></p>\n\n            <p>(this selects the innermost ancestor-or-self node\n            that matches the <code>count</code> pattern)</p>\n          </li>\n\n          <li>\n            <p>Let <code>$F</code> be the node sequence selected by\n            the expression</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/ancestor-or-self::node()[matches-from(.)][1]</code></p>\n\n            <p>(this selects the innermost ancestor-or-self node\n            that matches the <code>from</code> pattern):</p>\n          </li>\n\n          <li>\n            <p>Let <code>$AF</code> be the value of:</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$A[ancestor-or-self::node()[.\n            is $F]]</code></p>\n\n            <p>(this selects $A if it is in the subtree rooted at\n            $F, or the empty sequence otherwise)</p>\n          </li>\n\n          <li>\n            <p>If <code>$AF</code> is empty, return the empty\n            sequence, <code>()</code></p>\n          </li>\n\n          <li>\n            <p>Otherwise return the value of:</p>\n\n            <p><code>&#160;&#160;&#160;1 +\n            count($AF/preceding-sibling::node()[matches-count(.)])</code></p>\n\n            <p>(the number of preceding siblings of the counted\n            node that match the <code>count</code> pattern, plus\n            one).</p>\n          </li>\n        </ul>\n\n        <p>When <code>level=\"multiple\"</code>:</p>\n\n        <ul>\n          <li>\n            <p>Let <code>$A</code> be the node sequence selected by\n            the expression</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/ancestor-or-self::node()[matches-count(.)]</code></p>\n\n            <p>(the set of ancestor-or-self nodes that match the\n            <code>count</code> pattern)</p>\n          </li>\n\n          <li>\n            <p>Let <code>$F</code> be the node sequence selected by\n            the expression</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/ancestor-or-self::node()[matches-from(.)][1]</code></p>\n\n            <p>(the innermost ancestor-or-self node that matches\n            the <code>from</code> pattern)</p>\n          </li>\n\n          <li>\n            <p>Let <code>$AF</code> be the value of</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$A[ancestor-or-self::node()[.\n            is $F]]</code></p>\n\n            <p>(the nodes selected in the first step that are in\n            the subtree rooted at the node selected in the second\n            step)</p>\n          </li>\n\n          <li>\n            <p>Return the result of the expression</p>\n\n            <p><code>&#160;&#160;&#160;for $af in $AF return\n            1+count($af/preceding-sibling::node()[matches-count(.)])</code></p>\n\n            <p>(a sequence of integers containing, for each of\n            these nodes, one plus the number of preceding siblings\n            that match the <code>count</code> pattern)</p>\n          </li>\n        </ul>\n\n        <p>When <code>level=\"any\"</code>:</p>\n\n        <ul>\n          <li>\n            <p>Let <code>$A</code> be the node sequence selected by\n            the expression</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/(preceding::node()|ancestor-or-self::node())[matches-count(.)]</code></p>\n\n            <p>(the set of nodes consisting of the selected node\n            together with all nodes, other than attributes and\n            namespaces, that precede the selected node in document\n            order, provided that they match the <code>count</code>\n            pattern)</p>\n          </li>\n\n          <li>\n            <p>Let <code>$F</code> be the node sequence selected by\n            the expression</p>\n\n            <p>\n            <code>&#160;&#160;&#160;$S/(preceding::node()|ancestor::node())[matches-from(.)][last()]</code></p>\n\n            <p>(the last node in document order that matches the\n            <code>from</code> pattern and that precedes the\n            selected node, using the same definition)</p>\n          </li>\n\n          <li>\n            <p>Let <code>$AF</code> be the node sequence <code>$A[.\n            is $F or . &gt;&gt; $F]</code>.</p>\n\n            <p>(the nodes selected in the first step, excluding\n            those that precede the node selected in the second\n            step)</p>\n          </li>\n\n          <li>\n            <p>If <code>$AF</code> is empty, return the empty\n            sequence, <code>()</code></p>\n          </li>\n\n          <li>\n            <p>Otherwise return the value of the expression\n            <code>count($AF)</code></p>\n          </li>\n        </ul>\n\n        <p>The sequence of numbers (the <a title = \"place marker\" href = \"#dt-place-marker\">place marker</a>) is then converted\n        into a string using the <a title = \"effective value\" href = \"#dt-effective-value\">effective values</a> of the\n        attributes specified in <a href = \"#convert\"><i>12.3 Number\n        to String Conversion Attributes</i></a>; each of these\n        attributes is interpreted as an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        template</a>. After conversion, the resulting string is\n        <span>used to create a text node, which forms the result of\n        the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n        instruction</span>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18740\" id = \"d5e18740\"></a>Example: Numbering\n            the Items in an Ordered List\n          </div>\n\n          <p>The following will number the items in an ordered\n          list:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"ol/item\"&gt;\n  &lt;fo:block&gt;\n    &lt;xsl:number/&gt;\n    &lt;xsl:text&gt;. &lt;/xsl:text&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18747\" id = \"d5e18747\"></a>Example:\n            Multi-Level Numbering\n          </div>\n\n          <p>The following two rules will number <code>title</code>\n          elements. This is intended for a document that contains a\n          sequence of chapters followed by a sequence of\n          appendices, where both chapters and appendices contain\n          sections, which in turn contain subsections. Chapters are\n          numbered 1, 2, 3; appendices are numbered A, B, C;\n          sections in chapters are numbered 1.1, 1.2, 1.3; sections\n          in appendices are numbered A.1, A.2, A.3.\n          <span>Subsections within a chapter are numbered 1.1.1,\n          1.1.2, 1.1.3; subsections within an appendix are numbered\n          A.1.1, A.1.2, A.1.3.</span></p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"title\"&gt;\n  &lt;fo:block&gt;\n     &lt;xsl:number level=\"multiple\"\n                 count=\"chapter|section|subsection\"\n                 format=\"1.1 \"/&gt;\n     &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"appendix//title\" priority=\"1\"&gt;\n  &lt;fo:block&gt;\n     &lt;xsl:number level=\"multiple\"\n                 count=\"appendix|section|subsection\"\n                 format=\"A.1 \"/&gt;\n     &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18759\" id = \"d5e18759\"></a>Example: Numbering\n            Notes within a Chapter\n          </div>\n\n          <p>This example numbers notes sequentially within a\n          chapter:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"note\"&gt;\n  &lt;fo:block&gt;\n     &lt;xsl:number level=\"any\" from=\"chapter\" format=\"(1) \"/&gt;\n     &lt;xsl:apply-templates/&gt;\n  &lt;/fo:block&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"convert\" id = \"convert\"></a>12.3 Number to\n        String Conversion Attributes</h3>\n\n        <p>The following attributes are used to control conversion\n        of a sequence of numbers into a string. The numbers are\n        integers greater than <span>or equal to</span> 0 (zero).\n        The attributes are all optional.</p>\n\n        <p>The main attribute is <code>format</code>. The default\n        value for the <code>format</code> attribute is\n        <code>1</code>. The <code>format</code> attribute is split\n        into a sequence of tokens where each token is a maximal\n        sequence of alphanumeric characters or a maximal sequence\n        of non-alphanumeric characters. <em>Alphanumeric</em> means\n        any character that has a Unicode category of Nd, Nl, No,\n        Lu, Ll, Lt, Lm or Lo. The alphanumeric tokens (<em>format\n        tokens</em>) indicate the format to be used for each number\n        in the sequence; in most cases the format token is the same\n        as the required representation of the number 1 (one).</p>\n\n        <p>Each non-alphanumeric token is either a prefix, a\n        separator, or a suffix. <span>If there is a\n        non-alphanumeric token but no format token, then the single\n        non-alphanumeric token is used as both the prefix and the\n        suffix.</span> The prefix, if it exists, is the\n        non-alphanumeric token that precedes the first format\n        token: the prefix always appears exactly once in the\n        constructed string, at the start. The suffix, if it exists,\n        is the non-alphanumeric token that follows the last format\n        token: the suffix always appears exactly once in the\n        constructed string, at the end. All other non-alphanumeric\n        tokens (those that occur between two format tokens) are\n        <em>separator tokens</em> and are used to separate numbers\n        in the sequence.</p>\n\n        <p>The <var>n</var>th format token is used to format the\n        <var>n</var>th number in the sequence. If there are more\n        numbers than format tokens, then the last format token is\n        used to format remaining numbers. If there are no format\n        tokens, then a format token of <code>1</code> is used to\n        format all numbers. Each number after the first is\n        separated from the preceding number by the separator token\n        preceding the format token used to format that number, or,\n        if <span>that is the first format token</span>, then by\n        <code>.</code> (dot).</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e18820\" id = \"d5e18820\"></a>Example:\n            Formatting a List of Numbers\n          </div>\n\n          <p>Given the sequence of numbers <code>5, 13, 7</code>\n          and the format token <code>A-001(i)</code>, the output\n          will be the string <code>E-013(vii)</code></p>\n        </div>\n\n        <p>Format tokens are interpreted as follows:</p>\n\n        <ul>\n          <li>\n            <p>Any token where the last character has a decimal\n            digit value of 1 (as specified in the Unicode character\n            property database), and the Unicode value of preceding\n            characters is one less than the Unicode value of the\n            last character generates a decimal representation of\n            the number where each number is at least as long as the\n            format token. <span>The digits used in the decimal\n            representation are the set of digits containing the\n            digit character used in the format token.</span> Thus,\n            a format token <code>1</code> generates the sequence\n            <code>0 1 2 ... 10 11 12 ...</code>, and a format token\n            <code>01</code> generates the sequence <code>00 01 02\n            ... 09 10 11 12 ... 99 100 101</code>. <span>A format\n            token of <code>&amp;#x661;</code> (Arabic-Indic digit\n            one) generates the sequence <code>١</code> then\n            <code>٢</code> then <code>٣</code> ...</span></p>\n          </li>\n\n          <li>\n            <p>A format token <code>A</code> generates the sequence\n            <code>A B C ... Z AA AB AC...</code>.</p>\n          </li>\n\n          <li>\n            <p>A format token <code>a</code> generates the sequence\n            <code>a b c ... z aa ab ac...</code>.</p>\n          </li>\n\n          <li>\n            <p>A format token <code>i</code> generates the sequence\n            <code>i ii iii iv v vi vii viii ix x ...</code>.</p>\n          </li>\n\n          <li>\n            <p>A format token <code>I</code> generates the sequence\n            <code>I II III IV V VI VII VIII IX X ...</code>.</p>\n          </li>\n\n          <li>\n            <p>A format token <code>w</code> generates numbers\n            written as lower-case words, for example in English,\n            <code>one two three four ...</code></p>\n          </li>\n\n          <li>\n            <p>A format token <code>W</code> generates numbers\n            written as upper-case words, for example in English,\n            <code>ONE TWO THREE FOUR ...</code></p>\n          </li>\n\n          <li>\n            <p>A format token <code>Ww</code> generates numbers\n            written as title-case words, for example in English,\n            <code>One Two Three Four ...</code></p>\n          </li>\n\n          <li>\n            <p>Any other format token indicates a numbering\n            sequence <span>in which that token represents the\n            number 1 (one)</span> (but see the note below). It is\n            <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n            which numbering sequences, additional to those listed\n            above, are supported. If an implementation does not\n            support a numbering sequence represented by the given\n            token, it <span class = \"verb\">must</span> use a format\n            token of <code>1</code>.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>In some traditional numbering sequences additional\n              signs are added to denote that the letters should be\n              interpreted as numbers; these are not included in the\n              format token. An example, see also the example below,\n              is classical Greek where a <em>dexia keraia</em> and\n              sometimes an <em>aristeri keraia</em> is added.</p>\n            </div>\n          </li>\n        </ul>\n\n        <p>For all format tokens other than the first kind above\n        (one that consists of decimal digits), there <span class = \"verb\">may</span> be <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        <span>lower and</span> upper bounds on the range of numbers\n        that can be formatted using this format token; indeed, for\n        some numbering sequences there may be intrinsic limits.\n        <span>For example, the formatting token\n        <code>&amp;#x2460;</code> (circled digit one) has a range\n        of 1 to 20 imposed by the Unicode character\n        repertoire.</span> For the numbering sequences described\n        above <span>any upper bound imposed by the implementation\n        <span class = \"verb\">must not</span> be less than 1000 (one\n        thousand) and any lower bound must not be greater than 1.\n        Numbers that fall outside this range <span class = \"verb\">must</span> be formatted using the format token\n        <code>1</code>. The numbering sequence associated with the\n        format token <code>1</code> has a lower bound of 0\n        (zero)</span>.</p>\n\n        <p>The above expansions of numbering sequences for format\n        tokens such as <code>a</code> and <code>i</code> are\n        indicative but not prescriptive. There are various\n        conventions in use for how alphabetic sequences continue\n        when the alphabet is exhausted, and differing conventions\n        for how roman numerals are written (for example,\n        <code>IV</code> versus <code>IIII</code> as the\n        representation of the number 4). Sometimes alphabetic\n        sequences are used that omit letters such as <code>i</code>\n        and <code>o</code>. This specification does not prescribe\n        the detail of any sequence other than those sequences\n        consisting entirely of decimal digits.</p>\n\n        <p>Many numbering sequences are language-sensitive. This\n        applies especially to the sequence selected by the tokens\n        <code>w</code>, <code>W</code> and <code>Ww</code>. It also\n        applies to other sequences, for example different languages\n        using the Cyrillic alphabet use different sequences of\n        characters, each starting with the letter #x410 (Cyrillic\n        capital letter A). In such cases, the <code>lang</code>\n        attribute specifies which language's conventions are to be\n        used; it has the same range of values as\n        <code>xml:lang</code> (see <a href = \"#REC-xml\">[XML\n        1.0]</a>). If no <code>lang</code> value is specified, the\n        language that is used is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n        The set of languages for which numbering is supported is\n        <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>. If\n        a language is requested that is not supported, the\n        processor uses the language that it would use if the\n        <code>lang</code> attribute were omitted.</p>\n\n        <p>If the optional <code>ordinal</code> attribute is\n        present, and if its value is not a zero-length string, this\n        indicates a request to output ordinal numbers rather than\n        cardinal numbers. For example, in English, the value\n        <code>ordinal=\"yes\"</code> when used with the format token\n        <code>1</code> outputs the sequence <code>1st 2nd 3rd 4th\n        ...</code>, and when used with the format token\n        <code>w</code> outputs the sequence <code>first second\n        third fourth ...</code>. In some languages, ordinal numbers\n        vary depending on the grammatical context, for example they\n        may have different genders and may decline with the noun\n        that they qualify. In such cases the value of the\n        <code>ordinal</code> attribute may be used to indicate the\n        variation of the ordinal number required. The way in which\n        the variation is indicated will depend on the conventions\n        of the language. For inflected languages that vary the\n        ending of the word, the preferred approach is to indicate\n        the required ending, preceded by a hyphen: for example in\n        German, appropriate values are <code>-e, -er, -es,\n        -en</code>. <span>It is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        what combinations of values of the format token, the\n        language, and the <code>ordinal</code> attribute are\n        supported.</span> If ordinal numbering is not supported for\n        the combination of the format token, the language, and the\n        actual value of the <code>ordinal</code> attribute, the\n        request is ignored and cardinal numbers are generated\n        instead.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e19098\" id = \"d5e19098\"></a>Example: Ordinal\n            Numbering in Italian\n          </div>\n\n          <p>The specification <code>format=\"1\" ordinal=\"-º\"\n          lang=\"it\"</code>, if supported, should produce the\n          sequence:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n1º 2º 3º 4º ...\n</pre>\n          </div>\n\n          <p>The specification <code>format=\"Ww\" ordinal=\"-o\"\n          lang=\"it\"</code>, if supported, should produce the\n          sequence:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\nPrimo Secondo Terzo Quarto Quinto ...\n</pre>\n          </div>\n        </div>\n\n        <p>The <code>letter-value</code> attribute disambiguates\n        between numbering sequences that use letters. In many\n        languages there are two commonly used numbering sequences\n        that use letters. One numbering sequence assigns numeric\n        values to letters in alphabetic sequence, and the other\n        assigns numeric values to each letter in some other manner\n        traditional in that language. In English, these would\n        correspond to the numbering sequences specified by the\n        format tokens <code>a</code> and <code>i</code>. In some\n        languages, the first member of each sequence is the same,\n        and so the format token alone would be ambiguous. A value\n        of <code>alphabetic</code> specifies the alphabetic\n        sequence; a value of <code>traditional</code> specifies the\n        other sequence. If the <code>letter-value</code> attribute\n        is not specified, then it is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n        how any ambiguity is resolved.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Implementations may use <span><a title = \"extension attribute\" href = \"#dt-extension-attribute\">extension attributes</a></span>\n          on <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n          to provide additional control over the way in which\n          numbers are formatted.</p>\n        </div>\n\n        <p>The <code>grouping-separator</code> attribute gives the\n        separator used as a grouping (for example, thousands)\n        separator in decimal numbering sequences, and the optional\n        <code>grouping-size</code> specifies the size (normally 3)\n        of the grouping. For example,\n        <code>grouping-separator=\",\"</code> and\n        <code>grouping-size=\"3\"</code> would produce numbers of the\n        form <code>1,000,000</code> while\n        <code>grouping-separator=\".\"</code> and\n        <code>grouping-size=\"2\"</code> would produce numbers of the\n        form <code>1.00.00.00</code>. If only one of the\n        <code>grouping-separator</code> and\n        <code>grouping-size</code> attributes is specified, then it\n        is ignored.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e19182\" id = \"d5e19182\"></a>Example: Format\n            Tokens and the Resulting Sequences\n          </div>\n\n          <p>These examples use non-Latin characters which might\n          not display correctly in all browsers, depending on the\n          system configuration.</p>\n\n          <table border = \"1\" cellpadding = \"5\">\n            <thead>\n              <tr>\n                <th align = \"left\">Description</th>\n\n                <th align = \"left\">Format Token</th>\n\n                <th align = \"left\">Sequence</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>French cardinal words</td>\n\n                <td><code>format=\"Ww\" lang=\"fr\"</code></td>\n\n                <td>Un, Deux, Trois, Quatre</td>\n              </tr>\n\n              <tr>\n                <td>German ordinal words</td>\n\n                <td><code>format=\"w\" ordinal=\"-e\"\n                lang=\"de\"</code></td>\n\n                <td>erste, zweite, dritte, vierte</td>\n              </tr>\n\n              <tr>\n                <td>Katakana numbering</td>\n\n                <td><code>format=\"&amp;#x30A2;\"</code></td>\n\n                <td>ア, イ, ウ, エ, オ, カ, キ, ク, ケ, コ, サ, シ, ス, セ, ソ, タ,\n                チ, ツ, テ, ト, ナ, ニ, ヌ, ネ, ノ, ハ, ヒ, フ, ヘ, ホ, マ, ミ, ム,\n                メ, モ, ヤ, ユ, ヨ, ラ, リ, ル, レ, ロ, ワ, ヰ, ヱ, ヲ, ン</td>\n              </tr>\n\n              <tr>\n                <td>Katakana numbering in iroha order</td>\n\n                <td><code>format=\"&amp;#x30A4;\"</code></td>\n\n                <td>イ, ロ, ハ, ニ, ホ, ヘ, ト, チ, リ, ヌ, ル, ヲ, ワ, カ, ヨ, タ,\n                レ, ソ, ツ, ネ, ナ, ラ, ム, ウ, ヰ, ノ, オ, ク, ヤ, マ, ケ, フ, コ,\n                エ, テ, ア, サ, キ, ユ, メ, ミ, シ, ヱ, ヒ, モ, セ, ス</td>\n              </tr>\n\n              <tr>\n                <td>Thai numbering</td>\n\n                <td><code>format=\"&amp;#x0E51;\"</code></td>\n\n                <td>๑, ๒, ๓, ๔, ๕, ๖, ๗, ๘, ๙, ๑๐, ๑๑, ๑๒, ๑๓, ๑๔,\n                ๑๕, ๑๖, ๑๗, ๑๘, ๑๙, ๒๐</td>\n              </tr>\n\n              <tr>\n                <td>Traditional Hebrew numbering</td>\n\n                <td><code>format=\"&amp;#x05D0;\"\n                letter-value=\"traditional\"</code></td>\n\n                <td>א, ב, ג, ד, ה, ו, ז, ח, ט, י, יא, יב, יג, יד,\n                טו, טז, יז, יח, יט, כ</td>\n              </tr>\n\n              <tr>\n                <td>Traditional Georgian numbering</td>\n\n                <td><code>format=\"&amp;#x10D0;\"\n                letter-value=\"traditional\"</code></td>\n\n                <td>ა, ბ, გ, დ, ე, ვ, ზ, ჱ, თ, ი, ია, იბ, იგ, იდ,\n                იე, ივ, იზ, იჱ, ით, კ</td>\n              </tr>\n\n              <tr>\n                <td>Classical Greek numbering (see note)</td>\n\n                <td><code>format=\"&amp;#x03B1;\"\n                letter-value=\"traditional\"</code></td>\n\n                <td>αʹ, βʹ, γʹ, δʹ, εʹ, ϛʹ, ζʹ, ηʹ, θʹ, ιʹ, ιαʹ,\n                ιβʹ, ιγʹ, ιδʹ, ιεʹ, ιϛʹ, ιζʹ, ιηʹ, ιθʹ, κʹ</td>\n              </tr>\n\n              <tr>\n                <td>Old Slavic numbering</td>\n\n                <td><code>format=\"&amp;#x0430;\"\n                letter-value=\"traditional\"</code></td>\n\n                <td>А, В, Г, Д, Е, Ѕ, З, И, Ѳ, Ӏ, АӀ, ВӀ, ГӀ, ДӀ,\n                ЕӀ, ЅӀ, ЗӀ, ИӀ, ѲӀ, К</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p>Note that Glassical Greek is an example where the\n          format token is not the same as the representation of the\n          number 1.</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"sorting\" id = \"sorting\"></a>13 Sorting</h2>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-sort-key-specification\" id = \"dt-sort-key-specification\" title = \"sort key specification\"></a>A <b>sort key\n      specification</b> is a sequence of one or more adjacent\n      <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n      which together define rules for sorting the items in an input\n      sequence to form a sorted sequence.<span class = \"definition\">]</span></p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-sort-key-component\" id = \"dt-sort-key-component\" title = \"sort key component\"></a>Within a <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>, each\n      <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element\n      defines one <b>sort key component</b>.<span class = \"definition\">]</span> The first <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element specifies\n      the primary component of the sort key specification, the\n      second <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n      element specifies the secondary component of the sort key\n      specification and so on.</p>\n\n      <p>A sort key specification may occur immediately within an\n      <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n      <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n      <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>, or\n      <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n      element.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>When used within <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>, <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n        or <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>,\n        <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n        must occur before any other children.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xsl-sort\" id = \"xsl-sort\"></a>13.1 The <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> Element</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-sort\" id = \"XSLT_element-sort\"></a><code>&lt;xsl:sort<br/>\n        &#160;&#160;select? = <var>expression</var><br/>\n        &#160;&#160;lang? = { <var>nmtoken</var> }<br/>\n        &#160;&#160;order? = { \"ascending\" | \"descending\" }<br/>\n        &#160;&#160;collation? = { <var>uri</var> }<br/>\n        &#160;&#160;stable? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;case-order? = { \"upper-first\" | \"lower-first\"\n        }<br/>\n        &#160;&#160;data-type? = { \"text\" | \"number\" |\n        <var>qname-but-not-ncname</var> }&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:sort&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n        element defines a <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a>. A sort key\n        component specifies how a <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key value</a> is to be computed\n        for each item in the sequence being sorted, and also how\n        two sort key values are to be compared.</p>\n\n        <p>The value of a <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a> is\n        determined either by its <code>select</code> attribute, or\n        by the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>. If\n        neither is present, the default is <code>select=\".\"</code>,\n        which has the effect of sorting on the actual value of the\n        item if it is an atomic value, or on the typed-value of the\n        item if it is a node. If a <code>select</code> attribute is\n        present, its value <span class = \"verb\">must</span> be an\n        XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>.</p>\n\n        <p><a name = \"err-XTSE1015\" id = \"err-XTSE1015\"><span class = \"error\">[ERR XTSE1015]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n        element with a <code>select</code> attribute has non-empty\n        content.</p>\n\n        <p>Those attributes of the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements whose\n        values are <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        templates</a> are evaluated using the same <a title = \"focus\" href = \"#dt-focus\">focus</a> as is used to evaluate the\n        <code>select</code> attribute of the containing instruction\n        (specifically, <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n        <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n        or <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>).</p>\n\n        <p>The <code>stable</code> attribute is permitted only on\n        the first <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n        element within a <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a></p>\n\n        <p><a name = \"err-XTSE1017\" id = \"err-XTSE1017\"><span class = \"error\">[ERR XTSE1017]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n        element other than the first in a sequence of sibling\n        <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n        has a <code>stable</code> attribute.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-stable\" id = \"dt-stable\" title = \"stable\"></a>A <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a> is\n        said to be <b>stable</b> if its first <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element has no\n        <code>stable</code> attribute, or has a <code>stable</code>\n        attribute whose <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> is\n        <code>yes</code>.<span class = \"definition\">]</span></p>\n\n        <div class = \"div3\">\n          <h4><a name = \"sorting-process\" id = \"sorting-process\"></a>13.1.1 The Sorting Process</h4>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-initial-sequence\" id = \"dt-initial-sequence\" title = \"initial sequence\"></a>The sequence to be sorted is\n          referred to as the <b>initial sequence</b>.<span class = \"definition\">]</span></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-sorted-sequence\" id = \"dt-sorted-sequence\" title = \"sorted sequence\"></a>The sequence after sorting as\n          defined by the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements is\n          referred to as the <b>sorted sequence</b>.<span class = \"definition\">]</span></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-sort-key-value\" id = \"dt-sort-key-value\" title = \"sort key value\"></a> For each item in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial\n          sequence</a>, a value is computed for each <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort\n          key component</a> within the <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>.\n          The value computed for an item by using the\n          <var>N</var>th sort key component is referred to as the\n          <var>N</var>th <b>sort key value</b> of that\n          item.<span class = \"definition\">]</span></p>\n\n          <p>The items in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a> are ordered\n          into a <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a> by comparing\n          their <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a>. The relative\n          position of two items <var>A</var> and <var>B</var> in\n          the sorted sequence is determined as follows. The first\n          sort key value of <var>A</var> is compared with the first\n          sort key value of <var>B</var>, according to the rules of\n          the first <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a>. If,\n          under these rules, <var>A</var> is less than\n          <var>B</var>, then <var>A</var> will precede <var>B</var>\n          in the sorted sequence, unless the <code>order</code>\n          attribute of this <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a> specifies\n          <code>descending</code>, in which case <var>B</var> will\n          precede <var>A</var> in the sorted sequence. If, however,\n          the relevant sort key values compare equal, then the\n          second sort key value of <var>A</var> is compared with\n          the second sort key value of <var>B</var>, according to\n          the rules of the second <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a>.\n          This continues until two sort key values are found that\n          compare unequal. If all the sort key values compare\n          equal, <span>and the <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key\n          specification</a> is <a title = \"stable\" href = \"#dt-stable\">stable</a>,</span> then <var>A</var> will\n          precede <var>B</var> in the <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a> if and\n          only if <var>A</var> preceded <var>B</var> in the\n          <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a>. <span>If all\n          the sort key values compare equal, and the <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>\n          is not <a title = \"stable\" href = \"#dt-stable\">stable</a>,\n          then the relative order of <var>A</var> and <var>B</var>\n          in the <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a> is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>.</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>If two items have equal <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a>,\n            <span>and the sort is <a title = \"stable\" href = \"#dt-stable\">stable</a>,</span> then their order in the\n            <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a> will be the\n            same as their order in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a>,\n            regardless of whether <code>order=\"descending\"</code>\n            was specified on any or all of the <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort\n            key components</a>.</p>\n          </div>\n\n          <p>The <var>N</var>th sort key value is computed by\n          evaluating either the <code>select</code> attribute or\n          the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> of\n          the <var>N</var>th <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element, or the\n          expression <code>.</code> (dot) if neither is present.\n          This evaluation is done with the <a title = \"focus\" href = \"#dt-focus\">focus</a> set as follows:</p>\n\n          <ul>\n            <li>\n              <p>The <a title = \"context item\" href = \"#dt-context-item\">context item</a> is the item in\n              the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a> whose\n              <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key value</a> is being\n              computed.</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"context position\" href = \"#dt-context-position\">context position</a> is the\n              position of that item in the initial sequence.</p>\n            </li>\n\n            <li>\n              <p>The <a title = \"context size\" href = \"#dt-context-size\">context size</a> is the size of\n              the initial sequence.</p>\n            </li>\n          </ul>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>As in any other XPath expression, the <a href = \"#function-current\"><code>current</code></a> function\n            may be used within the <code>select</code> expression\n            of <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> to\n            refer to the item that is the context item for the\n            expression as a whole; that is, the item whose\n            <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key value</a> is being\n            computed.</p>\n          </div>\n\n          <p>The <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a> are <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>, and are\n          then compared. The way they are compared depends on their\n          data type, as described in the next section.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"comparing-sort-keys\" id = \"comparing-sort-keys\"></a>13.1.2 Comparing Sort Key\n          Values</h4>\n\n          <p>It is possible to force the system to compare\n          <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort\n          key values</a> using the rules for a particular data type\n          by including a cast as part of the <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort\n          key component</a>. For example, <code>&lt;xsl:sort\n          select=\"xs:date(@dob)\"/&gt;</code> will force the\n          attributes to be compared as dates. In the absence of\n          such a cast, the sort key values are compared using the\n          rules appropriate to their data type. Any values of type\n          <span><code>xs:untypedAtomic</code></span> are cast to\n          <code>xs:string</code>.</p>\n\n          <p>For backwards compatibility with XSLT 1.0, the\n          <code>data-type</code> attribute <span>remains available.\n          If this has the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a>\n          <code>text</code>, the atomized <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a> are\n          converted to strings before being compared. If it has the\n          effective value <code>number</code>, the atomized sort\n          key values are converted to doubles before being\n          compared. The conversion is done by using the <a href = \"http://www.w3.org/TR/xpath-functions/#func-string\"><code>\n          string</code></a><sup><small>FO</small></sup> or <a href = \"http://www.w3.org/TR/xpath-functions/#func-number\"><code>\n          number</code></a><sup><small>FO</small></sup> function as\n          appropriate.</span> If the <code>data-type</code>\n          attribute has any other <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a>, then the value\n          <span class = \"verb\">must</span> be a <span><a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a> with a non-empty prefix</span>, and the effect\n          of the attribute is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n          <p><a name = \"err-XTTE1020\" id = \"err-XTTE1020\"><span class = \"error\">[ERR XTTE1020]</span></a> If any <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key\n          value</a>, after <a title = \"atomize\" href = \"#dt-atomization\">atomization</a> and any type conversion\n          <span class = \"verb\">required</span> by the\n          <code>data-type</code> attribute, is a sequence\n          containing more than one item, then the effect depends on\n          whether the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element is\n          evaluated with <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards\n          compatible behavior</a>. With backwards compatible\n          behavior, the effective sort key value is the first item\n          in the sequence. In other cases, this is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a>.</p>\n\n          <p>The set of <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a> (after any\n          conversion) is first divided into <span>two categories:\n          empty values, and ordinary values.</span> The empty sort\n          key values represent those items where the sort key value\n          is an empty sequence. These values are considered for\n          sorting purposes to be equal to each other, but less than\n          any other value. The remaining values are classified as\n          ordinary values.</p>\n\n          <p><a name = \"err-XTDE1030\" id = \"err-XTDE1030\"><span class = \"error\">[ERR XTDE1030]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if, for any <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a>, the set\n          of <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a> evaluated for\n          all the items in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a>, after any\n          type conversion requested, contains a pair of ordinary\n          values for which the result of the XPath <code>lt</code>\n          operator is an error.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The above error condition may occur if the values to\n            be sorted are of a type that does not support ordering\n            (for example, <code>xs:QName</code>) or if the sequence\n            is heterogeneous (for example, if it contains both\n            strings and numbers). The error can generally be\n            prevented by invoking a cast or constructor function\n            within the sort key component.</p>\n\n            <p>The error condition is subject to the usual caveat\n            that a processor is not required to evaluate any\n            expression solely in order to determine whether it\n            raises an error. For example, if there are several sort\n            key components, then a processor is not required to\n            evaluate or compare minor sort key values unless the\n            corresponding major sort key values are equal.</p>\n          </div>\n\n          <p>In general, comparison of two ordinary values is\n          performed according to the rules of the XPath\n          <code>lt</code> operator. <span>To ensure a total\n          ordering, the same implementation of the <code>lt</code>\n          operator <span class = \"verb\">must</span> be used for all\n          the comparisons: the one that is chosen is the one\n          appropriate to the most specific type to which all the\n          values can be converted by subtype substitution and/or\n          type promotion. For example, if the sequence contains\n          both <code>xs:decimal</code> and <code>xs:double</code>\n          values, then the values are compared using\n          <code>xs:double</code> comparison, even when comparing\n          two <code>xs:decimal</code> values.</span> NaN values,\n          for sorting purposes, are considered to be equal to each\n          other, and less than any other numeric value. Special\n          rules also apply to the <code>xs:string</code> <span>and\n          <code>xs:anyURI</code> types, and types derived by\n          restriction therefrom,</span>, as described in the next\n          section.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"collating-sequences\" id = \"collating-sequences\"></a>13.1.3 Sorting Using\n          Collations</h4>\n\n          <p>The rules given in this section apply when comparing\n          values whose type is <code>xs:string</code> or a type\n          derived by restriction from <code>xs:string</code><span>,\n          or whose type is <code>xs:anyURI</code> or a type derived\n          by restriction from <code>xs:anyURI</code></span>.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-collation\" id = \"dt-collation\" title = \"collation\"></a>Facilities in XSLT 2.0 and XPath 2.0 that\n          require strings to be ordered rely on the concept of a\n          named <b>collation</b>. A collation is a set of rules\n          that determine whether two strings are equal, and if not,\n          which of them is to be sorted before the\n          other.<span class = \"definition\">]</span> A collation is\n          identified by a URI, but the manner in which this URI is\n          associated with an actual rule or algorithm is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n          <p>The one collation URI that must be recognized by every\n          implementation is\n          <code>http://www.w3.org/2005/xpath-functions/collation/codepoint</code>,\n          which provides the ability to compare strings based on\n          the Unicode codepoint values of the characters in the\n          string.</p>\n\n          <p>For more information about collations, see <a href = \"http://www.w3.org/TR/xpath-functions/#string-compare\">Section\n          7.3 Equality and Comparison of\n          Strings</a><sup><small>FO</small></sup> in <a href = \"#xpath-functions\">[Functions and Operators]</a>. Some\n          specifications, for example <a href = \"#UNICODE-TR10\">[UNICODE TR10]</a>, use the term\n          \"collation\" to describe rules that can be tailored or\n          parameterized for various purposes. In this\n          specification, a collation URI refers to a collation in\n          which all such parameters have already been fixed.\n          Therefore, if a collation URI is specified, other\n          attributes such as <code>case-order</code> and\n          <code>lang</code> are ignored.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The reason XSLT does not provide detailed mechanisms\n            for defining collating sequences is that many\n            implementations will re-use collating mechanisms\n            available from the underlying implementation platform\n            (for example, from the operating system or from the\n            run-time library of a chosen programming language).\n            These will inevitably differ from one XSLT\n            implementation to another.</p>\n          </div>\n\n          <p>If the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element has a\n          <code>collation</code> attribute, then the strings are\n          compared according to the rules for the named <a title = \"collation\" href = \"#dt-collation\">collation</a>: that is,\n          they are compared using the XPath function call\n          <code>compare($a, $b, $collation)</code>.</p>\n\n          <p>If the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>collation</code> attribute of <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> is a relative\n          URI, then it is resolved against the base URI of the\n          <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n          element.</p>\n\n          <p><a name = \"err-XTDE1035\" id = \"err-XTDE1035\"><span class = \"error\">[ERR XTDE1035]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <code>collation</code> attribute of\n          <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> (after\n          resolving against the base URI) is not a URI that is\n          recognized by the implementation as referring to a\n          collation.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It is entirely for the implementation to determine\n            whether it recognizes a particular collation URI. For\n            example, if the implementation allows collation URIs to\n            contain parameters in the query part of the URI, it is\n            the implementation that determines whether a URI\n            containing an unknown or invalid parameter is or is not\n            a recognized collation URI. <span>The fact that this\n            error is described as non-recoverable thus does not\n            prevent an implementation applying a fallback collation\n            if it chooses to do so.</span></p>\n          </div>\n\n          <p>The <code>lang</code> and <code>case-order</code>\n          attributes are ignored if a <code>collation</code>\n          attribute is present. But in the absence of a\n          <code>collation</code> attribute, these attributes\n          provide input to an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          algorithm to <span>locate</span> a suitable\n          collation:</p>\n\n          <ul>\n            <li>\n              <p>The <code>lang</code> attribute indicates that a\n              collation suitable for a particular natural language\n              <span class = \"verb\">should</span> be used. The\n              <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n              attribute <span class = \"verb\">must</span> be a value\n              that would be valid for the <code>xml:lang</code>\n              attribute (see <a href = \"#REC-xml\">[XML 1.0]</a>).</p>\n            </li>\n\n            <li>\n              <p>The <code>case-order</code> attribute indicates\n              whether the desired collation <span class = \"verb\">should</span> sort upper-case letters before\n              lower-case or vice versa. The <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n              attribute <span class = \"verb\">must</span> be either\n              <code>lower-first</code> (indicating that lower-case\n              letters precede upper-case letters in the collating\n              sequence) or <code>upper-first</code> (indicating\n              that upper-case letters precede lower-case).</p>\n            </li>\n          </ul>\n\n          <p>If none of the <code>collation</code>,\n          <code>lang</code> or <code>case-order</code> attributes\n          is present, the collation is chosen in an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          way. It is not <span class = \"verb\">required</span> that\n          the default collation for sorting should be the same as\n          the <a title = \"default collation\" href = \"#dt-default-collation\">default collation</a> used when\n          evaluating XPath expressions, as described in <a href = \"#static-context\"><i>5.4.1 Initializing the Static\n          Context</i></a> and <a href = \"#default-collation-attribute\"><i>3.6.1 The\n          default-collation attribute</i></a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>It is usually appropriate, when sorting, to use a\n            strong collation, that is, one that takes account of\n            secondary differences (accents) and tertiary\n            differences (case) between strings that are otherwise\n            equal. A weak collation, which ignores such\n            differences, may be more suitable when comparing\n            strings for equality.</p>\n\n            <p>Useful background information on international\n            sorting is provided in <a href = \"#UNICODE-TR10\">[UNICODE\n            TR10]</a>. The <code>case-order</code> attribute may be\n            interpreted as described in section 6.6 of <a href = \"#UNICODE-TR10\">[UNICODE TR10]</a>.</p>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-sorted-sequence\" id = \"creating-sorted-sequence\"></a>13.2 Creating a Sorted\n        Sequence</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-perform-sort\" id = \"XSLT_element-perform-sort\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:perform-sort<br/>\n        &#160;&#160;select? = <var>expression</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>+,\n        <var>sequence-constructor</var>) --&gt;<br/>\n        &lt;/xsl:perform-sort&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>\n        instruction is used to return a <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a>.</p>\n\n        <p>The <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a> is obtained\n        either by evaluating the <code>select</code> attribute or\n        by evaluating the contained sequence constructor (but not\n        both). If there is no <code>select</code> attribute and no\n        sequence constructor then the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a> (and\n        therefore, the <a title = \"sorted sequence\" href = \"#dt-sorted-sequence\">sorted sequence</a>) is an empty\n        sequence.</p>\n\n        <p><a name = \"err-XTSE1040\" id = \"err-XTSE1040\"><span class = \"error\">[ERR XTSE1040]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        an <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>\n        instruction with a <code>select</code> attribute has any\n        content other than <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> and <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n        instructions.</p>\n\n        <p>The result of the <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>\n        instruction is the result of sorting its <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial\n        sequence</a> using its contained <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key\n        specification</a>.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e20205\" id = \"d5e20205\"></a>Example: Sorting a\n            Sequence of Atomic Values\n          </div>\n\n          <p>The following stylesheet function sorts a sequence of\n          atomic values using the value itself as the sort key.</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:function name=\"local:sort\" as=\"xs:anyAtomicType*\"&gt;\n  &lt;xsl:param name=\"in\" as=\"xs:anyAtomicType*\"/&gt;\n  &lt;xsl:perform-sort select=\"$in\"&gt;\n    &lt;xsl:sort select=\".\"/&gt;\n  &lt;/xsl:perform-sort&gt;\n&lt;/xsl:function&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e20212\" id = \"d5e20212\"></a>Example: Writing a\n            Function to Perform a Sort\n          </div>\n\n          <p>The following example defines a function that sorts\n          books by price, and uses this function to output the five\n          books that have the lowest prices:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:function name=\"bib:books-by-price\" as=\"schema-element(bib:book)*\"&gt;\n  &lt;xsl:param name=\"in\" as=\"schema-element(bib:book)*\"/&gt;\n  &lt;xsl:perform-sort select=\"$in\"&gt;\n    &lt;xsl:sort select=\"xs:decimal(bib:price)\"/&gt;\n  &lt;/xsl:perform-sort&gt;\n&lt;/xsl:function&gt;\n   ...\n   &lt;xsl:copy-of select=\"bib:books-by-price(//bib:book)[position() = 1 to 5]\"/&gt;\n\n \n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"sorted-iteration\" id = \"sorted-iteration\"></a>13.3 Processing a Sequence in Sorted\n        Order</h3>\n\n        <p>When used within <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> or\n        <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        a <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>\n        indicates that the sequence of items selected by that\n        instruction is to be processed in sorted order, not in the\n        order of the supplied sequence.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e20233\" id = \"d5e20233\"></a>Example:\n            Processing Elements in Sorted Order\n          </div>\n\n          <p>For example, suppose an employee database has the\n          form</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;employees&gt;\n  &lt;employee&gt;\n    &lt;name&gt;\n      &lt;given&gt;James&lt;/given&gt;\n      &lt;family&gt;Clark&lt;/family&gt;\n    &lt;/name&gt;\n    ...\n  &lt;/employee&gt;\n&lt;/employees&gt;\n</pre>\n          </div>\n\n          <p>Then a list of employees sorted by name could be\n          generated using:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"employees\"&gt;\n  &lt;ul&gt;\n    &lt;xsl:apply-templates select=\"employee\"&gt;\n      &lt;xsl:sort select=\"name/family\"/&gt;\n      &lt;xsl:sort select=\"name/given\"/&gt;\n    &lt;/xsl:apply-templates&gt;\n  &lt;/ul&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"employee\"&gt;\n  &lt;li&gt;\n    &lt;xsl:value-of select=\"name/given\"/&gt;\n    &lt;xsl:text&gt; &lt;/xsl:text&gt;\n    &lt;xsl:value-of select=\"name/family\"/&gt;\n  &lt;/li&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>When used within <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n        a <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>\n        indicates the order in which the groups are to be\n        processed. For the effect of <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n        see <a href = \"#grouping\"><i>14 Grouping</i></a>.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"grouping\" id = \"grouping\"></a>14 Grouping</h2>\n\n      <p>The facilities described in this section are designed to\n      allow items in a sequence to be grouped based on common\n      values; for example it allows grouping of elements having the\n      same value for a particular attribute, or elements with the\n      same name, or elements with common values for any other\n      <a title = \"expression\" href = \"#dt-expression\">expression</a>.\n      Since grouping identifies items with duplicate values, the\n      same facilities also allow selection of the distinct values\n      in a sequence of items, that is, the elimination of\n      duplicates.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>Simple elimination of duplicates can also be achieved\n        using the function <a href = \"http://www.w3.org/TR/xpath-functions/#func-distinct-values\">\n        <code>distinct-values</code></a><sup><small>FO</small></sup>\n        in the <a title = \"core function\" href = \"#dt-core-function\">core function</a> library: see <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n      </div>\n\n      <p>In addition these facilities allow grouping based on\n      sequential position, for example selecting groups of adjacent\n      <code>para</code> elements. The facilities also provide an\n      easy way to do fixed-size grouping, for example identifying\n      groups of three adjacent nodes, which is useful when\n      arranging data in multiple columns.</p>\n\n      <p>For each group of items identified, it is possible to\n      evaluate a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> for the\n      group. Grouping is nestable to multiple levels so that groups\n      of distinct items can be identified, then from among the\n      distinct groups selected, further sub-grouping of distinct\n      items in the current group can be done.</p>\n\n      <p>It is also possible for one item to participate in more\n      than one group.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"current-group\" id = \"current-group\"></a>14.1 The\n        Current Group</h3><a name = \"function-current-group\" id = \"function-current-group\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">current-group</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">item()*</code>\n        </div>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-current-group\" id = \"dt-current-group\" title = \"current group\"></a>The evaluation context for XPath\n        <a title = \"expression\" href = \"#dt-expression\">expressions</a>\n        includes a <span>component</span> called the <b>current\n        group</b>, which is a sequence. The current group is the\n        collection of related items that are processed collectively\n        in one iteration of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element.<span class = \"definition\">]</span></p>\n\n        <p>While an <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction is being evaluated, the <a title = \"current group\" href = \"#dt-current-group\">current group</a>\n        will be non-empty. At other times, it will be an empty\n        sequence.</p>\n\n        <p>The function <a href = \"#function-current-group\"><code>current-group</code></a>\n        returns the current group.</p>\n\n        <p>The function takes no arguments.</p>\n\n        <p><a name = \"err-XTSE1060\" id = \"err-XTSE1060\"><span class = \"error\">[ERR XTSE1060]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a href = \"#function-current-group\"><code>current-group</code></a>\n        function is used within a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"current-grouping-key\" id = \"current-grouping-key\"></a>14.2 The Current Grouping\n        Key</h3><a name = \"function-current-grouping-key\" id = \"function-current-grouping-key\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">current-grouping-key</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyAtomicType?</code>\n        </div>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-current-grouping-key\" id = \"dt-current-grouping-key\" title = \"current grouping key\"></a>The evaluation context for\n        XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> includes a component\n        called the <b>current grouping key</b>, which is an atomic\n        value. The current grouping key is <span>the <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping\n        key</a></span> shared in common by all the items within the\n        <a title = \"current group\" href = \"#dt-current-group\">current\n        group</a>.<span class = \"definition\">]</span></p>\n\n        <p>While an <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction with a <code>group-by</code> or\n        <code>group-adjacent</code> attribute is being evaluated,\n        the <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a> will be\n        <span>a single atomic value</span>. At other times, it will\n        be the empty sequence.</p>\n\n        <p>The function <a href = \"#function-current-grouping-key\"><code>current-grouping-key</code></a>\n        returns the <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a>.</p>\n\n        <p>Although the <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping keys</a> of all items in a\n        group are by definition equal, they are not necessarily\n        identical. For example, one might be an\n        <code>xs:float</code> while another is an\n        <code>xs:decimal</code>. The <a href = \"#function-current-grouping-key\"><code>current-grouping-key</code></a>\n        function is defined to return the grouping key of the\n        <a title = \"initial item\" href = \"#dt-initial-item\">initial\n        item</a> in the group, after atomization and casting of\n        <code>xs:untypedAtomic</code> to\n        <code>xs:string</code>.</p>\n\n        <p>The function takes no arguments.</p>\n\n        <p><a name = \"err-XTSE1070\" id = \"err-XTSE1070\"><span class = \"error\">[ERR XTSE1070]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a href = \"#function-current-grouping-key\"><code>current-grouping-key</code></a>\n        function is used within a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"xsl-for-each-group\" id = \"xsl-for-each-group\"></a>14.3 The\n        <code>xsl:for-each-group</code> Element</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-for-each-group\" id = \"XSLT_element-for-each-group\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:for-each-group<br/>\n        &#160;&#160;<b>select</b> = <var>expression</var><br/>\n        &#160;&#160;group-by? = <var>expression</var><br/>\n        &#160;&#160;group-adjacent? = <var>expression</var><br/>\n        &#160;&#160;group-starting-with? = <var>pattern</var><br/>\n        &#160;&#160;group-ending-with? = <var>pattern</var><br/>\n        &#160;&#160;collation? = { <var>uri</var> }&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>*,\n        <var>sequence-constructor</var>) --&gt;<br/>\n        &lt;/xsl:for-each-group&gt;</code></p>\n\n        <p>This element is an <a title = \"instruction\" href = \"#dt-instruction\">instruction</a> that may be used anywhere\n        within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-group\" id = \"dt-group\" title = \"group\"></a>The <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction <span>allocates the items in an input\n        sequence</span> into <b>groups</b> of items (that is, it\n        establishes a collection of sequences) based either on\n        common values of a grouping key, or on a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that the initial or final\n        node in a group must match.<span class = \"definition\">]</span> The <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        that forms the content of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction is evaluated once for each of these groups.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-population\" id = \"dt-population\" title = \"population\"></a>The sequence of items to be grouped, which\n        is referred to as the <b>population</b>, is determined by\n        evaluating the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> contained in the\n        <code>select</code> attribute.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-population-order\" id = \"dt-population-order\" title = \"population order\"></a>The population is treated as a\n        sequence; the order of items in this sequence is referred\n        to as <b>population order</b><span class = \"definition\">]</span>.</p>\n\n        <p>A group is never empty. If the population is empty, the\n        number of groups will be zero. The assignment of items to\n        groups depends on the <code>group-by</code>,\n        <code>group-adjacent</code>,\n        <code>group-starting-with</code>, and\n        <code>group-ending-with</code> attributes.</p>\n\n        <p><a name = \"err-XTSE1080\" id = \"err-XTSE1080\"><span class = \"error\">[ERR XTSE1080]</span></a> These four attributes are\n        mutually exclusive: it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if none of these four\n        attributes is present, or if more than one of them is\n        present.</p>\n\n        <p><a name = \"err-XTSE1090\" id = \"err-XTSE1090\"><span class = \"error\">[ERR XTSE1090]</span></a> It is an error to specify\n        the <code>collation</code> attribute if neither the\n        <code>group-by</code> attribute nor\n        <code>group-adjacent</code> attribute is specified.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-grouping-key\" id = \"dt-grouping-key\" title = \"grouping key\"></a>If either of the <code>group-by</code>\n        attribute or <code>group-adjacent</code> attributes is\n        present, then <b>grouping keys</b> are calculated for each\n        item in the <a title = \"population\" href = \"#dt-population\">population</a>. <span>The grouping keys\n        are the items in the sequence obtained by evaluating the\n        expression contained in the <code>group-by</code> attribute\n        or <code>group-adjacent</code> attribute, atomizing the\n        result, and then casting an <code>xs:untypedAtomic</code>\n        value to <code>xs:string</code>.</span><span class = \"definition\">]</span></p>\n\n        <p><span>When calculating grouping keys for an item in the\n        population,</span> the <a title = \"expression\" href = \"#dt-expression\">expression</a> contained in the\n        <code>group-by</code> or <code>group-adjacent</code>\n        attribute is evaluated with that item as the <a title = \"context item\" href = \"#dt-context-item\">context item</a>,\n        with its position in <a title = \"population order\" href = \"#dt-population-order\">population order</a> as the\n        <a title = \"context position\" href = \"#dt-context-position\">context position</a>, and with the\n        size of the population as the <a title = \"context size\" href = \"#dt-context-size\">context size</a>. The resulting sequence\n        is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>,\n        and each atomic value in the atomized sequence acts as a\n        <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping\n        key</a> for that item in the population.</p>\n\n        <p>If the <code>group-by</code> attribute is present, then\n        an item in the population may have multiple grouping keys:\n        that is, the <code>group-by</code> expression evaluates to\n        a sequence. The item is included in as many groups as there\n        are distinct grouping keys (which may be zero). If the\n        <code>group-adjacent</code> attribute is used, then each\n        item in the population <span class = \"verb\">must</span> have\n        exactly one grouping key value.</p>\n\n        <p><a name = \"err-XTTE1100\" id = \"err-XTTE1100\"><span class = \"error\">[ERR XTTE1100]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the\n        <span>grouping key evaluated using</span> the\n        <code>group-adjacent</code> attribute is an empty sequence,\n        or a sequence containing more than one item.</p>\n\n        <p><a title = \"grouping key\" href = \"#dt-grouping-key\">Grouping\n        keys</a> are compared using the rules for the\n        <code>eq</code> operator appropriate to their dynamic type.\n        <span>Values of type</span> <code>xs:untypedAtomic</code>\n        are cast to <code>xs:string</code> before the comparison.\n        Two items that are not comparable using the <code>eq</code>\n        operator are considered to be not equal, that is, they are\n        allocated to different groups. If the values are strings,\n        or untyped atomic values, <span>then if there is a\n        <code>collation</code> attribute the values are compared\n        using the collation specified as the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n        value</a> of the <code>collation</code> attribute, resolved\n        if relative against the base URI of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element. If there is no <code>collation</code> attribute\n        then the <a title = \"default collation\" href = \"#dt-default-collation\">default collation</a> is\n        used.</span></p>\n\n        <p>For the purposes of grouping, the value <code>NaN</code>\n        is considered equal to itself.</p>\n\n        <p><a name = \"err-XTDE1110\" id = \"err-XTDE1110\"><span class = \"error\">[ERR XTDE1110]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the collation URI specified to <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        <span>(after resolving against the base URI)</span> is a\n        collation that is not recognized by the implementation.\n        (For notes, <span class = \"error\">[see <a href = \"#err-XTDE1035\">ERR XTDE1035</a>]</span>.)</p>\n\n        <p>For more information on collations, see <a href = \"#collating-sequences\"><i>13.1.3 Sorting Using\n        Collations</i></a>.</p>\n\n        <p><a name = \"err-XTTE1120\" id = \"err-XTTE1120\"><span class = \"error\">[ERR XTTE1120]</span></a> When the\n        <code>group-starting-with</code> or\n        <code>group-ending-with</code> attribute is used, it is a\n        <a title = \"type errors\" href = \"#dt-type-error\">type error</a>\n        if the result of evaluating the <code>select</code>\n        expression contains an item that is not a node.</p>\n\n        <ul>\n          <li>\n            <p>If the <code>group-by</code> attribute is present,\n            the items in the <a title = \"population\" href = \"#dt-population\">population</a> are examined, in\n            population order. For each item <var>J</var>, the\n            expression in the <code>group-by</code> attribute is\n            evaluated to produce a sequence of zero or more\n            <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping key</a> values. For each\n            one of these <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping keys</a>, if there is\n            already a group created to hold items having that\n            grouping key value, <var>J</var> is added to that\n            group; otherwise a new group is created for items with\n            that grouping key value, and <var>J</var> becomes its\n            first member.</p>\n\n            <p>An item in the population may thus be assigned to\n            zero, one, or many groups. An item will never be\n            assigned more than once to the same group; if two or\n            more grouping keys for the same item are equal, then\n            the duplicates are ignored. An <em>item</em> here means\n            the item at a particular position within the\n            population—if the population contains the same node at\n            several different positions in the sequence then a\n            group may indeed contain duplicate nodes.</p>\n\n            <p>The number of groups will be the same as the number\n            of distinct grouping key values present in the\n            <a title = \"population\" href = \"#dt-population\">population</a>.</p>\n          </li>\n\n          <li>\n            <p>If the <code>group-adjacent</code> attribute is\n            present, the items in the <a title = \"population\" href = \"#dt-population\">population</a> are examined, in\n            population order. If an item has the same value for the\n            <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping key</a> as its preceding\n            item within the <a title = \"population\" href = \"#dt-population\">population</a> (in <a title = \"population order\" href = \"#dt-population-order\">population order</a>), then it\n            is assigned to the same group as its preceding item;\n            otherwise a new group is created and the item becomes\n            its first member.</p>\n          </li>\n\n          <li>\n            <p>If the <code>group-starting-with</code> attribute is\n            present, then its value <span class = \"verb\">must</span>\n            be a <a href = \"#NT-Pattern\">pattern</a>. In this case,\n            the items in the population <span class = \"verb\">must</span> all be nodes.</p>\n\n            <p>The nodes in the <a title = \"population\" href = \"#dt-population\">population</a> are examined in\n            <a title = \"population order\" href = \"#dt-population-order\">population order</a>. If a node\n            matches the pattern, or is the first node in the\n            population, then a new group is created and the node\n            becomes its first member. Otherwise, the node is\n            assigned to the same group as its preceding node within\n            the population.</p>\n          </li>\n\n          <li>\n            <p>If the <code>group-ending-with</code> attribute is\n            present, then its value <span class = \"verb\">must</span>\n            be a <a href = \"#NT-Pattern\">pattern</a>. In this case,\n            the items in the population <span class = \"verb\">must</span> all be nodes.</p>\n\n            <p>The nodes in the <a title = \"population\" href = \"#dt-population\">population</a> are examined in\n            <a title = \"population order\" href = \"#dt-population-order\">population order</a>. If a node\n            is the first node in the population, or if the previous\n            node in the population matches the pattern, then a new\n            group is created and the node becomes its first member.\n            Otherwise, the node is assigned to the same group as\n            its preceding node within the population.</p>\n          </li>\n        </ul>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-initial-item\" id = \"dt-initial-item\" title = \"initial item\"></a>For each <a title = \"group\" href = \"#dt-group\">group</a>, the item within the group that is\n        first in <a title = \"population order\" href = \"#dt-population-order\">population order</a> is known as the\n        <b>initial item</b> of the group.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-first-appearance\" id = \"dt-first-appearance\" title = \"order of first appearance\"></a>There is an ordering among\n        <a title = \"group\" href = \"#dt-group\">groups</a> referred to as\n        the <b>order of first appearance</b>. A group <var>G</var>\n        is defined to precede a group <var>H</var> in order of\n        first appearance if the <a title = \"initial item\" href = \"#dt-initial-item\">initial item</a> of <var>G</var>\n        precedes the initial item of <var>H</var> in population\n        order. <span>If two groups <var>G</var> and <var>H</var>\n        have the same initial item (because the item is in both\n        groups) then <var>G</var> precedes <var>H</var> if the\n        <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping\n        key</a> of <var>G</var> precedes the grouping key of\n        <var>H</var> in the sequence that results from evaluating\n        the <code>group-by</code> expression of this initial\n        item.</span><span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-processing-order\" id = \"dt-processing-order\" title = \"processing order\"></a>There is another ordering among\n        groups referred to as <b>processing order</b>. <span>If\n        group <var>R</var> precedes group <var>S</var> in\n        processing order, then in the result sequence returned by\n        the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction the items generated by processing group\n        <var>R</var> will precede the items generated by processing\n        group <var>S</var>.</span><span class = \"definition\">]</span></p>\n\n        <p>If there are no <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n        immediately within the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element, the <a title = \"processing order\" href = \"#dt-processing-order\">processing order</a> of the\n        <a title = \"group\" href = \"#dt-group\">groups</a> is the\n        <a title = \"order of first appearance\" href = \"#dt-first-appearance\">order of first appearance</a>.</p>\n\n        <p>Otherwise, the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements\n        immediately within the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element define the processing order of the <a title = \"group\" href = \"#dt-group\">groups</a> (see <a href = \"#sorting\"><i>13\n        Sorting</i></a>). They do not affect the order of items\n        within each group. Multiple <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key components</a> are\n        allowed, and are evaluated in major-to-minor order. If two\n        groups have the same values for all their sort key\n        components, they are processed in order of first\n        appearance.</p>\n\n        <p>The <code>select</code> <a title = \"expression\" href = \"#dt-expression\">expression</a> of an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element is\n        evaluated once for each <a title = \"group\" href = \"#dt-group\">group</a>. During this evaluation, the\n        <a title = \"context item\" href = \"#dt-context-item\">context\n        item</a> is the <a title = \"initial item\" href = \"#dt-initial-item\">initial item</a> of the group, the\n        <a title = \"context position\" href = \"#dt-context-position\">context position</a> is the position\n        of this item within the set of initial items (that is, one\n        item for each group in the <a title = \"population\" href = \"#dt-population\">population</a>) in <a title = \"population order\" href = \"#dt-population-order\">population\n        order</a>, the <a title = \"context size\" href = \"#dt-context-size\">context size</a> is the number of\n        groups, the <a title = \"current group\" href = \"#dt-current-group\">current group</a> is the group whose\n        <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort\n        key value</a> is being determined, <span>and the <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a> is the\n        grouping key for that group. If the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction uses the <code>group-starting-with</code> or\n        <code>group-ending-with</code> attributes, then the current\n        grouping key is the empty sequence.</span></p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21018\" id = \"d5e21018\"></a>Example: Sorting\n            Groups\n          </div>\n\n          <p>For example, this means that if the <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping key</a>\n          is <code>@category</code>, you can sort the groups in\n          order of their grouping key by writing <code>&lt;xsl:sort\n          select=\"current-grouping-key()\"/&gt;</code>; or you can\n          sort the groups in order of size by writing\n          <code>&lt;xsl:sort\n          select=\"count(current-group())\"/&gt;</code></p>\n        </div>\n\n        <p>The <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n        contained in the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element is evaluated once for each of the <a title = \"group\" href = \"#dt-group\">groups</a>, in <a title = \"processing order\" href = \"#dt-processing-order\">processing order</a>. The\n        sequences that result are concatenated, in <a title = \"processing order\" href = \"#dt-processing-order\">processing\n        order</a>, to form the result of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        element. Within the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, the\n        <a title = \"context item\" href = \"#dt-context-item\">context\n        item</a> is the <a title = \"initial item\" href = \"#dt-initial-item\">initial item</a> of the relevant group,\n        the <a title = \"context position\" href = \"#dt-context-position\">context position</a> is the position\n        of this item among the sequence of initial items (one item\n        for each group) arranged in <a title = \"processing order\" href = \"#dt-processing-order\">processing order</a> of the\n        groups, the <a title = \"context size\" href = \"#dt-context-size\">context size</a> is the number of\n        groups, the <a title = \"current group\" href = \"#dt-current-group\">current group</a> is the <a title = \"group\" href = \"#dt-group\">group</a> being processed,\n        <span>and the <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a> is the\n        grouping key for that group. If the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction uses the <code>group-starting-with</code> or\n        <code>group-ending-with</code> attributes, then the current\n        grouping key is the empty sequence.</span> This has the\n        effect that within the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, a\n        call on <code>position()</code> takes successive values\n        <code>1, 2, ... last()</code>.</p>\n\n        <p>During the evaluation of a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>, the\n        <a title = \"current group\" href = \"#dt-current-group\">current\n        group</a> and <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a> are set\n        to the empty sequence, and revert to their previous values\n        on completion of evaluation of the stylesheet function.</p>\n\n        <p>On completion of the evaluation of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n        instruction, the <a title = \"current group\" href = \"#dt-current-group\">current group</a> <span>and <a title = \"current grouping key\" href = \"#dt-current-grouping-key\">current grouping key</a></span>\n        revert to their previous value.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"grouping-examples\" id = \"grouping-examples\"></a>14.4 Examples of Grouping</h3>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21133\" id = \"d5e21133\"></a>Example: Grouping\n            Nodes based on Common Values\n          </div>\n\n          <p>The following example groups a list of nodes based on\n          common values. The resulting groups are numbered but\n          unsorted, and a total is calculated for each group.</p>\n\n          <p>Source XML document:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;cities&gt;\n  &lt;city name=\"Milano\"  country=\"Italia\"      pop=\"5\"/&gt;\n  &lt;city name=\"Paris\"   country=\"France\"      pop=\"7\"/&gt;\n  &lt;city name=\"München\" country=\"Deutschland\" pop=\"4\"/&gt;\n  &lt;city name=\"Lyon\"    country=\"France\"      pop=\"2\"/&gt;\n  &lt;city name=\"Venezia\" country=\"Italia\"      pop=\"1\"/&gt;\n&lt;/cities&gt;\n</pre>\n          </div>\n\n          <p>More specifically, the aim is to produce a four-column\n          table, containing one row for each distinct country. The\n          four columns are to contain first, a sequence number\n          giving the number of the row; second, the name of the\n          country, third, a comma-separated alphabetical list of\n          the city names within that country, and fourth, the sum\n          of the <code>pop</code> attribute for the cities in that\n          country.</p>\n\n          <p>Desired output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Position&lt;/th&gt;\n    &lt;th&gt;Country&lt;/th&gt;\n    &lt;th&gt;List of Cities&lt;/th&gt;\n    &lt;th&gt;Population&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;1&lt;/td&gt;\n    &lt;td&gt;Italia&lt;/td&gt;\n    &lt;td&gt;Milano, Venezia&lt;/td&gt;\n    &lt;td&gt;6&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;2&lt;/td&gt;\n    &lt;td&gt;France&lt;/td&gt;\n    &lt;td&gt;Lyon, Paris&lt;/td&gt;\n    &lt;td&gt;9&lt;/td&gt;\n  &lt;/tr&gt;  \n  &lt;tr&gt;\n    &lt;td&gt;3&lt;/td&gt;\n    &lt;td&gt;Deutschland&lt;/td&gt;\n    &lt;td&gt;München&lt;/td&gt;\n    &lt;td&gt;4&lt;/td&gt;\n  &lt;/tr&gt;  \n&lt;/table&gt;\n</pre>\n          </div>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;table xsl:version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Position&lt;/th&gt;\n    &lt;th&gt;Country&lt;/th&gt;\n    &lt;th&gt;City List&lt;/th&gt;\n    &lt;th&gt;Population&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;xsl:for-each-group select=\"cities/city\" group-by=\"@country\"&gt;\n    &lt;tr&gt;\n      &lt;td&gt;&lt;xsl:value-of select=\"position()\"/&gt;&lt;/td&gt;\n      &lt;td&gt;&lt;xsl:value-of select=\"@country\"/&gt;&lt;/td&gt;\n      &lt;td&gt;\n        &lt;xsl:value-of select=\"current-group()/@name\" separator=\", \"/&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;xsl:value-of select=\"sum(current-group()/@pop)\"/&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/xsl:for-each-group&gt;\n&lt;/table&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21156\" id = \"d5e21156\"></a>Example: A\n            Composite Grouping Key\n          </div>\n\n          <p>Sometimes it is necessary to use a composite grouping\n          key: for example, suppose the source document is similar\n          to the one used in the previous examples, but allows\n          multiple entries for the same country and city, such\n          as:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;cities&gt;\n  &lt;city name=\"Milano\"  country=\"Italia\"  year=\"1950\"   pop=\"5.23\"/&gt;\n  &lt;city name=\"Milano\"  country=\"Italia\"  year=\"1960\"   pop=\"5.29\"/&gt;  \n  &lt;city name=\"Padova\"  country=\"Italia\"  year=\"1950\"   pop=\"0.69\"/&gt;\n  &lt;city name=\"Padova\"  country=\"Italia\"  year=\"1960\"   pop=\"0.93\"/&gt;    \n  &lt;city name=\"Paris\"   country=\"France\"  year=\"1951\"   pop=\"7.2\"/&gt;\n  &lt;city name=\"Paris\"   country=\"France\"  year=\"1961\"   pop=\"7.6\"/&gt;\n&lt;/cities&gt;\n</pre>\n          </div>\n\n          <p>Now suppose we want to list the average value of\n          <code>@pop</code> for each (country, name) combination.\n          One way to handle this is to concatenate the parts of the\n          key, for example <code>&lt;xsl:for-each-group\n          select=\"concat(@country, '/', @name)\"&gt;</code>. A more\n          flexible solution is to nest one <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          element directly inside another:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:for-each-group select=\"cities/city\" group-by=\"@country\"&gt;\n  &lt;xsl:for-each-group select=\"current-group()\" group-by=\"@name\"&gt;\n    &lt;p&gt;&lt;xsl:value-of select=\"@name\"/&gt;, &lt;xsl:value-of select=\"@country\"/&gt;:\n        &lt;xsl:value-of select=\"avg(current-group()/@pop)\"/&gt;&lt;/p&gt;\n  &lt;/xsl:for-each-group&gt;\n&lt;/xsl:for-each-group&gt;\n</pre>\n          </div>\n\n          <p>The two approaches are not precisely equivalent. If\n          the code were changed to output the value of\n          <code>position()</code> alongside <code>@name</code> then\n          the first approach (a single <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          element with a compound key) would number the groups (1,\n          2, 3), while the second approach (two nested <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          elements) would number them (1, 2, 1).</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21190\" id = \"d5e21190\"></a>Example:\n            Identifying a Group by its Initial Element\n          </div>\n\n          <p>The next example identifies a group not by the\n          presence of a common value, but rather by adjacency in\n          document order. A group consists of an <code>h2</code>\n          element, followed by all the <code>p</code> elements up\n          to the next <code>h2</code> element.</p>\n\n          <p>Source XML document:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;body&gt;\n  &lt;h2&gt;Introduction&lt;/h2&gt;\n  &lt;p&gt;XSLT is used to write stylesheets.&lt;/p&gt;\n  &lt;p&gt;XQuery is used to query XML databases.&lt;/p&gt;\n  &lt;h2&gt;What is a stylesheet?&lt;/h2&gt;\n  &lt;p&gt;A stylesheet is an XML document used to define a transformation.&lt;/p&gt;\n  &lt;p&gt;Stylesheets may be written in XSLT.&lt;/p&gt;\n  &lt;p&gt;XSLT 2.0 introduces new grouping constructs.&lt;/p&gt;\n&lt;/body&gt;\n</pre>\n          </div>\n\n          <p>Desired output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;chapter&gt;\n  &lt;section title=\"Introduction\"&gt;\n    &lt;para&gt;XSLT is used to write stylesheets.&lt;/para&gt;\n    &lt;para&gt;XQuery is used to query XML databases.&lt;/para&gt;\n  &lt;/section&gt; \n  &lt;section title=\"What is a stylesheet?\"&gt;\n    &lt;para&gt;A stylesheet is an XML document used to define a transformation.&lt;/para&gt;\n    &lt;para&gt;Stylesheets may be written in XSLT.&lt;/para&gt;\n    &lt;para&gt;XSLT 2.0 introduces new grouping constructs.&lt;/para&gt;\n  &lt;/section&gt;\n&lt;/chapter&gt;\n</pre>\n          </div>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"body\"&gt;\n  &lt;chapter&gt;\n        &lt;xsl:for-each-group select=\"*\" group-starting-with=\"h2\"      &gt;\n          &lt;section title=\"{self::h2}\"&gt;\n            &lt;xsl:for-each select=\"current-group()[self::p]\"&gt;\n              &lt;para&gt;&lt;xsl:value-of select=\".\"/&gt;&lt;/para&gt;\n            &lt;/xsl:for-each&gt; \n          &lt;/section&gt;\n        &lt;/xsl:for-each-group&gt;\n  &lt;/chapter&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n\n          <p>The use of <code>title=\"{self::h2}\"</code> rather than\n          <code>title=\"{.}\"</code> is to handle the case where the\n          first element is not an <code>h2</code> element.</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21227\" id = \"d5e21227\"></a>Example:\n            Identifying a Group by its Final Element\n          </div>\n\n          <p>The next example illustrates how a group of related\n          elements can be identified by the last element in the\n          group, rather than the first. Here the absence of the\n          attribute <code>continued=\"yes\"</code> indicates the end\n          of the group.</p>\n\n          <p>Source XML document:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;doc&gt;\n  &lt;page continued=\"yes\"&gt;Some text&lt;/page&gt;\n  &lt;page continued=\"yes\"&gt;More text&lt;/page&gt;    \n  &lt;page&gt;Yet more text&lt;/page&gt;\n  &lt;page continued=\"yes\"&gt;Some words&lt;/page&gt;\n  &lt;page continued=\"yes\"&gt;More words&lt;/page&gt;    \n  &lt;page&gt;Yet more words&lt;/page&gt;        \n&lt;/doc&gt;\n</pre>\n          </div>\n\n          <p>Desired output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;doc&gt;\n  &lt;pageset&gt;\n    &lt;page&gt;Some text&lt;/page&gt;\n    &lt;page&gt;More text&lt;/page&gt;    \n    &lt;page&gt;Yet more text&lt;/page&gt;\n  &lt;/pageset&gt;\n  &lt;pageset&gt;\n    &lt;page&gt;Some words&lt;/page&gt;\n    &lt;page&gt;More words&lt;/page&gt;    \n    &lt;page&gt;Yet more words&lt;/page&gt;\n  &lt;/pageset&gt;\n&lt;/doc&gt;\n</pre>\n          </div>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"doc\"&gt;\n&lt;doc&gt;\n  &lt;xsl:for-each-group select=\"*\" \n                      group-ending-with=\"page[not(@continued='yes')]\"&gt;\n    &lt;pageset&gt;\n      &lt;xsl:for-each select=\"current-group()\"&gt;\n        &lt;page&gt;&lt;xsl:value-of select=\".\"/&gt;&lt;/page&gt;\n      &lt;/xsl:for-each&gt; \n    &lt;/pageset&gt;\n  &lt;/xsl:for-each-group&gt;\n&lt;/doc&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21247\" id = \"d5e21247\"></a>Example: Adding an\n            Element to Several Groups\n          </div>\n\n          <p>The next example shows how an item can be added to\n          multiple groups. Book titles will be added to one group\n          for each indexing term marked up within the title.</p>\n\n          <p>Source XML document:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;titles&gt;\n    &lt;title&gt;A Beginner's Guide to &lt;ix&gt;Java&lt;/ix&gt;&lt;/title&gt;\n    &lt;title&gt;Learning &lt;ix&gt;XML&lt;/ix&gt;&lt;/title&gt;\n    &lt;title&gt;Using &lt;ix&gt;XML&lt;/ix&gt; with &lt;ix&gt;Java&lt;/ix&gt;&lt;/title&gt;\n&lt;/titles&gt;\n</pre>\n          </div>\n\n          <p>Desired output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;h2&gt;Java&lt;/h2&gt;\n    &lt;p&gt;A Beginner's Guide to Java&lt;/p&gt;\n    &lt;p&gt;Using XML with Java&lt;/p&gt;\n&lt;h2&gt;XML&lt;/h2&gt;\n    &lt;p&gt;Learning XML&lt;/p&gt;\n    &lt;p&gt;Using XML with Java&lt;/p&gt;\n</pre>\n          </div>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"titles\"&gt;\n    &lt;xsl:for-each-group select=\"title\" group-by=\"ix\"&gt;\n      &lt;h2&gt;&lt;xsl:value-of select=\"current-grouping-key()\"/&gt;&lt;/h2&gt;\n      &lt;xsl:for-each select=\"current-group()\"&gt;\n        &lt;p&gt;&lt;xsl:value-of select=\".\"/&gt;&lt;/p&gt;\n      &lt;/xsl:for-each&gt;\n    &lt;/xsl:for-each-group&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21264\" id = \"d5e21264\"></a>Example: Grouping\n            Alternating Sequences of Elements\n          </div>\n\n          <p>In the final example, the membership of a node within\n          a group is based both on adjacency of the nodes in\n          document order, and on common values. In this case, the\n          grouping key is a boolean condition, true or false, so\n          the effect is that a grouping establishes a maximal\n          sequence of nodes for which the condition is true,\n          followed by a maximal sequence for which it is false, and\n          so on.</p>\n\n          <p>Source XML document:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt;:\n    &lt;ul&gt;\n    &lt;li&gt;talk,&lt;/li&gt;\n    &lt;li&gt;eat, or&lt;/li&gt;\n    &lt;li&gt;use your mobile telephone&lt;/li&gt;\n    &lt;/ul&gt;\n    while you are in the cinema.&lt;/p&gt;\n</pre>\n          </div>\n\n          <p>Desired output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;p&gt;Do &lt;em&gt;not&lt;/em&gt;:&lt;/p&gt;\n    &lt;ul&gt;\n    &lt;li&gt;talk,&lt;/li&gt;\n    &lt;li&gt;eat, or&lt;/li&gt;\n    &lt;li&gt;use your mobile telephone&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;p&gt;while you are in the cinema.&lt;/p&gt;\n</pre>\n          </div>\n\n          <p>Solution:</p>\n\n          <p>This requires creating a <code>p</code> element around\n          the maximal sequence of sibling nodes that does not\n          include a <code>ul</code> or <code>ol</code> element.</p>\n\n          <p>This can be done by using <code>group-adjacent</code>,\n          with a grouping key that is true if the element is a\n          <code>ul</code> or <code>ol</code> element, and false\n          otherwise:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:template match=\"p\"&gt;\n    &lt;xsl:for-each-group select=\"node()\" \n            group-adjacent=\"self::ul or self::ol\"&gt;\n        &lt;xsl:choose&gt;\n            &lt;xsl:when test=\"current-grouping-key()\"&gt;\n                &lt;xsl:copy-of select=\"current-group()\"/&gt;  \n            &lt;/xsl:when&gt;\n            &lt;xsl:otherwise&gt;\n                &lt;p&gt;\n                    &lt;xsl:copy-of select=\"current-group()\"/&gt;\n                &lt;/p&gt;\n            &lt;/xsl:otherwise&gt;  \n        &lt;/xsl:choose&gt;\n    &lt;/xsl:for-each-group&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"regular-expressions\" id = \"regular-expressions\"></a>15 Regular Expressions</h2>\n\n      <p>The <a title = \"core function\" href = \"#dt-core-function\">core\n      function</a> library for XPath 2.0 defines three functions\n      that make use of regular expressions:</p>\n\n      <ul>\n        <li>\n          <p><a href = \"http://www.w3.org/TR/xpath-functions/#func-matches\"><code>\n          matches</code></a><sup><small>FO</small></sup> returns a\n          boolean result that indicates whether or not a string\n          matches a given regular expression.</p>\n        </li>\n\n        <li>\n          <p><a href = \"http://www.w3.org/TR/xpath-functions/#func-replace\"><code>\n          replace</code></a><sup><small>FO</small></sup> takes a\n          string as input and returns a string obtained by\n          replacing all substrings that match a given regular\n          expression with a replacement string.</p>\n        </li>\n\n        <li>\n          <p><a href = \"http://www.w3.org/TR/xpath-functions/#func-tokenize\"><code>\n          tokenize</code></a><sup><small>FO</small></sup> returns a\n          sequence of strings formed by breaking a supplied input\n          string at any separator that matches a given regular\n          expression.</p>\n        </li>\n      </ul>\n\n      <p>These functions are described in <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n\n      <p>For more complex string processing than is possible using\n      these functions, XSLT provides an instruction <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>,\n      which is defined in this section.</p>\n\n      <p>The regular expressions used by this instruction, and the\n      flags that control the interpretation of these regular\n      expressions, <span class = \"verb\">must</span> conform to the\n      syntax defined in <a href = \"#xpath-functions\">[Functions and\n      Operators]</a> (see <a href = \"http://www.w3.org/TR/xpath-functions/#regex-syntax\">Section\n      7.6.1 Regular Expression\n      Syntax</a><sup><small>FO</small></sup>), which is itself\n      based on the syntax defined in <a href = \"#xmlschema-2\">[XML\n      Schema Part 2]</a>.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"analyze-string\" id = \"analyze-string\"></a>15.1\n        The <code>xsl:analyze-string</code> instruction</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-analyze-string\" id = \"XSLT_element-analyze-string\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:analyze-string<br/>\n        &#160;&#160;<b>select</b> = <var>expression</var><br/>\n        &#160;&#160;<b>regex</b> = { <var>string</var> }<br/>\n        &#160;&#160;flags? = { <var>string</var> }&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-matching-substring\">xsl:matching-substring</a>?,\n        <a href = \"#XSLT_element-non-matching-substring\">xsl:non-matching-substring</a>?,\n        <a href = \"#XSLT_element-fallback\">xsl:fallback</a>*) --&gt;<br/>\n        &lt;/xsl:analyze-string&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-matching-substring\" id = \"XSLT_element-matching-substring\"></a><code>&lt;xsl:matching-substring&gt;<br/>\n\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:matching-substring&gt;</code></p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-non-matching-substring\" id = \"XSLT_element-non-matching-substring\"></a><code>&lt;xsl:non-matching-substring&gt;<br/>\n\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:non-matching-substring&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction takes as input a string (the result of\n        evaluating the expression in the <code>select</code>\n        attribute) and a regular expression (the effective value of\n        the <code>regex</code> attribute).</p>\n\n        <p>If the result of evaluating the <code>select</code>\n        expression is not a string, it is converted to a string by\n        applying the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n        rules</a>.</p>\n\n        <p>The <code>flags</code> attribute may be used to control\n        the interpretation of the regular expression. If the\n        attribute is omitted, the effect is the same as supplying a\n        zero-length string. This is interpreted in the same way as\n        the <code>$flags</code> attribute of the functions <a href = \"http://www.w3.org/TR/xpath-functions/#func-matches\"><code>matches</code></a><sup>\n        <small>FO</small></sup>, <a href = \"http://www.w3.org/TR/xpath-functions/#func-replace\"><code>replace</code></a><sup>\n        <small>FO</small></sup>, and <a href = \"http://www.w3.org/TR/xpath-functions/#func-tokenize\"><code>\n        tokenize</code></a><sup><small>FO</small></sup>.\n        <span>Specifically, if it contains the letter\n        <code>m</code>, the match operates in multiline mode. If it\n        contains the letter <code>s</code>, it operates in dot-all\n        mode. If it contains the letter <code>i</code>, it operates\n        in case-insensitive mode. If it contains the letter\n        <code>x</code>, then whitespace within the regular\n        expression is ignored. For more detailed specifications of\n        these modes, see <a href = \"#xpath-functions\">[Functions and\n        Operators]</a> (<a href = \"http://www.w3.org/TR/xpath-functions/#flags\">Section\n        7.6.1.1 Flags</a><sup><small>FO</small></sup>).</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Because the <code>regex</code> attribute is an\n          attribute value template, curly brackets within the\n          regular expression must be doubled. For example, to match\n          a sequence of one to five characters, write\n          <code>regex=\".{{1,5}}\"</code>. <span>For regular\n          expressions containing many curly brackets it may be more\n          convenient to use a notation such as\n          <code>regex=\"{'[0-9]{1,5}[a-z]{3}[0-9]{1,2}'}\"</code>, or\n          to use a variable.</span></p>\n        </div>\n\n        <p>The content of the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction must take one of the following forms:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>A single <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n            instruction, followed by zero or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n            instructions</p>\n          </li>\n\n          <li>\n            <p>A single <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n            instruction, followed by zero or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n            instructions</p>\n          </li>\n\n          <li>\n            <p>A single <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n            instruction, followed by a single <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n            instruction, followed by zero or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n            instructions</p>\n          </li>\n        </ol>\n\n        <p><a name = \"err-XTSE1130\" id = \"err-XTSE1130\"><span class = \"error\">[ERR XTSE1130]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction contains neither an <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        nor an <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n        element.</p>\n\n        <p><span>Any <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a> elements\n        among the children of the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction</span> are ignored by an XSLT 2.0 processor,\n        but allow fallback behavior to be defined when the\n        stylesheet is used with an XSLT 1.0 processor operating in\n        forwards-compatible mode.</p>\n\n        <p>This instruction is designed to process all the\n        non-overlapping substrings of the input string that match\n        the regular expression supplied.</p>\n\n        <p><a name = \"err-XTDE1140\" id = \"err-XTDE1140\"><span class = \"error\">[ERR XTDE1140]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>regex</code> attribute does not conform to the\n        <span class = \"verb\">required</span> syntax for regular\n        expressions, as specified in <a href = \"#xpath-functions\">[Functions and Operators]</a>. If the\n        regular expression is known statically (for example, if the\n        attribute does not contain any <a title = \"expression\" href = \"#dt-expression\">expressions</a> enclosed in curly\n        brackets) then the processor <span class = \"verb\">may</span>\n        signal the error as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <p><a name = \"err-XTDE1145\" id = \"err-XTDE1145\"><span class = \"error\">[ERR XTDE1145]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>flags</code> attribute has a value other than the\n        values defined in <a href = \"#xpath-functions\">[Functions and\n        Operators]</a>. If the value of the attribute is known\n        statically (for example, if the attribute does not contain\n        any <a title = \"expression\" href = \"#dt-expression\">expressions</a> enclosed in curly\n        brackets) then the processor <span class = \"verb\">may</span>\n        signal the error as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <p><a name = \"err-XTDE1150\" id = \"err-XTDE1150\"><span class = \"error\">[ERR XTDE1150]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>regex</code> attribute is a regular expression that\n        matches a zero-length string: or more specifically, if the\n        regular expression <code>$r</code> and flags\n        <code>$f</code> are such that <code>matches(\"\", $r,\n        $f)</code> returns true. If the regular expression is known\n        statically (for example, if the attribute does not contain\n        any <a title = \"expression\" href = \"#dt-expression\">expressions</a> enclosed in curly\n        brackets) then the processor <span class = \"verb\">may</span>\n        signal the error as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <p>The <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n        instruction starts at the beginning of the input string and\n        attempts to find the first substring that matches the\n        regular expression. If there are several matches, the first\n        match is defined to be the one whose starting position\n        comes first in the string. If several alternatives within\n        the regular expression both match at the same position in\n        the input string, then the match that is chosen is the\n        first alternative that matches. For example, if the input\n        string is <code>The quick brown fox jumps</code> and the\n        regular expression is <code>jump|jumps</code>, then the\n        match that is chosen is <code>jump</code>.</p>\n\n        <p>Having found the first match, the instruction proceeds\n        to find the second and subsequent matches by repeating the\n        search, starting at the first character that was not\n        included in the previous match.</p>\n\n        <p>The input string is thus partitioned into a sequence of\n        substrings, some of which match the regular expression,\n        others which do not match it. Each substring will contain\n        at least one character. This sequence of substrings is\n        processed using the <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        and <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n        child instructions. A matching substring is processed using\n        the <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        element, a non-matching substring using the <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n        element. Each of these elements takes a sequence\n        constructor as its content. If the element is absent, the\n        effect is the same as if it were present with empty\n        content. In processing each substring, the contents of the\n        substring will be the <a title = \"context item\" href = \"#dt-context-item\">context item</a> (as a value of type\n        <code>xs:string</code>); the position of the substring\n        within the sequence of matching and non-matching substrings\n        will be the <a title = \"context position\" href = \"#dt-context-position\">context position</a>; and the number\n        of matching and non-matching substrings will be the\n        <a title = \"context size\" href = \"#dt-context-size\">context\n        size</a>.</p>\n\n        <p>If the input is a zero-length string, the number of\n        substrings will be zero, so neither the <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        nor <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n        elements will be evaluated.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"regex-group\" id = \"regex-group\"></a>15.2\n        Captured Substrings</h3><a name = \"function-regex-group\" id = \"function-regex-group\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">regex-group</code>(<code class = \"arg\">$group-number</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n        </div>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-current-captured-substrings\" id = \"dt-current-captured-substrings\" title = \"current captured substrings\"></a>While the <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        instruction is active, a set of <b>current captured\n        substrings</b> is available, corresponding to the\n        parenthesized sub-expressions of the regular\n        expression.<span class = \"definition\">]</span> These captured\n        substrings are accessible using the function <a href = \"#function-regex-group\"><code>regex-group</code></a>. This\n        function takes an integer argument to identify the group,\n        and returns a string representing the captured\n        substring.</p>\n\n        <p>The <var>N</var>th captured substring (where\n        <var>N</var> &gt; 0) is the string matched by the\n        subexpression contained by the <var>N</var>th left\n        parenthesis in the regex. The zeroeth captured substring is\n        the string that matches the entire regex. This means that\n        the value of <code>regex-group(0)</code> is initially the\n        same as the value of <code>.</code> (dot).</p>\n\n        <p>The function returns the zero-length string if there is\n        no captured substring with the relevant number. This can\n        occur for a number of reasons:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>The number is negative.</p>\n          </li>\n\n          <li>\n            <p>The regular expression does not contain a\n            parenthesized sub-expression with the given number.</p>\n          </li>\n\n          <li>\n            <p>The parenthesized sub-expression exists, and did not\n            match any part of the input string.</p>\n          </li>\n\n          <li>\n            <p>The parenthesized sub-expression exists, and matched\n            a zero-length substring of the input string.</p>\n          </li>\n        </ol>\n\n        <p>The set of captured substrings is a context variable\n        with dynamic scope. It is initially an empty sequence.\n        During the evaluation of an <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n        instruction it is set to the sequence of matched substrings\n        for that regex match. During the evaluation of an <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n        instruction or a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> or a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> it is set\n        to an empty sequence. On completion of an instruction that\n        changes the value, the variable reverts to its previous\n        value.</p>\n\n        <p>The value of the <a title = \"current captured substrings\" href = \"#dt-current-captured-substrings\">current captured\n        substrings</a> is unaffected through calls of <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n        <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n        <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n        or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>, or\n        by expansion of named <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute sets</a>.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"regex-examples\" id = \"regex-examples\"></a>15.3\n        Examples of Regular Expression Matching</h3>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21776\" id = \"d5e21776\"></a>Example: Replacing\n            Characters by Elements\n          </div>\n\n          <p>Problem: replace all newline characters in the\n          <code>abstract</code> element by empty <code>br</code>\n          elements:</p>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:analyze-string select=\"abstract\" regex=\"\\n\"&gt;\n  &lt;xsl:matching-substring&gt;\n    &lt;br/&gt;\n  &lt;/xsl:matching-substring&gt;\n  &lt;xsl:non-matching-substring&gt;\n    &lt;xsl:value-of select=\".\"/&gt;\n  &lt;/xsl:non-matching-substring&gt;\n&lt;/xsl:analyze-string&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21791\" id = \"d5e21791\"></a>Example:\n            Recognizing non-XML Markup Structure\n          </div>\n\n          <p>Problem: replace all occurrences of <code>[...]</code>\n          in the <code>body</code> by <code>cite</code> elements,\n          retaining the content between the square brackets as the\n          content of the new element.</p>\n\n          <p>Solution:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:analyze-string select=\"body\" regex=\"\\[(.*?)\\]\"&gt;\n  &lt;xsl:matching-substring&gt;\n    &lt;cite&gt;&lt;xsl:value-of select=\"regex-group(1)\"/&gt;&lt;/cite&gt;\n  &lt;/xsl:matching-substring&gt;\n  &lt;xsl:non-matching-substring&gt;\n    &lt;xsl:value-of select=\".\"/&gt;\n  &lt;/xsl:non-matching-substring&gt;\n&lt;/xsl:analyze-string&gt;\n</pre>\n          </div>\n\n          <p>Note that this simple approach fails if the\n          <code>body</code> element contains markup that needs to\n          be retained. In this case it is necessary to apply the\n          regular expression processing to each text node\n          individually. If the <code>[...]</code> constructs span\n          multiple text nodes (for example, because there are\n          elements within the square brackets) then it probably\n          becomes necessary to make two or more passes over the\n          data.</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e21817\" id = \"d5e21817\"></a>Example: Parsing a\n            Date\n          </div>\n\n          <p>Problem: the input string contains a date such as\n          <code>23 March 2002</code>. Convert it to the form\n          <code>2002-03-23</code>.</p>\n\n          <p>Solution (with no error handling if the input format\n          is incorrect):</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:variable name=\"months\" select=\"'January', 'February', 'March', ...\"/&gt;\n\n&lt;xsl:analyze-string select=\"normalize-space($input)\" \n    regex=\"([0-9]{{1,2}})\\s([A-Z][a-z]+)\\s([0-9]{{4}})\"&gt;\n    &lt;xsl:matching-substring&gt;\n        &lt;xsl:number value=\"regex-group(3)\" format=\"0001\"/&gt;          \n        &lt;xsl:text&gt;-&lt;/xsl:text&gt;\n        &lt;xsl:number value=\"index-of($months, regex-group(2))\" format=\"01\"/&gt;\n        &lt;xsl:text&gt;-&lt;/xsl:text&gt;\n        &lt;xsl:number value=\"regex-group(1)\" format=\"01\"/&gt;\n    &lt;/xsl:matching-substring&gt;\n&lt;/xsl:analyze-string&gt;\n</pre>\n          </div>\n\n          <p>Note the use of <code>normalize-space</code> to\n          simplify the work done by the regular expression, and the\n          use of doubled curly brackets because the\n          <code>regex</code> attribute is an attribute value\n          template.</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"add-func\" id = \"add-func\"></a>16 Additional\n      Functions</h2>\n\n      <p>This section describes XSLT-specific additions to the\n      <a title = \"core function\" href = \"#dt-core-function\">core\n      function</a> library. Some of these additional functions also\n      make use of information specified by <a title = \"declaration\" href = \"#dt-declaration\">declarations</a> in the stylesheet;\n      this section also describes these declarations.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"document\" id = \"document\"></a>16.1 Multiple\n        Source Documents</h3><a name = \"function-document\" id = \"function-document\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">document</code>(<code class = \"arg\">$uri-sequence</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code>\n        </div>\n\n        <div class = \"proto\">\n          <code class = \"function\">document</code>(<code class = \"arg\">$uri-sequence</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">item()*</code>, <code class = \"arg\">$base-node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code>\n        </div>\n\n        <p>The <a href = \"#function-document\"><code>document</code></a> function\n        allows access to XML documents identified by a URI.</p>\n\n        <p>The first argument contains a sequence of URI\n        references. The second argument, if present, is a node\n        whose base URI is used to resolve any relative URI\n        references contained in the first argument.</p>\n\n        <p>A sequence of absolute URI references is obtained as\n        follows.</p>\n\n        <ul>\n          <li>\n            <p>For an item in <code>$uri-sequence</code> that is an\n            instance of <code>xs:string</code>,\n            <code>xs:anyURI</code>, or\n            <span><code>xs:untypedAtomic</code></span>, the value\n            is cast to <code>xs:anyURI</code>. If the resulting URI\n            reference is an absolute URI reference then it is used\n            <em>as is</em>. If it is a relative URI reference, then\n            it is resolved against the base URI of\n            <code>$base-node</code> if supplied, or against the\n            base URI from the static context otherwise (this will\n            usually be the base URI of the stylesheet module). A\n            relative URI is resolved against a base URI using the\n            rules defined in <a href = \"#RFC3986\">[RFC3986]</a>.</p>\n          </li>\n\n          <li>\n            <p>For an item in <code>$uri-sequence</code> that is a\n            node, the node is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>. The result <span class = \"verb\">must</span> be a sequence whose items are all\n            instances of <code>xs:string</code>,\n            <code>xs:anyURI</code>, or\n            <span><code>xs:untypedAtomic</code></span>. Each of\n            these values is cast to <code>xs:anyURI</code>, and if\n            the resulting URI reference is an absolute URI\n            reference then it is used <em>as is</em>. If it is a\n            relative URI reference, then it is resolved against the\n            base URI of <code>$base-node</code> if supplied, or\n            against the base URI of the node that contained it\n            otherwise.</p>\n          </li>\n        </ul>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The XPath rules for function calling ensure that it is\n          a type error if the supplied value of the second argument\n          is anything other than a single node. If <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n          is enabled, then a sequence of nodes may be supplied, and\n          the first node in the sequence will be used.</p>\n        </div>\n\n        <p>Each of these absolute URI references is then processed\n        as follows. Any fragment identifier that is present in the\n        URI reference is removed, and the resulting absolute URI is\n        cast to a string and then passed to the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup> function defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>. This\n        returns a document node. If an error occurs during\n        evaluation of the <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup> function, the processor\n        <span class = \"verb\">may</span> either signal this error in\n        the normal way, or <span class = \"verb\">may</span> recover by\n        ignoring the failure, in which case the failing URI will\n        not contribute any nodes to the result of the <a href = \"#function-document\"><code>document</code></a>\n        function.</p>\n\n        <p>If the URI reference contained no fragment identifier,\n        then this document node is included in the sequence of\n        nodes returned by the <a href = \"#function-document\"><code>document</code></a>\n        function.</p>\n\n        <p>If the URI reference contained a fragment identifier,\n        then the fragment identifier is interpreted according to\n        the rules for the media type of the resource\n        <span>representation</span> identified by the URI, and is\n        used to select zero or more nodes that are\n        descendant-or-self nodes of the returned document node. As\n        described in <a href = \"#initiating\"><i>2.3 Initiating a\n        Transformation</i></a>, the media type is available as part\n        of the evaluation context for a transformation.</p>\n\n        <p><a name = \"err-XTRE1160\" id = \"err-XTRE1160\"><span class = \"error\">[ERR XTRE1160]</span></a> When a URI reference\n        contains a fragment identifier, it is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n        the media type is not one that is recognized by the\n        processor, or if the fragment identifier does not conform\n        to the rules for fragment identifiers for that media type,\n        or if the fragment identifier selects something other than\n        a sequence of nodes (for example, if it selects a range of\n        characters within a text node). The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is to ignore the fragment identifier and return the\n        document node. The set of media types recognized by a\n        processor is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The recovery action here is different from XSLT\n          1.0</p>\n        </div>\n\n        <p>The sequence of nodes returned by the function is in\n        document order, with no duplicates. This order has no\n        necessary relationship to the order in which URIs were\n        supplied in the <code>$uri-sequence</code> argument.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>One effect of these rules is that unless XML entities\n          or <code>xml:base</code> are used, and provided that the\n          base URI of the stylesheet module is known,\n          <code>document(\"\")</code> refers to the document node of\n          the containing stylesheet module (the definitive rules\n          are in <span><a href = \"#RFC3986\">[RFC3986]</a></span>).\n          The XML resource containing the stylesheet module is\n          processed exactly as if it were any other XML document,\n          for example there is no special recognition of <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> elements, and\n          no special treatment of comments and processing\n          instructions.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"unparsed-text\" id = \"unparsed-text\"></a>16.2\n        Reading Text Files</h3><a name = \"function-unparsed-text\" id = \"function-unparsed-text\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">unparsed-text</code>(<code class = \"arg\">$href</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code>\n        </div>\n\n        <div class = \"proto\">\n          <code class = \"function\">unparsed-text</code>(<code class = \"arg\">$href</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>, <code class = \"arg\">$encoding</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code>\n        </div>\n\n        <p>The <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        function reads an external resource (for example, a file)\n        and returns its contents as a string.</p>\n\n        <p>The <code>$href</code> argument <span class = \"verb\">must</span> be <span>a string in the form of a\n        URI</span>. The URI <span class = \"verb\">must</span> contain\n        no fragment identifier, and <span class = \"verb\">must</span>\n        identify a resource that can be read as text. If the URI is\n        a relative URI, then it is resolved relative to the base\n        URI from the static context.</p>\n\n        <p>If the value of the <code>$href</code> argument is an\n        empty sequence, the function returns an empty sequence.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>If a different base URI is appropriate (for example,\n          when resolving a relative URI read from a source\n          document) then the relative URI should be resolved using\n          the <a href = \"http://www.w3.org/TR/xpath-functions/#func-resolve-uri\"><code>\n          resolve-uri</code></a><sup><small>FO</small></sup>\n          function before passing it to the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function.</p>\n        </div>\n\n        <p>The <code>$encoding</code> argument, if present, is the\n        name of an encoding. The values for this attribute follow\n        the same rules as for the <code>encoding</code> attribute\n        in an XML declaration. The only values which every\n        <a title = \"implementation\" href = \"#dt-implementation\">implementation</a> is <span class = \"verb\">required</span> to recognize are <code>utf-8</code>\n        and <code>utf-16</code>.</p>\n\n        <p>The encoding of the external resource is determined as\n        follows:</p>\n\n        <ol class = \"enumar\">\n          <li>\n            <p>external encoding information is used if available,\n            otherwise</p>\n          </li>\n\n          <li>\n            <p>if the media type of the resource is\n            <code>text/xml</code> or <code>application/xml</code>\n            (see <a href = \"#RFC2376\">[RFC2376]</a>), or if it\n            matches the conventions <code>text/*+xml</code> or\n            <code>application/*+xml</code> (see <a href = \"#RFC3023\">[RFC3023]</a> <span>and/or its\n            successors</span>), then the encoding is recognized as\n            specified in <a href = \"#REC-xml\">[XML 1.0]</a>,\n            otherwise</p>\n          </li>\n\n          <li>\n            <p>the value of the <code>$encoding</code> argument is\n            used if present, otherwise</p>\n          </li>\n\n          <li>\n            <p>the processor <span class = \"verb\">may</span> use\n            <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n            heuristics to determine the likely encoding,\n            otherwise</p>\n          </li>\n\n          <li>\n            <p>UTF-8 is assumed.</p>\n          </li>\n        </ol>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The above rules are chosen for consistency with\n          <a href = \"#xinclude\">[XInclude]</a>. Files with an XML\n          media type are treated specially because there are use\n          cases for this function where the retrieved text is to be\n          included as unparsed XML within a CDATA section of a\n          containing document, and because processors are likely to\n          be able to reuse the code that performs encoding\n          detection for XML external entities.</p>\n        </div>\n\n        <p><a name = \"err-XTDE1170\" id = \"err-XTDE1170\"><span class = \"error\">[ERR XTDE1170]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if a URI <span>contains a fragment\n        identifier,</span> or if it cannot be used to retrieve a\n        resource containing text.</p>\n\n        <p><a name = \"err-XTDE1190\" id = \"err-XTDE1190\"><span class = \"error\">[ERR XTDE1190]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if a resource contains octets that cannot be\n        decoded into Unicode characters using the specified\n        encoding, or if the resulting characters are not permitted\n        XML characters. This includes the case where the <a title = \"processor\" href = \"#dt-processor\">processor</a> does not\n        support the requested encoding.</p>\n\n        <p><a name = \"err-XTDE1200\" id = \"err-XTDE1200\"><span class = \"error\">[ERR XTDE1200]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the second argument of the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        function is omitted and the <a title = \"processor\" href = \"#dt-processor\">processor</a> cannot infer the encoding\n        using external information and the encoding is not\n        UTF-8.</p>\n\n        <p>The result is a string containing the text of the\n        resource retrieved using the URI.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>If the text file contains characters such as\n          <code>&lt;</code> and <code>&amp;</code>, these will\n          typically be output as <code>&amp;lt;</code> and\n          <code>&amp;amp;</code> when the string is written to a\n          <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> and\n          serialized as XML or HTML. If these characters actually\n          represent markup (for example, if the text file contains\n          HTML), then the stylesheet can attempt to write them as\n          markup to the output file using the\n          <code>disable-output-escaping</code> attribute of the\n          <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n          instruction (see <a href = \"#disable-output-escaping\"><i>20.2 Disabling Output\n          Escaping</i></a>). Note, however, that implementations\n          are not required to support this feature.</p>\n        </div>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e22242\" id = \"d5e22242\"></a>Example: Copying\n            Unparsed HTML Boilerplate\n          </div>\n\n          <p>This example attempts to read an HTML file and copy\n          it, as HTML, to the serialized output file:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:output method=\"html\"/&gt;\n\n&lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:value-of select=\"unparsed-text('header.html', 'iso-8859-1')\"\n                disable-output-escaping=\"yes\"/&gt;\n  &lt;xsl:apply-templates/&gt;\n  &lt;xsl:value-of select=\"unparsed-text('footer.html', 'iso-8859-1')\"\n                disable-output-escaping=\"yes\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e22249\" id = \"d5e22249\"></a>Example: Splitting\n            an Input File into a Sequence of Lines\n          </div>\n\n          <p>Often it is necessary to split a text file into a\n          sequence of lines, representing each line as a string.\n          This can be achieved by using the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function in conjunction with the XPath <a href = \"http://www.w3.org/TR/xpath-functions/#func-tokenize\"><code>\n          tokenize</code></a><sup><small>FO</small></sup> function.\n          For example:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:for-each select=\"tokenize(unparsed-text($in), '\\r?\\n')\"&gt;\n ...\n&lt;/xsl:for-each&gt;\n</pre>\n          </div>\n\n          <p>Note that the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function does not normalize line endings. This example\n          has therefore been written to recognize both Unix and\n          Windows conventions for end-of-line, namely a single\n          newline (#x0A) character or a carriage return / line feed\n          pair (#x0D #x0A).</p>\n        </div>\n\n        <p>Because errors in evaluating the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        function are non-recoverable, two functions are provided to\n        allow a stylesheet to determine whether a call with\n        particular arguments would succeed:</p><a name = \"function-unparsed-text-available\" id = \"function-unparsed-text-available\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">unparsed-text-available</code>(<code class = \"arg\">$href</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code>\n        </div>\n\n        <div class = \"proto\">\n          <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n            <tr>\n              <td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">unparsed-text-available</code>(</td>\n\n              <td valign = \"baseline\"><code class = \"arg\">$href</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$encoding</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n            </tr>\n          </table>\n        </div>\n\n        <p>The <a href = \"#function-unparsed-text-available\"><code>unparsed-text-available</code></a>\n        function determines whether a call on the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        function with identical arguments would <span>return a\n        string</span>.</p>\n\n        <p>If the first argument is an empty sequence, the function\n        returns false. If the second argument is an empty sequence,\n        the function behaves as if the second argument were\n        omitted.</p>\n\n        <p>In other cases, the function returns true if a call on\n        <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        with the same arguments would succeed, and false if a call\n        on <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        with the same arguments would fail with a non-recoverable\n        dynamic error.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>This requires that the <a href = \"#function-unparsed-text-available\"><code>unparsed-text-available</code></a>\n          function should actually attempt to read the resource\n          identified by the URI, and check that it is correctly\n          encoded and contains no characters that are invalid in\n          XML. Implementations may avoid the cost of repeating\n          these checks for example by caching the validated\n          contents of the resource, to anticipate a subsequent call\n          on the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function. Alternatively, implementations may be able to\n          rewrite an expression such as <code>if\n          (unparsed-text-available(A)) then unparsed-text(A) else\n          ...</code> to generate a single call internally.</p>\n        </div>\n\n        <p>The functions <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        and <a href = \"#function-unparsed-text-available\"><code>unparsed-text-available</code></a>\n        have the same requirement for stability as the functions\n        <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n        <small>FO</small></sup> and <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc-available\"><code>\n        doc-available</code></a><sup><small>FO</small></sup>\n        defined in <a href = \"#xpath-functions\">[Functions and\n        Operators]</a>. This means that unless the user has\n        explicitly stated a requirement for a reduced level of\n        stability, either of these functions if called twice with\n        the same arguments during the course of a transformation\n        <span class = \"verb\">must</span> return the same results each\n        time; moreover, the results of a call on <a href = \"#function-unparsed-text-available\"><code>unparsed-text-available</code></a>\n        <span class = \"verb\">must</span> be consistent with the\n        results of a subsequent call on <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n        with the same arguments.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"key\" id = \"key\"></a>16.3 Keys</h3>\n\n        <p>Keys provide a way to work with documents that contain\n        an implicit cross-reference structure. They make it easier\n        to locate the nodes within a document that have a given\n        value for a given attribute or child element, and they\n        provide a hint to the implementation that certain access\n        paths in the document need to be efficient.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"xsl-key\" id = \"xsl-key\"></a>16.3.1 The\n          <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          Declaration</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-key\" id = \"XSLT_element-key\"></a><code>&lt;!-- Category: declaration\n          --&gt;<br/>\n          &lt;xsl:key<br/>\n          &#160;&#160;<b>name</b> = <var>qname</var><br/>\n          &#160;&#160;<b>match</b> = <var>pattern</var><br/>\n          &#160;&#160;use? = <var>expression</var><br/>\n          &#160;&#160;collation? = <var>uri</var>&gt;<br/>\n          &#160;&#160;&lt;!-- Content:\n          <var>sequence-constructor</var> --&gt;<br/>\n          &lt;/xsl:key&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> is used to declare\n          <a title = \"key\" href = \"#dt-key\">keys</a>. The\n          <code>name</code> attribute specifies the name of the\n          key. The value of the <code>name</code> attribute is a\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>, which is\n          expanded as described in <a href = \"#qname\"><i>5.1\n          Qualified Names</i></a>. The <code>match</code> attribute\n          is a <a href = \"#NT-Pattern\">Pattern</a>; an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> element applies\n          to all nodes that match the pattern specified in the\n          <code>match</code> attribute.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-key\" id = \"dt-key\" title = \"key\"></a>A <b>key</b> is defined as a\n          set of <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declarations in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that share the same\n          name.<span class = \"definition\">]</span></p>\n\n          <p>The value of the key may be specified either using the\n          <code>use</code> attribute or by means of the contained\n          <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n          <p><a name = \"err-XTSE1205\" id = \"err-XTSE1205\"><span class = \"error\">[ERR XTSE1205]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration has a <code>use</code> attribute and has\n          non-empty content, or if it has empty content and no\n          <code>use</code> attribute.</p>\n\n          <p>If the <code>use</code> attribute is present, its\n          value is an <a title = \"expression\" href = \"#dt-expression\">expression</a> specifying the values of\n          the key. The expression will be evaluated with the node\n          that matches the pattern as the context node. The result\n          of evaluating the expression is <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>.</p>\n\n          <p>Similarly, if a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is\n          present, it is used to determine the values of the key.\n          The sequence constructor will be evaluated with the node\n          that matches the pattern as the context node. <span>The\n          result of evaluating the sequence constructor is\n          <a title = \"atomize\" href = \"#dt-atomization\">atomized</a>.</span></p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-key-specifier\" id = \"dt-key-specifier\" title = \"key specifier\"></a>The expression in the\n          <code>use</code> attribute and the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          within an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration are referred to collectively as the <b>key\n          specifier</b>. The key specifier determines the values\n          that may be used to find a node using this <a title = \"key\" href = \"#dt-key\">key</a>.<span class = \"definition\">]</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>There is no requirement that all the values of a key\n            should have the same type.</p>\n          </div>\n\n          <p>The presence of an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration makes\n          it easy to find a node that matches the\n          <code>match</code> pattern if any of the values of the\n          <span><a title = \"key specifier\" href = \"#dt-key-specifier\">key specifier</a></span> (when\n          applied to that node) are known. It also provides a hint\n          to the implementation that access to the nodes by means\n          of these values needs to be efficient (many\n          implementations are likely to construct an index or hash\n          table to achieve this). Note that the <span><a title = \"key specifier\" href = \"#dt-key-specifier\">key\n          specifier</a></span> in general returns a sequence of\n          values, and any one of these may be used to locate the\n          node.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>An <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n            declaration is not bound to a specific source document.\n            The source document to which it applies is determined\n            only when the <a href = \"#function-key\"><code>key</code></a> function is used\n            to locate nodes using the key. Keys can be used to\n            locate nodes within any source document (including\n            temporary trees), but each use of the <a href = \"#function-key\"><code>key</code></a> function searches\n            one document only.</p>\n          </div>\n\n          <p>The optional <code>collation</code> attribute is used\n          only when deciding whether two strings are equal for the\n          purposes of key matching. Specifically, two values\n          <code>$a</code> and <code>$b</code> are considered equal\n          if the result of the function call <code>compare($a, $b,\n          $collation)</code> is zero. The effective collation for\n          an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration is the collation specified in its\n          <code>collation</code> attribute if present,\n          <span>resolved against the base URI of the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> element</span>,\n          or the <a title = \"default collation\" href = \"#dt-default-collation\">default collation</a> that is in\n          scope for the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration\n          otherwise; the effective collation must be the same for\n          all the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declarations making up a <a title = \"key\" href = \"#dt-key\">key</a>.</p>\n\n          <p><a name = \"err-XTSE1210\" id = \"err-XTSE1210\"><span class = \"error\">[ERR XTSE1210]</span></a> It is a static error if\n          the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration has a <code>collation</code> attribute whose\n          value <span>(after resolving against the base URI)</span>\n          is not a URI recognized by the implementation as\n          referring to a collation.</p>\n\n          <p><a name = \"err-XTSE1220\" id = \"err-XTSE1220\"><span class = \"error\">[ERR XTSE1220]</span></a> It is a static error if\n          there are several <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declarations in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> with the same key name\n          and different effective collations. Two collations are\n          the same if their URIs are equal under the rules for\n          comparing <code>xs:anyURI</code> values, or if the\n          implementation can determine that they are different URIs\n          referring to the same collation.</p>\n\n          <p>It is possible to have:</p>\n\n          <ul>\n            <li>\n              <p>multiple <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declarations\n              with the same name;</p>\n            </li>\n\n            <li>\n              <p>a node that matches the <code>match</code>\n              patterns of several different <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n              declarations<span>, whether these have the same key\n              name or different key names;</span></p>\n            </li>\n\n            <li>\n              <p>a node that returns more than one value from its\n              <span><a title = \"key specifier\" href = \"#dt-key-specifier\">key specifier</a></span>;</p>\n            </li>\n\n            <li>\n              <p>a key value that identifies more than one node\n              (the key values for different nodes do not need to be\n              unique).</p>\n            </li>\n          </ul>\n\n          <p>An <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration with higher <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> does\n          not override another of lower import precedence; all the\n          <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declarations in the stylesheet are effective regardless\n          of their import precedence.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"keys\" id = \"keys\"></a>16.3.2 The <a href = \"#function-key\"><code>key</code></a>\n          Function</h4><a name = \"function-key\" id = \"function-key\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">key</code>(<code class = \"arg\">$key-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>, <code class = \"arg\">$key-value</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code>\n          </div>\n\n          <div class = \"proto\">\n            <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n              <tr>\n                <td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">key</code>(</td>\n\n                <td valign = \"baseline\"><code class = \"arg\">$key-name</code></td>\n\n                <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n              </tr>\n\n              <tr>\n                <td valign = \"baseline\"><code class = \"arg\">$key-value</code></td>\n\n                <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:anyAtomicType*</code>,</td>\n              </tr>\n\n              <tr>\n                <td valign = \"baseline\"><code class = \"arg\">$top</code></td>\n\n                <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">node()*</code></td>\n              </tr>\n            </table>\n          </div>\n\n          <p>The <a href = \"#function-key\"><code>key</code></a>\n          function does for keys what the <a href = \"http://www.w3.org/TR/xpath-functions/#func-id\"><code>id</code></a><sup>\n          <small>FO</small></sup> function does for IDs.</p>\n\n          <p>The <code>$key-name</code> argument specifies the name\n          of the <a title = \"key\" href = \"#dt-key\">key</a>. The value\n          of the argument <span class = \"verb\">must</span> be a\n          <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a>, which is expanded as described in <a href = \"#qname\"><i>5.1 Qualified Names</i></a>.</p>\n\n          <p><a name = \"err-XTDE1260\" id = \"err-XTDE1260\"><span class = \"error\">[ERR XTDE1260]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the value is not a valid QName, or if there\n          is no namespace declaration in scope for the prefix of\n          the QName, or if the name obtained by expanding the QName\n          is not the same as the expanded name of any <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. If the processor is able\n          to detect the error statically (for example, when the\n          argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n          <p>The <code>$key-value</code> argument to the <a href = \"#function-key\"><code>key</code></a> function is\n          considered as a sequence. The set of requested key values\n          is formed by atomizing the supplied value of the\n          argument, using the standard <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n          rules</a>. Each of the resulting atomic values is\n          considered as a requested key value. The result of the\n          function is a sequence of nodes, in document order and\n          with duplicates removed, comprising those nodes in the\n          selected <span>subtree</span> (see below) that are\n          matched by an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration whose\n          name is the same as the supplied key name, where the\n          result of evaluating the <a title = \"key specifier\" href = \"#dt-key-specifier\">key specifier</a> contains a value\n          that is equal to one of these requested key values, under\n          the rules appropriate to the XPath <code>eq</code>\n          operator for the two values in question, using the\n          <code>collation</code> attributes of the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration when\n          comparing strings. No error is reported if two values are\n          encountered that are not comparable; they are regarded\n          for the purposes of this function as being not equal.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Under the rules for the <code>eq</code> operator,\n            untyped atomic values are converted to strings, not to\n            the type of the other operand. This means, for example,\n            that if the expression in the <code>use</code>\n            attribute returns a date, supplying an untyped atomic\n            value in the call to the <a href = \"#function-key\"><code>key</code></a> function will\n            return an empty sequence.</p>\n          </div>\n\n          <p>If the second argument is an empty sequence, the\n          result of the function will be an empty sequence.</p>\n\n          <p>Different rules apply when <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards\n          compatible</a> behavior is enabled. Specifically, if any\n          of the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          elements in the definition of the <a title = \"key\" href = \"#dt-key\">key</a> enables backwards compatible behavior,\n          then the value of the <a title = \"key specifier\" href = \"#dt-key-specifier\">key specifier</a> and the value of\n          the second argument of the <a href = \"#function-key\"><code>key</code></a> function are both\n          converted after atomization to a sequence of strings, by\n          applying a cast to each item in the sequence, before\n          performing the comparison.</p>\n\n          <p>The third argument is used to identify the selected\n          subtree. If the argument is present, the selected subtree\n          is the set of nodes that have <var>$top</var> as an\n          ancestor-or-self node. If the argument is omitted, the\n          selected subtree is the document containing the context\n          node. This means that the third argument effectively\n          defaults to <code>/</code>.</p>\n\n          <p><a name = \"err-XTDE1270\" id = \"err-XTDE1270\"><span class = \"error\">[ERR XTDE1270]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> to call the <a href = \"#function-key\"><code>key</code></a> function with two\n          arguments if there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>, <span>or if the root\n          of the tree containing the context node is not a document\n          node</span>; or to call the function with three arguments\n          if the root of the tree containing the node supplied in\n          the third argument is not a document node.</p>\n\n          <p>The result of the <a href = \"#function-key\"><code>key</code></a> function can be\n          described more specifically as follows. The result is a\n          sequence containing every node <var>$N</var> that\n          satisfies the following conditions:</p>\n\n          <ul>\n            <li>\n              <p><code>$N/ancestor-or-self::node() intersect\n              $top</code> is non-empty. (If the third argument is\n              omitted, <code>$top</code> defaults to\n              <code>/</code>)</p>\n            </li>\n\n            <li>\n              <p><var>$N</var> matches the pattern specified in the\n              <code>match</code> attribute of an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration\n              whose <code>name</code> attribute matches the name\n              specified in the <code>$key-name</code> argument.</p>\n            </li>\n\n            <li>\n              <p>When the <a title = \"key specifier\" href = \"#dt-key-specifier\">key specifier</a> of that\n              <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n              declaration is evaluated with a <a title = \"singleton focus\" href = \"#dt-singleton-focus\">singleton focus</a> based on\n              <var>$N</var>, the <a title = \"atomize\" href = \"#dt-atomization\">atomized</a> value of the resulting\n              sequence includes a value that compares equal to at\n              least one item in the atomized value of the sequence\n              supplied as <code>$key-value</code>, under the rules\n              of the <code>eq</code> operator with the collation\n              selected as described above.</p>\n            </li>\n          </ul>\n\n          <p>The sequence returned by the <a href = \"#function-key\"><code>key</code></a> function will be in\n          document order, with duplicates (that is, nodes having\n          the same identity) removed.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e22835\" id = \"d5e22835\"></a>Example: Using a\n              Key to Follow Cross-References\n            </div>\n\n            <p>For example, given a declaration</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:key name=\"idkey\" match=\"div\" use=\"@id\"/&gt;\n</pre>\n            </div>\n\n            <p>an expression <code>key(\"idkey\",@ref)</code> will\n            return the same nodes as <code>id(@ref)</code>,\n            assuming that the only ID attribute declared in the XML\n            source document is:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;!ATTLIST div id ID #IMPLIED&gt;\n</pre>\n            </div>\n\n            <p>and that the <code>ref</code> attribute of the\n            context node contains no whitespace.</p>\n\n            <p>Suppose a document describing a function library\n            uses a <code>prototype</code> element to define\n            functions</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;prototype name=\"sqrt\" return-type=\"xs:double\"&gt;\n  &lt;arg type=\"xs:double\"/&gt;\n&lt;/prototype&gt;\n</pre>\n            </div>\n\n            <p>and a <code>function</code> element to refer to\n            function names</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;function&gt;sqrt&lt;/function&gt;\n</pre>\n            </div>\n\n            <p>Then the stylesheet could generate hyperlinks\n            between the references and definitions as follows:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:key name=\"func\" match=\"prototype\" use=\"@name\"/&gt;\n\n&lt;xsl:template match=\"function\"&gt;\n&lt;b&gt;\n  &lt;a href=\"#{generate-id(key('func',.))}\"&gt;\n    &lt;xsl:apply-templates/&gt;\n  &lt;/a&gt;\n&lt;/b&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template match=\"prototype\"&gt;\n  &lt;p&gt;\n    &lt;a name=\"{generate-id()}\"&gt;\n      &lt;b&gt;Function: &lt;/b&gt;\n      ...\n    &lt;/a&gt;\n  &lt;/p&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n          </div>\n\n          <p>When called with two arguments, the <a href = \"#function-key\"><code>key</code></a> function always\n          returns nodes that are in the same document as the\n          context node. To retrieve a node from any other document,\n          it is necessary either to change the context node, or to\n          supply a third argument.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e22881\" id = \"d5e22881\"></a>Example: Using\n              Keys to Reference other Documents\n            </div>\n\n            <p>For example, suppose a document contains\n            bibliographic references in the form\n            <code>&lt;bibref&gt;XSLT&lt;/bibref&gt;</code>, and\n            there is a separate XML document <code>bib.xml</code>\n            containing a bibliographic database with entries in the\n            form:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;entry name=\"XSLT\"&gt;...&lt;/entry&gt;\n</pre>\n            </div>\n\n            <p>Then the stylesheet could use the following to\n            transform the <code>bibref</code> elements:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:key name=\"bib\" match=\"entry\" use=\"@name\"/&gt;\n\n&lt;xsl:template match=\"bibref\"&gt;\n  &lt;xsl:variable name=\"name\" select=\".\"/&gt;\n  &lt;xsl:apply-templates select=\"document('bib.xml')/key('bib',$name)\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>This relies on the ability in XPath 2.0 to have a\n              function call on the right-hand side of the\n              <code>/</code> operator in a path expression.</p>\n            </div>\n\n            <p>The following code would also work:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:key name=\"bib\" match=\"entry\" use=\"@name\"/&gt;\n\n&lt;xsl:template match=\"bibref\"&gt;\n  &lt;xsl:apply-templates select=\"key('bib', ., document('bib.xml'))\"/&gt;\n&lt;/xsl:template&gt;\n</pre>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"format-number\" id = \"format-number\"></a>16.4\n        Number Formatting</h3><a name = \"function-format-number\" id = \"function-format-number\"></a>\n\n        <div class = \"proto\">\n          <code class = \"function\">format-number</code>(<code class = \"arg\">$value</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>, <code class = \"arg\">$picture</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n        </div>\n\n        <div class = \"proto\">\n          <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n            <tr>\n              <td valign = \"baseline\" rowspan = \"3\"><code class = \"function\">format-number</code>(</td>\n\n              <td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">numeric?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$picture</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$decimal-format-name</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code></td>\n            </tr>\n          </table>\n        </div>\n\n        <p>The <a href = \"#function-format-number\"><code>format-number</code></a>\n        function formats <code>$value</code> as a string using the\n        <a title = \"picture string\" href = \"#dt-picture-string\">picture\n        string</a> specified by the <code>$picture</code> argument\n        and the decimal-format named by the\n        <code>$decimal-format-name</code> argument, or the default\n        decimal-format, if there is no\n        <code>$decimal-format-name</code> argument. <span>The\n        syntax of the picture string is described in <a href = \"#processing-picture-string\"><i>16.4.2 Processing the\n        Picture String</i></a>.</span></p>\n\n        <p>The <code>$value</code> argument may be of any numeric\n        data type (<code>xs:double</code>, <code>xs:float</code>,\n        <code>xs:decimal</code>, or their subtypes including\n        <code>xs:integer</code>). Note that if an\n        <code>xs:decimal</code> is supplied, it is not\n        automatically promoted to an <code>xs:double</code>, as\n        such promotion can involve a loss of precision.</p>\n\n        <p>If the supplied value of the <code>$value</code>\n        argument is an empty sequence, the function behaves as if\n        the supplied value were the <code>xs:double</code> value\n        <code>NaN</code>.</p>\n\n        <p>The value of <code>$decimal-format-name</code>\n        <span class = \"verb\">must</span> be a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>,\n        which is expanded as described in <a href = \"#qname\"><i>5.1\n        Qualified Names</i></a>. The result of the function is the\n        formatted string representation of the supplied number.</p>\n\n        <p><a name = \"err-XTDE1280\" id = \"err-XTDE1280\"><span class = \"error\">[ERR XTDE1280]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the name specified as the\n        <code>$decimal-format-name</code> argument <span>is not a\n        valid <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if\n        its prefix has not been declared in an in-scope namespace\n        declaration</span>, or if the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> does not contain a\n        declaration of a decimal-format with a matching <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>. If the processor\n        is able to detect the error statically (for example, when\n        the argument is supplied as a string literal), then the\n        processor <span class = \"verb\">may</span> optionally signal\n        this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"defining-decimal-format\" id = \"defining-decimal-format\"></a>16.4.1 Defining a Decimal\n          Format</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-decimal-format\" id = \"XSLT_element-decimal-format\"></a><code>&lt;!-- Category:\n          declaration --&gt;<br/>\n          &lt;xsl:decimal-format<br/>\n          &#160;&#160;name? = <var>qname</var><br/>\n          &#160;&#160;decimal-separator? = <var>char</var><br/>\n          &#160;&#160;grouping-separator? = <var>char</var><br/>\n          &#160;&#160;infinity? = <var>string</var><br/>\n          &#160;&#160;minus-sign? = <var>char</var><br/>\n          &#160;&#160;NaN? = <var>string</var><br/>\n          &#160;&#160;percent? = <var>char</var><br/>\n          &#160;&#160;per-mille? = <var>char</var><br/>\n          &#160;&#160;zero-digit? = <var>char</var><br/>\n          &#160;&#160;digit? = <var>char</var><br/>\n          &#160;&#160;pattern-separator? =\n          <var>char</var>&#160;/&gt;</code></p>\n\n          <p>The <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          element controls the interpretation of a <a title = \"picture string\" href = \"#dt-picture-string\">picture\n          string</a> used by the <a href = \"#function-format-number\"><code>format-number</code></a>\n          function.</p>\n\n          <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> may contain multiple\n          <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations and may include or import <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> that also\n          contain <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations. The name of an <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration is the value of its <code>name</code>\n          attribute, if any.</p>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-decimal-format\" id = \"dt-decimal-format\" title = \"decimal format\"></a>All the <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations in a stylesheet that share the same name are\n          grouped into a named <b>decimal format</b>; those that\n          have no name are grouped into a single unnamed decimal\n          format.<span class = \"definition\">]</span></p>\n\n          <p>If a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> does not contain a\n          declaration of the unnamed decimal format, a declaration\n          equivalent to an <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          element with no attributes is implied.</p>\n\n          <p>The attributes of the <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration establish values for a number of variables\n          used as input to the algorithm followed by the <a href = \"#function-format-number\"><code>format-number</code></a>\n          function. An outline of the purpose of each attribute is\n          given below; however, the definitive explanations are\n          given later, as part of the description of this\n          algorithm.</p>\n\n          <p>For any named <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal format</a>, the effective\n          value of each attribute is taken from an <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration that has that name, and that specifies an\n          explicit value for the required attribute. If there is no\n          such declaration, the default value of the attribute is\n          used. If there is more than one such declaration, the one\n          with highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> is\n          used.</p>\n\n          <p>For any unnamed <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal format</a>, the effective\n          value of each attribute is taken from an <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration that is unnamed, and that specifies an\n          explicit value for the required attribute. If there is no\n          such declaration, the default value of the attribute is\n          used. If there is more than one such declaration, the one\n          with highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> is\n          used.</p>\n\n          <p><a name = \"err-XTSE1290\" id = \"err-XTSE1290\"><span class = \"error\">[ERR XTSE1290]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if a named or unnamed <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal format</a> contains two\n          conflicting values for the same attribute in different\n          <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations having the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>,\n          unless there is another definition of the same attribute\n          with higher import precedence.</p>\n\n          <p>The following attributes control the interpretation of\n          characters in the <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a> supplied to the\n          <a href = \"#function-format-number\"><code>format-number</code></a>\n          function, and also specify characters that may appear in\n          the result of formatting the number. In each case the\n          value <span class = \"verb\">must</span> be a single\n          character <span><span class = \"error\">[see <a href = \"#err-XTSE0020\">ERR XTSE0020</a>]</span></span>.</p>\n\n          <ul>\n            <li>\n              <p><code>decimal-separator</code> specifies the\n              character used for the\n              <var>decimal-separator-sign</var>; the default value\n              is the period character (<code>.</code>)</p>\n            </li>\n\n            <li>\n              <p><code>grouping-separator</code> specifies the\n              character used for the <var>grouping-sign</var>,\n              which is typically used as a thousands separator; the\n              default value is the comma character\n              (<code>,</code>)</p>\n            </li>\n\n            <li>\n              <p><code>percent</code> specifies the character used\n              for the <var>percent-sign</var>; the default value is\n              the percent character (<code><undefined></undefined></code>)</p>\n            </li>\n\n            <li>\n              <p><code>per-mille</code> specifies the character\n              used for the <var>per-mille-sign</var>; the default\n              value is the Unicode per-mille character (#x2030)</p>\n            </li>\n\n            <li>\n              <p><code>zero-digit</code> specifies the character\n              used for the <var>digit-zero-sign</var>; the default\n              value is the digit zero (<code>0</code>). This\n              character <span class = \"verb\">must</span> be a digit\n              (category Nd in the Unicode property database), and\n              it <span class = \"verb\">must</span> have the numeric\n              value zero. <span>This attribute implicitly defines\n              the Unicode character that is used to represent each\n              of the values 0 to 9 in the final result string:\n              Unicode is organized so that each set of decimal\n              digits forms a contiguous block of characters in\n              numerical sequence.</span></p>\n            </li>\n          </ul>\n\n          <p><a name = \"err-XTSE1295\" id = \"err-XTSE1295\"><span class = \"error\">[ERR XTSE1295]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the character specified in the <code>zero-digit</code>\n          attribute is not a digit or is a digit that does not have\n          the numeric value zero.</p>\n\n          <p>The following attributes control the interpretation of\n          characters in the <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a> supplied to the\n          <a href = \"#function-format-number\"><code>format-number</code></a>\n          function. In each case the value <span class = \"verb\">must</span> be a single character\n          <span><span class = \"error\">[see <a href = \"#err-XTSE0020\">ERR XTSE0020</a>]</span></span>.</p>\n\n          <ul>\n            <li>\n              <p><code>digit</code> specifies the character used\n              for the <var>digit-sign</var> in the <a title = \"picture string\" href = \"#dt-picture-string\">picture\n              string</a>; the default value is the number sign\n              character (<code>#</code>)</p>\n            </li>\n\n            <li>\n              <p><code>pattern-separator</code> specifies the\n              character used for the\n              <var>pattern-separator-sign</var>, which separates\n              positive and negative sub-pictures in a <a title = \"picture string\" href = \"#dt-picture-string\">picture\n              string</a>; the default value is the semi-colon\n              character (<code>;</code>)</p>\n            </li>\n          </ul>\n\n          <p>The following attributes specify characters or strings\n          that may appear in the result of formatting the\n          number:</p>\n\n          <ul>\n            <li>\n              <p><code>infinity</code> specifies the string used\n              for the <var>infinity-symbol</var>; the default value\n              is the string <code>Infinity</code></p>\n            </li>\n\n            <li>\n              <p><code>NaN</code> specifies the string used for the\n              <var>NaN-symbol</var>, which is used to represent the\n              value NaN (not-a-number); the default value is the\n              string <code>NaN</code></p>\n            </li>\n\n            <li>\n              <p><code>minus-sign</code> specifies the character\n              used for the <var>minus-symbol</var>; the default\n              value is the hyphen-minus character (<code>-</code>,\n              #x2D). The value <span class = \"verb\">must</span> be a\n              single character.</p>\n            </li>\n          </ul>\n\n          <p><a name = \"err-XTSE1300\" id = \"err-XTSE1300\"><span class = \"error\">[ERR XTSE1300]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if, for any named or unnamed decimal format, the\n          variables representing characters used in a <a title = \"picture string\" href = \"#dt-picture-string\">picture\n          string</a> do not each have distinct values. These\n          variables are <var>decimal-separator-sign</var>,\n          <var>grouping-sign</var>, <var>percent-sign</var>,\n          <var>per-mille-sign</var>, <var>digit-zero-sign</var>,\n          <var>digit-sign</var>, and\n          <var>pattern-separator-sign</var>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"processing-picture-string\" id = \"processing-picture-string\"></a>16.4.2 Processing the\n          Picture String</h4>\n\n          <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-picture-string\" id = \"dt-picture-string\" title = \"picture string\"></a>The formatting of a number is\n          controlled by a <b>picture string</b>. The picture string\n          is a sequence of characters, in which the characters\n          assigned to the variables\n          <var>decimal-separator-sign</var>,\n          <var>grouping-sign</var>, <var>zero-digit-sign</var>,\n          <var>digit-sign</var> and\n          <var>pattern-separator-sign</var> are classified as\n          active characters, and all other characters (including\n          the <var>percent-sign</var> and\n          <var>per-mille-sign</var>) are classified as passive\n          characters.<span class = \"definition\">]</span></p>\n\n          <p>The <var>integer part</var> of the sub-picture is\n          defined as the part that appears to the left of the\n          <var>decimal-separator-sign</var> if there is one, or the\n          entire sub-picture otherwise. The <var>fractional\n          part</var> of the sub-picture is defined as the part that\n          appears to the right of the\n          <var>decimal-separator-sign</var> if there is one; it is\n          a zero-length string otherwise.</p>\n\n          <p><a name = \"err-XTDE1310\" id = \"err-XTDE1310\"><span class = \"error\">[ERR XTDE1310]</span></a> The <a title = \"picture string\" href = \"#dt-picture-string\">picture\n          string</a> <span class = \"verb\">must</span> conform to the\n          following rules. It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the picture string does not satisfy these\n          rules.</p>\n\n          <p>Note that in these rules the words \"preceded\" and\n          \"followed\" refer to characters anywhere in the string,\n          they are not to be read as \"immediately preceded\" and\n          \"immediately followed\".</p>\n\n          <ul>\n            <li>\n              <p>A picture-string consists either of a sub-picture,\n              or of two sub-pictures separated by a\n              <var>pattern-separator-sign</var>. A picture-string\n              <span class = \"verb\">must not</span> contain more than\n              one <var>pattern-separator-sign</var>. If the\n              picture-string contains two sub-pictures, the first\n              is used for positive values and the second for\n              negative values.</p>\n            </li>\n\n            <li>\n              <p>A sub-picture <span class = \"verb\">must not</span>\n              contain more than one\n              <var>decimal-separator-sign</var>.</p>\n            </li>\n\n            <li>\n              <p>A sub-picture <span class = \"verb\">must not</span>\n              contain more than one <var>percent-sign</var> or\n              <var>per-mille-sign</var>, and it <span class = \"verb\">must not</span> contain one of each.</p>\n            </li>\n\n            <li>\n              <p>A sub-picture <span class = \"verb\">must</span>\n              contain at least one <var>digit-sign</var> or\n              <var>zero-digit-sign</var>.</p>\n            </li>\n\n            <li>\n              <p>A sub-picture <span class = \"verb\">must not</span>\n              contain a passive character that is preceded by an\n              active character and that is followed by another\n              active character.</p>\n            </li>\n\n            <li>\n              <p>A sub-picture <span class = \"verb\">must not</span>\n              contain a <var>grouping-separator-sign</var> adjacent\n              to a <var>decimal-separator-sign</var>.</p>\n            </li>\n\n            <li>\n              <p>The integer part of a sub-picture <span class = \"verb\">must not</span> contain a\n              <var>zero-digit-sign</var> that is followed by a\n              <var>digit-sign</var>. The fractional part of a\n              sub-picture <span class = \"verb\">must not</span>\n              contain a <var>digit-sign</var> that is followed by a\n              <var>zero-digit-sign</var>.</p>\n            </li>\n          </ul>\n\n          <p>The evaluation of the <a href = \"#function-format-number\"><code>format-number</code></a>\n          function is described below in two phases, an analysis\n          phase and a formatting phase. The analysis phase takes as\n          its inputs the <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a> and the variables\n          derived from the relevant <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration, and produces as its output a number of\n          variables with defined values. The formatting phase takes\n          as its inputs the number to be formatted and the\n          variables produced by the analysis phase, and produces as\n          its output a string containing a formatted representation\n          of the number.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Numbers will always be formatted with the most\n            significant digit on the left.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"analysing-picture-string\" id = \"analysing-picture-string\"></a>16.4.3 Analysing the\n          Picture String</h4>\n\n          <p>This phase of the algorithm analyses the <a title = \"picture string\" href = \"#dt-picture-string\">picture\n          string</a> and the attribute settings of the <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration, and has the effect of setting the values of\n          various variables, which are used in the subsequent\n          formatting phase. These variables are listed below. Each\n          is shown with its initial setting and its data type.</p>\n\n          <p>Several variables are associated with each\n          sub-picture. If there are two sub-pictures, then these\n          rules are applied to one sub-picture to obtain the values\n          that apply to positive numbers, and to the other to\n          obtain the values that apply to negative numbers. If\n          there is only one sub-picture, then the values for both\n          cases are derived from this sub-picture.</p>\n\n          <p>The variables are as follows:</p>\n\n          <ul>\n            <li>\n              <p>The <var>integer-part-grouping-positions</var> is\n              a sequence of integers representing the positions of\n              grouping separators within the integer part of the\n              sub-picture. For each\n              <var>grouping-separator-sign</var> that appears\n              within the integer part of the sub-picture, this\n              sequence contains an integer that is equal to the\n              total number of <var>digit-sign</var> and\n              <var>zero-digit-sign</var> characters that appear\n              within the integer part of the sub-picture and to the\n              right of the <var>grouping-separator-sign</var>. In\n              addition, if these\n              <var>integer-part-grouping-positions</var> are at\n              regular intervals (that is, if they <span>form a\n              sequence <var>N</var>, <var>2N</var>, <var>3N</var>,\n              ... for some integer value <var>N</var>,</span>\n              including the case where there is only one number in\n              the list), then the sequence contains all integer\n              multiples of <var>N</var> as far as necessary to\n              accommodate the largest possible number.</p>\n            </li>\n\n            <li>\n              <p>The <var>minimum-integer-part-size</var> is an\n              integer indicating the minimum number of digits that\n              will appear to the left of the\n              <var>decimal-separator-sign</var>. It is normally set\n              to the number of <var>zero-digit-sign</var>\n              characters found in the integer part of the\n              sub-picture. But if the sub-picture contains no\n              <var>zero-digit-sign</var> and no\n              <var>decimal-separator-sign</var>, it is set to\n              one.</p>\n\n              <div class = \"note\">\n                <p class = \"prefix\"><b>Note:</b></p>\n\n                <p>There is no maximum integer part size. All\n                significant digits in the integer part of the\n                number will be displayed, even if this exceeds the\n                number of <var>digit-sign</var> and\n                <var>zero-digit-sign</var> characters in the\n                subpicture.</p>\n              </div>\n            </li>\n\n            <li>\n              <p>The <var>prefix</var> is set to contain all\n              passive characters in the sub-picture to the left of\n              the leftmost active character. <span>If the picture\n              string contains only one sub-picture</span>, the\n              <var>prefix</var> for the negative sub-picture is set\n              by concatenating the <var>minus-sign</var> character\n              and the <var>prefix</var> for the positive\n              sub-picture (if any), in that order.</p>\n            </li>\n\n            <li>\n              <p>The <var>fractional-part-grouping-positions</var>\n              is a sequence of integers representing the positions\n              of grouping separators within the fractional part of\n              the sub-picture. For each\n              <var>grouping-separator-sign</var> that appears\n              within the fractional part of the sub-picture, this\n              sequence contains an integer that is equal to the\n              total number of <var>digit-sign</var> and\n              <var>zero-digit-sign</var> characters that appear\n              within the fractional part of the sub-picture and to\n              the left of the\n              <var>grouping-separator-sign</var>.</p>\n            </li>\n\n            <li>\n              <p>The <var>minimum-fractional-part-size</var> is set\n              to the number of <var>zero-digit-sign</var>\n              characters found in the fractional part of the\n              sub-picture.</p>\n            </li>\n\n            <li>\n              <p>The <var>maximum-fractional-part-size</var> is set\n              to the total number of <var>digit-sign</var> and\n              <var>zero-digit-sign</var> characters found in the\n              fractional part of the sub-picture.</p>\n            </li>\n\n            <li>\n              <p>The <var>suffix</var> is set to contain all\n              passive characters to the right of the rightmost\n              active character in the fractional part of the\n              sub-picture.</p>\n            </li>\n          </ul>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>If there is only one sub-picture, then all variables\n            for positive numbers and negative numbers will be the\n            same, except for <var>prefix</var>: the prefix for\n            negative numbers will <span>be preceded by the\n            <var>minus-sign</var> character</span>.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"formatting-the-number\" id = \"formatting-the-number\"></a>16.4.4 Formatting the\n          Number</h4>\n\n          <p>This section describes the second phase of processing\n          of the <a href = \"#function-format-number\"><code>format-number</code></a>\n          function. This phase takes as input a number to be\n          formatted (referred to as the <em>input number</em>), and\n          the variables set up by analysing the <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declaration and the <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a>, as described\n          above. The result of this phase is a string, which forms\n          the return value of the <a href = \"#function-format-number\"><code>format-number</code></a>\n          function.</p>\n\n          <p>The algorithm for this second stage of processing is\n          as follows:</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>If the input number is NaN (not a number), the\n              result is the specified <var>NaN-symbol</var> (with\n              no <var>prefix</var> or <var>suffix</var>).</p>\n            </li>\n\n            <li>\n              <p>In the rules below, the positive sub-picture and\n              its associated variables are used if the input number\n              is positive, and the negative sub-picture and its\n              associated variables are used otherwise. Negative\n              zero is taken as negative, positive zero as\n              positive.</p>\n            </li>\n\n            <li>\n              <p>If the input number is positive or negative\n              infinity, the result is the concatenation of the\n              appropriate <var>prefix</var>, the\n              <var>infinity-symbol</var>, and the appropriate\n              <var>suffix</var>.</p>\n            </li>\n\n            <li>\n              <p>If the sub-picture contains a\n              <var>percent-sign</var>, the number is multiplied by\n              100. If the sub-picture contains a\n              <var>per-mille-sign</var>, the number is multiplied\n              by 1000. The resulting number is referred to below as\n              the <var>adjusted number</var>.</p>\n            </li>\n\n            <li>\n              <p>The <var>adjusted number</var> is converted (if\n              necessary) to an <code>xs:decimal</code> value, using\n              an implementation of <code>xs:decimal</code> that\n              imposes no limits on the <code>totalDigits</code> or\n              <code>fractionDigits</code> facets. If there are\n              several such values that are numerically equal to the\n              <var>adjusted number</var> (bearing in mind that if\n              the <var>adjusted number</var> is an\n              <code>xs:double</code> or <code>xs:float</code>, the\n              comparison will be done by converting the decimal\n              value back to an <code>xs:double</code> or\n              <code>xs:float</code>), the one that is chosen\n              <span class = \"verb\">should</span> be one with the\n              smallest possible number of digits not counting\n              leading or trailing zeroes <span>(whether significant\n              or insignificant)</span>. For example, 1.0 is\n              preferred to 0.9999999999, and 100000000 is preferred\n              to 100000001. This value is then rounded so that it\n              uses no more than\n              <code>maximum-fractional-part-size</code> digits in\n              its fractional part. The <var>rounded number</var> is\n              defined to be the result of converting the\n              <var>adjusted number</var> to an\n              <code>xs:decimal</code> value, as described above,\n              and then calling the function <a href = \"http://www.w3.org/TR/xpath-functions/#func-round-half-to-even\">\n              <code>round-half-to-even</code></a><sup><small>FO</small></sup>\n              with this converted number as the first argument and\n              the <code>maximum-fractional-part-size</code> as the\n              second argument, again with no limits on the\n              <code>totalDigits</code> or\n              <code>fractionDigits</code> in the result.</p>\n            </li>\n\n            <li>\n              <p>The absolute value of the <var>rounded\n              number</var> is converted to a string in decimal\n              notation, with no insignificant leading or trailing\n              zeroes, using the characters implied by the choice of\n              <var>zero-digit-sign</var> to represent the ten\n              decimal digits, and the\n              <var>decimal-separator-sign</var> to separate the\n              integer part and the fractional part. (The value zero\n              will at this stage be represented by a\n              <var>decimal-separator-sign</var> on its own.)</p>\n            </li>\n\n            <li>\n              <p>If the number of digits to the left of the\n              <var>decimal-separator-sign</var> is less than\n              <var>minimum-integer-part-size</var>, leading\n              <var>zero-digit-sign</var> characters are added to\n              pad out to that size.</p>\n            </li>\n\n            <li>\n              <p>If the number of digits to the right of the\n              <var>decimal-separator-sign</var> is less than\n              <var>minimum-fractional-part-size</var>, trailing\n              <var>zero-digit-sign</var> characters are added to\n              pad out to that size.</p>\n            </li>\n\n            <li>\n              <p>For each integer <var>N</var> in the\n              <var>integer-part-grouping-positions</var> list, a\n              <var>grouping-separator-sign</var> character is\n              inserted into the string immediately after that digit\n              that appears in the integer part of the number and\n              has <var>N</var> digits between it and the\n              <var>decimal-separator-sign</var>, if there is such a\n              digit.</p>\n            </li>\n\n            <li>\n              <p>For each integer <var>N</var> in the\n              <var>fractional-part-grouping-positions</var> list, a\n              <var>grouping-separator-sign</var> character is\n              inserted into the string immediately before that\n              digit that appears in the fractional part of the\n              number and has <var>N</var> digits between it and the\n              <var>decimal-separator-sign</var>, if there is such a\n              digit.</p>\n            </li>\n\n            <li>\n              <p>If there is no <var>decimal-separator-sign</var>\n              in the sub-picture, <span>or if there are no digits\n              to the right of the <var>decimal-separator-sign</var>\n              character in the string, then</span> the\n              <var>decimal-separator-sign</var> character is\n              removed from the string (it will be the rightmost\n              character in the string).</p>\n            </li>\n\n            <li>\n              <p>The result of the function is the concatenation of\n              the appropriate <var>prefix</var>, the string\n              conversion of the number as obtained above, and the\n              appropriate <var>suffix</var>.</p>\n            </li>\n          </ol>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"format-date\" id = \"format-date\"></a>16.5\n        Formatting Dates and Times</h3>\n\n        <p>Three functions are provided to represent dates and\n        times as a string, using the conventions of a selected\n        calendar, language, and country. Each has two\n        variants.</p><a name = \"function-format-dateTime\" id = \"function-format-dateTime\"></a>\n\n        <div class = \"proto\">\n          <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n            <tr>\n              <td valign = \"baseline\" rowspan = \"5\"><code class = \"function\">format-dateTime</code>(</td>\n\n              <td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$picture</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$language</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$calendar</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$country</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code></td>\n            </tr>\n          </table>\n        </div>\n\n        <div class = \"proto\">\n          <code class = \"function\">format-dateTime</code>(<code class = \"arg\">$value</code><code class = \"as\">\n          &#160;as&#160;</code><code class = \"type\">xs:dateTime?</code>, <code class = \"arg\">$picture</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code>\n        </div><a name = \"function-format-date\" id = \"function-format-date\"></a>\n\n        <div class = \"proto\">\n          <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n            <tr>\n              <td valign = \"baseline\" rowspan = \"5\"><code class = \"function\">format-date</code>(</td>\n\n              <td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$picture</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$language</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$calendar</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$country</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code></td>\n            </tr>\n          </table>\n        </div>\n\n        <div class = \"proto\">\n          <code class = \"function\">format-date</code>(<code class = \"arg\">$value</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:date?</code>, <code class = \"arg\">$picture</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code>\n        </div><a name = \"function-format-time\" id = \"function-format-time\"></a>\n\n        <div class = \"proto\">\n          <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n            <tr>\n              <td valign = \"baseline\" rowspan = \"5\"><code class = \"function\">format-time</code>(</td>\n\n              <td valign = \"baseline\"><code class = \"arg\">$value</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$picture</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$language</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$calendar</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>,</td>\n            </tr>\n\n            <tr>\n              <td valign = \"baseline\"><code class = \"arg\">$country</code></td>\n\n              <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code></td>\n            </tr>\n          </table>\n        </div>\n\n        <div class = \"proto\">\n          <code class = \"function\">format-time</code>(<code class = \"arg\">$value</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:time?</code>, <code class = \"arg\">$picture</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string?</code>\n        </div>\n\n        <p>The <a href = \"#function-format-dateTime\"><code>format-dateTime</code></a>,\n        <a href = \"#function-format-date\"><code>format-date</code></a>, and\n        <a href = \"#function-format-time\"><code>format-time</code></a>\n        functions format <code>$value</code> as a string using the\n        picture string specified by the <code>$picture</code>\n        argument, the calendar specified by the\n        <code>$calendar</code> argument, the language specified by\n        the <code>$language</code> argument, and the country\n        specified by the <code>$country</code> argument. The result\n        of the function is the formatted string representation of\n        the supplied <code>dateTime</code>, <code>date</code>, or\n        <code>time</code> value.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-date-formatting-function\" id = \"dt-date-formatting-function\" title = \"date formatting function\"></a>The three functions <a href = \"#function-format-date\"><code>format-date</code></a>,\n        <a href = \"#function-format-time\"><code>format-time</code></a>, and\n        <a href = \"#function-format-dateTime\"><code>format-dateTime</code></a>\n        are referred to collectively as the <b>date formatting\n        functions</b>.<span class = \"definition\">]</span></p>\n\n        <p>If <code>$value</code> is the empty sequence, the empty\n        sequence is returned.</p>\n\n        <p>Calling the two-argument form of each of the three\n        functions is equivalent to calling the five-argument form\n        with each of the last three arguments set to an empty\n        sequence.</p>\n\n        <p>For details of the <code>language</code>,\n        <code>calendar</code>, and <code>country</code> arguments,\n        see <a href = \"#lang-cal-country\"><i>16.5.2 The Language,\n        Calendar, and Country Arguments</i></a>.</p>\n\n        <p>In general, the use of an invalid <code>picture</code>,\n        <code>language</code>, <code>calendar</code>, or\n        <code>country</code> argument is classified as a\n        <span><a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a>. By contrast,</span> use of an option in any of\n        these arguments that is valid but not supported by the\n        implementation is not an error, and in these cases the\n        implementation is required to output the value in a\n        fallback representation.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"date-picture-string\" id = \"date-picture-string\"></a>16.5.1 The Picture String</h4>\n\n          <p>The picture consists of a sequence of variable markers\n          and literal substrings. A substring enclosed in square\n          brackets is interpreted as a variable marker; substrings\n          not enclosed in square brackets are taken as literal\n          substrings. The literal substrings are optional and if\n          present are rendered unchanged, including any whitespace.\n          If an opening or closing square bracket is required\n          within a literal substring, it <span class = \"verb\">must</span> be doubled. The variable markers are\n          replaced in the result by strings representing aspects of\n          the date and/or time to be formatted. These are described\n          in detail below.</p>\n\n          <p>A variable marker consists of a component specifier\n          followed optionally by one or two presentation modifiers\n          and/or optionally by a width modifier. Whitespace within\n          a variable marker is ignored.</p>\n\n          <p>The <em>component specifier</em> indicates the\n          component of the date or time that is required, and takes\n          the following values:</p>\n\n          <table border = \"1\" cellpadding = \"5\">\n            <thead>\n              <tr>\n                <th align = \"left\">Specifier</th>\n\n                <th align = \"left\">Meaning</th>\n\n                <th align = \"left\">Default Presentation Modifier</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td valign = \"top\">Y</td>\n\n                <td>year <span>(absolute value)</span></td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">M</td>\n\n                <td>month in year</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">D</td>\n\n                <td>day in month</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">d</td>\n\n                <td>day in year</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">F</td>\n\n                <td>day of week</td>\n\n                <td valign = \"top\">n</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">W</td>\n\n                <td>week in year</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">w</td>\n\n                <td>week in month</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">H</td>\n\n                <td>hour in day (24 hours)</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">h</td>\n\n                <td>hour in half-day (12 hours)</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">P</td>\n\n                <td>am/pm marker</td>\n\n                <td valign = \"top\">n</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">m</td>\n\n                <td>minute in hour</td>\n\n                <td valign = \"top\"><span>01</span></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">s</td>\n\n                <td>second in minute</td>\n\n                <td valign = \"top\"><span>01</span></td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">f</td>\n\n                <td>fractional seconds</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">Z</td>\n\n                <td>timezone as a time offset from UTC, or if an\n                alphabetic modifier is present the conventional\n                name of a timezone (such as PST)</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">z</td>\n\n                <td>timezone as a time offset using GMT, for\n                example GMT+1</td>\n\n                <td valign = \"top\">1</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">C</td>\n\n                <td>calendar: the name or abbreviation of a\n                calendar name</td>\n\n                <td valign = \"top\">n</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">E</td>\n\n                <td>era: the name of a baseline for the numbering\n                of years, for example the reign of a monarch</td>\n\n                <td valign = \"top\">n</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p><a name = \"err-XTDE1340\" id = \"err-XTDE1340\"><span class = \"error\">[ERR XTDE1340]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the syntax of the picture is incorrect.</p>\n\n          <p><a name = \"err-XTDE1350\" id = \"err-XTDE1350\"><span class = \"error\">[ERR XTDE1350]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if a component specifier within the picture\n          refers to components that are not available in the given\n          type of <code>$value</code>, for example if the picture\n          supplied to the <a href = \"#function-format-time\"><code>format-time</code></a>\n          refers to the year, month, or day component.</p>\n\n          <p>It is not an error to include a timezone component\n          when the supplied value has no timezone. In these\n          circumstances the timezone component will be ignored.</p>\n\n          <p>The first <em>presentation modifier</em> indicates the\n          style in which the value of a component is to be\n          represented. Its value may be either:</p>\n\n          <ul>\n            <li>\n              <p>any format token permitted in the\n              <code>format</code> string of the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n              instruction (see <a href = \"#number\"><i>12\n              Numbering</i></a>), indicating that the value of the\n              component is to be output numerically using the\n              specified number format (for example, <code>1</code>,\n              <code>01</code>, <code>i</code>, <code>I</code>,\n              <code>w</code>, <code>W</code>, or <code>Ww</code>)\n              or</p>\n            </li>\n\n            <li>\n              <p>the format token <code>n</code>, <code>N</code>,\n              or <code>Nn</code>, indicating that the value of the\n              component is to be output by name, in lower-case,\n              upper-case, or title-case respectively. Components\n              that can be output by name include (but are not\n              limited to) months, days of the week, timezones, and\n              eras. If the processor cannot output these components\n              by name for the chosen calendar and language then it\n              must use an implementation-defined fallback\n              representation.</p>\n            </li>\n          </ul>\n\n          <p>If the implementation does not support the use of the\n          requested format token, it <span class = \"verb\">must</span>\n          use the default presentation modifier for that\n          component.</p>\n\n          <p>If the first presentation modifier is present, then it\n          may optionally be followed by a second presentation\n          modifier as follows:</p>\n\n          <table border = \"1\" cellpadding = \"5\">\n            <thead>\n              <tr>\n                <th align = \"left\">Modifier</th>\n\n                <th align = \"left\">Meaning</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td valign = \"top\">t</td>\n\n                <td valign = \"top\">traditional numbering. This has\n                the same meaning as\n                <code>letter-value=\"traditional\"</code> in <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>.</td>\n              </tr>\n\n              <tr>\n                <td valign = \"top\">o</td>\n\n                <td valign = \"top\">ordinal form of a number, for\n                example <code>8th</code> or <code>8º</code>. The\n                actual representation of the ordinal form of a\n                number may depend not only on the language, but\n                also on the grammatical context (for example, in\n                some languages it must agree in gender).</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Although the formatting rules are expressed in terms\n            of the rules for format tokens in <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>, the\n            formats actually used may be specialized to the\n            numbering of date components where appropriate. For\n            example, in Italian, it is conventional to use an\n            ordinal number (<code>primo</code>) for the first day\n            of the month, and cardinal numbers (<code>due, tre,\n            quattro ...</code>) for the remaining days. A processor\n            may therefore use this convention to number days of the\n            month, ignoring the presence or absence of the ordinal\n            presentation modifier.</p>\n          </div>\n\n          <p>Whether or not a presentation modifier is included, a\n          width modifier may be supplied. This indicates the number\n          of characters or digits to be included in the\n          representation of the value.</p>\n\n          <p>The width modifier, if present, is introduced by a\n          comma. It takes the form:</p>\n\n          <p><code>&#160;&#160;&#160;,&#160;&#160;min-width (\"-\"\n          max-width)?</code></p>\n\n          <p>where <code>min-width</code> is either an unsigned\n          integer indicating the minimum number of characters to be\n          output, or <code>*</code> indicating that there is no\n          explicit minimum, and <code>max-width</code> is either an\n          unsigned integer indicating the maximum number of\n          characters to be output, or <code>*</code> indicating\n          that there is no explicit maximum; if\n          <code>max-width</code> is omitted then <code>*</code> is\n          assumed. Both integers, if present, <span class = \"verb\">must</span> be greater than zero.</p>\n\n          <p>A format token containing leading zeroes, such as\n          <code>001</code>, sets the minimum and maximum width to\n          the number of digits appearing in the format token; if a\n          width modifier is also present, then the width modifier\n          takes precedence.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>A format token consisting of a one-digit on its own,\n            such as <code>1</code>, does not constrain the number\n            of digits in the output. In the case of fractional\n            seconds in particular, <code>[f001]</code> requests\n            three decimal digits, <code>[f01]</code> requests two\n            digits, but <code>[f1]</code> will produce an\n            implementation-defined number of digits. If exactly one\n            digit is required, this can be achieved using the\n            component specifier <code>[f1,1-1]</code>.</p>\n          </div>\n\n          <p>If the minumum and maximum width are unspecified, then\n          the output uses as many characters as are required to\n          represent the value of the component without truncation\n          and without padding: this is referred to below as the\n          <em>full representation</em> of the value.</p>\n\n          <p>If the full representation of the value exceeds the\n          specified maximum width, then the processor <span class = \"verb\">should</span> attempt to use an alternative\n          shorter representation that fits within the maximum\n          width. Where the presentation modifier is <code>N</code>,\n          <code>n</code>, or <code>Nn</code>, this is done by\n          abbreviating the name, using either conventional\n          abbreviations if available, or crude right-truncation if\n          not. For example, setting <code>max-width</code> to\n          <code>4</code> indicates that four-letter abbreviations\n          <span class = \"verb\">should</span> be used, though it would\n          be acceptable to use a three-letter abbreviation if this\n          is in conventional use. (For example, \"Tuesday\" might be\n          abbreviated to \"Tues\", and \"Friday\" to \"Fri\".) In the\n          case of the year component, setting\n          <code>max-width</code> requests omission of high-order\n          digits from the year, for example, if\n          <code>max-width</code> is set to <code>2</code> then the\n          year 2003 will be output as <code>03</code>. <span>In the\n          case of the fractional seconds component, the value is\n          rounded to the specified size as if by applying the\n          function <code>round-half-to-even(fractional-seconds,\n          max-width)</code>.</span> If no mechanism is available\n          for fitting the value within the specified maximum width\n          (for example, when roman numerals are used), then the\n          value <span class = \"verb\">should</span> be output in its\n          full representation.</p>\n\n          <p>If the full representation of the value is shorter\n          than the specified minimum width, then the processor\n          <span class = \"verb\">should</span> pad the value to the\n          specified width. For decimal representations of numbers,\n          this <span class = \"verb\">should</span> be done by\n          prepending zero digits from the appropriate set of digit\n          characters, or appending zero digits in the case of the\n          fractional seconds component. In other cases, it\n          <span class = \"verb\">should</span> be done by appending\n          spaces.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"lang-cal-country\" id = \"lang-cal-country\"></a>16.5.2 The Language, Calendar, and\n          Country Arguments</h4>\n\n          <p>The set of languages, calendars, and countries that\n          are supported in the <a title = \"date formatting function\" href = \"#dt-date-formatting-function\">date formatting\n          functions</a> is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          When any of these arguments is omitted or is an empty\n          sequence, an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          default value is used.</p>\n\n          <p>If the fallback representation uses a different\n          calendar from that requested, the output string\n          <span class = \"verb\">must</span> be prefixed with\n          <code>[Calendar: X]</code> where <code>X</code>\n          identifies the calendar actually used. The string\n          <code>Calendar</code> <span class = \"verb\">should</span> be\n          localized using the requested language if available. If\n          the fallback representation uses a different language\n          from that requested, the output string should be prefixed\n          with <code>[Language: Y]</code> where <code>Y</code>\n          identifies the language actually used. The string\n          <code>Language</code> <span class = \"verb\">may</span> be\n          localized in an <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n          way. If a particular component of the value cannot be\n          output in the requested format, it <span class = \"verb\">should</span> be output in the default format for\n          that component.</p>\n\n          <p>The <code>language</code> argument specifies the\n          language to be used for the result string of the\n          function. The value of the argument <span class = \"verb\">must</span> be either the empty sequence or a\n          value that would be valid for the <code>xml:lang</code>\n          attribute (see [XML]). Note that this permits the\n          identification of sublanguages based on country codes\n          (from <a href = \"#ISO3166\">[ISO 3166-1]</a>) as well as\n          identification of dialects and of regions within a\n          country.</p>\n\n          <p>If the <code>language</code> argument is omitted or is\n          set to an empty sequence, or if it is set to an invalid\n          value or a value that the implementation does not\n          recognize, then the processor uses an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          language.</p>\n\n          <p>The language is used to select the appropriate\n          language-dependent forms of:</p>\n\n          <blockquote>\n            <p>names (for example, of months)<br/>\n            numbers expressed as words or as ordinals\n            (<code>twenty, 20th, twentieth</code>)<br/>\n            hour convention (0-23 vs 1-24, 0-11 vs 1-12)<br/>\n            first day of week, first week of year</p>\n          </blockquote>\n\n          <p>Where appropriate this choice may also take into\n          account the value of the <code>country</code> argument,\n          though this <span class = \"verb\">should</span> not be used\n          to override the language or any sublanguage that is\n          specified as part of the <code>language</code>\n          argument.</p>\n\n          <p>The choice of the names and abbreviations used in any\n          given language is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          For example, one implementation might abbreviate July as\n          <code>Jul</code> while another uses <code>Jly</code>. In\n          German, one implementation might represent Saturday as\n          <code>Samstag</code> while another uses\n          <code>Sonnabend</code>. Implementations <span class = \"verb\">may</span> provide mechanisms allowing users to\n          control such choices.</p>\n\n          <p>Where ordinal numbers are used, the selection of the\n          correct representation of the ordinal (for example, the\n          linguistic gender) <span class = \"verb\">may</span> depend\n          on the component being formatted and on its textual\n          context in the picture string.</p>\n\n          <p>The <code>calendar</code> attribute specifies that the\n          <code>dateTime</code>, <code>date</code>, or\n          <code>time</code> supplied in the <code>$value</code>\n          argument <span class = \"verb\">must</span> be converted to a\n          value in the specified calendar and then converted to a\n          string using the conventions of that calendar.</p>\n\n          <p>A calendar value <span class = \"verb\">must</span> be a\n          valid <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the\n          QName does not have a prefix, then it identifies a\n          calendar with the designator specified below. If the\n          QName has a prefix, then the QName is expanded into an\n          expanded-QName as described in <a href = \"#qname\"><i>5.1\n          Qualified Names</i></a>; the expanded-QName identifies\n          the calendar; the behavior in this case is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n          <p>If the calendar attribute is omitted an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          value is used.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The calendars listed below were known to be in use\n            during the last hundred years. Many other calendars\n            have been used in the past.</p>\n\n            <p>This specification does not define any of these\n            calendars, nor the way that they map to the value space\n            of the <code>xs:date</code> data type in <a href = \"#xmlschema-2\">[XML Schema Part 2]</a>. There may be\n            ambiguities when dates are recorded using different\n            calendars. For example, the start of a new day is not\n            simultaneous in different calendars, and may also vary\n            geographically (for example, based on the time of\n            sunrise or sunset). Translation of dates is therefore\n            more reliable when the time of day is also known, and\n            when the geographic location is known. When translating\n            dates between one calendar and another, the processor\n            may take account of the values of the\n            <code>country</code> and/or <code>language</code>\n            arguments, with the <code>country</code> argument\n            taking precedence.</p>\n\n            <p>Information about some of these calendars, and\n            algorithms for converting between them, may be found in\n            <a href = \"#CALCALC\">[Calendrical Calculations]</a>.</p>\n          </div>\n\n          <table border = \"1\" cellpadding = \"5\">\n            <thead>\n              <tr>\n                <th valign = \"top\" align = \"left\">Designator</th>\n\n                <th valign = \"top\" align = \"left\">Calendar</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr>\n                <td>AD</td>\n\n                <td>Anno Domini (Christian Era)</td>\n              </tr>\n\n              <tr>\n                <td>AH</td>\n\n                <td>Anno Hegirae (Muhammedan Era)</td>\n              </tr>\n\n              <tr>\n                <td>AME</td>\n\n                <td>Mauludi Era (solar years since Mohammed's\n                birth)</td>\n              </tr>\n\n              <tr>\n                <td>AM</td>\n\n                <td>Anno Mundi (Jewish Calendar)</td>\n              </tr>\n\n              <tr>\n                <td>AP</td>\n\n                <td>Anno Persici</td>\n              </tr>\n\n              <tr>\n                <td>AS</td>\n\n                <td>Aji Saka Era (Java)</td>\n              </tr>\n\n              <tr>\n                <td>BE</td>\n\n                <td>Buddhist Era</td>\n              </tr>\n\n              <tr>\n                <td>CB</td>\n\n                <td>Cooch Behar Era</td>\n              </tr>\n\n              <tr>\n                <td>CE</td>\n\n                <td>Common Era</td>\n              </tr>\n\n              <tr>\n                <td>CL</td>\n\n                <td>Chinese Lunar Era</td>\n              </tr>\n\n              <tr>\n                <td>CS</td>\n\n                <td>Chula Sakarat Era</td>\n              </tr>\n\n              <tr>\n                <td>EE</td>\n\n                <td>Ethiopian Era</td>\n              </tr>\n\n              <tr>\n                <td>FE</td>\n\n                <td>Fasli Era</td>\n              </tr>\n\n              <tr>\n                <td>ISO</td>\n\n                <td>ISO 8601 calendar</td>\n              </tr>\n\n              <tr>\n                <td>JE</td>\n\n                <td>Japanese Calendar</td>\n              </tr>\n\n              <tr>\n                <td>KE</td>\n\n                <td>Khalsa Era (Sikh calendar)</td>\n              </tr>\n\n              <tr>\n                <td>KY</td>\n\n                <td>Kali Yuga</td>\n              </tr>\n\n              <tr>\n                <td>ME</td>\n\n                <td>Malabar Era</td>\n              </tr>\n\n              <tr>\n                <td>MS</td>\n\n                <td>Monarchic Solar Era</td>\n              </tr>\n\n              <tr>\n                <td>NS</td>\n\n                <td>Nepal Samwat Era</td>\n              </tr>\n\n              <tr>\n                <td>OS</td>\n\n                <td>Old Style (Julian Calendar)</td>\n              </tr>\n\n              <tr>\n                <td>RS</td>\n\n                <td>Rattanakosin (Bangkok) Era</td>\n              </tr>\n\n              <tr>\n                <td>SE</td>\n\n                <td>Saka Era</td>\n              </tr>\n\n              <tr>\n                <td>SH</td>\n\n                <td>Mohammedan Solar Era (Iran)</td>\n              </tr>\n\n              <tr>\n                <td>SS</td>\n\n                <td>Saka Samvat</td>\n              </tr>\n\n              <tr>\n                <td>TE</td>\n\n                <td>Tripurabda Era</td>\n              </tr>\n\n              <tr>\n                <td>VE</td>\n\n                <td>Vikrama Era</td>\n              </tr>\n\n              <tr>\n                <td>VS</td>\n\n                <td>Vikrama Samvat Era</td>\n              </tr>\n            </tbody>\n          </table>\n\n          <p>At least one of the above calendars <span class = \"verb\">must</span> be supported. It is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          which calendars are supported.</p>\n\n          <p>The ISO 8601 calendar (<a href = \"#ISO8601\">[ISO\n          8601]</a>), which is included in the above list and\n          designated <code>ISO</code>, is very similar to the\n          Gregorian calendar designated <code>AD</code>, but it\n          differs in several ways. The ISO calendar is intended to\n          ensure that date and time formats can be read easily by\n          other software, as well as being legible for human users.\n          The ISO calendar prescribes the use of particular\n          numbering conventions as defined in ISO 8601, rather than\n          allowing these to be localized on a per-language basis.\n          In particular it provides a numeric 'week date' format\n          which identifies dates by year, week of the year, and day\n          in the week; in the ISO calendar the days of the week are\n          numbered from 1 (Monday) to 7 (Sunday), and week 1 in any\n          calendar year is the week (from Monday to Sunday) that\n          includes the first Thursday of that year. The numeric\n          values of the components year, month, day, hour, minute,\n          and second are the same in the ISO calendar as the values\n          used in the lexical representation of the date and time\n          as defined in <a href = \"#xmlschema-2\">[XML Schema Part\n          2]</a>. The era (\"E\" component) with this calendar is\n          either a minus sign (for negative years) or a zero-length\n          string (for positive years). For dates before 1 January,\n          AD 1, year numbers in the ISO and AD calendars are off by\n          one from each other: ISO year 0000 is 1 BC, -0001 is 2\n          BC, etc.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The value space of the date and time data types, as\n            defined in XML Schema, is based on absolute points in\n            time. The lexical space of these data types defines a\n            representation of these absolute points in time using\n            the proleptic Gregorian calendar, that is, the modern\n            Western calendar extrapolated into the past and the\n            future; but the value space is calendar-neutral. The\n            <a title = \"date formatting function\" href = \"#dt-date-formatting-function\">date formatting\n            functions</a> produce a representation of this absolute\n            point in time, but denoted in a possibly different\n            calendar. So, for example, the date whose lexical\n            representation in XML Schema is <code>1502-01-11</code>\n            (the day on which Pope Gregory XIII was born) might be\n            formatted using the Old Style (Julian) calendar as\n            <code>1 January 1502</code>. This reflects the fact\n            that there was at that time a ten-day difference\n            between the two calendars. It would be incorrect, and\n            would produce incorrect results, to represent this date\n            in an element or attribute of type <code>xs:date</code>\n            as <code>1502-01-01</code>, even though this might\n            reflect the way the date was recorded in contemporary\n            documents.</p>\n\n            <p>When referring to years occurring in antiquity,\n            modern historians generally use a numbering system in\n            which there is no year zero (the year before 1 CE is\n            thus 1 BCE). This is the convention that <span class = \"verb\">should</span> be used when the requested\n            calendar is OS (Julian) or AD (Gregorian). When the\n            requested calendar is ISO, however, the conventions of\n            ISO 8601 <span class = \"verb\">should</span> be followed:\n            here the year before +0001 is numbered zero. In\n            <a href = \"#xmlschema-2\">[XML Schema Part 2]</a> (version\n            1.0), the value space for <code>xs:date</code> and\n            <code>xs:dateTime</code> does not include a year zero:\n            however, a future edition is expected to endorse the\n            ISO 8601 convention. This means that the date on which\n            Julius Caesar was assassinated has the ISO 8601 lexical\n            representation -0043-03-13, but will be formatted as 15\n            March 44 BCE in the Julian calendar or 13 March 44 BCE\n            in the Gregorian calendar (dependant on the chosen\n            localization of the names of months and eras).</p>\n          </div>\n\n          <p>The intended use of the <code>country</code> argument\n          is to identify the place where an event represented by\n          the <code>dateTime</code>, <code>date</code>, or\n          <code>time</code> supplied in the <code>$value</code>\n          argument took place or will take place. If the value is\n          supplied, and is not the empty sequence, then it\n          <span class = \"verb\">should</span> be a country code\n          defined in <a href = \"#ISO3166\">[ISO 3166-1]</a>.\n          Implementations <span class = \"verb\">may</span> also allow\n          the use of codes representing subdivisions of a country\n          from ISO 3166-2, or codes representing formerly used\n          names of countries from ISO 3166-3. This argument is not\n          intended to identify the location of the user for whom\n          the date or time is being formatted; that should be done\n          by means of the <code>language</code> attribute. This\n          information <span class = \"verb\">may</span> be used to\n          provide additional information when converting dates\n          between calendars or when deciding how individual\n          components of the date and time are to be formatted. For\n          example, different countries using the Old Style (Julian)\n          calendar started the new year on different days, and some\n          countries used variants of the calendar that were out of\n          synchronization as a result of differences in calculating\n          leap years. <span>The geographical area identified by a\n          country code is defined by the boundaries as they existed\n          at the time of the date to be formatted, or the\n          present-day boundaries for dates in the\n          future.</span></p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"date-time-examples\" id = \"date-time-examples\"></a>16.5.3 Examples of Date and Time\n          Formatting</h4>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e24888\" id = \"d5e24888\"></a>Example:\n              Gregorian Calendar\n            </div>\n\n            <p>The following examples show a selection of dates and\n            times and the way they might be formatted. These\n            examples assume the use of the Gregorian calendar as\n            the default calendar.</p>\n\n            <table border = \"1\" cellpadding = \"5\">\n              <thead>\n                <tr>\n                  <th align = \"left\">Required Output</th>\n\n                  <th align = \"left\">Expression</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td><code>2002-12-31</code></td>\n\n                  <td><code>format-date($d,\n                  \"[Y0001]-[M01]-[D01]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>12-31-2002</code></td>\n\n                  <td><code>format-date($d,\n                  \"[M]-[D]-[Y]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>31-12-2002</code></td>\n\n                  <td><code>format-date($d,\n                  \"[D]-[M]-[Y]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>31 XII 2002</code></td>\n\n                  <td><code>format-date($d, \"[D1] [MI]\n                  [Y]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>31st December, 2002</code></td>\n\n                  <td><code>format-date($d, \"[D1o] [MNn], [Y]\",\n                  \"en\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>31 DEC 2002</code></td>\n\n                  <td><code>format-date($d, \"[D01] [MN,*-3]\n                  [Y0001]\", \"en\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>December 31, 2002</code></td>\n\n                  <td><code>format-date($d, \"[MNn] [D], [Y]\", \"en\",\n                  (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>31 Dezember, 2002</code></td>\n\n                  <td><code>format-date($d, \"[D] [MNn], [Y]\", \"de\",\n                  (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>Tisdag 31 December 2002</code></td>\n\n                  <td><code>format-date($d, \"[FNn] [D] [MNn] [Y]\",\n                  \"sv\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>[2002-12-31]</code></td>\n\n                  <td><code>format-date($d,\n                  \"[[[Y0001]-[M01]-[D01]]]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>Two Thousand and Three</code></td>\n\n                  <td><code>format-date($d, \"[YWw]\", \"en\", (),\n                  ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>einunddreißigste Dezember</code></td>\n\n                  <td><code>format-date($d, \"[Dwo] [MNn]\", \"de\",\n                  (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>3:58 PM</code></td>\n\n                  <td><code>format-time($t, \"[h]:[m01] [PN]\", \"en\",\n                  (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>3:58:45 pm</code></td>\n\n                  <td><code>format-time($t, \"[h]:[m01]:[s01] [Pn]\",\n                  \"en\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>3:58:45 PM PDT</code></td>\n\n                  <td><code>format-time($t, \"[h]:[m01]:[s01] [PN]\n                  [ZN,*-3]\", \"en\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>3:58:45 o'clock PM PDT</code></td>\n\n                  <td><code>format-time($t, \"[h]:[m01]:[s01]\n                  o'clock [PN] [ZN,*-3]\", \"en\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>15:58</code></td>\n\n                  <td>\n                  <code>format-time($t,\"[H01]:[m01]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>15:58:45.762</code></td>\n\n                  <td>\n                  <code>format-time($t,\"[H01]:[m01]:[s01].[f001]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>15:58:45 GMT+02:00</code></td>\n\n                  <td><code>format-time($t,\"[H01]:[m01]:[s01] [z]\",\n                  \"en\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>15.58 Uhr GMT+02:00</code></td>\n\n                  <td><code>format-time($t,\"[H01]:[m01] Uhr [z]\",\n                  \"de\", (), ())</code></td>\n                </tr>\n\n                <tr>\n                  <td><code>3.58pm on Tuesday, 31st\n                  December</code></td>\n\n                  <td><code>format-dateTime($dt, \"[h].[m01][Pn] on\n                  [FNn], [D1o] [MNn]\")</code></td>\n                </tr>\n\n                <tr>\n                  <td><span><code>12/31/2002 at\n                  15:58:45</code></span></td>\n\n                  <td><code>format-dateTime($dt,\n                  \"[M01]/[D01]/[Y0001] at\n                  [H01]:[m01]:[s01]\")</code></td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <p>&#160;</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e25057\" id = \"d5e25057\"></a>Example:\n              Non-Gregorian Calendars\n            </div>\n\n            <p>The following examples use calendars other than the\n            Gregorian calendar.</p>\n\n            <p>These examples use non-Latin characters which might\n            not display correctly in all browsers, depending on the\n            system configuration.</p>\n\n            <table border = \"1\" cellpadding = \"5\">\n              <thead>\n                <tr>\n                  <th align = \"left\">Description</th>\n\n                  <th align = \"left\">Request</th>\n\n                  <th align = \"left\">Result</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td valign = \"top\">Islamic</td>\n\n                  <td valign = \"top\"><code>format-date($d,\n                  \"[D&amp;#x0661;] [Mn] [Y&amp;#x0661;]\",\n                  \"Islamic\", \"ar\", \"AH\", ())</code></td>\n\n                  <td valign = \"top\">٢٦ ﺸﻭّﺍﻝ ١٤٢٣</td>\n                </tr>\n\n                <tr>\n                  <td valign = \"top\">Jewish (with Western\n                  numbering)</td>\n\n                  <td valign = \"top\"><code>format-date($d, \"[D] [Mn]\n                  [Y]\", \"he\", \"AM\", ())</code></td>\n\n                  <td valign = \"top\">‏26 טבת 5763</td>\n                </tr>\n\n                <tr>\n                  <td valign = \"top\">Jewish (with traditional\n                  numbering)</td>\n\n                  <td valign = \"top\"><code>format-date($d,\n                  \"[D&amp;#x05D0;t] [Mn] [Y&amp;#x05D0;t]\", \"he\",\n                  \"AM\", ())</code></td>\n\n                  <td valign = \"top\">כ״ו טבת תשס״ג</td>\n                </tr>\n\n                <tr>\n                  <td valign = \"top\">Julian (Old Style)</td>\n\n                  <td valign = \"top\"><code>format-date($d, \"[D] [MNn]\n                  [Y]\", \"en\", \"OS\", ())</code></td>\n\n                  <td valign = \"top\">18 December 2002</td>\n                </tr>\n\n                <tr>\n                  <td valign = \"top\">Thai</td>\n\n                  <td valign = \"top\"><code>format-date($d,\n                  \"[D&amp;#x0E51;] [Mn] [Y&amp;#x0E51;]\", \"th\",\n                  \"BE\", ())</code></td>\n\n                  <td valign = \"top\">๓๑ ธันวาคม ๒๕๔๕</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"misc-func\" id = \"misc-func\"></a>16.6\n        Miscellaneous Additional Functions</h3>\n\n        <div class = \"div3\">\n          <h4><a name = \"current-function\" id = \"current-function\"></a>16.6.1 current</h4><a name = \"function-current\" id = \"function-current\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">current</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">item()</code>\n          </div>\n\n          <p>The <a href = \"#function-current\"><code>current</code></a> function,\n          used within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>, returns the item that\n          was the <a title = \"context item\" href = \"#dt-context-item\">context item</a> at the point where\n          the expression was invoked from the XSLT <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. This\n          is referred to as the current item. For an outermost\n          expression (an expression not occurring within another\n          expression), the current item is always the same as the\n          context item. Thus,</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:value-of select=\"current()\"/&gt;\n</pre>\n          </div>\n\n          <p>means the same as</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:value-of select=\".\"/&gt;\n</pre>\n          </div>\n\n          <p>However, within square brackets, or on the right-hand\n          side of the <code>/</code> operator, the current item is\n          generally different from the context item.</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e25146\" id = \"d5e25146\"></a>Example: Using\n              the <code>current</code> Function\n            </div>\n\n            <p>For example,</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:apply-templates select=\"//glossary/entry[@name=current()/@ref]\"/&gt;\n</pre>\n            </div>\n\n            <p>will process all <code>entry</code> elements that\n            have a <code>glossary</code> parent element and that\n            have a <code>name</code> attribute with value equal to\n            the value of the current item's <code>ref</code>\n            attribute. This is different from</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:apply-templates select=\"//glossary/entry[@name=./@ref]\"/&gt;\n</pre>\n            </div>\n\n            <p>which means the same as</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xsl:apply-templates select=\"//glossary/entry[@name=@ref]\"/&gt;\n</pre>\n            </div>\n\n            <p>and so would process all <code>entry</code> elements\n            that have a <code>glossary</code> parent element and\n            that have a <code>name</code> attribute and a\n            <code>ref</code> attribute with the same value.</p>\n          </div>\n\n          <p>If the <a href = \"#function-current\"><code>current</code></a> function is\n          used within a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, its value is the node that is\n          being matched against the pattern.</p>\n\n          <p><a name = \"err-XTDE1360\" id = \"err-XTDE1360\"><span class = \"error\">[ERR XTDE1360]</span></a> If the <a href = \"#function-current\"><code>current</code></a> function is\n          evaluated within an expression that is evaluated when the\n          context item is undefined, a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> occurs.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"unparsed-entity-uri\" id = \"unparsed-entity-uri\"></a>16.6.2\n          unparsed-entity-uri</h4><a name = \"function-unparsed-entity-uri\" id = \"function-unparsed-entity-uri\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">unparsed-entity-uri</code>(<code class = \"arg\">$entity-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:anyURI</code>\n          </div>\n\n          <p>The <a href = \"#function-unparsed-entity-uri\"><code>unparsed-entity-uri</code></a>\n          function returns the URI of the unparsed entity whose\n          name is given by the value of the\n          <code>$entity-name</code> argument, in the document\n          containing the <a title = \"context node\" href = \"#dt-context-node\">context node</a>. It returns the\n          zero-length <span><code>xs:anyURI</code></span> if there\n          is no such entity. <span>This function maps to the\n          <code>dm:unparsed-entity-system-id</code> accessor\n          defined in <a href = \"#xpath-datamodel\">[Data\n          Model]</a>.</span></p>\n\n          <p><a name = \"err-XTDE1370\" id = \"err-XTDE1370\"><span class = \"error\">[ERR XTDE1370]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a href = \"#function-unparsed-entity-uri\"><code>unparsed-entity-uri</code></a>\n          function is called when there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>,\n          or when the root of the tree containing the context node\n          is not a document node.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"unparsed-entity-public-id\" id = \"unparsed-entity-public-id\"></a>16.6.3\n          unparsed-entity-public-id</h4><a name = \"function-unparsed-entity-public-id\" id = \"function-unparsed-entity-public-id\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">unparsed-entity-public-id</code>(<code class = \"arg\">\n            $entity-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n          </div>\n\n          <p>The <a href = \"#function-unparsed-entity-public-id\"><code>unparsed-entity-public-id</code></a>\n          function returns the public identifier of the unparsed\n          entity whose name is given by the value of the\n          <code>$entity-name</code> argument, in the document\n          containing the <a title = \"context node\" href = \"#dt-context-node\">context node</a>. It returns the\n          zero-length string if there is no such entity<span>, or\n          if the entity has no public identifier</span>. <span>This\n          function maps to the\n          <code>dm:unparsed-entity-public-id</code> accessor\n          defined in <a href = \"#xpath-datamodel\">[Data\n          Model]</a>.</span></p>\n\n          <p><a name = \"err-XTDE1380\" id = \"err-XTDE1380\"><span class = \"error\">[ERR XTDE1380]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a href = \"#function-unparsed-entity-public-id\"><code>unparsed-entity-public-id</code></a>\n          function is called when there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>,\n          or when the root of the tree containing the context node\n          is not a document node.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"generate-id\" id = \"generate-id\"></a>16.6.4\n          generate-id</h4><a name = \"function-generate-id\" id = \"function-generate-id\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">generate-id</code>()<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n          </div>\n\n          <div class = \"proto\">\n            <code class = \"function\">generate-id</code>(<code class = \"arg\">$node</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">node()?</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n          </div>\n\n          <p>The <a href = \"#function-generate-id\"><code>generate-id</code></a>\n          function returns a string that uniquely identifies a\n          given node. The unique identifier <span class = \"verb\">must</span> consist of ASCII alphanumeric\n          characters and <span class = \"verb\">must</span> start with\n          an alphabetic character. Thus, the string is\n          syntactically an XML name. An implementation is free to\n          generate an identifier in any convenient way provided\n          that it always generates the same identifier for the same\n          node and that different identifiers are always generated\n          from different nodes. An implementation is under no\n          obligation to generate the same identifiers each time a\n          document is transformed. There is no guarantee that a\n          generated unique identifier will be distinct from any\n          unique IDs specified in the source document. If the\n          argument is the empty sequence, the result is the\n          <span>zero-length string</span>. If the argument is\n          omitted, it defaults to the <a title = \"context node\" href = \"#dt-context-node\">context node</a>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"system-property\" id = \"system-property\"></a>16.6.5 system-property</h4><a name = \"function-system-property\" id = \"function-system-property\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">system-property</code>(<code class = \"arg\">$property-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:string</code>\n          </div>\n\n          <p>The <code>$property-name</code> argument <span class = \"verb\">must</span> evaluate to a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>. The <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a> is expanded as described in <a href = \"#qname\"><i>5.1 Qualified Names</i></a>.</p>\n\n          <p><a name = \"err-XTDE1390\" id = \"err-XTDE1390\"><span class = \"error\">[ERR XTDE1390]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the value is not a valid QName, or if there\n          is no namespace declaration in scope for the prefix of\n          the QName. If the processor is able to detect the error\n          statically (for example, when the argument is supplied as\n          a string literal), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n\n          <p>The <a href = \"#function-system-property\"><code>system-property</code></a>\n          function returns a string representing the value of the\n          system property identified by the name. If there is no\n          such system property, the zero-length string\n          <span>is</span> returned.</p>\n\n          <p>Implementations <span class = \"verb\">must</span> provide\n          the following system properties, which are all in the\n          <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>:</p>\n\n          <ul>\n            <li>\n              <p><code>xsl:version</code>, a number giving the\n              version of XSLT implemented by the <a title = \"processor\" href = \"#dt-processor\">processor</a>; for\n              implementations conforming to the version of XSLT\n              specified by this document, this is the string\n              <code>\"2.0\"</code>. The value will always be a string\n              in the lexical space of the decimal data type defined\n              in XML Schema (see <a href = \"#xmlschema-2\">[XML Schema\n              Part 2]</a>). This allows the value to be converted\n              to a number for the purpose of magnitude\n              comparisons.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:vendor</code>, a string identifying the\n              implementer of the <a title = \"processor\" href = \"#dt-processor\">processor</a></p>\n            </li>\n\n            <li>\n              <p><code>xsl:vendor-url</code>, a string containing a\n              URL identifying the implementer of the <a title = \"processor\" href = \"#dt-processor\">processor</a>;\n              typically this is the host page (home page) of the\n              implementer's Web site.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:product-name</code>, a string containing\n              the name of the implementation, as defined by the\n              implementer. This <span class = \"verb\">should</span>\n              normally remain constant from one release of the\n              product to the next. It <span class = \"verb\">should</span> also be constant across\n              platforms in cases where the same source code is used\n              to produce compatible products for multiple execution\n              platforms.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:product-version</code>, a string\n              identifying the version of the implementation, as\n              defined by the implementer. This <span class = \"verb\">should</span> normally vary from one release\n              of the product to the next, and at the discretion of\n              the implementer it <span class = \"verb\">may</span> also\n              vary across different execution platforms.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:is-schema-aware</code>, returns the\n              string <code>\"yes\"</code> in the case of a processor\n              that claims conformance as a <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n              processor</a>, or <code>\"no\"</code> in the case of a\n              <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT\n              processor</a>.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:supports-serialization</code>, returns\n              the string <code>\"yes\"</code> in the case of a\n              processor that offers the <a title = \"serialization feature\" href = \"#dt-serialization-feature\">serialization\n              feature</a>, or <code>\"no\"</code> otherwise.</p>\n            </li>\n\n            <li>\n              <p><code>xsl:supports-backwards-compatibility</code>,\n              returns the string <code>\"yes\"</code> in the case of\n              a processor that offers the <a title = \"backwards compatibility feature\" href = \"#dt-backwards-compatibility-feature\">backwards\n              compatibility feature</a>, or <code>\"no\"</code>\n              otherwise.</p>\n            </li>\n          </ul>\n\n          <p>Some of these properties relate to the conformance\n          levels and features offered by the <a title = \"processor\" href = \"#dt-processor\">processor</a>: these options are\n          described in <a href = \"#conformance\"><i>21\n          Conformance</i></a>.</p>\n\n          <p>The actual values returned for the above properties\n          are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n          <p>The set of system properties that are supported, in\n          addition to those listed above, is also <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          Implementations <span class = \"verb\">must not</span> define\n          additional system properties in the XSLT namespace.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>An implementation must not return the value\n            <code>2.0</code> as the value of the\n            <code>xsl:version</code> system property unless it is\n            conformant to XSLT 2.0.</p>\n\n            <p>It is recognized that vendors who are enhancing XSLT\n            1.0 processors may wish to release interim\n            implementations before all the mandatory features of\n            this specification are implemented. Since such products\n            are not conformant to XSLT 2.0, this specification\n            cannot define their behavior. However, implementers of\n            such products are encouraged to return a value for the\n            <code>xsl:version</code> system property that is\n            intermediate between 1.0 and 2.0, and to provide the\n            <a href = \"#function-element-available\"><code>element-available</code></a>\n            and <a href = \"#function-function-available\"><code>function-available</code></a>\n            functions to allow users to test which features have\n            been fully implemented.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"message\" id = \"message\"></a>17 Messages</h2>\n\n      <p class = \"element-syntax\"><a name = \"XSLT_element-message\" id = \"XSLT_element-message\"></a><code>&lt;!-- Category: instruction\n      --&gt;<br/>\n      &lt;xsl:message<br/>\n      &#160;&#160;select? = <var>expression</var><br/>\n      &#160;&#160;terminate? = { \"yes\" | \"no\" }&gt;<br/>\n      &#160;&#160;&lt;!-- Content: <var>sequence-constructor</var>\n      --&gt;<br/>\n      &lt;/xsl:message&gt;</code></p>\n\n      <p>The <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      sends a message in an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a> way.\n      The <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>\n      instruction causes the creation of a new document, which is\n      typically serialized and output to an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n      destination. The result of the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      is an empty sequence.</p>\n\n      <p>The content of the message may be specified by using\n      either or both of the optional <code>select</code> attribute\n      and the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n      forms the content of the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>\n      instruction.</p>\n\n      <p>If the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      contains a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, then the\n      sequence obtained by evaluating this sequence constructor is\n      used to construct the content of the new document node, as\n      described in <a href = \"#constructing-complex-content\"><i>5.7.1\n      Constructing Complex Content</i></a>.</p>\n\n      <p>If the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      has a <code>select</code> attribute, then the value of the\n      attribute <span class = \"verb\">must</span> be an XPath\n      expression. The effect of the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      is then the same as if a single <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a> instruction\n      with this <code>select</code> attribute were added to the\n      start of the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>.</p>\n\n      <p>If the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      has no content and no <code>select</code> attribute, then an\n      empty message is produced.</p>\n\n      <p>The tree produced by the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> instruction\n      is not technically a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>. The tree has\n      no URI and processors are not <span class = \"verb\">required</span> to make the tree accessible to\n      applications.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>In many cases, the XML document produced using <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> will\n        consist of a document node owning a single text node.\n        However, it may contain a more complex structure.</p>\n      </div>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>An implementation might implement <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> by popping\n        up an alert box or by writing to a log file. <span>Because\n        the order of execution of instructions is\n        implementation-defined, the order in which such messages\n        appear is not predictable.</span></p>\n      </div>\n\n      <p>The <code>terminate</code> attribute is interpreted as an\n      <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n      template</a>.</p>\n\n      <p>If the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n      <code>terminate</code> attribute is <code>yes</code>, then\n      the <a title = \"processor\" href = \"#dt-processor\">processor</a>\n      <span class = \"verb\">must</span> terminate processing after\n      sending the message. The default value is <code>no</code>.\n      Note that because the order of evaluation of instructions is\n      <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>,\n      this gives no guarantee that any particular instruction will\n      or will not be evaluated before processing terminates.</p>\n\n      <p><a name = \"err-XTMM9000\" id = \"err-XTMM9000\"><span class = \"error\">[ERR XTMM9000]</span></a> When a transformation is\n      terminated by use of <code>xsl:message\n      terminate=\"yes\"</code>, the effect is the same as when a\n      <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic error</a>\n      occurs during the transformation.</p>\n\n      <div class = \"example\">\n        <div class = \"exampleHeader\">\n          <a name = \"d5e25672\" id = \"d5e25672\"></a>Example: Localizing\n          Messages\n        </div>\n\n        <p>One convenient way to do localization is to put the\n        localized information (message text, etc.) in an XML\n        document, which becomes an additional input file to the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.\n        For example, suppose messages for a language\n        <code><var>L</var></code> are stored in an XML file\n        <code>resources/<var>L</var>.xml</code> in the form:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;messages&gt;\n  &lt;message name=\"problem\"&gt;A problem was detected.&lt;/message&gt;\n  &lt;message name=\"error\"&gt;An error was detected.&lt;/message&gt;\n&lt;/messages&gt;\n</pre>\n        </div>\n\n        <p>Then a stylesheet could use the following approach to\n        localize messages:</p>\n\n        <div class = \"exampleInner\">\n          <pre>\n&lt;xsl:param name=\"lang\" select=\"'en'\"/&gt;\n&lt;xsl:variable name=\"messages\"\n  select=\"document(concat('resources/', $lang, '.xml'))/messages\"/&gt;\n\n&lt;xsl:template name=\"localized-message\"&gt;\n  &lt;xsl:param name=\"name\"/&gt;\n  &lt;xsl:message select=\"string($messages/message[@name=$name])\"/&gt;\n&lt;/xsl:template&gt;\n\n&lt;xsl:template name=\"problem\"&gt;\n  &lt;xsl:call-template name=\"localized-message\"&gt;\n    &lt;xsl:with-param name=\"name\"&gt;problem&lt;/xsl:with-param&gt;\n  &lt;/xsl:call-template&gt;\n&lt;/xsl:template&gt;\n</pre>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"extension\" id = \"extension\"></a>18 Extensibility\n      and Fallback</h2>\n\n      <p>XSLT allows two kinds of extension, extension instructions\n      and extension functions.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-extension-instruction\" id = \"dt-extension-instruction\" title = \"extension instruction\"></a>An <b>extension\n      instruction</b> is an element within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that is\n      in a namespace (not the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>) designated as an\n      extension namespace.<span class = \"definition\">]</span></p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-extension-function\" id = \"dt-extension-function\" title = \"extension function\"></a>An <b>extension function</b> is a\n      function that is available for use within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>, other than\n      a <a title = \"core function\" href = \"#dt-core-function\">core\n      function</a> defined in <a href = \"#xpath-functions\">[Functions\n      and Operators]</a>, an additional function defined in this\n      XSLT specification, <span>a constructor function named after\n      an atomic type,</span> or a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>\n      defined using an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n      declaration.<span class = \"definition\">]</span>.</p>\n\n      <p>This specification does not define any mechanism for\n      creating or binding implementations of <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a> or\n      <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>, and it is\n      not <span class = \"verb\">required</span> that implementations\n      support any such mechanism. Such mechanisms, if they exist,\n      are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n      Therefore, an XSLT stylesheet that <span class = \"verb\">must</span> be portable between XSLT implementations\n      cannot rely on particular extensions being available. XSLT\n      provides mechanisms that allow an XSLT stylesheet to\n      determine whether the implementation makes particular\n      extensions available, and to specify what happens if those\n      extensions are not available. If an XSLT stylesheet is\n      careful to make use of these mechanisms, it is possible for\n      it to take advantage of extensions and still retain\n      portability.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"extension-functions\" id = \"extension-functions\"></a>18.1 Extension Functions</h3>\n\n        <p>The set of functions that can be called from a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-FunctionCall\">FunctionCall</a><sup>\n        <small>XP</small></sup> within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> may\n        include one or more <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>. The\n        <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of an extension\n        function always has a non-null namespace URI.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"testing-function-availability\" id = \"testing-function-availability\"></a>18.1.1 Testing\n          Availability of Functions</h4>\n\n          <p>The <a href = \"#function-function-available\"><code>function-available</code></a>\n          function can be used with the <code>[xsl:]use-when</code>\n          attribute (see <a href = \"#conditional-inclusion\"><i>3.12\n          Conditional Element Inclusion</i></a>) to explicitly\n          control how a stylesheet behaves if a particular\n          extension function is not available.</p><a name = \"function-function-available\" id = \"function-function-available\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">function-available</code>(<code class = \"arg\">$function-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code>\n          </div>\n\n          <div class = \"proto\">\n            <table border = \"0\" cellpadding = \"0\" cellspacing = \"0\">\n              <tr>\n                <td valign = \"baseline\" rowspan = \"2\"><code class = \"function\">function-available</code>(</td>\n\n                <td valign = \"baseline\"><code class = \"arg\">$function-name</code></td>\n\n                <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>,</td>\n              </tr>\n\n              <tr>\n                <td valign = \"baseline\"><code class = \"arg\">$arity</code></td>\n\n                <td valign = \"baseline\"><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:integer</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code></td>\n              </tr>\n            </table>\n          </div>\n\n          <p>A function is said to be available within an XPath\n          expression if it is present in the <a href = \"http://www.w3.org/TR/xpath20/#dt-function-signature\">in-scope\n          functions</a><sup><small>XP</small></sup> for that\n          expression (see <a href = \"#static-context\"><i>5.4.1\n          Initializing the Static Context</i></a>). Functions in\n          the static context are uniquely identified by the name of\n          the function (a QName) in combination with its <a title = \"arity\" href = \"#dt-arity\">arity</a>.</p>\n\n          <p>The value of the <code>$function-name</code> argument\n          <span class = \"verb\">must</span> be a string containing a\n          <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a>. The lexical QName is expanded into an\n          <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using the\n          namespace declarations in scope for the <a title = \"expression\" href = \"#dt-expression\">expression</a>. If the\n          lexical QName is unprefixed, then the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n          namespace</a> is used in the expanded QName.</p>\n\n          <p>The two-argument version of the <a href = \"#function-function-available\"><code>function-available</code></a>\n          function returns true if and only if there is an\n          available function whose name matches the value of the\n          <code>$function-name</code> argument and whose <a title = \"arity\" href = \"#dt-arity\">arity</a> matches the value of\n          the <code>$arity</code> argument.</p>\n\n          <p>The single-argument version of the <a href = \"#function-function-available\"><code>function-available</code></a>\n          function returns true if and only if there is at least\n          one available function (with some arity) whose name\n          matches the value of the <code>$function-name</code>\n          argument.</p>\n\n          <p><a name = \"err-XTDE1400\" id = \"err-XTDE1400\"><span class = \"error\">[ERR XTDE1400]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument does not evaluate to a string\n          that is a valid <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there is no namespace\n          declaration in scope for the prefix of the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the processor is\n          able to detect the error statically (for example, when\n          the argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n          <p>When <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled, the <a href = \"#function-function-available\"><code>function-available</code></a>\n          function returns false in respect of a function name and\n          arity for which no implementation is available (other\n          than the fallback error function that raises a dynamic\n          error whenever it is called). This means that it is\n          possible (as in XSLT 1.0) to use logic such as the\n          following to test whether a function is available before\n          calling it:</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e25880\" id = \"d5e25880\"></a>Example: Calling\n              an extension function with backwards-compatibility\n              enabled\n            </div>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;summary xsl:version=\"1.0\"&gt;\n  &lt;xsl:choose&gt;\n    &lt;xsl:when test=\"function-available('my:summary')\"&gt;\n      &lt;xsl:value-of select=\"my:summary()\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n      &lt;xsl:text&gt;Summary not available&lt;/xsl:text&gt;\n    &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n&lt;/summary&gt;\n</pre>\n            </div>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The fact that a function with a given name is\n            available gives no guarantee that any particular call\n            on the function will be successful. For example, it is\n            not possible to determine the types of the arguments\n            expected.</p>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>In XSLT 2.0 <span>(without backwards compatibility\n            enabled)</span> a static error occurs when an XPath\n            expression references a function that is not available.\n            This is true even in a part of the stylesheet that uses\n            <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n            behavior</a>. Therefore, the conditional logic to test\n            whether a function is available before calling it\n            should normally be written in a <code>use-when</code>\n            attribute (see <a href = \"#conditional-inclusion\"><i>3.12\n            Conditional Element Inclusion</i></a>).</p>\n          </div>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e25903\" id = \"d5e25903\"></a>Example:\n              Stylesheet portable between XSLT 1.0 and XSLT 2.0\n            </div>\n\n            <p>A stylesheet that is designed to use XSLT 2.0\n            facilities when they are available, but to fall back to\n            XSLT 1.0 capabilities when not, might be written using\n            the code:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;out xsl:version=\"2.0\"&gt;\n  &lt;xsl:choose&gt;\n    &lt;xsl:when test=\"function-available('matches')\"&gt;\n      &lt;xsl:value-of select=\"matches($input, '[a-z]*')\"/&gt;\n    &lt;/xsl:when&gt;\n    &lt;xsl:otherwise&gt;\n      &lt;xsl:value-of select=\"string-length(\n                          translate($in, 'abcdefghijklmnopqrstuvwxyz', '')) = 0\"/&gt;\n    &lt;/xsl:otherwise&gt;\n  &lt;/xsl:choose&gt;\n&lt;/out&gt;\n</pre>\n            </div>\n\n            <p>Here an XSLT 2.0 processor will always take the\n            <a href = \"#XSLT_element-when\"><code>xsl:when</code></a>\n            branch, while a 1.0 processor will follow the <a href = \"#XSLT_element-otherwise\"><code>xsl:otherwise</code></a>\n            branch. The single-argument version of the <a href = \"#function-function-available\"><code>function-available</code></a>\n            function is used here, because that is the only version\n            available in XSLT 1.0. Under the rules of XSLT 1.0, the\n            call on the <code>matches</code> function is not an\n            error, because it is never evaluated.</p>\n          </div>\n\n          <p>&#160;</p>\n\n          <div class = \"example\">\n            <div class = \"exampleHeader\">\n              <a name = \"d5e25924\" id = \"d5e25924\"></a>Example:\n              Stylesheet portable between XSLT 2.0 and a future\n              version of XSLT\n            </div>\n\n            <p>A stylesheet that is designed to use facilities in\n            some future XSLT version when they are available, but\n            to fall back to XSLT 2.0 capabilities when not, might\n            be written using code such as the following. This\n            hypothesizes the availability in some future version of\n            a function <code>pad</code> which pads a string to a\n            fixed length with spaces:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n &lt;xsl:value-of select=\"pad($input, 10)\" \n               use-when=\"function-available('pad', 2)\"/&gt;\n &lt;xsl:value-of select=\"concat($input, string-join(\n                          for $i in 1 to 10 - string-length($input) \n                                                  return ' ', ''))\"\n               use-when=\"not(function-available('pad', 2))\"/&gt;\n \n</pre>\n            </div>\n\n            <p>In this case the two-argument version of <a href = \"#function-function-available\"><code>function-available</code></a>\n            is used, because there is no requirement for this code\n            to run under XSLT 1.0.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"calling-extension-functions\" id = \"calling-extension-functions\"></a>18.1.2 Calling\n          Extension Functions</h4>\n\n          <p>If the function name used in a <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-FunctionCall\">FunctionCall</a><sup>\n          <small>XP</small></sup> within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n          identifies an extension function, then to evaluate the\n          <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-FunctionCall\">FunctionCall</a><sup>\n          <small>XP</small></sup>, the processor will first\n          evaluate each of the arguments in the <a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-FunctionCall\">FunctionCall</a><sup>\n          <small>XP</small></sup>. If the processor has information\n          about the data types expected by the extension function,\n          then it <span class = \"verb\">may</span> perform any\n          necessary type conversions between the XPath data types\n          and those defined by the implementation language. If\n          multiple extension functions are available with the same\n          name, the processor <span class = \"verb\">may</span> decide\n          which one to invoke based on the number of arguments, the\n          types of the arguments, or any other criteria. The result\n          returned by the implementation is returned as the result\n          of the function call, again after any necessary\n          conversions between the data types of the implementation\n          language and those of XPath. The details of such type\n          conversions are outside the scope of this\n          specification.</p>\n\n          <p><a name = \"err-XTDE1420\" id = \"err-XTDE1420\"><span class = \"error\">[ERR XTDE1420]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the arguments supplied to a call on an\n          extension function do not satisfy the rules defined for\n          that particular extension function, or if the extension\n          function reports an error, or if the result of the\n          extension function cannot be converted to an XPath\n          value.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Implementations may also provide mechanisms allowing\n            extension functions to report recoverable dynamic\n            errors, or to execute within an environment that treats\n            some or all of the errors listed above as\n            recoverable.</p>\n          </div>\n\n          <p><a name = \"err-XTDE1425\" id = \"err-XTDE1425\"><span class = \"error\">[ERR XTDE1425]</span></a> When <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled, it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> to evaluate an extension function call if no\n          implementation of the extension function is\n          available.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>When backwards-compatible behavior is not enabled,\n            this is a static error [XPST0017].</p>\n          </div>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>There is no prohibition on calling extension\n            functions that have side-effects (for example, an\n            extension function that writes data to a file).\n            However, the order of execution of XSLT instructions is\n            not defined in this specification, so the effects of\n            such functions are unpredictable.</p>\n          </div>\n\n          <p>Implementations are not <span class = \"verb\">required</span> to perform full validation of\n          values returned by extension functions. It is an error\n          for an extension function to return a string containing\n          characters that are not permitted in XML, but the\n          consequences of this error are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          The implementation <span class = \"verb\">may</span> raise an\n          error, <span class = \"verb\">may</span> convert the string\n          to a string containing valid characters only, or\n          <span class = \"verb\">may</span> treat the invalid\n          characters as if they were permitted characters.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>The ability to execute extension functions\n            represents a potential security weakness, since\n            untrusted stylesheets may invoke code that has\n            privileged access to resources on the machine where the\n            <a title = \"processor\" href = \"#dt-processor\">processor</a>\n            executes. Implementations may therefore provide\n            mechanisms that restrict the use of extension functions\n            by untrusted stylesheets.</p>\n          </div>\n\n          <p>All observations in this section regarding the errors\n          that can occur when invoking extension functions apply\n          equally when invoking <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n          instructions</a>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"external-objects\" id = \"external-objects\"></a>18.1.3 External Objects</h4>\n\n          <p>An implementation <span class = \"verb\">may</span> allow\n          an extension function to return an object that does not\n          have any natural representation in the <span>XDM</span>\n          data model, either as an atomic value or as a node. For\n          example, an extension function <code>sql:connect</code>\n          might return an object that represents a connection to a\n          relational database; the resulting connection object\n          might be passed as an argument to calls on other\n          extension functions such as <code>sql:insert</code> and\n          <code>sql:select</code>.</p>\n\n          <p>The way in which such objects are represented in the\n          type system is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          They might be represented by a completely new data type,\n          or they might be mapped to existing data types such as\n          <code>integer</code>, <code>string</code>, or\n          <code>anyURI</code>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"testing-type-availability\" id = \"testing-type-availability\"></a>18.1.4 Testing\n          Availability of Types</h4>\n\n          <p>The <a href = \"#function-type-available\"><code>type-available</code></a>\n          function can be used, for example with the\n          <code>[xsl:]use-when</code> attribute (see <a href = \"#conditional-inclusion\"><i>3.12 Conditional Element\n          Inclusion</i></a>), to explicitly control how a\n          stylesheet behaves if a particular schema type is not\n          available in the static context.</p><a name = \"function-type-available\" id = \"function-type-available\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">type-available</code>(<code class = \"arg\">$type-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code>\n          </div>\n\n          <p>A schema type (that is, a simple type or a complex\n          type) is said to be available within an XPath expression\n          if it is a type definition that is present in the\n          <a href = \"http://www.w3.org/TR/xpath20/#dt-is-types\">in-scope\n          schema types</a><sup><small>XP</small></sup> for that\n          expression (see <a href = \"#static-context\"><i>5.4.1\n          Initializing the Static Context</i></a>). This includes\n          built-in types, types imported using <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>,\n          and extension types defined by the implementation.</p>\n\n          <p>The value of the <code>$type-name</code> argument\n          <span class = \"verb\">must</span> be a string containing a\n          <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a>. The lexical QName is expanded into an\n          <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using the\n          namespace declarations in scope for the <a title = \"expression\" href = \"#dt-expression\">expression</a>. If the\n          lexical QName is unprefixed, then the default namespace\n          is used in the expanded QName.</p>\n\n          <p>The function returns true if and only if there is an\n          available type whose name matches the value of the\n          <code>$type-name</code> argument.</p>\n\n          <p><a name = \"err-XTDE1428\" id = \"err-XTDE1428\"><span class = \"error\">[ERR XTDE1428]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument does not evaluate to a string\n          that is a valid <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there is no namespace\n          declaration in scope for the prefix of the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the processor is\n          able to detect the error statically (for example, when\n          the argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"extension-instruction\" id = \"extension-instruction\"></a>18.2 Extension\n        Instructions</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-extension-namespace\" id = \"dt-extension-namespace\" title = \"extension namespace\"></a>The <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n        mechanism allows namespaces to be designated as\n        <b>extension namespaces</b>. When a namespace is designated\n        as an extension namespace and an element with a name from\n        that namespace occurs in a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>,\n        then the element is treated as an <a title = \"instruction\" href = \"#dt-instruction\">instruction</a> rather than as a\n        <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n        element</a>.<span class = \"definition\">]</span> The namespace\n        determines the semantics of the instruction.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Since an element that is a child of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element is not occurring <em>in a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a></em>,\n          <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a> (see\n          <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined\n          Data Elements</i></a>) are not extension elements as\n          defined here, and nothing in this section applies to\n          them.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"designating-extension-namespace\" id = \"designating-extension-namespace\"></a>18.2.1 Designating\n          an Extension Namespace</h4>\n\n          <p>A namespace is designated as an extension namespace by\n          using an <code>[xsl:]extension-element-prefixes</code>\n          attribute on an element in the stylesheet (see <a href = \"#standard-attributes\"><i>3.5 Standard\n          Attributes</i></a>). The attribute <span class = \"verb\">must</span> be in the XSLT namespace only if its\n          parent element is <em>not</em> in the XSLT namespace. The\n          value of the attribute is a whitespace-separated list of\n          namespace prefixes. The namespace bound to each of the\n          prefixes is designated as an extension namespace.</p>\n\n          <p>The default namespace (as declared by\n          <code>xmlns</code>) may be designated as an extension\n          namespace by including <code>#default</code> in the list\n          of namespace prefixes.</p>\n\n          <p><a name = \"err-XTSE1430\" id = \"err-XTSE1430\"><span class = \"error\">[ERR XTSE1430]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if there is no namespace bound to the prefix on the\n          element bearing the\n          <code>[xsl:]extension-element-prefixes</code> attribute\n          <span>or, when <code>#default</code> is specified, if\n          there is no default namespace</span>.</p>\n\n          <p>The designation of a namespace as an extension\n          namespace is effective for the element bearing the\n          <code>[xsl:]extension-element-prefixes</code> attribute\n          and for all descendants of that element within the same\n          stylesheet module.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"testing-instruction-available\" id = \"testing-instruction-available\"></a>18.2.2 Testing\n          Availability of Instructions</h4>\n\n          <p>The <a href = \"#function-element-available\"><code>element-available</code></a>\n          function can be used with the <a href = \"#XSLT_element-choose\"><code>xsl:choose</code></a> and\n          <a href = \"#XSLT_element-if\"><code>xsl:if</code></a>\n          instructions<span>, or with the\n          <code>[xsl:]use-when</code> attribute (see <a href = \"#conditional-inclusion\"><i>3.12 Conditional Element\n          Inclusion</i></a>) to explicitly control how a stylesheet\n          behaves when a particular XSLT instruction or extension\n          instruction is (or is not) available.</span></p><a name = \"function-element-available\" id = \"function-element-available\"></a>\n\n          <div class = \"proto\">\n            <code class = \"function\">element-available</code>(<code class = \"arg\">$element-name</code><code class = \"as\">&#160;as&#160;</code><code class = \"type\">xs:string</code>)<code class = \"as\">&#160;as&#160;</code><code class = \"return-type\">xs:boolean</code>\n          </div>\n\n          <p>The value of the <code>$element-name</code> argument\n          <span class = \"verb\">must</span> be a string containing a\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>. The\n          <a title = \"QName\" href = \"#dt-qname\">QName</a> is expanded\n          into an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using the\n          namespace declarations in scope for the <a title = \"expression\" href = \"#dt-expression\">expression</a>. If\n          there is a default namespace in scope, then it is used to\n          expand an unprefixed <a title = \"QName\" href = \"#dt-qname\">QName</a>. The <a href = \"#function-element-available\"><code>element-available</code></a>\n          function returns true if and only if the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> is the name of an\n          <a title = \"instruction\" href = \"#dt-instruction\">instruction</a>. If the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> has a namespace\n          URI equal to the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> URI, then it\n          refers to an element defined by XSLT. Otherwise, it\n          refers to an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>. If\n          the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> has a null\n          namespace URI, the <a href = \"#function-element-available\"><code>element-available</code></a>\n          function will return false.</p>\n\n          <p><a name = \"err-XTDE1440\" id = \"err-XTDE1440\"><span class = \"error\">[ERR XTDE1440]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument does not evaluate to a string\n          that is a valid <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there is no namespace\n          declaration in scope for the prefix of the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the processor is\n          able to detect the error statically (for example, when\n          the argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n          <p>If the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> is in the\n          <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, the function returns true if and only if\n          the expanded QName is the name of an <a title = \"XSLT instruction\" href = \"#dt-xslt-instruction\">XSLT\n          instruction</a>, that is, an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a> whose syntax\n          summary in this specification classifies it as an\n          <a title = \"instruction\" href = \"#dt-instruction\">instruction</a>.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Although the result of applying this function to a\n            name in the XSLT namespace when using a conformant XSLT\n            2.0 processor is entirely predictable, the function is\n            useful in cases where the stylesheet might be executing\n            under a processor that implements some other version of\n            XSLT with different rules.</p>\n          </div>\n\n          <p>If the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> is not in the\n          <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, the function returns true if and only if\n          the processor has an implementation available of an\n          <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n          with the given expanded QName. This applies whether or\n          not the namespace has been designated as an <a title = \"extension namespace\" href = \"#dt-extension-namespace\">extension namespace</a>.</p>\n\n          <p>If the processor does not have an implementation of a\n          particular extension instruction available, and such an\n          extension instruction is evaluated, then the processor\n          <span class = \"verb\">must</span> perform fallback for the\n          element as specified in <a href = \"#fallback\"><i>18.2.3\n          Fallback</i></a>. An implementation <span class = \"verb\">must not</span> signal an error merely because the\n          stylesheet contains an extension instruction for which no\n          implementation is available.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"fallback\" id = \"fallback\"></a>18.2.3\n          Fallback</h4>\n\n          <p class = \"element-syntax\"><a name = \"XSLT_element-fallback\" id = \"XSLT_element-fallback\"></a><code>&lt;!-- Category:\n          instruction --&gt;<br/>\n          &lt;xsl:fallback&gt;<br/>\n          &#160;&#160;&lt;!-- Content:\n          <var>sequence-constructor</var> --&gt;<br/>\n          &lt;/xsl:fallback&gt;</code></p>\n\n          <p>The content of an <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a> element\n          is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, and\n          when performing fallback, the value returned by the\n          <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          element is the result of evaluating this sequence\n          constructor.</p>\n\n          <p>When not performing fallback, evaluating an <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a> element\n          returns an empty sequence: the content of the <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a> element\n          is ignored.</p>\n\n          <p>There are two situations where a <a title = \"processor\" href = \"#dt-processor\">processor</a> performs fallback:\n          when an extension instruction that is not available is\n          evaluated, and when an instruction in the XSLT namespace,\n          that is not defined in XSLT 2.0, is evaluated within a\n          region of the stylesheet for which <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards compatible\n          behavior</a> is enabled.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>Fallback processing is not invoked in other\n            situations, for example it is not invoked when an XPath\n            expression uses unrecognized syntax or contains a call\n            to an unknown function. To handle such situations\n            dynamically, the stylesheet should call functions such\n            as <a href = \"#function-system-property\"><code>system-property</code></a>\n            and <a href = \"#function-function-available\"><code>function-available</code></a>\n            to decide what capabilities are available.</p>\n          </div>\n\n          <p><a name = \"err-XTDE1450\" id = \"err-XTDE1450\"><span class = \"error\">[ERR XTDE1450]</span></a> When a <a title = \"processor\" href = \"#dt-processor\">processor</a> performs\n          fallback for an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n          that is not recognized, if the instruction element has\n          one or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children, then the content of each of the <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children <span class = \"verb\">must</span> be evaluated; it\n          is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if it has no <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children.</p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>This is different from the situation with\n            unrecognized <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT elements</a>. As explained in\n            <a href = \"#forwards\"><i>3.9 Forwards-Compatible\n            Processing</i></a>, an unrecognized XSLT element\n            appearing within a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n            constructor</a> is a static error unless (a) <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n            behavior</a> is enabled, and (b) the instruction has an\n            <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n            child.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"result-trees\" id = \"result-trees\"></a>19 Final\n      Result Trees</h2>\n\n      <p>The output of a transformation is a set of\n      <span>one</span> or more <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a>.</p>\n\n      <p>A <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> can be created\n      explicitly, by evaluating an <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      instruction. <span>As explained in <a href = \"#executing-a-transformation\"><i>2.4 Executing a\n      Transformation</i></a>,</span> a final result tree is also\n      created implicitly if no <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      instruction is evaluated, or if the result of evaluating the\n      <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> is a non-empty\n      sequence.</p>\n\n      <p>The way in which a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is delivered to\n      an application is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.</p>\n\n      <p>Serialization of <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> is described\n      further in <a href = \"#serialization\"><i>20\n      Serialization</i></a></p>\n\n      <div class = \"div2\">\n        <h3><a name = \"creating-result-trees\" id = \"creating-result-trees\"></a>19.1 Creating Final Result\n        Trees</h3>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-result-document\" id = \"XSLT_element-result-document\"></a><code>&lt;!-- Category:\n        instruction --&gt;<br/>\n        &lt;xsl:result-document<br/>\n        &#160;&#160;format? = { <var>qname</var> }<br/>\n        &#160;&#160;href? = { <var>uri-reference</var> }<br/>\n        &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\" |\n        \"strip\"<br/>\n        &#160;&#160;type? = <var>qname</var><br/>\n        &#160;&#160;method? = { \"xml\" | \"html\" | \"xhtml\" | \"text\" |\n        <var>qname-but-not-ncname</var> }<br/>\n        &#160;&#160;byte-order-mark? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;cdata-section-elements? = { <var>qnames</var>\n        }<br/>\n        &#160;&#160;doctype-public? = { <var>string</var> }<br/>\n        &#160;&#160;doctype-system? = { <var>string</var> }<br/>\n        &#160;&#160;encoding? = { <var>string</var> }<br/>\n        &#160;&#160;escape-uri-attributes? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;include-content-type? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;indent? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;media-type? = { <var>string</var> }<br/>\n        &#160;&#160;normalization-form? = { \"NFC\" | \"NFD\" | \"NFKC\"\n        | \"NFKD\" | \"fully-normalized\" | \"none\" | <var>nmtoken</var>\n        }<br/>\n        &#160;&#160;omit-xml-declaration? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;standalone? = { \"yes\" | \"no\" | \"omit\" }<br/>\n        &#160;&#160;undeclare-prefixes? = { \"yes\" | \"no\" }<br/>\n        &#160;&#160;use-character-maps? = <var>qnames</var><br/>\n        &#160;&#160;output-version? = { <var>nmtoken</var>\n        }&gt;<br/>\n        &#160;&#160;&lt;!-- Content:\n        <var>sequence-constructor</var> --&gt;<br/>\n        &lt;/xsl:result-document&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction is used to create a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a>. The content of the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        element is a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> for the\n        children of the document node of the tree. A document node\n        is created, and the sequence obtained by evaluating the\n        sequence constructor is used to construct the content of\n        the document, as described in <a href = \"#constructing-complex-content\"><i>5.7.1 Constructing\n        Complex Content</i></a>. The tree rooted at this document\n        node forms the final result tree.</p>\n\n        <p>The <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction defines the URI of the result tree, and may\n        optionally specify the output format to be used for\n        serializing this tree.</p>\n\n        <p>The <span><a title = \"effective value\" href = \"#dt-effective-value\">effective value</a></span> of the\n        <code>format</code> attribute, if specified, <span class = \"verb\">must</span> be a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>. The QName is\n        expanded using the namespace declarations in scope for the\n        <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        element. The <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> <span class = \"verb\">must</span> match the expanded QName of a named\n        <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> in the\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.\n        This identifies the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n        that will control the serialization of the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a> (see <a href = \"#serialization\"><i>20\n        Serialization</i></a>), if the result tree is serialized.\n        If the <code>format</code> attribute is omitted, the\n        unnamed <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> is used to\n        control serialization of the result tree.</p>\n\n        <p><a name = \"err-XTDE1460\" id = \"err-XTDE1460\"><span class = \"error\">[ERR XTDE1460]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>format</code> attribute is not a valid <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>,\n        or if it does not match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of an <a title = \"output definition\" href = \"#dt-output-definition\">output\n        definition</a> in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. If the processor is able\n        to detect the error statically (for example, when the\n        <code>format</code> attribute contains no curly brackets),\n        then the processor <span class = \"verb\">may</span> optionally\n        signal this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The only way to select the unnamed <a title = \"output definition\" href = \"#dt-output-definition\">output\n          definition</a> is to omit the <code>format</code>\n          attribute.</p>\n        </div>\n\n        <p>The attributes <code>method</code>,\n        <code>byte-order-mark</code>\n        <code>cdata-section-elements</code>,\n        <code>doctype-public</code>, <code>doctype-system</code>,\n        <code>encoding</code>, <code>escape-uri-attributes</code>,\n        <code>indent</code>, <code>media-type</code>,\n        <code>normalization-form</code>,\n        <code>omit-xml-declaration</code>, <code>standalone</code>,\n        <code>undeclare-prefixes</code>,\n        <code>use-character-maps</code>, and\n        <code>output-version</code> may be used to override\n        attributes defined in the selected <a title = \"output definition\" href = \"#dt-output-definition\">output\n        definition</a>.</p>\n\n        <p>With the exception of <code>use-character-maps</code>,\n        these attributes are all defined as <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n        templates</a>, so their values may be set dynamically. For\n        any of these attributes that is present on the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction, the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the attribute\n        overrides or supplements the corresponding value from the\n        output definition. This works in the same way as when one\n        <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n        declaration overrides another:</p>\n\n        <ul>\n          <li>\n            <p>In the case of <code>cdata-section-elements</code>,\n            the value of the serialization parameter is the union\n            of the expanded names of the elements named in this\n            instruction and the elements named in the selected\n            output definition;</p>\n          </li>\n\n          <li>\n            <p>In the case of <code>use-character-maps</code>, the\n            character maps referenced in this instruction\n            supplement and take precedence over those defined in\n            the selected output definition;</p>\n          </li>\n\n          <li>\n            <p>In all other cases, the effective value of an\n            attribute actually present on this instruction takes\n            precedence over the value defined in the selected\n            output definition.</p>\n          </li>\n        </ul>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>In the case of the attributes <code>method</code>,\n          <code>cdata-section-elements</code>, <span>and\n          <code>use-character-maps</code>,</span> the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n          value</a> of the attribute contains one or more lexical\n          QNames. The prefix in such a QName is expanded using the\n          in-scope namespaces for the\n          <code>xsl:result-document</code> element. In the case of\n          <code>cdata-section-elements</code>, an unprefixed\n          element name is expanded using the default namespace.</p>\n        </div>\n\n        <p>The <code>output-version</code> attribute on the\n        <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction overrides the <code>version</code> attribute on\n        <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> (it\n        has been renamed because <code>version</code> is available\n        with a different meaning as a standard attribute: see\n        <a href = \"#standard-attributes\"><i>3.5 Standard\n        Attributes</i></a>). In all other cases, attributes\n        correspond if they have the same name.</p>\n\n        <p>There are some serialization parameters that apply to\n        some output methods but not to others. For example, the\n        <code>indent</code> attribute has no effect on the\n        <code>text</code> output method. If a value is supplied for\n        an attribute that is inapplicable to the output method, its\n        value is <span>not passed to the serializer</span>. The\n        processor <span class = \"verb\">may</span> validate the value\n        of such an attribute, but is not <span class = \"verb\">required</span> to do so.</p>\n\n        <p>The <code>href</code> attribute is optional. The default\n        value is the zero-length string. The <a title = \"effective value\" href = \"#dt-effective-value\">effective\n        value</a> of the attribute <span class = \"verb\">must</span>\n        be a <a title = \"URI Reference\" href = \"#dt-uri-reference\">URI\n        Reference</a>, which may be absolute or relative. There\n        <span class = \"verb\">may</span> be <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        restrictions on the form of absolute URI that may be used,\n        but the implementation is not <span class = \"verb\">required</span> to enforce any restrictions. Any\n        legal relative URI <span class = \"verb\">must</span> be\n        accepted. Note that the zero-length string is a legal\n        relative URI.</p>\n\n        <p>The base URI of the document node at the root of the\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is based on\n        the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n        <code>href</code> attribute. If the <a title = \"effective value\" href = \"#dt-effective-value\">effective\n        value</a> is a relative URI, then it is resolved relative\n        to the <a title = \"base output URI\" href = \"#dt-base-output-uri\">base output URI</a>. If the\n        implementation provides an API to access final result\n        trees, then it <span class = \"verb\">must</span> allow a final\n        result tree to be identified by means of this base URI.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The base URI of the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is not\n          <span>necessarily</span> the same thing as the URI of its\n          serialized representation on disk, if any. For example, a\n          server (or browser client) might store final result trees\n          only in memory, or in an internal disk cache. As long as\n          <span>the processor</span> satisfies requests for those\n          URIs, it is irrelevant where they are actually written on\n          disk, if at all.</p>\n        </div>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>It will often be the case that one <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> contains links to another final result\n          tree produced during the same transformation, in the form\n          of a relative URI. The mechanism of associating a URI\n          with a final result tree has been chosen to allow the\n          integrity of such links to be preserved when the trees\n          are serialized.</p>\n\n          <p>As well as being potentially significant in any API\n          that provides access to final result trees, the base URI\n          of the new document node is relevant if the final result\n          tree, rather than being serialized, is supplied as input\n          to a further transformation.</p>\n        </div>\n\n        <p>The optional attributes <code>type</code> and\n        <code>validation</code> may be used on the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction to validate the contents of the new document,\n        and to determine the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> that elements and\n        attributes within the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> will carry.\n        The permitted values and their semantics are described in\n        <a href = \"#validating-document-nodes\"><i>19.2.2 Validating\n        Document Nodes</i></a>.</p>\n\n        <p>A <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">may</span>\n        allow a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> to be\n        serialized. Serialization is described in <a href = \"#serialization\"><i>20 Serialization</i></a>. However, an\n        implementation (for example, a <a title = \"processor\" href = \"#dt-processor\">processor</a> running in an environment\n        with no access to writable filestore) is not <span class = \"verb\">required</span> to support the serialization of\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a>. An\n        implementation that does not support the serialization of\n        final result trees <span class = \"verb\">may</span> ignore the\n        <code>format</code> attribute <span>and the serialization\n        attributes</span>. Such an implementation <span class = \"verb\">must</span> provide the application with some means\n        of access to the (un-serialized) result tree, using its URI\n        to identify it.</p>\n\n        <p>Implementations may provide additional mechanisms,\n        outside the scope of this specification, for defining the\n        way in which <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> are\n        processed. Such mechanisms <span class = \"verb\">may</span>\n        make use of the XSLT-defined attributes on the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        and/or <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> elements, or\n        they <span class = \"verb\">may</span> use additional elements\n        or attributes in an <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        namespace.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e27003\" id = \"d5e27003\"></a>Example: Multiple\n            Result Documents\n          </div>\n\n          <p>The following example takes an XHTML document as\n          input, and breaks it up so that the text following each\n          &lt;h1&gt; element is included in a separate document. A\n          new document <code>toc.html</code> is constructed to act\n          as an index:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:stylesheet\n        version=\"2.0\"\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n        xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"&gt;\n        \n&lt;xsl:output name=\"toc-format\" method=\"xhtml\" indent=\"yes\"\n            doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\n            doctype-public=\"-//W3C//DTD XHTML 1.0 Strict//EN\"/&gt;\n            \n&lt;xsl:output name=\"section-format\" method=\"xhtml\" indent=\"no\"\n            doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\n            doctype-public=\"-//W3C//DTD XHTML 1.0 Transitional//EN\"/&gt;        \n         \n&lt;xsl:template match=\"/\"&gt;\n  &lt;xsl:result-document href=\"toc.html\" format=\"toc-format\" validation=\"strict\"&gt;\n    &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n      &lt;head&gt;&lt;title&gt;Table of Contents&lt;/title&gt;&lt;/head&gt;\n      &lt;body&gt;\n        &lt;h1&gt;Table of Contents&lt;/h1&gt;\n        &lt;xsl:for-each select=\"/*/xhtml:body/(*[1] | xhtml:h1)\"&gt;\n          &lt;p&gt;&lt;a href=\"section{position()}.html\"&gt;&lt;xsl:value-of select=\".\"/&gt;&lt;/a&gt;&lt;/p&gt;\n        &lt;/xsl:for-each&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  &lt;/xsl:result-document&gt;\n  &lt;xsl:for-each-group select=\"/*/xhtml:body/*\" group-starting-with=\"xhtml:h1\"&gt;\n    &lt;xsl:result-document href=\"section{position()}.html\" \n                         format=\"section-format\" validation=\"strip\"&gt;         \n      &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n        &lt;head&gt;&lt;title&gt;&lt;xsl:value-of select=\".\"/&gt;&lt;/title&gt;&lt;/head&gt;\n        &lt;body&gt;\n          &lt;xsl:copy-of select=\"current-group()\"/&gt;\n        &lt;/body&gt;\n      &lt;/html&gt;\n    &lt;/xsl:result-document&gt;\n  &lt;/xsl:for-each-group&gt;\n&lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>There are restrictions on the use of the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction, designed to ensure that the results are fully\n        interoperable even when processors optimize the sequence in\n        which instructions are evaluated. Informally, the\n        restriction is that the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction can only be used while writing a final result\n        tree, not while writing to a temporary tree or a sequence.\n        This restriction is defined formally as follows.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-output-state\" id = \"dt-output-state\" title = \"output state\"></a>Each instruction in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is\n        evaluated in one of two possible <b>output states</b>:\n        <a title = \"final output state\" href = \"#dt-final-output-state\">final output state</a> or\n        <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n        state</a><span class = \"definition\">]</span>.</p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-final-output-state\" id = \"dt-final-output-state\" title = \"final output state\"></a>The first of the two <a title = \"output state\" href = \"#dt-output-state\">output states</a> is\n        called <b>final output</b> state. This state applies when\n        instructions are writing to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result\n        tree</a>.<span class = \"definition\">]</span></p>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-temporary-output-state\" id = \"dt-temporary-output-state\" title = \"temporary output state\"></a>The second of the two\n        <a title = \"output state\" href = \"#dt-output-state\">output\n        states</a> is called <b>temporary output</b> state. This\n        state applies when instructions are writing to a <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary\n        tree</a> or any other non-final destination.<span class = \"definition\">]</span></p>\n\n        <p>The instructions in the <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> are\n        evaluated in <a title = \"final output state\" href = \"#dt-final-output-state\">final output state</a>. An\n        instruction is evaluated in the same <a title = \"output state\" href = \"#dt-output-state\">output state</a> as\n        its calling instruction, except that <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>, <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>, <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>,\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n        <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a>,\n        <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>,\n        <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>,\n        <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>,\n        <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>,\n        <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>, <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>, and <a href = \"#XSLT_element-message\"><code>xsl:message</code></a> always\n        evaluate the instructions in their contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> in\n        <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n        state</a>.</p>\n\n        <p><a name = \"err-XTDE1480\" id = \"err-XTDE1480\"><span class = \"error\">[ERR XTDE1480]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> to evaluate the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction in <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n        state</a>.</p>\n\n        <p><a name = \"err-XTDE1490\" id = \"err-XTDE1490\"><span class = \"error\">[ERR XTDE1490]</span></a> It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> for a transformation to generate two or more\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> with the\n        same URI.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Note, this means that it is an error to evaluate more\n          than one <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction that omits the <code>href</code> attribute,\n          or to evaluate any <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction that omits the <code>href</code> attribute if\n          an initial <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is created\n          implicitly.</p>\n        </div>\n\n        <p>Technically, the result of evaluating the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction is an empty sequence. This means it does not\n        contribute any nodes to the result of the\n        <span>sequence</span> constructor it is part of.</p>\n\n        <p><a name = \"err-XTRE1495\" id = \"err-XTRE1495\"><span class = \"error\">[ERR XTRE1495]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> for a\n        transformation to generate two or more <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result trees</a> with URIs that identify the same physical\n        resource. The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>,\n        since it may be impossible for the processor to detect the\n        error.</p>\n\n        <p><a name = \"err-XTRE1500\" id = \"err-XTRE1500\"><span class = \"error\">[ERR XTRE1500]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> for a\n        <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n        to write to an external resource and read from the same\n        resource during a single transformation, whether or not the\n        same URI is used to access the resource in both cases. The\n        <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>:\n        implementations are not <span class = \"verb\">required</span>\n        to detect the error condition. <span>Note that if the error\n        is not detected, it is undefined whether the document that\n        is read from the resource reflects its state before or\n        after the result tree is written.</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"validation\" id = \"validation\"></a>19.2\n        Validation</h3>\n\n        <p>It is possible to control the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> applied to\n        individual element and attribute nodes as they are\n        constructed. This is done using the <code>type</code> and\n        <code>validation</code> attributes of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n        <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n        <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n        and <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instructions, or the <code>xsl:type</code> and\n        <code>xsl:validation</code> attributes of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n        element</a>.</p>\n\n        <p>The <code>[xsl:]type</code> attribute is used to request\n        validation of an element or attribute against a specific\n        simple or complex type defined in a schema. The\n        <code>[xsl:]validation</code> attribute is used to request\n        validation against the global element or attribute\n        declaration whose name matches the name of the element or\n        attribute being validated.</p>\n\n        <p>The <code>[xsl:]type</code> and\n        <code>[xsl:]validation</code> attributes are mutually\n        exclusive. Both are optional, but if one is present then\n        the other <span class = \"verb\">must</span> be omitted. If\n        both attributes are omitted, the effect is the same as\n        specifying the <code>validation</code> attribute with the\n        value specified in the <code>default-validation</code>\n        attribute of the containing <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element; if this is not specified, the effect is the same\n        as specifying <code>validation=\"strip\"</code>.</p>\n\n        <p><a name = \"err-XTSE1505\" id = \"err-XTSE1505\"><span class = \"error\">[ERR XTSE1505]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        both the <code>[xsl:]type</code> and\n        <code>[xsl:]validation</code> attributes are present on the\n        <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n        <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n        <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n        <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n        or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instructions, or on a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n        element</a>.</p>\n\n        <p>The detailed rules for validation vary depending on the\n        kind of node being validated. The rules for element and\n        attribute nodes are given in <a href = \"#validating-constructed-nodes\"><i>19.2.1 Validating\n        Constructed Elements and Attributes</i></a>, while those\n        for document nodes are given in <a href = \"#validating-document-nodes\"><i>19.2.2 Validating Document\n        Nodes</i></a>.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"validating-constructed-nodes\" id = \"validating-constructed-nodes\"></a>19.2.1 Validating\n          Constructed Elements and Attributes</h4>\n\n          <div class = \"div4\">\n            <h5><a name = \"validating-using-validation-attribute\" id = \"validating-using-validation-attribute\"></a>19.2.1.1\n            Validation using the <code>[xsl:]validation</code>\n            Attribute</h5>\n\n            <p>The <code>[xsl:]validation</code> attribute defines\n            the validation action to be taken. It determines not\n            only the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of the node that\n            is constructed by the relevant instruction itself, but\n            also the type annotations of all element and attribute\n            nodes that have the constructed node as an ancestor.\n            Conceptually, the validation requested for a child\n            element or attribute node is applied before the\n            validation requested for its parent element. For\n            example, if the instruction that constructs a child\n            element specifies <code>validation=\"strict\"</code>,\n            this will cause the child element to be checked against\n            an element declaration, but if the instruction that\n            constructs its parent element specifies\n            <code>validation=\"strip\"</code>, then the final effect\n            will be that the child node is annotated as\n            <span><code>xs:untyped</code></span>.</p>\n\n            <p>In the paragraphs below, the term <em>contained\n            nodes</em> means the elements and attributes that have\n            the newly constructed node as an ancestor.</p>\n\n            <ul>\n              <li>\n                <p>The value <code>strip</code> indicates that the\n                new node and each of the contained nodes will have\n                the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>\n                <span><code>xs:untyped</code></span> if it is an\n                element, or\n                <span><code>xs:untypedAtomic</code></span> if it is\n                an attribute. Any previous type annotation present\n                on a contained element or attribute node (for\n                example, a type annotation that is present on an\n                element copied from a source document) is also\n                replaced by <span><code>xs:untyped</code></span> or\n                <span><code>xs:untypedAtomic</code></span> as\n                appropriate. <span>The typed value of the node is\n                changed to be the same as its string value, as an\n                instance of <code>xs:untypedAtomic</code>. In the\n                case of elements the <code>nilled</code> property\n                is set to <code>false</code>. The values of the\n                <code>is-id</code> and <code>is-idrefs</code>\n                properties are unchanged.</span> Schema validation\n                is not invoked.</p>\n              </li>\n\n              <li>\n                <p>The value <code>preserve</code> indicates that\n                nodes that are copied will retain their <a title = \"type annotation\" href = \"#dt-annotation\">type\n                annotations</a>, but nodes whose content is newly\n                constructed will be annotated as\n                <code>xs:anyType</code> in the case of elements, or\n                <span><code>xs:untypedAtomic</code></span> in the\n                case of attributes. Schema validation is not\n                invoked. The detailed effect depends on the\n                instruction:</p>\n\n                <ul>\n                  <li>\n                    <p>In the case of <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n                    and literal result elements, the new element\n                    has a <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of\n                    <code>xs:anyType</code>, and the type\n                    annotations of contained nodes are retained\n                    unchanged.</p>\n                  </li>\n\n                  <li>\n                    <p>In the case of <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n                    the effect is exactly the same as specifying\n                    <code>validation=\"strip\"</code>: that is, the\n                    new attribute will have the type annotation\n                    <span><code>xs:untypedAtomic</code></span>.</p>\n                  </li>\n\n                  <li>\n                    <p>In the case of <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n                    all the nodes that are copied will retain their\n                    type annotations unchanged.</p>\n                  </li>\n\n                  <li>\n                    <p>In the case of <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, the\n                    effect depends on the kind of node being\n                    copied.</p>\n\n                    <ol class = \"enumar\">\n                      <li>\n                        <p>Where the node being copied is an\n                        attribute, the copied attribute will retain\n                        its <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>.</p>\n                      </li>\n\n                      <li>\n                        <p>Where the node being copied is an\n                        element, the copied element will have a\n                        <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> of\n                        <span><code>xs:anyType</code></span>\n                        (because this instruction does not copy the\n                        content of the element, it would be wrong\n                        to assume that the type is unchanged); but\n                        any contained nodes will have their type\n                        annotations retained in the same way as\n                        with <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>.</p>\n                      </li>\n                    </ol>\n                  </li>\n                </ul>\n              </li>\n\n              <li>\n                <p>The value <code>strict</code> indicates that\n                <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a> are\n                established by performing strict schema validity\n                assessment on the element or attribute node created\n                by this instruction as follows:</p>\n\n                <ul>\n                  <li>\n                    <p>In the case of an element, <span>a\n                    top-level</span> element declaration is\n                    identified whose local name and namespace (if\n                    any) match the name of the element, and\n                    schema-validity assessment is carried out\n                    according to the rules defined in <a href = \"#xmlschema-1\">[XML Schema Part 1]</a> (section\n                    3.3.4 \"Element Declaration Validation Rules\",\n                    validation rule \"Schema-Validity Assessment\n                    (Element)\", clauses 1.1 and 2<span>, using the\n                    top-level element declaration as the\n                    \"declaration stipulated by the processor\",\n                    which is mentioned in clause 1.1.1.1</span>).\n                    The element is considered valid if the result\n                    of the schema validity assessment is a PSVI in\n                    which the relevant element node has a\n                    <code>validity</code> property whose value is\n                    <code>valid</code>. If <span>there is no\n                    matching element declaration, or if</span> the\n                    element is not considered valid, the\n                    transformation fails <span class = \"error\">[see\n                    <a href = \"#err-XTTE1510\">ERR\n                    XTTE1510</a>]</span>, <span class = \"error\">[see\n                    <a href = \"#err-XTTE1512\">ERR\n                    XTTE1512</a>]</span>. In effect this means that\n                    the element being validated <span class = \"verb\">must</span> be declared using a\n                    top-level declaration in the schema, and\n                    <span class = \"verb\">must</span> conform to its\n                    declaration. The process of validation applies\n                    recursively to contained elements and\n                    attributes to the extent required by the schema\n                    definition.</p>\n\n                    <div class = \"note\">\n                      <p class = \"prefix\"><b>Note:</b></p>\n\n                      <p>It is not an error if the identified type\n                      definition is a simple type, although\n                      <a href = \"#xmlschema-1\">[XML Schema Part\n                      1]</a> does not define explicitly that this\n                      case is permitted.</p>\n                    </div>\n                  </li>\n\n                  <li>\n                    <p>In the case of an attribute, <span>a\n                    top-level</span> attribute declaration is\n                    identified whose local name and namespace (if\n                    any) match the name of the attribute, and\n                    schema-validity assessment is carried out\n                    according to the rules defined in <a href = \"#xmlschema-1\">[XML Schema Part 1]</a> (section\n                    3.2.4 \"Attribute Declaration Validation Rules\",\n                    validation rule \"Schema-Validity Assessment\n                    (Attribute)\"). The attribute is considered\n                    valid if the result of the schema validity\n                    assessment is a PSVI in which the relevant\n                    attribute node has a <code>validity</code>\n                    property whose value is <code>valid</code>. If\n                    the attribute is not considered valid, the\n                    transformation fails <span><span class = \"error\">[see <a href = \"#err-XTTE1510\">ERR\n                    XTTE1510</a>]</span></span>. In effect this\n                    means that the attribute being validated\n                    <span class = \"verb\">must</span> be declared\n                    using a top-level declaration in the schema,\n                    and <span class = \"verb\">must</span> conform to\n                    its declaration.</p>\n                  </li>\n\n                  <li>\n                    <p>The schema components used to validate an\n                    element or attribute may be located in any way\n                    <span>described</span> by <a href = \"#xmlschema-1\">[XML Schema Part 1]</a> (see\n                    section 4.3.2, <em>How schema documents are\n                    located on the Web</em>). The components in the\n                    schema constructed from the synthetic schema\n                    document (see <a href = \"#import-schema\"><i>3.14\n                    Importing Schema Components</i></a>) will\n                    always be available for validating constructed\n                    nodes; if additional schema components are\n                    needed, they <span class = \"verb\">may</span>\n                    <span>be located in other ways, for example\n                    implicitly from knowledge of the namespace in\n                    which the elements and attributes appear, or\n                    using the <code>xsi:schemaLocation</code>\n                    attribute of elements within the tree being\n                    validated.</span></p>\n                  </li>\n\n                  <li>\n                    <p>If no validation is performed for a node,\n                    which can happen when the schema specifies\n                    <code>lax</code> or <code>skip</code>\n                    validation for that node or for a subtree, then\n                    the node is annotated as\n                    <span><code>xs:anyType</code></span> in the\n                    case of an element, and\n                    <span><code>xs:untypedAtomic</code></span> in\n                    the case of an attribute.</p>\n                  </li>\n                </ul>\n              </li>\n\n              <li>\n                <p>The value <code>lax</code> has the same effect\n                as the value <code>strict</code>, except that\n                whereas <code>strict</code> validation fails\n                <span>if there is no matching top-level element\n                declaration or</span> if the outcome of validity\n                assessment is a <code>validity</code> property of\n                <code>invalid</code> or <code>notKnown</code>,\n                <code>lax</code> validation fails only if the\n                outcome of validity assessment is a\n                <code>validity</code> property of\n                <code>invalid</code>. That is, <code>lax</code>\n                validation does not cause a type error when the\n                outcome is <code>notKnown</code>.</p>\n\n                <p>In practice this means that the element or\n                attribute being validated <span class = \"verb\">must</span> conform to its declaration if a\n                top-level declaration is available. If no such\n                declaration is available, then the element or\n                attribute is not validated, but its attributes and\n                children are validated, again with lax validation.\n                Any nodes whose validation outcome is a\n                <code>validity</code> property of\n                <code>notKnown</code> are annotated as\n                <span><code>xs:anyType</code></span> in the case of\n                an element, and\n                <span><code>xs:untypedAtomic</code></span> in the\n                case of an attribute.</p>\n\n                <div class = \"note\">\n                  <p class = \"prefix\"><b>Note:</b></p>\n\n                  <p>When the parent element lacks a declaration,\n                  the XML Schema specification defines the\n                  recursive checking of children and attributes as\n                  optional. For this specification, this recursive\n                  checking is required.</p>\n                </div>\n\n                <div class = \"note\">\n                  <p class = \"prefix\"><b>Note:</b></p>\n\n                  <p>If an element that is being validated has an\n                  <code>xsi:type</code> attribute, then the value\n                  of the <code>xsi:type</code> attribute will be\n                  taken into account when performing the\n                  validation. However, the presence of an\n                  <code>xsi:type</code> attribute will not of\n                  itself cause an element to be validated: if\n                  validation against a named type is required, as\n                  distinct from validation against a top-level\n                  element declaration, then it must be requested\n                  using the XSLT <code>[xsl:]type</code> attribute\n                  on the instruction that invokes the validation,\n                  as described in section <a href = \"#validation-xsl-type\"><i>19.2.1.2 Validation\n                  using the [xsl:]type Attribute</i></a></p>\n                </div>\n              </li>\n            </ul>\n\n            <p><a name = \"err-XTTE1510\" id = \"err-XTTE1510\"><span class = \"error\">[ERR\n            XTTE1510]</span></a> If the <code>validation</code>\n            attribute of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>, or\n            <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n            instruction, or the <code>xsl:validation</code>\n            attribute of a literal result element, has the\n            effective value <code>strict</code>, and schema\n            validity assessment concludes that the validity of the\n            element or attribute is invalid or unknown, a type\n            error occurs. As with other type errors, the error\n            <span class = \"verb\">may</span> be signaled statically if\n            it can be detected statically.</p>\n\n            <p><a name = \"err-XTTE1512\" id = \"err-XTTE1512\"><span class = \"error\">[ERR\n            XTTE1512]</span></a> If the <code>validation</code>\n            attribute of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>, or\n            <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n            instruction, or the <code>xsl:validation</code>\n            attribute of a literal result element, has the\n            effective value <code>strict</code>, and there is no\n            matching top-level declaration in the schema, then a\n            type error occurs. As with other type errors, the error\n            <span class = \"verb\">may</span> be signaled statically if\n            it can be detected statically.</p>\n\n            <p><a name = \"err-XTTE1515\" id = \"err-XTTE1515\"><span class = \"error\">[ERR\n            XTTE1515]</span></a> If the <code>validation</code>\n            attribute of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>, or\n            <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n            instruction, or the <code>xsl:validation</code>\n            attribute of a literal result element, has the\n            effective value <code>lax</code>, and schema validity\n            assessment concludes that the element or attribute is\n            invalid, a type error occurs. As with other type\n            errors, the error <span class = \"verb\">may</span> be\n            signaled statically if it can be detected\n            statically.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>No mechanism is provided to validate an element or\n              attribute against a local declaration in a schema.\n              Such validation can usually be achieved by applying\n              validation to a containing element for which a\n              top-level element declaration exists.</p>\n            </div>\n          </div>\n\n          <div class = \"div4\">\n            <h5><a name = \"validation-xsl-type\" id = \"validation-xsl-type\"></a>19.2.1.2 Validation using the\n            <code>[xsl:]type</code> Attribute</h5>\n\n            <p>The <code>[xsl:]type</code> attribute takes as its\n            value a <code>QName</code>. This <span class = \"verb\">must</span> <span>be the name of a type\n            definition included in the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n            components</a> for the stylesheet.</span> If the QName\n            has no prefix, it is expanded using the default\n            namespace established using the effective\n            <code>[xsl:]xpath-default-namespace</code> attribute if\n            there is one; otherwise, it is taken as being a name in\n            no namespace.</p>\n\n            <p>If the <code>[xsl:]type</code> attribute is present,\n            then the newly constructed element or attribute is\n            validated against the type definition identified by\n            this attribute.</p>\n\n            <ul>\n              <li>\n                <p>In the case of an element, schema-validity\n                assessment is carried out according to the rules\n                defined in <a href = \"#xmlschema-1\">[XML Schema Part\n                1]</a> (section 3.3.4 \"Element Declaration\n                Validation Rules\", validation rule \"Schema-Validity\n                Assessment (Element)\", clauses 1.2 and 2), using\n                this type definition as the \"processor-stipulated\n                type definition\". The element is considered valid\n                if the result of the schema validity assessment is\n                a PSVI in which the relevant element node has a\n                <code>validity</code> property whose value is\n                <code>valid</code>.</p>\n              </li>\n\n              <li>\n                <p>In the case of an attribute, the attribute is\n                considered valid if (in the terminology of XML\n                Schema) the attribute's normalized value is locally\n                valid with respect to that type definition\n                according to the rules for \"String Valid\" (<a href = \"#xmlschema-1\">[XML Schema Part 1]</a>, section\n                3.14.4). (Normalization here refers to the process\n                of normalizing whitespace according to the rules of\n                the <code>whiteSpace</code> facet for the data\n                type).</p>\n              </li>\n\n              <li>\n                <p>If the element or attribute is not considered\n                valid, <span>as defined above</span>, the\n                transformation fails <span><span class = \"error\">[see\n                <a href = \"#err-XTTE1540\">ERR\n                XTTE1540</a>]</span></span>.</p>\n              </li>\n            </ul>\n\n            <p><a name = \"err-XTSE1520\" id = \"err-XTSE1520\"><span class = \"error\">[ERR\n            XTSE1520]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value\n            of the <code>type</code> attribute of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n            <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n            <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a>,</span>\n            or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n            instruction, or the <code>xsl:type</code> attribute of\n            a literal result element, is not a valid\n            <code>QName</code>, or if it uses a prefix that is not\n            defined in an in-scope namespace declaration, or if the\n            QName is not the name of a type definition included in\n            the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n            components</a> for the stylesheet.</p>\n\n            <p><a name = \"err-XTSE1530\" id = \"err-XTSE1530\"><span class = \"error\">[ERR\n            XTSE1530]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value\n            of the <code>type</code> attribute of an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n            instruction refers to a complex type definition.</p>\n\n            <p><a name = \"err-XTTE1540\" id = \"err-XTTE1540\"><span class = \"error\">[ERR\n            XTTE1540]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if an\n            <code>[xsl:]type</code> attribute is defined for a\n            constructed element or attribute, and the outcome of\n            schema validity assessment against that type is that\n            the <code>validity</code> property of that element or\n            attribute information item is other than\n            <code>valid</code>.</p>\n\n            <div class = \"note\">\n              <p class = \"prefix\"><b>Note:</b></p>\n\n              <p>Like other type errors, this error may be signaled\n              statically if it can be detected statically. For\n              example, the instruction <code>&lt;xsl:attribute\n              name=\"dob\"\n              type=\"xs:date\"&gt;1999-02-29&lt;/xsl:attribute&gt;</code>\n              may result in a static error being signaled. If the\n              error is not signaled statically, it will be signaled\n              when the instruction is evaluated.</p>\n            </div>\n          </div>\n\n          <div class = \"div4\">\n            <h5><a name = \"validation-process\" id = \"validation-process\"></a>19.2.1.3 The Validation\n            Process</h5>\n\n            <p>As well as checking for validity against the schema,\n            the validity assessment process causes <a title = \"type annotation\" href = \"#dt-annotation\">type\n            annotations</a> to be associated with element and\n            attribute nodes. If default values for elements or\n            attributes are defined in the schema, the validation\n            process will where necessary create new nodes\n            containing these default values.</p>\n\n            <p>Validation of an element or attribute node only\n            takes into account constraints on the content of the\n            element or attribute. Validation rules affecting the\n            document as a whole are not applied. Specifically, this\n            means:</p>\n\n            <ul>\n              <li>\n                <p>The validation rule \"Validation Root Valid\n                (ID/IDREF)\" is not applied. This means that\n                validation will not fail if there are non-unique ID\n                values or dangling IDREF values in the subtree\n                being validated.</p>\n              </li>\n\n              <li>\n                <p>The validation rule \"Validation Rule:\n                Identity-constraint Satisfied\" is not applied.</p>\n              </li>\n\n              <li>\n                <p>There is no check that the document contains\n                unparsed entities whose names match the values of\n                nodes of type <code>xs:ENTITY</code> or\n                <code>xs:ENTITIES</code>. (XSLT 2.0 provides no\n                facility to construct unparsed entities within a\n                tree.)</p>\n              </li>\n\n              <li>\n                <p>There is no check that the document contains\n                notations whose names match the values of nodes of\n                type <code>xs:NOTATION</code>. (The\n                <span>XDM</span> data model makes no provision for\n                notations to be represented in the tree.)</p>\n              </li>\n            </ul>\n\n            <p>With these caveats, validating a newly constructed\n            element, using strict or lax validation, is equivalent\n            to the following steps:</p>\n\n            <ol class = \"enumar\">\n              <li>\n                <p>The element is serialized to textual XML form,\n                according to the rules defined in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n                Serialization]</a> using the XML output method,\n                with all parameters defaulted. Note that this\n                process discards any existing <a title = \"type annotation\" href = \"#dt-annotation\">type\n                annotations</a>.</p>\n              </li>\n\n              <li>\n                <p>The resulting XML document is parsed to create\n                an XML Information Set (see <a href = \"#xml-infoset\">[XML Information Set]</a>.)</p>\n              </li>\n\n              <li>\n                <p>The Information Set produced in the previous\n                step is validated according to the rules in\n                <a href = \"#xmlschema-1\">[XML Schema Part 1]</a>. The\n                result of this step is a Post-Schema Validation\n                Infoset (PSVI). If the validation process is not\n                successful (as defined above), a type error is\n                raised.</p>\n              </li>\n\n              <li>\n                <p>The PSVI produced in the previous step is\n                converted back into the <span>XDM</span> data model\n                by the mapping described in <a href = \"#xpath-datamodel\">[Data Model]</a> (<a href = \"http://www.w3.org/TR/xpath-datamodel/#PSVI2Types\">Section\n                3.3.1 Mapping PSVI Additions to Node\n                Properties</a><sup><small>DM</small></sup>). This\n                process creates nodes with simple or complex\n                <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a> based on the\n                types established during schema validation.</p>\n              </li>\n            </ol>\n\n            <p>Validating an attribute using strict or lax\n            validation requires a modified version of this\n            procedure. A copy of the attribute is first added to an\n            element node that is created for the purpose, and\n            namespace fixup (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace Fixup</i></a>) is\n            performed on this element node. The name of this\n            element is of no consequence, but it must be the same\n            as the name of a synthesized element declaration of the\n            form:</p>\n\n            <div class = \"exampleInner\">\n              <pre>\n&lt;xs:element name=\"E\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:sequence/&gt;\n    &lt;xs:attribute ref=\"A\"/&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n</pre>\n            </div>\n\n            <p>where A is the name of the attribute being\n            validated.</p>\n\n            <p>This synthetic element is then validated using the\n            procedure given above for validating elements, and if\n            it is found to be valid, a copy of the validated\n            attribute is made, retaining its <a title = \"type annotation\" href = \"#dt-annotation\">type\n            annotation</a>, but detaching it from the containing\n            element (and thus, from any namespace nodes).</p>\n\n            <p>The <span>XDM</span> data model does not permit an\n            attribute node with no parent to have a typed value\n            that includes a namespace-qualified name, that is, a\n            value whose type is derived from <code>xs:QName</code>\n            or <code>xs:NOTATION</code>. This restriction is\n            imposed because these types rely on the namespace nodes\n            of a containing element to resolve namespace prefixes.\n            Therefore, it is an error to validate a parentless\n            attribute against such a type. This affects the\n            instructions <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n            <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, and\n            <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>.</p>\n\n            <p><a name = \"err-XTTE1545\" id = \"err-XTTE1545\"><span class = \"error\">[ERR\n            XTTE1545]</span></a> A <a title = \"type errors\" href = \"#dt-type-error\">type error</a> occurs if a\n            <code>type</code> or <code>validation</code> attribute\n            is defined (explicitly or implicitly) for an\n            instruction that constructs a new attribute node, if\n            the effect of this is to cause the attribute value to\n            be validated against a type that is derived from, or\n            constructed by list or union from, the primitive types\n            <code>xs:QName</code> or <code>xs:NOTATION</code>.</p>\n          </div>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"validating-document-nodes\" id = \"validating-document-nodes\"></a>19.2.2 Validating\n          Document Nodes</h4>\n\n          <p>It is possible to apply validation to a document node.\n          <span>This happens when a new document node is\n          constructed by one of the instructions <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>,\n          <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, or\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          and this instruction has a <code>type</code> attribute,\n          or a <code>validation</code> attribute with the value\n          <code>strict</code> or <code>lax</code></span>.</p>\n\n          <p>Document-level validation is not applied to the\n          document node that is created implicitly when a\n          variable-binding element has no <code>select</code>\n          attribute and no <code>as</code> attribute (see <a href = \"#temporary-trees\"><i>9.4 Creating implicit document\n          nodes</i></a>). This is equivalent to using\n          <code>validation=\"preserve\"</code> on <a href = \"#XSLT_element-document\"><code>xsl:document</code></a>: nodes\n          within such trees retain their <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>. Similarly,\n          validation is not applied to document nodes created using\n          <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>.</p>\n\n          <p>The values <code>validation=\"preserve\"</code> and\n          <code>validation=\"strip\"</code> do not request\n          validation. In the first case, all element and attribute\n          nodes within the tree rooted at the new document node\n          retain their <a title = \"type annotation\" href = \"#dt-annotation\">type annotations</a>. In the second\n          case, elements within the tree have their type annotation\n          set to <span><code>xs:untyped</code></span>, while\n          attributes have their type annotation set to\n          <span><code>xs:untypedAtomic</code></span>.</p>\n\n          <p>When validation is requested for a document node (that\n          is, when <code>validation</code> is set to\n          <code>strict</code> or <code>lax</code>, or when a\n          <code>type</code> attribute is present), the following\n          processing takes place:</p>\n\n          <ul>\n            <li>\n              <p><a name = \"err-XTTE1550\" id = \"err-XTTE1550\"><span class = \"error\">[ERR\n              XTTE1550]</span></a> A <a title = \"type errors\" href = \"#dt-type-error\">type error</a> occurs unless the\n              children of the document node comprise exactly one\n              element node, no text nodes, and zero or more comment\n              and processing instruction nodes, in any order.</p>\n            </li>\n\n            <li>\n              <p>The single element node child is validated, using\n              the supplied values of the <code>validation</code>\n              and <code>type</code> attributes, as described in\n              <a href = \"#validating-constructed-nodes\"><i>19.2.1\n              Validating Constructed Elements and\n              Attributes</i></a>.</p>\n\n              <div class = \"note\">\n                <p class = \"prefix\"><b>Note:</b></p>\n\n                <p>The <code>type</code> attribute on\n                <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a>\n                and</span> <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,\n                and on <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> and\n                <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n                when copying a document node, thus refers to the\n                required type of the element node that is the only\n                element child of the document node. It does not\n                refer to the type of the document node itself.</p>\n              </div>\n            </li>\n\n            <li>\n              <p>The validation rule \"Validation Root Valid\n              (ID/IDREF)\" is applied to the single element node\n              child of the document node. This means that\n              validation will fail if there are non-unique ID\n              values or dangling IDREF values in the document\n              tree.</p>\n            </li>\n\n            <li>\n              <p>Identity constraints, as defined in section 3.11\n              of <a href = \"#xmlschema-1\">[XML Schema Part 1]</a>,\n              are checked. (This refers to constraints defined\n              using <code>xs:unique</code>, <code>xs:key</code>,\n              and <code>xs:keyref</code>.)</p>\n            </li>\n\n            <li>\n              <p>There is no check that the tree contains unparsed\n              entities whose names match the values of nodes of\n              type <code>xs:ENTITY</code> or\n              <code>xs:ENTITIES</code>. This is because there is no\n              facility in XSLT 2.0 to create unparsed entities in a\n              <a title = \"result tree\" href = \"#dt-result-tree\">result\n              tree</a>. It is possible to add unparsed entity\n              declarations to the result document by referencing a\n              suitable DOCTYPE during serialization.</p>\n            </li>\n\n            <li>\n              <p>There is no check that the document contains\n              notations whose names match the values of nodes of\n              type <code>xs:NOTATION</code>. This is because\n              notations are not part of the <span>XDM</span> data\n              model. It is possible to add notations to the result\n              document by referencing a suitable DOCTYPE during\n              serialization.</p>\n            </li>\n\n            <li>\n              <p>All other children of the document node (comments\n              and processing instructions) are copied\n              unchanged.</p>\n            </li>\n          </ul>\n\n          <p><a name = \"err-XTTE1555\" id = \"err-XTTE1555\"><span class = \"error\">[ERR XTTE1555]</span></a> It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if,\n          when validating a document node, document-level\n          constraints are not satisfied. These constraints include\n          identity constraints (<code>xs:unique</code>,\n          <code>xs:key</code>, and <code>xs:keyref</code>) and\n          ID/IDREF constraints.</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"serialization\" id = \"serialization\"></a>20\n      Serialization</h2>\n\n      <p>A <a title = \"processor\" href = \"#dt-processor\">processor</a>\n      <span class = \"verb\">may</span> output a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result\n      tree</a> as a sequence of octets, although it is not\n      <span class = \"verb\">required</span> to be able to do so (see\n      <a href = \"#conformance\"><i>21 Conformance</i></a>).\n      <span>Stylesheet authors can use <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations to\n      specify how they wish result trees to be serialized. If a\n      processor serializes a final result tree, it <span class = \"verb\">must</span> do so as specified by these\n      declarations.</span></p>\n\n      <p>The rules governing the output of the serializer are\n      defined in <a href = \"#xslt-xquery-serialization\">[XSLT and\n      XQuery Serialization]</a>. The serialization is controlled\n      using a number of serialization parameters. The values of\n      these serialization parameters may be set within the\n      <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>,\n      using the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>, <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>,\n      and <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n      declarations.</p>\n\n      <p class = \"element-syntax\"><a name = \"XSLT_element-output\" id = \"XSLT_element-output\"></a><code>&lt;!-- Category: declaration\n      --&gt;<br/>\n      &lt;xsl:output<br/>\n      &#160;&#160;name? = <var>qname</var><br/>\n      &#160;&#160;method? = \"xml\" | \"html\" | \"xhtml\" | \"text\" |\n      <var>qname-but-not-ncname</var><br/>\n      &#160;&#160;byte-order-mark? = \"yes\" | \"no\"<br/>\n      &#160;&#160;cdata-section-elements? = <var>qnames</var><br/>\n      &#160;&#160;doctype-public? = <var>string</var><br/>\n      &#160;&#160;doctype-system? = <var>string</var><br/>\n      &#160;&#160;encoding? = <var>string</var><br/>\n      &#160;&#160;escape-uri-attributes? = \"yes\" | \"no\"<br/>\n      &#160;&#160;include-content-type? = \"yes\" | \"no\"<br/>\n      &#160;&#160;indent? = \"yes\" | \"no\"<br/>\n      &#160;&#160;media-type? = <var>string</var><br/>\n      &#160;&#160;normalization-form? = \"NFC\" | \"NFD\" | \"NFKC\" |\n      \"NFKD\" | \"fully-normalized\" | \"none\" |\n      <var>nmtoken</var><br/>\n      &#160;&#160;omit-xml-declaration? = \"yes\" | \"no\"<br/>\n      &#160;&#160;standalone? = \"yes\" | \"no\" | \"omit\"<br/>\n      &#160;&#160;undeclare-prefixes? = \"yes\" | \"no\"<br/>\n      &#160;&#160;use-character-maps? = <var>qnames</var><br/>\n      &#160;&#160;version? =\n      <var>nmtoken</var>&#160;/&gt;</code></p>\n\n      <p>The <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n      declaration is optional; if used, it <span class = \"verb\">must</span> always appear as a <a title = \"top-level\" href = \"#dt-top-level\">top-level</a> element within a\n      <span>stylesheet module</span>.</p>\n\n      <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> may contain multiple <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations\n      and may include or import stylesheet modules that also\n      contain <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n      declarations. The name of an <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration is\n      the value of its <code>name</code> attribute, if any.</p>\n\n      <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-output-definition\" id = \"dt-output-definition\" title = \"output definition\"></a>All the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations in\n      a stylesheet that share the same name are grouped into a\n      named <b>output definition</b>; those that have no name are\n      grouped into a single unnamed output definition.<span class = \"definition\">]</span></p>\n\n      <p>A stylesheet always includes an unnamed <a title = \"output definition\" href = \"#dt-output-definition\">output\n      definition</a>; in the absence of an unnamed <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration,\n      the unnamed output definition is equivalent to the one that\n      would be used if the stylesheet contained an <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n      having no attributes.</p>\n\n      <p>A named <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> is used when\n      its name matches the <code>format</code> attribute used in an\n      <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      element. The unnamed output definition is used when an\n      <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      element omits the <code>format</code> attribute. It is also\n      used when serializing the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> that is created\n      implicitly in the absence of an <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      element.</p>\n\n      <p>All the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> elements making\n      up an <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> are effectively\n      merged. <span>For those attributes whose values are\n      namespace-sensitive, the merging is done after <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QNames</a>\n      have been converted into <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded QNames</a>.</span> For the\n      <code>cdata-section-elements</code> attribute, the output\n      definition uses the union of the values from all the\n      constituent <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations.\n      <span>For the <code>use-character-maps</code> attribute, the\n      output definition uses the concatenation of the sequences of\n      <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded\n      QNames</a> values from all the constituent <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations,\n      taking them in order of increasing <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n      precedence</a>, or where several have the same import\n      precedence, in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</span> For\n      other attributes, the <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> uses the value\n      of that attribute from the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n      with the highest <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>.</p>\n\n      <p><a name = \"err-XTSE1560\" id = \"err-XTSE1560\"><span class = \"error\">[ERR XTSE1560]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n      two <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n      declarations within an <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> specify\n      explicit values for the same attribute (other than\n      <code>cdata-section-elements</code> and\n      <code>use-character-maps</code>), with the values of the\n      attributes being not equal, unless there is another <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n      within the same <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> that has higher\n      import precedence and that specifies an explicit value for\n      the same attribute.</p>\n\n      <p>If none of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declarations\n      within an <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> specifies a\n      value for a particular attribute, then the corresponding\n      serialization parameter takes a default value. The default\n      value depends on the chosen output method.</p>\n\n      <p>There are some serialization parameters that apply to some\n      output methods but not to others. For example, the\n      <code>indent</code> attribute has no effect on the\n      <code>text</code> output method. If a value is supplied for\n      an attribute that is inapplicable to the output method, its\n      value is <span>not passed to the serializer</span>. The\n      processor <span class = \"verb\">may</span> validate the value of\n      such an attribute, but is not <span class = \"verb\">required</span> to do so.</p>\n\n      <p>An implementation <span class = \"verb\">may</span> allow the\n      attributes of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration to\n      be overridden, or the default values to be changed, using the\n      API that controls the transformation.</p>\n\n      <p>The location to which <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> are serialized\n      (whether in filestore or elsewhere) is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n      (which in practice <span class = \"verb\">may</span> mean that it\n      is controlled using an implementation-defined API). However,\n      these locations <span class = \"verb\">must</span> satisfy the\n      constraint that when two <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> are both\n      created (implicitly or explicitly) using relative URIs in the\n      <code>href</code> attribute of the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n      instruction, then these relative URIs may be used to\n      construct references from one tree to the other, and such\n      references <span class = \"verb\">must</span> remain valid when\n      both result trees are serialized.</p>\n\n      <p>The <code>method</code> attribute on the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> element\n      identifies the overall method that is to be used for\n      outputting the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>.</p>\n\n      <p><a name = \"err-XTSE1570\" id = \"err-XTSE1570\"><span class = \"error\">[ERR XTSE1570]</span></a> The value <span class = \"verb\">must</span> <span>(if present)</span> be a valid\n      <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the <a title = \"QName\" href = \"#dt-qname\">QName</a> does not have a prefix,\n      then it identifies a method specified in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n      Serialization]</a> and <span class = \"verb\">must</span> be one\n      of <code>xml</code>, <code>html</code>, <code>xhtml</code>,\n      or <code>text</code>. If the <a title = \"QName\" href = \"#dt-qname\">QName</a> has a prefix, then the <a title = \"QName\" href = \"#dt-qname\">QName</a> is expanded into an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>\n      as described in <a href = \"#qname\"><i>5.1 Qualified\n      Names</i></a>; the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> identifies the output\n      method; the behavior in this case is not specified by this\n      document.</p>\n\n      <p>The default for the <code>method</code> attribute\n      <span>depends on the contents of the tree being serialized,\n      and</span> is chosen as follows. If the document node of the\n      <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> has an element\n      child, and any text nodes preceding the first element child\n      of the document node of the result tree contain only\n      whitespace characters, then:</p>\n\n      <ul>\n        <li>\n          <p>If the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of this first\n          element child has local part <code>html</code> (in lower\n          case), and namespace URI\n          <code>http://www.w3.org/1999/xhtml</code>, then the\n          default output method is <span>normally</span>\n          <code>xhtml</code>. <span>However, if the\n          <code>version</code> attribute of the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element of the <a title = \"principal stylesheet module\" href = \"#dt-principal-stylesheet-module\">principal\n          stylesheet module</a> has the value <code>1.0</code>, and\n          if the result tree is generated implicitly (rather than\n          by an explicit <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction), then the default output method in this\n          situation is <code>xml</code>.</span></p>\n        </li>\n\n        <li>\n          <p>If the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of this first\n          element child has local part <code>html</code> (in any\n          combination of upper and lower case) and a null namespace\n          URI, then the default output method is\n          <code>html</code>.</p>\n        </li>\n      </ul>\n\n      <p>In all other cases, the default output method is\n      <code>xml</code>.</p>\n\n      <p>The default output method is used if the selected\n      <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> does not\n      include a <code>method</code> attribute.</p>\n\n      <p>The other attributes on <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> provide\n      parameters for the output method. The following attributes\n      are allowed:</p>\n\n      <ul>\n        <li>\n          <p>The value of the <code>encoding</code> attribute\n          provides the value of the <code>encoding</code> parameter\n          to the serialization method. The default value is\n          <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>,\n          but in the case of the <code>xml</code> and\n          <code>xhtml</code> methods it <span class = \"verb\">must</span> be either <code>UTF-8</code> or\n          <code>UTF-16</code>.</p>\n        </li>\n\n        <li>\n          <p>The <code>byte-order-mark</code> attribute defines\n          whether a byte order mark is written at the start of the\n          file. If the value <code>yes</code> is specified, a byte\n          order mark is written; if <code>no</code> is specified,\n          no byte order mark is written. The default value depends\n          on the encoding used. If the encoding is\n          <code>UTF-16</code>, the default is <code>yes</code>; for\n          <code>UTF-8</code> it is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>,\n          and for all other encodings it is <code>no</code>. The\n          value of the byte order mark indicates whether high order\n          bytes are written before or after low order bytes; the\n          actual byte order used is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a><span>\n          , unless it is defined by the selected\n          encoding</span>.</p>\n        </li>\n\n        <li>\n          <p>The <code>cdata-section-elements</code> attribute is a\n          whitespace-separated list of QNames. The default value is\n          an empty list. After expansion of these names using the\n          in-scope namespace declarations for the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n          in which they appear, this list of names provides the\n          value of the <code>cdata-section-elements</code>\n          parameter to the serialization method. <span>In the case\n          of an unprefixed name, the default namespace (that is,\n          the namespace declared using <code>xmlns=\"uri\"</code>) is\n          used.</span></p>\n\n          <div class = \"note\">\n            <p class = \"prefix\"><b>Note:</b></p>\n\n            <p>This differs from the rule for most other QNames\n            used in a stylesheet. The reason is that these names\n            refer to elements in the result document, and therefore\n            follow the same convention as the name of a literal\n            result element or the <code>name</code> attribute of\n            <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>.</p>\n          </div>\n        </li>\n\n        <li>\n          <p>The value of the <code>doctype-system</code> attribute\n          provides the value of the <code>doctype-system</code>\n          parameter to the serialization method. By default, the\n          parameter is not supplied.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>doctype-public</code> attribute\n          provides the value of the <code>doctype-public</code>\n          parameter to the serialization method. By default, the\n          parameter is not supplied.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>escape-uri-attributes</code>\n          attribute provides the value of the\n          <code>escape-uri-attributes</code> parameter to the\n          serialization method. The default value is\n          <code>yes</code>.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>include-content-type</code>\n          attribute provides the value of the\n          <code>include-content-type</code> parameter to the\n          serialization method. The default value is\n          <code>yes</code>.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>indent</code> attribute\n          provides the value of the <code>indent</code> parameter\n          to the serialization method. The default value is\n          <code>yes</code> in the case of the <code>html</code> and\n          <code>xhtml</code> output methods, <code>no</code> in the\n          case of the <code>xml</code> output method.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>media-type</code> attribute\n          provides the value of the <code>media-type</code>\n          parameter to the serialization method. The default value\n          is <code>text/xml</code> in the case of the\n          <code>xml</code> output method, <code>text/html</code> in\n          the case of the <code>html</code> and <code>xhtml</code>\n          output methods, and <code>text/plain</code> in the case\n          of the <code>text</code> output method.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>normalization-form</code>\n          attribute provides the value of the\n          <code>normalization-form</code> parameter to the\n          serialization method. A value that is an\n          <code>NMTOKEN</code> other than one of those enumerated\n          for the <code>normalization-form</code> attribute\n          specifes an implementation-defined normalization form;\n          the behavior in this case is not specified by this\n          document. The default value is <code>none</code>.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>omit-xml-declaration</code>\n          attribute provides the value of the\n          <code>omit-xml-declaration</code> parameter to the\n          serialization method. The default value is\n          <code>no</code>.</p>\n        </li>\n\n        <li>\n          <p>The value of the <code>standalone</code> attribute\n          provides the value of the <code>standalone</code>\n          parameter to the serialization method. <span>The default\n          value is <code>omit</code>; this means that no\n          <code>standalone</code> attribute is to be included in\n          the XML declaration.</span></p>\n        </li>\n\n        <li>\n          <p>The <code>undeclare-prefixes</code> attribute is\n          relevant only when producing output with\n          <code>method=\"xml\"</code> and <code>version=\"1.1\"</code>\n          <span>(or later)</span>. It defines whether namespace\n          undeclarations (of the form <code>xmlns:foo=\"\"</code>)\n          <span class = \"verb\">should</span> be output when a child\n          element has no namespace node with the same name (that\n          is, namespace prefix) as a namespace node of its parent\n          element. The default value is <code>no</code>: this means\n          that namespace undeclarations are not output, which has\n          the effect that when the resulting XML is reparsed, the\n          new tree may contain namespace nodes on the child element\n          that were not there in the original tree before\n          serialization.</p>\n        </li>\n\n        <li>\n          <p>The <code>use-character-maps</code> attribute provides\n          a list of named character maps that are used in\n          conjunction with this <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>. The way\n          this attribute is used is described in <a href = \"#character-maps\"><i>20.1 Character Maps</i></a>.\n          <span>The default value is an empty list.</span></p>\n        </li>\n\n        <li>\n          <p>The value of the <code>version</code> attribute\n          provides the value of the <code>version</code> parameter\n          to the serialization method. <span>The set of permitted\n          values, and the default value, are <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          A <a title = \"serialization error\" href = \"#dt-serialization-error\">serialization error</a> will be\n          reported if the requested version is not supported by the\n          implementation.</span></p>\n        </li>\n      </ul>\n\n      <p>If the processor performs serialization, then it must\n      signal any non-recoverable serialization errors that occur.\n      These have the same effect as <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n      errors</a>: that is, the processor must signal the error and\n      must not finish as if the transformation had been\n      successful.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"character-maps\" id = \"character-maps\"></a>20.1\n        Character Maps</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-character-map\" id = \"dt-character-map\" title = \"character map\"></a>A <b>character map</b> allows a\n        specific character appearing in a text or attribute node in\n        the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> to be\n        substituted by a specified string of characters during\n        serialization.<span class = \"definition\">]</span> The effect\n        of character maps is defined in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n        Serialization]</a>.</p>\n\n        <p>The character map that is supplied as a parameter to the\n        serializer is determined from the <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        elements referenced from the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> declaration\n        for the selected <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>.</p>\n\n        <p>The <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        element is a declaration that may appear as a child of the\n        <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n        element.</p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-character-map\" id = \"XSLT_element-character-map\"></a><code>&lt;!-- Category:\n        declaration --&gt;<br/>\n        &lt;xsl:character-map<br/>\n        &#160;&#160;<b>name</b> = <var>qname</var><br/>\n        &#160;&#160;use-character-maps? =\n        <var>qnames</var>&gt;<br/>\n        &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-output-character\">xsl:output-character</a>*)\n        --&gt;<br/>\n        &lt;/xsl:character-map&gt;</code></p>\n\n        <p>The <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declaration declares a character map with a name and a set\n        of character mappings. The character mappings are specified\n        by means of <a href = \"#XSLT_element-output-character\"><code>xsl:output-character</code></a>\n        elements contained either directly within the <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        element, or in further character maps referenced in the\n        <code>use-character-maps</code> attribute.</p>\n\n        <p>The <span class = \"verb\">required</span> <code>name</code>\n        attribute provides a name for the character map. When a\n        character map is used by an <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> or\n        another character map, the character map with the highest\n        <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> is used.</p>\n\n        <p><a name = \"err-XTSE1580\" id = \"err-XTSE1580\"><span class = \"error\">[ERR XTSE1580]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains two or more\n        character maps with the same name and the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import\n        precedence</a><span>, unless it also contains another\n        character map with the same name and higher import\n        precedence.</span></p>\n\n        <p>The optional <code>use-character-maps</code> attribute\n        lists the names of further character maps that are included\n        into this character map.</p>\n\n        <p><a name = \"err-XTSE1590\" id = \"err-XTSE1590\"><span class = \"error\">[ERR XTSE1590]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a name in the <code>use-character-maps</code> attribute\n        <span>of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> or <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        elements</span> does not match the <code>name</code>\n        attribute of any <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n\n        <p><a name = \"err-XTSE1600\" id = \"err-XTSE1600\"><span class = \"error\">[ERR XTSE1600]</span></a> It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        a character map references itself, directly or indirectly,\n        via a name in the <code>use-character-maps</code>\n        attribute.</p>\n\n        <p>It is not an error if the same character map is\n        referenced more than once, directly or indirectly.</p>\n\n        <p>An <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>, after\n        recursive expansion of character maps referenced via its\n        <code>use-character-maps</code> attribute, may contain\n        several mappings for the same character. In this situation,\n        the last character mapping takes precedence. To establish\n        the ordering, the following rules are used:</p>\n\n        <ul>\n          <li>\n            <p>Within a single <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n            element, the characters defined in character maps\n            referenced in the <code>use-character-maps</code>\n            attribute are considered before the characters defined\n            in the child <a href = \"#XSLT_element-output-character\"><code>xsl:output-character</code></a>\n            elements.</p>\n          </li>\n\n          <li>\n            <p>The character maps referenced in a single\n            <code>use-character-maps</code> attribute are\n            considered in the order in which they are listed in\n            that attribute. The expansion is depth-first: each\n            referenced character map is fully expanded before the\n            next one is considered.</p>\n          </li>\n\n          <li>\n            <p>Two <a href = \"#XSLT_element-output-character\"><code>xsl:output-character</code></a>\n            elements appearing as children of the same <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n            element are considered in document order.</p>\n          </li>\n        </ul>\n\n        <p>The <a href = \"#XSLT_element-output-character\"><code>xsl:output-character</code></a>\n        element is defined as follows:</p>\n\n        <p class = \"element-syntax\"><a name = \"XSLT_element-output-character\" id = \"XSLT_element-output-character\"></a><code>&lt;xsl:output-character<br/>\n\n        &#160;&#160;<b>character</b> = <var>char</var><br/>\n        &#160;&#160;<b>string</b> =\n        <var>string</var>&#160;/&gt;</code></p>\n\n        <p>The character map that is passed as a parameter to the\n        serializer contains a mapping for the character specified\n        in the <code>character</code> attribute to the string\n        specified in the <code>string</code> attribute.</p>\n\n        <p>Character mapping is not applied to characters for which\n        output escaping has been disabled as described in <a href = \"#disable-output-escaping\"><i>20.2 Disabling Output\n        Escaping</i></a>.</p>\n\n        <p>If a character is mapped, then it is not subjected to\n        XML or HTML escaping.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e29242\" id = \"d5e29242\"></a>Example: Using\n            Character Maps to Generate Non-XML Output\n          </div>\n\n          <p>Character maps can be useful when producing serialized\n          output in a format that resembles, but is not strictly\n          conformant to, HTML or XML. For example, when the output\n          is a JSP page, there might be a need to generate the\n          output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;jsp:setProperty name=\"user\" property=\"id\" value='&lt;%= \"id\" + idValue %&gt;'/&gt;\n</pre>\n          </div>\n\n          <p>Although this output is not well-formed XML or HTML,\n          it is valid in Java Server Pages. This can be achieved by\n          allocating three Unicode characters (which are not needed\n          for any other purpose) to represent the strings\n          <code>&lt;%</code>, <code>%&gt;</code>, and\n          <code>\"</code>, for example:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:character-map name=\"jsp\"&gt;\n  &lt;xsl:output-character character=\"«\" string=\"&amp;lt;%\"/&gt;   \n  &lt;xsl:output-character character=\"»\" string=\"%&amp;gt;\"/&gt;\n  &lt;xsl:output-character character=\"§\" string='\"'/&gt;\n&lt;/xsl:character-map&gt;\n</pre>\n          </div>\n\n          <p>When this character map is referenced in the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          declaration, the required output can be produced by\n          writing the following in the stylesheet:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;jsp:setProperty name=\"user\" property=\"id\" value='«= §id§ + idValue »'/&gt;\n</pre>\n          </div>\n\n          <p>This works <span>on the assumption that</span> when an\n          apostrophe or quotation mark is generated as part of an\n          attribute value by the use of character maps, the\n          serializer will (where possible) use the other choice of\n          delimiter around the attribute value.</p>\n        </div>\n\n        <p>&#160;</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e29274\" id = \"d5e29274\"></a>Example:\n            Constructing a Composite Character Map\n          </div>\n\n          <p>The following example illustrates a composite\n          character map constructed in a modular fashion:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:output name=\"htmlDoc\" use-character-maps=\"htmlDoc\" /&gt;\n\n&lt;xsl:character-map name=\"htmlDoc\"\n  use-character-maps=\"html-chars doc-entities windows-format\" /&gt;\n  \n&lt;xsl:character-map name=\"html-chars\"\n  use-character-maps=\"latin1 ...\" /&gt;\n\n&lt;xsl:character-map name=\"latin1\"&gt;\n  &lt;xsl:output-character character=\"&amp;#160;\" string=\"&amp;amp;nbsp;\" /&gt;\n  &lt;xsl:output-character character=\"&amp;#161;\" string=\"&amp;amp;iexcl;\" /&gt;\n  ...\n&lt;/xsl:character-map&gt;\n\n&lt;xsl:character-map name=\"doc-entities\"&gt;\n  &lt;xsl:output-character character=\"&amp;#xE400;\" string=\"&amp;amp;t-and-c;\" /&gt;\n  &lt;xsl:output-character character=\"&amp;#xE401;\" string=\"&amp;amp;chap1;\" /&gt;\n  &lt;xsl:output-character character=\"&amp;#xE402;\" string=\"&amp;amp;chap2;\" /&gt;\n  ...\n&lt;/xsl:character-map&gt;\n\n&lt;xsl:character-map name=\"windows-format\"&gt;\n  &lt;!-- newlines as CRLF --&gt;\n  &lt;xsl:output-character character=\"&amp;#xA;\" string=\"&amp;#xD;&amp;#xA;\" /&gt;\n\n  &lt;!-- tabs as three spaces --&gt;\n  &lt;xsl:output-character character=\"&amp;#x9;\" string=\"   \" /&gt;\n\n  &lt;!-- images for special characters --&gt;\n  &lt;xsl:output-character character=\"&amp;#xF001;\"\n    string=\"&amp;lt;img src='special1.gif' /&amp;gt;\" /&gt;\n  &lt;xsl:output-character character=\"&amp;#xF002;\"\n    string=\"&amp;lt;img src='special2.gif' /&amp;gt;\" /&gt;\n  ...\n&lt;/xsl:character-map&gt;\n</pre>\n          </div>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"disable-output-escaping\" id = \"disable-output-escaping\"></a>20.2 Disabling Output\n        Escaping</h3>\n\n        <p>Normally, when using the XML, HTML, or XHTML output\n        method, the serializer will escape special characters such\n        as <code>&amp;</code> and <code>&lt;</code> when outputting\n        text nodes. This ensures that the output is well-formed.\n        However, it is sometimes convenient to be able to produce\n        output that is almost, but not quite well-formed XML; for\n        example, the output may include ill-formed sections which\n        are intended to be transformed into well-formed XML by a\n        subsequent non-XML-aware process. For this reason, XSLT\n        defines a mechanism for disabling output escaping.</p>\n\n        <p>This feature is <a title = \"deprecated\" href = \"#dt-deprecated\">deprecated</a>.</p>\n\n        <p>This is an optional feature: it is not <span class = \"verb\">required</span> that a XSLT processor that\n        implements the serialization option <span class = \"verb\">should</span> offer the ability to disable output\n        escaping, and there is no conformance level that requires\n        this feature.</p>\n\n        <p>This feature requires an extension to the serializer\n        described in <a href = \"#xslt-xquery-serialization\">[XSLT and\n        XQuery Serialization]</a>. Conceptually, the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a> provides an additional boolean property\n        <code>disable-escaping</code> associated with every\n        character in a text node. When this property is set, the\n        normal action of the serializer to escape special\n        characters such as <code>&amp;</code> and <code>&lt;</code>\n        is suppressed.</p>\n\n        <p>An <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> or\n        <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> element\n        may have a <code>disable-output-escaping</code> attribute;\n        the allowed values are <code>yes</code> or <code>no</code>.\n        The default is <code>no</code>; if the value is\n        <code>yes</code>, then every character in the text node\n        generated by evaluating the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> or\n        <a href = \"#XSLT_element-text\"><code>xsl:text</code></a> element\n        <span class = \"verb\">should</span> have the\n        <code>disable-output</code> property set.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e29357\" id = \"d5e29357\"></a>Example: Disable\n            Output Escaping\n          </div>\n\n          <p>For example,</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;xsl:text disable-output-escaping=\"yes\"&gt;&amp;lt;&lt;/xsl:text&gt;\n</pre>\n          </div>\n\n          <p>should generate the single character\n          <code>&lt;</code>.</p>\n        </div>\n\n        <p>If output escaping is disabled for an <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> or\n        <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n        instruction evaluated when <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output state</a> is\n        in effect, the request to disable output escaping is\n        ignored.</p>\n\n        <p>If output escaping is disabled for text within an\n        element that would normally be output using a CDATA\n        section, because the element is listed in the\n        <code>cdata-section-elements</code>, then the relevant text\n        will not be included in a CDATA section. In effect, CDATA\n        is treated as an alternative escaping mechanism, which is\n        disabled by the <code>disable-output-escaping</code>\n        option.</p>\n\n        <div class = \"example\">\n          <div class = \"exampleHeader\">\n            <a name = \"d5e29388\" id = \"d5e29388\"></a>Example:\n            Interaction of Output Escaping and CDATA\n          </div>\n\n          <p>For example, if <code>&lt;xsl:output\n          cdata-section-elements=\"title\"/&gt;</code> is specified,\n          then the following instructions:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;title&gt;\n  &lt;xsl:text disable-output-escaping=\"yes\"&gt;This is not &amp;lt;hr/&amp;gt; good coding practice&lt;/xsl:text&gt;\n&lt;/title&gt;\n</pre>\n          </div>\n\n          <p>should generate the output:</p>\n\n          <div class = \"exampleInner\">\n            <pre>\n&lt;title&gt;&lt;![CDATA[This is not ]]&gt;&lt;hr/&gt;&lt;![CDATA[ good coding practice]]&gt;&lt;/title&gt;\n</pre>\n          </div>\n        </div>\n\n        <p>The <code>disable-output-escaping</code> attribute may\n        be used with the <code>html</code> output method as well as\n        with the <code>xml</code> output method. The\n        <code>text</code> output method ignores the\n        <code>disable-output-escaping</code> attribute, since it\n        does not perform any output escaping.</p>\n\n        <p>A <a title = \"processor\" href = \"#dt-processor\">processor</a> will only be able to disable\n        output escaping if it controls how the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n        result tree</a> is output. This might not always be the\n        case. For example, the result tree might be used as a\n        <a title = \"source tree\" href = \"#dt-source-tree\">source\n        tree</a> for another XSLT transformation instead of being\n        output. It is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n        whether (and under what circumstances) disabling output\n        escaping is supported.</p>\n\n        <p><a name = \"err-XTRE1620\" id = \"err-XTRE1620\"><span class = \"error\">[ERR XTRE1620]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if an\n        <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n        or <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n        instruction specifies that output escaping is to be\n        disabled and the implementation does not support this. The\n        <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is to ignore the <code>disable-output-escaping</code>\n        attribute.</p>\n\n        <p><a name = \"err-XTRE1630\" id = \"err-XTRE1630\"><span class = \"error\">[ERR XTRE1630]</span></a> It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if an\n        <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n        or <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n        instruction specifies that output escaping is to be\n        disabled when writing to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> that is\n        not being serialized. The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery action</a>\n        is to ignore the <code>disable-output-escaping</code>\n        attribute.</p>\n\n        <p>If output escaping is disabled for a character that is\n        not representable in the encoding that the <a title = \"processor\" href = \"#dt-processor\">processor</a> is using for\n        output, the request to disable output escaping is ignored\n        in respect of that character.</p>\n\n        <p>Since disabling output escaping might not work with all\n        implementations and can result in XML that is not\n        well-formed, it <span class = \"verb\">should</span> be used\n        only when there is no alternative.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The facility to define character maps for use during\n          serialization, as described in <a href = \"#character-maps\"><i>20.1 Character Maps</i></a>, has\n          been produced as an alternative mechanism that can be\n          used in many situations where disabling of output\n          escaping was previously necessary, without the same\n          difficulties.</p>\n        </div>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"conformance\" id = \"conformance\"></a>21\n      Conformance</h2>\n\n      <p>A <a title = \"processor\" href = \"#dt-processor\">processor</a>\n      that claims conformance with this specification <span class = \"verb\">must</span> claim conformance either as a <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic\n      XSLT processor</a> or as a <a title = \"schema-aware XSLT processor\" href = \"#dt-schema-aware-xslt-processor\">schema-aware XSLT\n      processor</a>. The rules for these two conformance levels are\n      defined in the following sections.</p>\n\n      <p>A processor that claims conformance at either of these two\n      levels <span class = \"verb\">may</span> additionally claim\n      conformance with either or both of the following optional\n      features: the serialization feature, defined in <a href = \"#serialization-feature\"><i>21.3 Serialization\n      Feature</i></a>, and the backwards compatibility feature,\n      defined in <a href = \"#backwards-compatibility-feature\"><i>21.4\n      Backwards Compatibility Feature</i></a>.</p>\n\n      <div class = \"note\">\n        <p class = \"prefix\"><b>Note:</b></p>\n\n        <p>There is no conformance level or feature defined in this\n        specification that requires implementation of the static\n        typing features described in <a href = \"#xpath20\">[XPath\n        2.0]</a>. An XSLT processor may provide a user option to\n        invoke static typing, but to be conformant with this\n        specification it must allow a stylesheet to be processed\n        with static typing disabled. The interaction of XSLT\n        stylesheets with the static typing feature of XPath 2.0 has\n        not been specified, so the results of using static typing,\n        if available, are implementation-defined.</p>\n      </div>\n\n      <p>An XSLT processor takes as its inputs a stylesheet and one\n      or more <span>XDM trees conforming to</span> the data model\n      defined in <a href = \"#xpath-datamodel\">[Data Model]</a>. It is\n      not <span class = \"verb\">required</span> that the processor\n      supports any particular method of constructing <span>XDM\n      trees</span>, but conformance can only be tested if it\n      provides a mechanism that enables <span>XDM trees</span>\n      representing the stylesheet and primary source document to be\n      constructed and supplied as input to the processor.</p>\n\n      <p>The output of the XSLT processor consists of\n      <span>zero</span> or more <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a>. It is not\n      <span class = \"verb\">required</span> that the processor\n      supports any particular method of accessing a final result\n      tree, but if it does not support the serialization module,\n      conformance can only be tested if it provides some\n      alternative mechanism that enables access to the results of\n      the transformation.</p>\n\n      <p>Certain facilities in this specification are described as\n      producing <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n      results. A claim that asserts conformance with this\n      specification <span class = \"verb\">must</span> be accompanied\n      by documentation stating the effect of each\n      implementation-defined feature. For convenience, a\n      non-normative checklist of implementation-defined features is\n      provided at <a href = \"#implementation-defined-features\"><i>F\n      Checklist of Implementation-Defined Features</i></a>.</p>\n\n      <p>A conforming <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">must</span>\n      signal any <a title = \"static error\" href = \"#dt-static-error\">static error</a> occurring in the\n      stylesheet, or in any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>, except where specified\n      otherwise either for individual error conditions or under the\n      general provisions for <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards compatible\n      behavior</a> (see <a href = \"#forwards\"><i>3.9\n      Forwards-Compatible Processing</i></a>). After signaling such\n      an error, the processor <span class = \"verb\">may</span>\n      continue for the purpose of signaling additional errors, but\n      <span class = \"verb\">must</span> terminate abnormally without\n      performing any transformation.</p>\n\n      <p>When a <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a> occurs during the\n      course of a transformation, the action depends on whether the\n      error is classified as a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable error</a>. If a\n      non-recoverable error occurs, the processor <span class = \"verb\">must</span> signal it and <span class = \"verb\">must</span> eventually terminate abnormally. If a\n      recoverable error occurs, the processor <span class = \"verb\">must</span> either signal it and terminate abnormally,\n      or it <span class = \"verb\">must</span> take the defined\n      recovery action and continue processing.</p>\n\n      <p>Some errors, notably <a title = \"type errors\" href = \"#dt-type-error\">type errors</a>, <span class = \"verb\">may</span> be treated as <a title = \"static error\" href = \"#dt-static-error\">static errors</a> or <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic errors</a>\n      at the discretion of the processor.</p>\n\n      <p>A conforming processor <span class = \"verb\">may</span>\n      impose limits on the processing resources consumed by the\n      processing of a stylesheet.</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"basic-conformance\" id = \"basic-conformance\"></a>21.1 Basic XSLT Processor</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-basic-xslt-processor\" id = \"dt-basic-xslt-processor\" title = \"basic XSLT processor\"></a>A <b>basic XSLT\n        processor</b> is an XSLT processor that implements all the\n        mandatory requirements of this specification with the\n        exception of certain explicitly-identified constructs\n        related to schema processing.<span class = \"definition\">]</span> These constructs are listed\n        below.</p>\n\n        <p>The mandatory requirements of this specification are\n        taken to include the mandatory requirements of XPath 2.0,\n        as described in <a href = \"#xpath20\">[XPath 2.0]</a>. A\n        requirement is mandatory unless the specification includes\n        wording (such as the use of the words <span class = \"verb\">should</span> or <span class = \"verb\">may</span>) that\n        clearly indicates that it is optional.</p>\n\n        <p>A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n        <span class = \"verb\">must</span> enforce the following\n        restrictions. It <span class = \"verb\">must</span> signal a\n        static or dynamic error when the restriction is violated,\n        as described below.</p>\n\n        <p><a name = \"err-XTSE1650\" id = \"err-XTSE1650\"><span class = \"error\">[ERR XTSE1650]</span></a> A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n        <span class = \"verb\">must</span> signal a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> includes an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n        declaration.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>A processor that rejects an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          declaration will also reject any reference to a\n          user-defined type defined in a schema, or to a\n          user-defined element or attribute declaration; it will\n          not, however, reject references to the built-in types\n          listed in <a href = \"#built-in-types\"><i>3.13 Built-in\n          Types</i></a>.</p>\n        </div>\n\n        <p><a name = \"err-XTSE1660\" id = \"err-XTSE1660\"><span class = \"error\">[ERR XTSE1660]</span></a> A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n        <span class = \"verb\">must</span> signal a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if\n        the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> includes an\n        <code>[xsl:]type</code> attribute, or an\n        <code>[xsl:]validation</code> or\n        <code>default-validation</code> attribute with a value\n        other than <code>strip</code>.</p>\n\n        <p>A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n        constrains the data model as follows:</p>\n\n        <ul>\n          <li>\n            <p>Atomic values <span class = \"verb\">must</span> belong\n            to one of the atomic types listed in <a href = \"#built-in-types\"><i>3.13 Built-in Types</i></a>\n            (except as noted below).</p>\n\n            <p>An atomic value may also belong to an\n            implementation-defined type that has been added to the\n            context for use with <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>\n            or <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n            instructions</a>.</p>\n\n            <p>The set of constructor functions available are\n            limited to those that construct values of the above\n            atomic types.</p>\n\n            <p>The static context, which defines the full set of\n            type names recognized by an XSLT processor and also by\n            the XPath processor, includes these atomic types, plus\n            <code>xs:anyType</code>, <code>xs:anySimpleType</code>,\n            <span><code>xs:untyped</code></span>, and\n            <span><code>xs:anyAtomicType</code></span>.</p>\n          </li>\n\n          <li>\n            <p>Element nodes <span class = \"verb\">must</span> be\n            annotated with the <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a>\n            <span><code>xs:untyped</code></span>, and attribute\n            nodes with the type annotation\n            <code>xs:untypedAtomic</code>.</p>\n          </li>\n        </ul>\n\n        <p><a name = \"err-XTDE1665\" id = \"err-XTDE1665\"><span class = \"error\">[ERR XTDE1665]</span></a> A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n        <span class = \"verb\">must</span> raise a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if the input to the processor includes a node\n        with a <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> other than\n        <span><code>xs:untyped</code></span> or\n        <span><code>xs:untypedAtomic</code></span>, or an atomic\n        value of a type other than those which a basic XSLT\n        processor supports. <span>This error will not arise if the\n        <code>input-type-annotations</code> attribute is set to\n        <code>strip</code>.</span></p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>Although this is expressed in terms of a requirement\n          to detect invalid input, an alternative approach is for a\n          basic XSLT processor to prevent this error condition\n          occurring, by not providing any interfaces that would\n          allow the situation to arise. A processor might, for\n          example, implement a mapping from the PSVI to the data\n          model that loses all non-trivial <a title = \"type annotation\" href = \"#dt-annotation\">type\n          annotations</a>; or it might not accept input from a PSVI\n          at all.</p>\n\n          <p>The phrase <em>input to the processor</em> is\n          deliberately wide: it includes the tree containing the\n          <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>,\n          trees passed as <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>,\n          trees accessed using the <a href = \"#function-document\"><code>document</code></a>, <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n          <small>FO</small></sup>, and <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n          collection</code></a><sup><small>FO</small></sup>\n          functions, and trees returned by <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a> and\n          <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n          instructions</a>.</p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"schema-aware-conformance\" id = \"schema-aware-conformance\"></a>21.2 Schema-Aware XSLT\n        Processor</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-schema-aware-xslt-processor\" id = \"dt-schema-aware-xslt-processor\" title = \"schema-aware XSLT processor\"></a>A <b>schema-aware XSLT\n        processor</b> is an XSLT processor that implements all the\n        mandatory requirements of this specification, including\n        those features that a <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a> signals\n        as an error. The mandatory requirements of this\n        specification are taken to include the mandatory\n        requirements of XPath 2.0, as described in <a href = \"#xpath20\">[XPath 2.0]</a>. A requirement is mandatory\n        unless the specification includes wording (such as the use\n        of the words <span class = \"verb\">should</span> or\n        <span class = \"verb\">may</span>) that clearly indicates that\n        it is optional.<span class = \"definition\">]</span></p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"serialization-feature\" id = \"serialization-feature\"></a>21.3 Serialization Feature</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-serialization-feature\" id = \"dt-serialization-feature\" title = \"serialization feature\"></a>A processor that claims\n        conformance with the <b>serialization feature</b>\n        <span class = \"verb\">must</span> support the conversion of a\n        <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> to a sequence\n        of <span>octets</span> following the rules defined in\n        <a href = \"#serialization\"><i>20\n        Serialization</i></a>.<span class = \"definition\">]</span> It\n        <span class = \"verb\">must</span> respect all the attributes\n        of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> and <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declarations, and <span class = \"verb\">must</span> provide\n        all four output methods, <code>xml</code>,\n        <code>xhtml</code>, <code>html</code>, and\n        <code>text</code>. Where the specification uses words such\n        as <span class = \"verb\">must</span> and <span class = \"verb\">required</span>, then it <span class = \"verb\">must</span> serialize the result tree in precisely\n        the way described; in other cases it <span class = \"verb\">may</span> use an alternative, equivalent\n        representation.</p>\n\n        <p>A processor may claim conformance with the serialization\n        feature whether or not it supports the setting\n        <code>disable-output-escaping=\"yes\"</code> on <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>, or <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>.</p>\n\n        <p>A processor that does not claim conformance with the\n        serialization feature <span class = \"verb\">must not</span>\n        signal an error merely because the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> contains <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> or <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n        declarations, <span>or serialization attributes on the\n        <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n        instruction. Such a processor <span class = \"verb\">may</span>\n        check that these declarations and attributes have valid\n        values, but is not <span class = \"verb\">required</span> to do\n        so. Apart from optional validation,</span> these\n        declarations <span class = \"verb\">should</span> be\n        ignored.</p>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"backwards-compatibility-feature\" id = \"backwards-compatibility-feature\"></a>21.4 Backwards\n        Compatibility Feature</h3>\n\n        <p><span class = \"definition\">[Definition:&#160;</span><a name = \"dt-backwards-compatibility-feature\" id = \"dt-backwards-compatibility-feature\" title = \"backwards compatibility feature\"></a>A processor that\n        claims conformance with the <b>backwards compatibility\n        feature</b> <span class = \"verb\">must</span> support the\n        processing of stylesheet instructions and XPath expressions\n        with <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n        behavior</a>, as defined in <a href = \"#backwards\"><i>3.8\n        Backwards-Compatible Processing</i></a>.<span class = \"definition\">]</span></p>\n\n        <p>Note that a processor that does not claim conformance\n        with the backwards compatibility feature <span class = \"verb\">must</span> raise a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n        error</a> if an instruction is evaluated containing an\n        <code>[xsl:]version</code> attribute that invokes backwards\n        compatible behavior <span class = \"error\">[see <a href = \"#err-XTDE0160\">ERR XTDE0160</a>]</span>.</p>\n\n        <div class = \"note\">\n          <p class = \"prefix\"><b>Note:</b></p>\n\n          <p>The reason this is a dynamic error rather than a\n          static error is to allow stylesheets to contain\n          conditional logic, following different paths depending on\n          whether the XSLT processor implements XSLT 1.0 or XSLT\n          2.0. The selection of which path to use can be controlled\n          by using the <a href = \"#function-system-property\"><code>system-property</code></a>\n          function to test the <code>xsl:version</code> system\n          property.</p>\n        </div>\n\n        <p>A processor that claims conformance with the backwards\n        compatibility feature <span class = \"verb\">must</span> permit\n        the use of the namespace axis in XPath expressions when\n        backwards compatible behavior is enabled. In all other\n        circumstances, support for the namespace axis is\n        optional.</p>\n      </div>\n    </div>\n  </div><div class = \"back\">\n    <div class = \"div1\">\n      <h2><a name = \"references\" id = \"references\"></a>A\n      References</h2>\n\n      <div class = \"div2\">\n        <h3><a name = \"normative-references\" id = \"normative-references\"></a>A.1 Normative References</h3>\n\n        <dl>\n          <dt class = \"label\"><span><a name = \"xpath-datamodel\" id = \"xpath-datamodel\"></a>Data Model</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xpath-datamodel/\"><cite>XQuery\n              1.0 and XPath 2.0 Data Model (XDM)</cite></a>, Norman\n              Walsh, Mary Fernández, Ashok Malhotra, <em>et.\n              al.</em>, Editors. World Wide Web Consortium, 23 Jan\n              2007. This version is\n              http://www.w3.org/TR/2007/REC-xpath-datamodel-20070123/.\n              The <a href = \"http://www.w3.org/TR/xpath-datamodel/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xpath-datamodel/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xpath-functions\" id = \"xpath-functions\"></a>Functions and Operators</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xpath-functions/\"><cite>XQuery\n              1.0 and XPath 2.0 Functions and Operators</cite></a>,\n              Ashok Malhotra, Jim Melton, and Norman Walsh,\n              Editors. World Wide Web Consortium, 23 Jan 2007. This\n              version is\n              http://www.w3.org/TR/2007/REC-xpath-functions-20070123/.\n              The <a href = \"http://www.w3.org/TR/xpath-functions/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xpath-functions/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xml-infoset\" id = \"xml-infoset\"></a>XML Information Set</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml-infoset\"><cite>XML\n              Information Set (Second Edition)</cite></a>, John\n              Cowan and Richard Tobin, Editors. World Wide Web\n              Consortium, 04&#160;Feb&#160;2004. This version is\n              http://www.w3.org/TR/2004/REC-xml-infoset-20040204.\n              The <a href = \"http://www.w3.org/TR/xml-infoset\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xml-infoset.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"ISO3166\" id = \"ISO3166\"></a>ISO 3166-1</span></dt>\n\n          <dd>\n            <div>\n              ISO (International Organization for Standardization)\n              <em>Codes for the representation of names of\n              countries and their subdivisions - Part 1: Country\n              codes</em> ISO 3166-1:1997.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"ISO8601\" id = \"ISO8601\"></a>ISO 8601</span></dt>\n\n          <dd>\n            <div>\n              ISO (International Organization for Standardization)\n              <em>Data elements and interchange formats -\n              Information interchange - Representation of dates and\n              times.</em> ISO 8601:2000(E), Second edition,\n              2000-12-15.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xslt-xquery-serialization\" id = \"xslt-xquery-serialization\"></a>XSLT and XQuery\n          Serialization</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xslt-xquery-serialization/\"><cite>\n              XSLT 2.0 and XQuery 1.0 Serialization</cite></a>,\n              Joanne Tong, Michael Kay, Norman Walsh, <em>et.\n              al.</em>, Editors. World Wide Web Consortium, 23 Jan\n              2007. This version is\n              http://www.w3.org/TR/2007/REC-xslt-xquery-serialization-20070123/.\n              The <a href = \"http://www.w3.org/TR/xslt-xquery-serialization/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xslt-xquery-serialization/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"REC-xml\" id = \"REC-xml\"></a>XML 1.0</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml\"><cite>Extensible\n              Markup Language (XML) 1.0 (Fourth\n              Edition)</cite></a>, Eve Maler, Jean Paoli, François\n              Yergeau, <em>et. al.</em>, Editors. World Wide Web\n              Consortium, 16&#160;Aug&#160;2006. This version is\n              http://www.w3.org/TR/2006/REC-xml-20060816. The\n              <a href = \"http://www.w3.org/TR/xml\">latest version</a>\n              is available at http://www.w3.org/TR/xml.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xml11\" id = \"xml11\"></a>XML 1.1</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml11/\"><cite>Extensible Markup\n              Language (XML) 1.1 (Second Edition)</cite></a>, Tim\n              Bray, John Cowan, Jean Paoli, <em>et. al.</em>,\n              Editors. World Wide Web Consortium,\n              16&#160;Aug&#160;2006. This version is\n              http://www.w3.org/TR/2006/REC-xml11-20060816. The\n              <a href = \"http://www.w3.org/TR/xml11/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xml11/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xmlbase\" id = \"xmlbase\"></a>XML Base</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xmlbase/\"><cite>XML\n              Base</cite></a>, Jonathan Marsh, Editor. World Wide\n              Web Consortium, 27&#160;Jun&#160;2001. This version\n              is http://www.w3.org/TR/2001/REC-xmlbase-20010627/.\n              The <a href = \"http://www.w3.org/TR/xmlbase/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xmlbase/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xml-id\" id = \"xml-id\"></a>xml:id</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml-id/\"><cite>xml:id\n              Version 1.0</cite></a>, Norman Walsh, Daniel\n              Veillard, and Jonathan Marsh, Editors. World Wide Web\n              Consortium, 09&#160;Sep&#160;2005. This version is\n              http://www.w3.org/TR/2005/REC-xml-id-20050909/. The\n              <a href = \"http://www.w3.org/TR/xml-id/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xml-id/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"REC-xml-names\" id = \"REC-xml-names\"></a>Namespaces in XML 1.0</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/REC-xml-names\"><cite>Namespaces\n              in XML</cite></a>, Andrew Layman, Dave Hollander, and\n              Tim Bray, Editors. World Wide Web Consortium,\n              14&#160;Jan&#160;1999. This version is\n              http://www.w3.org/TR/1999/REC-xml-names-19990114. The\n              <a href = \"http://www.w3.org/TR/REC-xml-names\">latest\n              version</a> is available at\n              http://www.w3.org/TR/REC-xml-names.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xml-names11\" id = \"xml-names11\"></a>Namespaces in XML 1.1</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml-names11/\"><cite>Namespaces\n              in XML 1.1 (Second Edition)</cite></a>, Tim Bray,\n              Dave Hollander, Andrew Layman, and Richard Tobin,\n              Editors. World Wide Web Consortium,\n              16&#160;Aug&#160;2006. This version is\n              http://www.w3.org/TR/2006/REC-xml-names11-20060816.\n              The <a href = \"http://www.w3.org/TR/xml-names11/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xml-names11/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xmlschema-1\" id = \"xmlschema-1\"></a>XML Schema Part 1</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xmlschema-1/\"><cite>XML\n              Schema Part 1: Structures Second Edition</cite></a>,\n              Henry S. Thompson, David Beech, Noah Mendelsohn, and\n              Murray Maloney, Editors. World Wide Web Consortium,\n              28&#160;Oct&#160;2004. This version is\n              http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/.\n              The <a href = \"http://www.w3.org/TR/xmlschema-1/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xmlschema-1/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xmlschema-2\" id = \"xmlschema-2\"></a>XML Schema Part 2</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xmlschema-2/\"><cite>XML\n              Schema Part 2: Datatypes Second Edition</cite></a>,\n              Paul V. Biron and Ashok Malhotra, Editors. World Wide\n              Web Consortium, 28&#160;Oct&#160;2004. This version\n              is\n              http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/.\n              The <a href = \"http://www.w3.org/TR/xmlschema-2/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xmlschema-2/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xpath20\" id = \"xpath20\"></a>XPath 2.0</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xpath20/\"><cite>XML\n              Path Language (XPath) 2.0</cite></a>, Don Chamberlin\n              , Anders Berglund, Scott Boag, <em>et. al.</em>,\n              Editors. World Wide Web Consortium, 23 Jan 2007. This\n              version is\n              http://www.w3.org/TR/2007/REC-xpath20-20070123/. The\n              <a href = \"http://www.w3.org/TR/xpath20/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xpath20/.\n            </div>\n          </dd>\n        </dl>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"other-references\" id = \"other-references\"></a>A.2 Other References</h3>\n\n        <dl>\n          <dt class = \"label\"><span><a name = \"CALCALC\" id = \"CALCALC\"></a>Calendrical Calculations</span></dt>\n\n          <dd>\n            <div>\n              Edward M. Reingold and Nachum Dershowitz.\n              <em>Calendrical Calculations Millennium edition (2nd\n              Edition)</em>. Cambridge University Press, ISBN 0 521\n              77752 6\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"DOM-Level-2-Core\" id = \"DOM-Level-2-Core\"></a>DOM Level 2</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/DOM-Level-2-Core/\"><cite>Document\n              Object Model (DOM) Level 2 Core\n              Specification</cite></a>, Philippe Le Hégaret, Steve\n              Byrne, Arnaud Le Hors, <em>et. al.</em>, Editors.\n              World Wide Web Consortium, 13&#160;Nov&#160;2000.\n              This version is\n              http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113.\n              The <a href = \"http://www.w3.org/TR/DOM-Level-2-Core/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/DOM-Level-2-Core/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"RFC2119\" id = \"RFC2119\"></a>RFC2119</span></dt>\n\n          <dd>\n            <div>\n              S. Bradner. <em>Key words for use in RFCs to Indicate\n              Requirement Levels</em>. IETF RFC 2119. See <a href = \"http://www.ietf.org/rfc/rfc2119.txt\">http://www.ietf.org/rfc/rfc2119.txt</a>.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"RFC2376\" id = \"RFC2376\"></a>RFC2376</span></dt>\n\n          <dd>\n            <div>\n              E. Whitehead, M. Murata. <em>XML Media Types</em>.\n              IETF RFC 2376. See <a href = \"http://www.ietf.org/rfc/rfc2376.txt\">http://www.ietf.org/rfc/rfc2376.txt</a>.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"RFC3023\" id = \"RFC3023\"></a>RFC3023</span></dt>\n\n          <dd>\n            <div>\n              M. Murata, S. St.Laurent, and D. Cohn. <em>XML Media\n              Types</em>. IETF RFC 3023. See <a href = \"http://www.ietf.org/rfc/rfc3023.txt\">http://www.ietf.org/rfc/rfc3023.txt</a>.\n              <span>References to RFC 3023 should be taken to refer\n              to any document that supersedes RFC 3023.</span>\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"RFC3986\" id = \"RFC3986\"></a>RFC3986</span></dt>\n\n          <dd>\n            <div>\n              T. Berners-Lee, R. Fielding, and L. Masinter.\n              <em>Uniform Resource Identifiers (URI): Generic\n              Syntax</em>. IETF RFC 3986. See <a href = \"http://www.ietf.org/rfc/rfc3986.txt\">http://www.ietf.org/rfc/rfc3986.txt</a>.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"RFC3987\" id = \"RFC3987\"></a>RFC3987</span></dt>\n\n          <dd>\n            <div>\n              M. Duerst, M. Suignard. <em>Internationalized\n              Resource Identifiers (IRIs)</em>. IETF RFC 3987. See\n              <a href = \"http://www.ietf.org/rfc/rfc3987.txt\">http://www.ietf.org/rfc/rfc3987.txt</a>.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"UNICODE-TR10\" id = \"UNICODE-TR10\"></a>UNICODE TR10</span></dt>\n\n          <dd>\n            <div>\n              Unicode Consortium. <em>Unicode Technical Standard\n              #10. Unicode Collation Algorithm</em>. Unicode\n              Technical Report. See <a href = \"http://www.unicode.org/unicode/reports/tr10/\">http://www.unicode.org/unicode/reports/tr10/</a>.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xinclude\" id = \"xinclude\"></a>XInclude</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xinclude/\"><cite>XML\n              Inclusions (XInclude) Version 1.0 (Second\n              Edition)</cite></a>, David Orchard, Jonathan Marsh,\n              and Daniel Veillard, Editors. World Wide Web\n              Consortium, 15&#160;Nov&#160;2006. This version is\n              http://www.w3.org/TR/2006/REC-xinclude-20061115/. The\n              <a href = \"http://www.w3.org/TR/xinclude/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xinclude/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xlink\" id = \"xlink\"></a>XLink</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xlink/\"><cite>XML\n              Linking Language (XLink) Version 1.0</cite></a>,\n              David Orchard, Eve Maler, and Steven DeRose, Editors.\n              World Wide Web Consortium, 27&#160;Jun&#160;2001.\n              This version is\n              http://www.w3.org/TR/2001/REC-xlink-20010627/. The\n              <a href = \"http://www.w3.org/TR/xlink/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xlink/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"SCHEMA-AND-XML-1.1\" id = \"SCHEMA-AND-XML-1.1\"></a>XML Schema 1.0 and XML\n          1.1</span></dt>\n\n          <dd>\n            <div>\n              World Wide Web Consortium. <em>Processing XML 1.1\n              documents with XML Schema 1.0 processors</em>. W3C\n              Working Group Note 11 May 2005. See <a href = \"http://www.w3.org/TR/2005/NOTE-xml11schema10-20050511/\">\n              http://www.w3.org/TR/2005/NOTE-xml11schema10-20050511/</a>\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xml-stylesheet\" id = \"xml-stylesheet\"></a>XML Stylesheet</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xml-stylesheet\"><cite>Associating\n              Style Sheets with XML documents</cite></a>, James\n              Clark, Editor. World Wide Web Consortium,\n              29&#160;Jun&#160;1999. This version is\n              http://www.w3.org/1999/06/REC-xml-stylesheet-19990629.\n              The <a href = \"http://www.w3.org/TR/xml-stylesheet\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xml-stylesheet.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xptr-framework\" id = \"xptr-framework\"></a>XPointer Framework</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xptr-framework/\"><cite>XPointer\n              Framework</cite></a>, Paul Grosso, Jonathan Marsh,\n              Eve Maler, and Norman Walsh, Editors. World Wide Web\n              Consortium, 25&#160;Mar&#160;2003. This version is\n              http://www.w3.org/TR/2003/REC-xptr-framework-20030325/.\n              The <a href = \"http://www.w3.org/TR/xptr-framework/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xptr-framework/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xsl\" id = \"xsl\"></a>Extensible Stylesheet Language\n          (XSL)</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xsl/\"><cite>Extensible\n              Stylesheet Language (XSL) Version 1.1</cite></a>,\n              Anders Berglund, Editor. World Wide Web Consortium,\n              05&#160;Dec&#160;2006. This version is\n              http://www.w3.org/TR/2006/REC-xsl11-20061205/. The\n              <a href = \"http://www.w3.org/TR/xsl/\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xsl/.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xslt\" id = \"xslt\"></a>XSLT\n          1.0</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xslt\"><cite>XSL\n              Transformations (XSLT) Version 1.0</cite></a>, James\n              Clark, Editor. World Wide Web Consortium,\n              16&#160;Nov&#160;1999. This version is\n              http://www.w3.org/TR/1999/REC-xslt-19991116. The\n              <a href = \"http://www.w3.org/TR/xslt\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xslt.\n            </div>\n          </dd>\n\n          <dt class = \"label\"><span><a name = \"xslt20req\" id = \"xslt20req\"></a>XSLT 2.0 Requirements</span></dt>\n\n          <dd>\n            <div>\n              <a href = \"http://www.w3.org/TR/xslt20req\"><cite>XSLT\n              Requirements Version 2.0</cite></a>, Steve Muench and\n              Mark Scardina, Editors. World Wide Web Consortium,\n              14&#160;Feb&#160;2001. This version is\n              http://www.w3.org/TR/2001/WD-xslt20req-20010214. The\n              <a href = \"http://www.w3.org/TR/xslt20req\">latest\n              version</a> is available at\n              http://www.w3.org/TR/xslt20req.\n            </div>\n          </dd>\n        </dl>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"xslt-mime-definition\" id = \"xslt-mime-definition\"></a>B The XSLT Media Type</h2>\n\n      <p>This appendix registers a new MIME media type,\n      \"<code>application/xslt+xml</code>\".</p>\n\n      <p>This information is being submitted to the IESG (Internet\n      Engineering Steering Group) for review, approval, and\n      registration with IANA (the Internet Assigned Numbers\n      Authority).</p>\n\n      <div class = \"div2\">\n        <h3><a name = \"media-type-registration\" id = \"media-type-registration\"></a>B.1 Registration of MIME\n        Media Type application/xslt+xml</h3>\n\n        <dl>\n          <dt class = \"label\">MIME media type name:</dt>\n\n          <dd>\n            <p><code>application</code></p>\n          </dd>\n\n          <dt class = \"label\">MIME subtype name:</dt>\n\n          <dd>\n            <p><code>xslt+xml</code></p>\n          </dd>\n\n          <dt class = \"label\">Required parameters:</dt>\n\n          <dd>\n            <p>None.</p>\n          </dd>\n\n          <dt class = \"label\">Optional parameters:</dt>\n\n          <dd>\n            <dl>\n              <dt class = \"label\"><code>charset</code></dt>\n\n              <dd>\n                <p>This parameter has identical semantics to the\n                <code>charset</code> parameter of the\n                <code>application/xml</code> media type as\n                specified in <a href = \"#RFC3023\">[RFC3023]</a>.</p>\n              </dd>\n            </dl>\n          </dd>\n\n          <dt class = \"label\">Encoding considerations:</dt>\n\n          <dd>\n            <p>By virtue of XSLT content being XML, it has the same\n            considerations when sent as\n            \"<code>application/xslt+xml</code>\" as does XML. See\n            RFC 3023, section 3.2.</p>\n          </dd>\n\n          <dt class = \"label\">Security considerations:</dt>\n\n          <dd>\n            <p>Several XSLT instructions may cause arbitrary URIs\n            to be dereferenced. In this case, the security issues\n            of <span><a href = \"#RFC3986\">[RFC3986]</a>, section\n            7,</span> should be considered.</p>\n\n            <p>In addition, because of the extensibility features\n            for XSLT, it is possible that\n            \"<code>application/xslt+xml</code>\" may describe\n            content that has security implications beyond those\n            described here. However, if the processor follows only\n            the normative semantics of this specification, this\n            content will be ignored. Only in the case where the\n            processor recognizes and processes the additional\n            content, or where further processing of that content is\n            dispatched to other processors, would security issues\n            potentially arise. And in that case, they would fall\n            outside the domain of this registration document.</p>\n          </dd>\n\n          <dt class = \"label\">Interoperability considerations:</dt>\n\n          <dd>\n            <p>This specification describes processing semantics\n            that dictate behavior that must be followed when\n            dealing with, among other things, unrecognized\n            elements.</p>\n\n            <p>Because XSLT is extensible, conformant\n            \"<code>application/xslt+xml</code>\" processors can\n            expect that content received is well-formed XML, but it\n            cannot be guaranteed that the content is valid XSLT or\n            that the processor will recognize all of the elements\n            and attributes in the document.</p>\n          </dd>\n\n          <dt class = \"label\">Published specification:</dt>\n\n          <dd>\n            <p>This media type registration is for XSLT stylesheet\n            modules as described by the XSLT 2.0 specification,\n            <span>which is located at <a href = \"http://www.w3.org/TR/xslt20/\">http://www.w3.org/TR/xslt20/</a>.</span>\n            It is also appropriate to use this media type with\n            earlier and later versions of the XSLT language.</p>\n          </dd>\n\n          <dt class = \"label\">Applications which use this media\n          type:</dt>\n\n          <dd>\n            <p>Existing XSLT 1.0 stylesheets are most often\n            described using the unregistered media type\n            \"<code>text/xsl</code>\".</p>\n\n            <p>There is no experimental, vendor specific, or\n            personal tree predecessor to\n            \"<code>application/xslt+xml</code>\", reflecting the\n            fact that no applications currently recognize it. This\n            new type is being registered in order to allow for the\n            expected deployment of XSLT 2.0 on the World Wide Web,\n            as a first class XML application.</p>\n          </dd>\n\n          <dt class = \"label\">Additional information:</dt>\n\n          <dd>\n            <dl>\n              <dt class = \"label\">Magic number(s):</dt>\n\n              <dd>\n                <p>There is no single initial octet sequence that\n                is always present in XSLT documents.</p>\n              </dd>\n\n              <dt class = \"label\">File extension(s):</dt>\n\n              <dd>\n                <p>XSLT documents are most often identified with\n                the extensions \"<code>.xsl</code>\" or\n                \"<code>.xslt</code>\".</p>\n              </dd>\n\n              <dt class = \"label\">Macintosh File Type Code(s):</dt>\n\n              <dd>\n                <p>TEXT</p>\n              </dd>\n            </dl>\n          </dd>\n\n          <dt class = \"label\">Person &amp; email address to contact\n          for further information:</dt>\n\n          <dd>\n            <p>Norman Walsh, <code>&lt;<a href = \"mailto:Norman.Walsh@Sun.COM\">Norman.Walsh@Sun.COM</a>&gt;</code>.</p>\n          </dd>\n\n          <dt class = \"label\">Intended usage:</dt>\n\n          <dd>\n            <p>COMMON</p>\n          </dd>\n\n          <dt class = \"label\">Author/Change controller:</dt>\n\n          <dd>\n            <p>The XSLT specification is a work product of the\n            World Wide Web Consortium's XSL Working Group. The W3C\n            has change control over these specifications.</p>\n          </dd>\n        </dl>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"media-type-fragid\" id = \"media-type-fragid\"></a>B.2 Fragment Identifiers</h3>\n\n        <p>For documents labeled as\n        \"<code>application/xslt+xml</code>\", the fragment\n        identifier notation is exactly that for\n        \"<code>application/xml</code>\", as specified in RFC\n        3023.</p>\n      </div>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"glossary\" id = \"glossary\"></a>C Glossary\n      (Non-Normative)</h2>\n\n      <dl>\n        <dt><a href = \"#dt-qname\">QName</a></dt>\n\n        <dd>\n          <p>A <b>QName</b> is always written in the form\n          <code>(NCName \":\")? NCName</code>, that is, a local name\n          optionally preceded by a namespace prefix. When two\n          QNames are compared, however, they are considered equal\n          if the corresponding <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QNames</a> are the same, as\n          described below.</p>\n        </dd>\n\n        <dt><a href = \"#dt-uri-reference\">URI Reference</a></dt>\n\n        <dd>\n          <p>Within this specification, the term <b>URI\n          Reference</b>, unless otherwise stated, refers to a\n          string in the lexical space of the <code>xs:anyURI</code>\n          data type as defined in <a href = \"#xmlschema-2\">[XML\n          Schema Part 2]</a>.</p>\n        </dd>\n\n        <dt><a href = \"#xml-namespace\">XML namespace</a></dt>\n\n        <dd>\n          <p>The <b>XML namespace</b>, <span>defined in <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a> as\n          <code>http://www.w3.org/XML/1998/namespace</code></span>,\n          is used for attributes such as <code>xml:lang</code>,\n          <code>xml:space</code>, and <code>xml:id</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-compatibility-mode\">XPath 1.0\n        compatibility mode</a></dt>\n\n        <dd>\n          <p>The term <b>XPath 1.0 compatibility mode</b> is\n          defined in <a href = \"http://www.w3.org/TR/xpath20/#static_context\">Section\n          2.1.1 Static Context</a><sup><small>XP</small></sup>.\n          This is a setting in the static context of an XPath\n          expression; it has two values, <code>true</code> and\n          <code>false</code>. When the value is set to true, the\n          semantics of function calls and certain other operations\n          are adjusted to give a greater degree of backwards\n          compatibility between XPath 2.0 and XPath 1.0.</p>\n        </dd>\n\n        <dt><a href = \"#dt-xslt-element\">XSLT element</a></dt>\n\n        <dd>\n          <p>An <b>XSLT element</b> is an element in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a> whose syntax and semantics are defined in\n          this specification.</p>\n        </dd>\n\n        <dt><a href = \"#dt-xslt-instruction\">XSLT\n        instruction</a></dt>\n\n        <dd>\n          <p>An <b>XSLT instruction</b> is an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>\n          whose syntax summary in this specification contains the\n          annotation <code>&lt;!-- category: instruction\n          --&gt;</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-xslt-namespace\">XSLT namespace</a></dt>\n\n        <dd>\n          <p>The <b>XSLT namespace</b> has the URI\n          <code>http://www.w3.org/1999/XSL/Transform</code>. It is\n          used to identify elements, attributes, and other names\n          that have a special meaning defined in this\n          specification.</p>\n        </dd>\n\n        <dt><a href = \"#dt-alias\">alias</a></dt>\n\n        <dd>\n          <p>A stylesheet can use the <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          element to declare that a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> is\n          being used as an <b>alias</b> for a <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-arity\">arity</a></dt>\n\n        <dd>\n          <p>The <b>arity</b> of a stylesheet function is the\n          number of <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> elements in\n          the function definition.</p>\n        </dd>\n\n        <dt><a href = \"#dt-atomization\">atomize</a></dt>\n\n        <dd>\n          <p>The term <b>atomization</b> is defined in <a href = \"http://www.w3.org/TR/xpath20/#id-atomization\">Section\n          2.4.2 Atomization</a><sup><small>XP</small></sup>. It is\n          a process that takes as input a sequence of nodes and\n          atomic values, and returns a sequence of atomic values,\n          in which the nodes are replaced by their typed values as\n          defined in <a href = \"#xpath-datamodel\">[Data\n          Model]</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-attribute-set\">attribute set</a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n          element defines a named <b>attribute set</b>: that is, a\n          collection of attribute <span>definitions</span> that can\n          be used repeatedly on different constructed elements.</p>\n        </dd>\n\n        <dt><a href = \"#dt-attribute-value-template\">attribute value\n        template</a></dt>\n\n        <dd>\n          <p>In an attribute that is designated as an <b>attribute\n          value template</b>, such as an attribute of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>,\n          an <a title = \"expression\" href = \"#dt-expression\">expression</a> can be used by\n          surrounding the expression with curly brackets\n          (<code>{}</code>)</p>\n        </dd>\n\n        <dt><a href = \"#dt-backwards-compatibility-feature\">backwards\n        compatibility feature</a></dt>\n\n        <dd>\n          <p>A processor that claims conformance with the\n          <b>backwards compatibility feature</b> <span class = \"verb\">must</span> support the processing of stylesheet\n          instructions and XPath expressions with <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a>, as defined in <a href = \"#backwards\"><i>3.8\n          Backwards-Compatible Processing</i></a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-backwards-compatible-behavior\">backwards\n        compatible behavior</a></dt>\n\n        <dd>\n          <p>An element enables backwards-compatible behavior for\n          itself, its attributes, its descendants and their\n          attributes if it has an <code>[xsl:]version</code>\n          attribute (see <a href = \"#standard-attributes\"><i>3.5\n          Standard Attributes</i></a>) whose value is less than\n          <code>2.0</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-base-output-uri\">base output URI</a></dt>\n\n        <dd>\n          <p>The <b>base output URI</b> is a URI to be used as the\n          base URI when resolving a relative URI allocated to a\n          <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>. If the\n          transformation generates more than one final result tree,\n          then typically each one will be allocated a URI relative\n          to this base URI.</p>\n        </dd>\n\n        <dt><a href = \"#dt-basic-xslt-processor\">basic XSLT\n        processor</a></dt>\n\n        <dd>\n          <p>A <b>basic XSLT processor</b> is an XSLT processor\n          that implements all the mandatory requirements of this\n          specification with the exception of certain\n          explicitly-identified constructs related to schema\n          processing.</p>\n        </dd>\n\n        <dt><a href = \"#dt-character-map\">character map</a></dt>\n\n        <dd>\n          <p>A <b>character map</b> allows a specific character\n          appearing in a text or attribute node in the <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> to be substituted by a specified string\n          of characters during serialization.</p>\n        </dd>\n\n        <dt><a href = \"#dt-circularity\">circularity</a></dt>\n\n        <dd>\n          <p>A <b>circularity</b> is said to exist if a construct\n          such as a <a title = \"global variable\" href = \"#dt-global-variable\">global variable</a>, an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute\n          set</a>, or a <a title = \"key\" href = \"#dt-key\">key</a> is\n          defined in terms of itself. For example, if the <a title = \"expression\" href = \"#dt-expression\">expression</a> or\n          <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          specifying the value of a <a title = \"global variable\" href = \"#dt-global-variable\">global variable</a>\n          <var>X</var> references a global variable <var>Y</var>,\n          then the value for <var>Y</var> <span class = \"verb\">must</span> be computed before the value of\n          <var>X</var>. A circularity exists if it is impossible to\n          do this for all global variable definitions.</p>\n        </dd>\n\n        <dt><a href = \"#dt-collation\">collation</a></dt>\n\n        <dd>\n          <p>Facilities in XSLT 2.0 and XPath 2.0 that require\n          strings to be ordered rely on the concept of a named\n          <b>collation</b>. A collation is a set of rules that\n          determine whether two strings are equal, and if not,\n          which of them is to be sorted before the other.</p>\n        </dd>\n\n        <dt><a href = \"#dt-context-item\">context item</a></dt>\n\n        <dd>\n          <p>The <b>context item</b> is the item currently being\n          processed. An item (see <a href = \"#xpath-datamodel\">[Data\n          Model]</a>) is either an atomic value (such as an\n          integer, date, or string), or a node. The context item is\n          initially set to the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a>\n          supplied when the transformation is invoked (see <a href = \"#initiating\"><i>2.3 Initiating a\n          Transformation</i></a>). It changes whenever instructions\n          such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          and <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> are\n          used to process a sequence of items; each item in such a\n          sequence becomes the context item while that item is\n          being processed.</p>\n        </dd>\n\n        <dt><a href = \"#dt-context-node\">context node</a></dt>\n\n        <dd>\n          <p>If the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is a node (as\n          distinct from an atomic value such as an integer), then\n          it is also referred to as the <b>context node</b>. The\n          context node is not an independent variable, it changes\n          whenever the context item changes. When the context item\n          is an atomic value, there is no context node.</p>\n        </dd>\n\n        <dt><a href = \"#dt-context-position\">context\n        position</a></dt>\n\n        <dd>\n          <p>The <b>context position</b> is the position of the\n          context item within the sequence of items currently being\n          processed. It changes whenever the context item changes.\n          When an instruction such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          or <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> is used\n          to process a sequence of items, the first item in the\n          sequence is processed with a context position of 1, the\n          second item with a context position of 2, and so on.</p>\n        </dd>\n\n        <dt><a href = \"#dt-context-size\">context size</a></dt>\n\n        <dd>\n          <p>The <b>context size</b> is the number of items in the\n          sequence of items currently being processed. It changes\n          whenever instructions such as <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          and <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a> are\n          used to process a sequence of items; during the\n          processing of each one of those items, the context size\n          is set to the count of the number of items in the\n          sequence (or equivalently, the position of the last item\n          in the sequence).</p>\n        </dd>\n\n        <dt><a href = \"#dt-core-function\">core function</a></dt>\n\n        <dd>\n          <p>The term <b>core function</b> means a function that is\n          specified in <a href = \"#xpath-functions\">[Functions and\n          Operators]</a> and that is in the <a title = \"standard function namespace\" href = \"#dt-standard-function-namespace\">standard function\n          namespace</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-current-captured-substrings\">current\n        captured substrings</a></dt>\n\n        <dd>\n          <p>While the <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n          instruction is active, a set of <b>current captured\n          substrings</b> is available, corresponding to the\n          parenthesized sub-expressions of the regular\n          expression.</p>\n        </dd>\n\n        <dt><a href = \"#dt-current-group\">current group</a></dt>\n\n        <dd>\n          <p>The evaluation context for XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> includes a\n          <span>component</span> called the <b>current group</b>,\n          which is a sequence. The current group is the collection\n          of related items that are processed collectively in one\n          iteration of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          element.</p>\n        </dd>\n\n        <dt><a href = \"#dt-current-grouping-key\">current grouping\n        key</a></dt>\n\n        <dd>\n          <p>The evaluation context for XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> includes a\n          component called the <b>current grouping key</b>, which\n          is an atomic value. The current grouping key is <span>the\n          <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping\n          key</a></span> shared in common by all the items within\n          the <a title = \"current group\" href = \"#dt-current-group\">current group</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-current-mode\">current mode</a></dt>\n\n        <dd>\n          <p>At any point in the processing of a stylesheet, there\n          is a <b>current mode</b>. When the transformation is\n          initiated, the current mode is the <a title = \"default mode\" href = \"#dt-default-mode\">default mode</a>,\n          <span>unless a different initial mode has been supplied,\n          as described in <a href = \"#initiating\"><i>2.3 Initiating a\n          Transformation</i></a>.</span> Whenever an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction is evaluated, the current mode becomes the\n          mode selected by this instruction.</p>\n        </dd>\n\n        <dt><a href = \"#dt-current-template-rule\">current template\n        rule</a></dt>\n\n        <dd>\n          <p>At any point in the processing of a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, there\n          may be a <b>current template rule</b>. Whenever a\n          <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> is chosen <span>as\n          a result of evaluating <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>,\n          the template rule becomes the current template rule for\n          the evaluation of the rule's sequence constructor. When\n          an <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n          <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>,\n          <span>or <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          instruction is evaluated, or when evaluating a sequence\n          constructor contained in an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> or <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> element, or\n          when</span> a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> is\n          called (see <a href = \"#stylesheet-functions\"><i>10.3\n          Stylesheet Functions</i></a>), the current template rule\n          becomes null for the evaluation of that instruction or\n          function.</p>\n        </dd>\n\n        <dt><a href = \"#dt-date-formatting-function\">date formatting\n        function</a></dt>\n\n        <dd>\n          <p>The three functions <a href = \"#function-format-date\"><code>format-date</code></a>,\n          <a href = \"#function-format-time\"><code>format-time</code></a>, and\n          <a href = \"#function-format-dateTime\"><code>format-dateTime</code></a>\n          are referred to collectively as the <b>date formatting\n          functions</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-decimal-format\">decimal format</a></dt>\n\n        <dd>\n          <p>All the <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations in a stylesheet that share the same name are\n          grouped into a named <b>decimal format</b>; those that\n          have no name are grouped into a single unnamed decimal\n          format.</p>\n        </dd>\n\n        <dt><a href = \"#dt-declaration\">declaration</a></dt>\n\n        <dd>\n          <p>Top-level elements fall into two categories:\n          declarations, and user-defined data elements. Top-level\n          elements whose names are in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> are\n          <b>declarations</b>. Top-level elements in any other\n          namespace are <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data elements</a> (see\n          <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined\n          Data Elements</i></a>)</p>\n        </dd>\n\n        <dt><a href = \"#dt-declaration-order\">declaration\n        order</a></dt>\n\n        <dd>\n          <p>The <a title = \"declaration\" href = \"#dt-declaration\">declarations</a> within a <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet\n          level</a> have a total ordering known as <b>declaration\n          order</b>. The order of declarations within a stylesheet\n          level is the same as the document order that would result\n          if each stylesheet module were inserted textually in\n          place of the <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          that references it.</p>\n        </dd>\n\n        <dt><a href = \"#dt-default-collation\">default\n        collation</a></dt>\n\n        <dd>\n          <p>In this specification the term <b>default\n          collation</b> means the collation that is used by XPath\n          operators such as <code>eq</code> and <code>lt</code>\n          appearing in XPath expressions within the stylesheet.</p>\n        </dd>\n\n        <dt><a href = \"#dt-default-mode\">default mode</a></dt>\n\n        <dd>\n          <p>There is always a <b>default mode</b> available. The\n          default mode is an unnamed <a title = \"mode\" href = \"#dt-mode\">mode</a>, and it is used when no\n          <code>mode</code> attribute is specified on an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction.</p>\n        </dd>\n\n        <dt><a href = \"#dt-default-priority\">default\n        priority</a></dt>\n\n        <dd>\n          <p>If no <code>priority</code> attribute is specified on\n          the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n          element, a <b>default priority</b> is computed, based on\n          the syntax of the pattern supplied in the\n          <code>match</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#dt-defining-element\">defining\n        element</a></dt>\n\n        <dd>\n          <p><span>A string in the form of a lexical QName</span>\n          may occur as the value of an attribute node in a\n          stylesheet module, or within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n          contained in such an attribute node, or as the result of\n          evaluating an XPath expression contained in such an\n          attribute node. The element containing this attribute\n          node is referred to as the <b>defining element</b> of the\n          QName.</p>\n        </dd>\n\n        <dt><a href = \"#dt-deprecated\">deprecated</a></dt>\n\n        <dd>\n          <p>Some constructs defined in this specification are\n          described as being <b>deprecated</b>. The use of this\n          term implies that stylesheet authors <span class = \"verb\">should not</span> use the construct, and that the\n          construct may be removed in a later version of this\n          specification.</p>\n        </dd>\n\n        <dt><a href = \"#dt-dynamic-error\">dynamic error</a></dt>\n\n        <dd>\n          <p>An error that is not detected until a source document\n          is being transformed is referred to as a <b>dynamic\n          error</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-effective-value\">effective value</a></dt>\n\n        <dd>\n          <p>The result of evaluating an attribute value template\n          is referred to as the <b>effective value</b> of the\n          attribute.</p>\n        </dd>\n\n        <dt><a href = \"#dt-embedded-stylesheet-module\">embedded\n        stylesheet module</a></dt>\n\n        <dd>\n          <p>An <b>embedded stylesheet module</b> is a stylesheet\n          module that is embedded within another XML document,\n          typically the source document that is being\n          transformed.</p>\n        </dd>\n\n        <dt><a href = \"#dt-expanded-qname\">expanded-QName</a></dt>\n\n        <dd>\n          <p>An <b>expanded-QName</b> <span>contains a pair of\n          values, namely a local name and an optional namespace\n          URI. It may also contain a namespace prefix.</span> Two\n          expanded-QNames are equal if the namespace URIs are the\n          same (or both absent) and the local names are the same.\n          <span>The prefix plays no part in the comparison, but is\n          used only if the expanded-QName needs to be converted\n          back to a string.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-expression\">expression</a></dt>\n\n        <dd>\n          <p>Within this specification, the term <b>XPath\n          expression</b>, or simply <b>expression</b>, means a\n          string that matches the production <span><a href = \"http://www.w3.org/TR/xpath20/#doc-xpath-Expr\">Expr</a><sup>\n          <small>XP</small></sup></span> defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-extension-attribute\">extension\n        attribute</a></dt>\n\n        <dd>\n          <p>An element from the XSLT namespace may have any\n          attribute not from the XSLT namespace, provided that the\n          <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> (see <a href = \"#xpath20\">[XPath 2.0]</a>) of the attribute has a\n          non-null namespace URI. These attributes are referred to\n          as <b>extension attributes</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-extension-function\">extension\n        function</a></dt>\n\n        <dd>\n          <p>An <b>extension function</b> is a function that is\n          available for use within an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>, other than a\n          <a title = \"core function\" href = \"#dt-core-function\">core\n          function</a> defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>, an\n          additional function defined in this XSLT specification,\n          <span>a constructor function named after an atomic\n          type,</span> or a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> defined\n          using an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n          declaration.</p>\n        </dd>\n\n        <dt><a href = \"#dt-extension-instruction\">extension\n        instruction</a></dt>\n\n        <dd>\n          <p>An <b>extension instruction</b> is an element within a\n          <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n          is in a namespace (not the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a>) designated\n          as an extension namespace.</p>\n        </dd>\n\n        <dt><a href = \"#dt-extension-namespace\">extension\n        namespace</a></dt>\n\n        <dd>\n          <p>The <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n          mechanism allows namespaces to be designated as\n          <b>extension namespaces</b>. When a namespace is\n          designated as an extension namespace and an element with\n          a name from that namespace occurs in a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, then\n          the element is treated as an <a title = \"instruction\" href = \"#dt-instruction\">instruction</a> rather than as a\n          <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n          element</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-final-output-state\">final output\n        state</a></dt>\n\n        <dd>\n          <p>The first of the two <a title = \"output state\" href = \"#dt-output-state\">output states</a> is called <b>final\n          output</b> state. This state applies when instructions\n          are writing to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-final-result-tree\">final result\n        tree</a></dt>\n\n        <dd>\n          <p>A <b>final result tree</b> is a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> that forms part of\n          the final output of a transformation. Once created, the\n          contents of a final result tree are not accessible within\n          the stylesheet itself.</p>\n        </dd>\n\n        <dt><a href = \"#dt-focus\">focus</a></dt>\n\n        <dd>\n          <p>When a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> is\n          evaluated, the <a title = \"processor\" href = \"#dt-processor\">processor</a> keeps track of which items\n          are being processed by means of a set of implicit\n          variables referred to collectively as the\n          <b>focus</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-forwards-compatible-behavior\">forwards-compatible\n        behavior</a></dt>\n\n        <dd>\n          <p>An element enables <b>forwards-compatible behavior</b>\n          for itself, its attributes, its descendants and their\n          attributes if it has an <code>[xsl:]version</code>\n          attribute (see <a href = \"#standard-attributes\"><i>3.5\n          Standard Attributes</i></a>) whose value is greater than\n          <code>2.0</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-function-conversion-rules\">function\n        conversion rules</a></dt>\n\n        <dd>\n          <p>Except where otherwise indicated, the actual value of\n          an <a title = \"expression\" href = \"#dt-expression\">expression</a> is converted to the\n          <a title = \"required type\" href = \"#dt-required-type\">required type</a> using the\n          <b>function conversion rules</b>. These are the rules\n          defined in <a href = \"#xpath20\">[XPath 2.0]</a> for\n          converting the supplied argument of a function call to\n          the required type of that argument, as defined in the\n          function signature. The relevant rules are those that\n          apply when <a title = \"XPath 1.0 compatibility mode\" href = \"#dt-compatibility-mode\">XPath 1.0 compatibility mode</a>\n          is set to <code>false</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-function-parameter\">function\n        parameter</a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n          element may appear as a child of an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n          element, before any non-<a href = \"#XSLT_element-param\"><code>xsl:param</code></a> children of\n          that element. Such a parameter is known as a <b>function\n          parameter</b>. A function parameter is a <a title = \"local variable\" href = \"#dt-local-variable\">local\n          variable</a> with the additional property that its value\n          can be set when the function is called, using a function\n          call in an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-global-variable\">global variable</a></dt>\n\n        <dd>\n          <p>A top-level <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n          element</a> declares a <b>global variable</b> that is\n          visible everywhere (except where it is <a title = \"shadows\" href = \"#dt-shadows\">shadowed</a> by another binding).</p>\n        </dd>\n\n        <dt><a href = \"#dt-group\">group</a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          instruction <span>allocates the items in an input\n          sequence</span> into <b>groups</b> of items (that is, it\n          establishes a collection of sequences) based either on\n          common values of a grouping key, or on a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that the initial\n          or final node in a group must match.</p>\n        </dd>\n\n        <dt><a href = \"#dt-grouping-key\">grouping key</a></dt>\n\n        <dd>\n          <p>If either of the <code>group-by</code> attribute or\n          <code>group-adjacent</code> attributes is present, then\n          <b>grouping keys</b> are calculated for each item in the\n          <a title = \"population\" href = \"#dt-population\">population</a>. <span>The grouping keys\n          are the items in the sequence obtained by evaluating the\n          expression contained in the <code>group-by</code>\n          attribute or <code>group-adjacent</code> attribute,\n          atomizing the result, and then casting an\n          <code>xs:untypedAtomic</code> value to\n          <code>xs:string</code>.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-implementation\">implementation</a></dt>\n\n        <dd>\n          <p>A specific product that performs the functions of an\n          <a title = \"processor\" href = \"#dt-processor\">XSLT\n          processor</a> is referred to as an\n          <b>implementation</b></p>\n        </dd>\n\n        <dt><a href = \"#dt-implementation-defined\">implementation-defined</a></dt>\n\n        <dd>\n          <p>In this specification, the term\n          <b>implementation-defined</b> refers to a feature where\n          the implementation is allowed some flexibility, and where\n          the choices made by the implementation <span class = \"verb\">must</span> be described in documentation that\n          accompanies any conformance claim.</p>\n        </dd>\n\n        <dt><a href = \"#dt-implementation-dependent\">implementation-dependent</a></dt>\n\n        <dd>\n          <p>The term <b>implementation-dependent</b> refers to a\n          feature where the behavior <span class = \"verb\">may</span>\n          vary from one implementation to another, and where the\n          vendor is not expected to provide a full specification of\n          the behavior.</p>\n        </dd>\n\n        <dt><a href = \"#dt-import-precedence\">import\n        precedence</a></dt>\n\n        <dd>\n          <p>A <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> <var>D</var> in the\n          stylesheet is defined to have lower <b>import\n          precedence</b> than another declaration <var>E</var> if\n          the stylesheet level containing <var>D</var> would be\n          visited before the stylesheet level containing\n          <var>E</var> in a post-order traversal of the import tree\n          (that is, a traversal of the import tree in which a\n          stylesheet level is visited after its children). Two\n          declarations within the same stylesheet level have the\n          same import precedence.</p>\n        </dd>\n\n        <dt><a href = \"#dt-import-tree\">import tree</a></dt>\n\n        <dd>\n          <p>The <a title = \"stylesheet level\" href = \"#dt-stylesheet-level\">stylesheet levels</a> making up a\n          <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> are treated as forming an\n          <b>import tree</b>. In the import tree, each stylesheet\n          level has one child for each <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> declaration\n          that it contains.</p>\n        </dd>\n\n        <dt><a href = \"#dt-in-scope-schema-component\">in-scope schema\n        component</a></dt>\n\n        <dd>\n          <p>The <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> that may be\n          referenced by name in a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> are referred to as the\n          <b>in-scope schema components</b>. This set is the same\n          throughout all the modules of a stylesheet.</p>\n        </dd>\n\n        <dt><a href = \"#dt-initial-context-node\">initial context\n        node</a></dt>\n\n        <dd>\n          <p>A node that acts as the <b>initial context node</b>\n          for the transformation. This node is accessible within\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> as the initial value of\n          the XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a> <code>.</code> (dot) and\n          <code>self::node()</code>, as described in <a href = \"#focus\"><i>5.4.3.1 Maintaining Position: the\n          Focus</i></a></p>\n        </dd>\n\n        <dt><a href = \"#dt-initial-item\">initial item</a></dt>\n\n        <dd>\n          <p>For each <a title = \"group\" href = \"#dt-group\">group</a>,\n          the item within the group that is first in <a title = \"population order\" href = \"#dt-population-order\">population\n          order</a> is known as the <b>initial item</b> of the\n          group.</p>\n        </dd>\n\n        <dt><a href = \"#dt-initial-sequence\">initial\n        sequence</a></dt>\n\n        <dd>\n          <p>The sequence to be sorted is referred to as the\n          <b>initial sequence</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-initial-template\">initial\n        template</a></dt>\n\n        <dd>\n          <p>The transformation is performed by evaluating an\n          <b>initial template</b>. If a <a title = \"named template\" href = \"#dt-named-template\">named template</a> is supplied\n          when the transformation is initiated, then this is the\n          initial template; <span>otherwise, the initial template\n          is the <a title = \"template rule\" href = \"#dt-template-rule\">template rule</a> selected according\n          to the rules of the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction for processing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a> in\n          the initial <a title = \"mode\" href = \"#dt-mode\">mode</a>.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-instruction\">instruction</a></dt>\n\n        <dd>\n          <p>An <b>instruction</b> is either an <a title = \"XSLT instruction\" href = \"#dt-xslt-instruction\">XSLT\n          instruction</a> or an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension\n          instruction</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-key\">key</a></dt>\n\n        <dd>\n          <p>A <b>key</b> is defined as a set of <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declarations in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that share the same\n          name.</p>\n        </dd>\n\n        <dt><a href = \"#dt-key-specifier\">key specifier</a></dt>\n\n        <dd>\n          <p>The expression in the <code>use</code> attribute and\n          the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          within an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a>\n          declaration are referred to collectively as the <b>key\n          specifier</b>. The key specifier determines the values\n          that may be used to find a node using this <a title = \"key\" href = \"#dt-key\">key</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-lexical-qname\">lexical QName</a></dt>\n\n        <dd>\n          <p>A <b>lexical QName</b> is a string representing a\n          <a title = \"QName\" href = \"#dt-qname\">QName</a> in the form\n          <code>(NCName \":\")? NCName</code>, that is, a local name\n          optionally preceded by a namespace prefix.</p>\n        </dd>\n\n        <dt><a href = \"#dt-literal-namespace-uri\">literal namespace\n        URI</a></dt>\n\n        <dd>\n          <p>A namespace URI in the stylesheet tree that is being\n          used to specify a namespace URI in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> is\n          called a <b>literal namespace URI</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-literal-result-element\">literal result\n        element</a></dt>\n\n        <dd>\n          <p>In a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, an\n          element in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that does not belong to\n          the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT namespace</a> and that is not\n          an <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n          (see <a href = \"#extension-instruction\"><i>18.2 Extension\n          Instructions</i></a>) is classified as a <b>literal\n          result element</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-local-variable\">local variable</a></dt>\n\n        <dd>\n          <p>As well as being allowed as <a title = \"declaration\" href = \"#dt-declaration\">declaration</a> elements, the\n          <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a>\n          element is also allowed in <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructors</a>.\n          Such a variable is known as a <b>local variable</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-mode\">mode</a></dt>\n\n        <dd>\n          <p><b>Modes</b> allow a node in a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a> to be processed\n          multiple times, each time producing a different result.\n          They also allow different sets of <a title = \"template rule\" href = \"#dt-template-rule\">template\n          rules</a> to be active when processing different trees,\n          for example when processing documents loaded using the\n          <a href = \"#function-document\"><code>document</code></a>\n          function (see <a href = \"#document\"><i>16.1 Multiple Source\n          Documents</i></a>) or when processing <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary\n          trees</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-named-template\">named template</a></dt>\n\n        <dd>\n          <p>Templates can be invoked by name. An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n          with a <code>name</code> attribute defines a <b>named\n          template</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-namespace-fixup\">namespace fixup</a></dt>\n\n        <dd>\n          <p>The rules for the individual XSLT instructions that\n          construct a <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> (see <a href = \"#creating-new-nodes\"><i>11 Creating Nodes and\n          Sequences</i></a>) prescribe some of the situations in\n          which namespace nodes are written to the tree. These\n          rules, however, are not sufficient to ensure that the\n          prescribed constraints are always satisfied. The XSLT\n          processor <span class = \"verb\">must</span> therefore add\n          additional namespace nodes to satisfy these constraints.\n          This process is referred to as <b>namespace\n          fixup</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-nonrec-dynamic-error\">non-recoverable\n        dynamic error</a></dt>\n\n        <dd>\n          <p>A <a title = \"dynamic error\" href = \"#dt-dynamic-error\">dynamic error</a> that is not\n          recoverable is referred to as a <b>non-recoverable\n          dynamic error</b>. When a non-recoverable dynamic error\n          occurs, the <a title = \"processor\" href = \"#dt-processor\">processor</a> <span class = \"verb\">must</span> signal the error, and the\n          transformation fails.</p>\n        </dd>\n\n        <dt><a href = \"#dt-optional-recovery-action\">optional\n        recovery action</a></dt>\n\n        <dd>\n          <p>If an implementation chooses to recover from a\n          <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a>, it\n          <span class = \"verb\">must</span> take the <b>optional\n          recovery action</b> defined for that error condition in\n          this specification.</p>\n        </dd>\n\n        <dt><a href = \"#dt-first-appearance\">order of first\n        appearance</a></dt>\n\n        <dd>\n          <p>There is an ordering among <a title = \"group\" href = \"#dt-group\">groups</a> referred to as the <b>order of\n          first appearance</b>. A group <var>G</var> is defined to\n          precede a group <var>H</var> in order of first appearance\n          if the <a title = \"initial item\" href = \"#dt-initial-item\">initial item</a> of <var>G</var>\n          precedes the initial item of <var>H</var> in population\n          order. <span>If two groups <var>G</var> and <var>H</var>\n          have the same initial item (because the item is in both\n          groups) then <var>G</var> precedes <var>H</var> if the\n          <a title = \"grouping key\" href = \"#dt-grouping-key\">grouping\n          key</a> of <var>G</var> precedes the grouping key of\n          <var>H</var> in the sequence that results from evaluating\n          the <code>group-by</code> expression of this initial\n          item.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-output-definition\">output\n        definition</a></dt>\n\n        <dd>\n          <p>All the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          declarations in a stylesheet that share the same name are\n          grouped into a named <b>output definition</b>; those that\n          have no name are grouped into a single unnamed output\n          definition.</p>\n        </dd>\n\n        <dt><a href = \"#dt-output-state\">output state</a></dt>\n\n        <dd>\n          <p>Each instruction in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is evaluated in one of\n          two possible <b>output states</b>: <a title = \"final output state\" href = \"#dt-final-output-state\">final\n          output state</a> or <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n          state</a></p>\n        </dd>\n\n        <dt><a href = \"#dt-parameter\">parameter</a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n          declares a <b>parameter</b>, which may be a <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a>, a\n          <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a>, or a\n          <a title = \"function parameter\" href = \"#dt-function-parameter\">function parameter</a>. A\n          parameter is a <a title = \"variable\" href = \"#dt-variable\">variable</a> with the additional property\n          that its value can be set by the caller when the\n          stylesheet, the template, or the function is invoked.</p>\n        </dd>\n\n        <dt><a href = \"#dt-pattern\">pattern</a></dt>\n\n        <dd>\n          <p>A <b>pattern</b> specifies a set of conditions on a\n          node. A node that satisfies the conditions matches the\n          pattern; a node that does not satisfy the conditions does\n          not match the pattern. The syntax for patterns is a\n          subset of the syntax for <a title = \"expression\" href = \"#dt-expression\">expressions</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-picture-string\">picture string</a></dt>\n\n        <dd>\n          <p>The formatting of a number is controlled by a\n          <b>picture string</b>. The picture string is a sequence\n          of characters, in which the characters assigned to the\n          variables <var>decimal-separator-sign</var>,\n          <var>grouping-sign</var>, <var>zero-digit-sign</var>,\n          <var>digit-sign</var> and\n          <var>pattern-separator-sign</var> are classified as\n          active characters, and all other characters (including\n          the <var>percent-sign</var> and\n          <var>per-mille-sign</var>) are classified as passive\n          characters.</p>\n        </dd>\n\n        <dt><a href = \"#dt-place-marker\">place marker</a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n          performs two tasks: firstly, determining a <b>place\n          marker</b> (this is a sequence of integers, to allow for\n          hierarchic numbering schemes such as <code>1.12.2</code>\n          or <code>3(c)ii</code>), and secondly, formatting the\n          place marker for output as a text node in the result\n          sequence.</p>\n        </dd>\n\n        <dt><a href = \"#dt-population\">population</a></dt>\n\n        <dd>\n          <p>The sequence of items to be grouped, which is referred\n          to as the <b>population</b>, is determined by evaluating\n          the XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> contained in the\n          <code>select</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#dt-population-order\">population\n        order</a></dt>\n\n        <dd>\n          <p>The population is treated as a sequence; the order of\n          items in this sequence is referred to as <b>population\n          order</b></p>\n        </dd>\n\n        <dt><a href = \"#dt-principal-stylesheet-module\">principal\n        stylesheet module</a></dt>\n\n        <dd>\n          <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> may consist of several\n          <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a>, contained\n          in different XML documents. For a given transformation,\n          one of these functions as the <b>principal stylesheet\n          module</b>. The complete <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is assembled by finding\n          the <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> referenced\n          directly or indirectly from the principal stylesheet\n          module using <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> and\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n          elements: see <a href = \"#include\"><i>3.10.2 Stylesheet\n          Inclusion</i></a> and <a href = \"#import\"><i>3.10.3\n          Stylesheet Import</i></a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-processing-order\">processing\n        order</a></dt>\n\n        <dd>\n          <p>There is another ordering among groups referred to as\n          <b>processing order</b>. <span>If group <var>R</var>\n          precedes group <var>S</var> in processing order, then in\n          the result sequence returned by the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          instruction the items generated by processing group\n          <var>R</var> will precede the items generated by\n          processing group <var>S</var>.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-processor\">processor</a></dt>\n\n        <dd>\n          <p>The software responsible for transforming source trees\n          into result trees using an XSLT stylesheet is referred to\n          as the <b>processor</b>. This is sometimes expanded to\n          <em>XSLT processor</em> to avoid any confusion with other\n          processors, for example an XML processor.</p>\n        </dd>\n\n        <dt><a href = \"#dt-recoverable-error\">recoverable\n        error</a></dt>\n\n        <dd>\n          <p>Some dynamic errors are classed as <b>recoverable\n          errors</b>. When a recoverable error occurs, this\n          specification allows the processor either to signal the\n          error (by reporting the error condition and terminating\n          execution) or to take a defined recovery action and\n          continue processing.</p>\n        </dd>\n\n        <dt><a href = \"#dt-required-type\">required type</a></dt>\n\n        <dd>\n          <p>The context within a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> where an XPath <a title = \"expression\" href = \"#dt-expression\">expression</a>\n          <span>appears may specify</span> the <b>required type</b>\n          of the expression. The required type indicates the type\n          of the value that the expression is expected to\n          return.</p>\n        </dd>\n\n        <dt><a href = \"#dt-reserved-namespace\">reserved\n        namespace</a></dt>\n\n        <dd>\n          <p>The XSLT namespace, together with certain other\n          namespaces recognized by an XSLT processor, are\n          classified as <b>reserved namespaces</b> and <span class = \"verb\">must</span> be used only as specified in this and\n          related specifications.</p>\n        </dd>\n\n        <dt><a href = \"#dt-result-tree\">result tree</a></dt>\n\n        <dd>\n          <p>The term <b>result tree</b> is used to refer to any\n          tree constructed by <a title = \"instruction\" href = \"#dt-instruction\">instructions</a> in the stylesheet. A\n          result tree is either a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> or a\n          <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-schema-component\">schema\n        component</a></dt>\n\n        <dd>\n          <p>Type definitions and element and attribute\n          declarations are referred to collectively as <b>schema\n          components</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-schema-instance-namespace\">schema instance\n        namespace</a></dt>\n\n        <dd>\n          <p>The <b>schema instance namespace</b>\n          <code>http://www.w3.org/2001/XMLSchema-instance</code> is\n          used as defined in <a href = \"#xmlschema-1\">[XML Schema\n          Part 1]</a></p>\n        </dd>\n\n        <dt><a href = \"#dt-schema-namespace\">schema\n        namespace</a></dt>\n\n        <dd>\n          <p>The <b>schema namespace</b>\n          <code>http://www.w3.org/2001/XMLSchema</code> is used as\n          defined in <a href = \"#xmlschema-1\">[XML Schema Part\n          1]</a></p>\n        </dd>\n\n        <dt><a href = \"#dt-schema-aware-xslt-processor\">schema-aware\n        XSLT processor</a></dt>\n\n        <dd>\n          <p>A <b>schema-aware XSLT processor</b> is an XSLT\n          processor that implements all the mandatory requirements\n          of this specification, including those features that a\n          <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n          signals as an error. The mandatory requirements of this\n          specification are taken to include the mandatory\n          requirements of XPath 2.0, as described in <a href = \"#xpath20\">[XPath 2.0]</a>. A requirement is mandatory\n          unless the specification includes wording (such as the\n          use of the words <span class = \"verb\">should</span> or\n          <span class = \"verb\">may</span>) that clearly indicates\n          that it is optional.</p>\n        </dd>\n\n        <dt><a href = \"#dt-sequence-constructor\">sequence\n        constructor</a></dt>\n\n        <dd>\n          <p>A <b>sequence constructor</b> is a sequence of zero or\n          more sibling nodes in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that can be evaluated to\n          return a sequence of nodes and atomic values. The way\n          that the resulting sequence is used depends on the\n          containing instruction.</p>\n        </dd>\n\n        <dt><a href = \"#dt-serialization\">serialization</a></dt>\n\n        <dd>\n          <p>A frequent requirement is to output a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> as an XML document (or in other formats\n          such as HTML). This process is referred to as\n          <b>serialization</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-serialization-error\">serialization\n        error</a></dt>\n\n        <dd>\n          <p>If a transformation has successfully produced a\n          <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a>, it is\n          still possible that errors may occur in serializing the\n          result tree. For example, it may be impossible to\n          serialize the result tree using the encoding selected by\n          the user. Such an error is referred to as a\n          <b>serialization error</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-serialization-feature\">serialization\n        feature</a></dt>\n\n        <dd>\n          <p>A processor that claims conformance with the\n          <b>serialization feature</b> <span class = \"verb\">must</span> support the conversion of a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a> to a sequence of <span>octets</span>\n          following the rules defined in <a href = \"#serialization\"><i>20 Serialization</i></a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-shadows\">shadows</a></dt>\n\n        <dd>\n          <p>A binding <b>shadows</b> another binding if the\n          binding occurs at a point where the other binding is\n          visible, and the bindings have the same name.</p>\n        </dd>\n\n        <dt><a href = \"#dt-simplified-stylesheet-module\">simplified\n        stylesheet module</a></dt>\n\n        <dd>\n          <p>A <b>simplified stylesheet module</b> is a tree, or\n          part of a tree, consisting of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>\n          together with its descendant nodes and associated\n          attributes and namespaces. This element is not itself in\n          the XSLT namespace, but it <span class = \"verb\">must</span>\n          have an <code>xsl:version</code> attribute, which implies\n          that it <span class = \"verb\">must</span> have a namespace\n          node that declares a binding for the XSLT namespace. For\n          further details see <a href = \"#simplified-stylesheet\"><i>3.7 Simplified Stylesheet\n          Modules</i></a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-singleton-focus\">singleton focus</a></dt>\n\n        <dd>\n          <p>A <b>singleton focus</b> based on a node <var>N</var>\n          has the <a title = \"context item\" href = \"#dt-context-item\">context item</a> (and therefore the\n          <a title = \"context node\" href = \"#dt-context-node\">context\n          node</a>) set to <var>N</var>, and the <a title = \"context position\" href = \"#dt-context-position\">context\n          position</a> and <a title = \"context size\" href = \"#dt-context-size\">context size</a> both set to 1\n          (one).</p>\n        </dd>\n\n        <dt><a href = \"#dt-sort-key-component\">sort key\n        component</a></dt>\n\n        <dd>\n          <p>Within a <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>,\n          each <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>\n          element defines one <b>sort key component</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-sort-key-specification\">sort key\n        specification</a></dt>\n\n        <dd>\n          <p>A <b>sort key specification</b> is a sequence of one\n          or more adjacent <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements which\n          together define rules for sorting the items in an input\n          sequence to form a sorted sequence.</p>\n        </dd>\n\n        <dt><a href = \"#dt-sort-key-value\">sort key value</a></dt>\n\n        <dd>\n          <p>For each item in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a>, a value is\n          computed for each <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a> within\n          the <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>.\n          The value computed for an item by using the\n          <var>N</var>th sort key component is referred to as the\n          <var>N</var>th <b>sort key value</b> of that item.</p>\n        </dd>\n\n        <dt><a href = \"#dt-sorted-sequence\">sorted sequence</a></dt>\n\n        <dd>\n          <p>The sequence after sorting as defined by the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements is\n          referred to as the <b>sorted sequence</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-source-tree\">source tree</a></dt>\n\n        <dd>\n          <p>The term <b>source tree</b> means any tree provided as\n          input to the transformation. This includes the document\n          containing the <a title = \"initial context node\" href = \"#dt-initial-context-node\">initial context node</a> if\n          any, documents containing nodes supplied as the values of\n          <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>,\n          documents obtained from the results of functions such as\n          <a href = \"#function-document\"><code>document</code></a>,\n          <a href = \"http://www.w3.org/TR/xpath-functions/#func-doc\"><code>doc</code></a><sup>\n          <small>FO</small></sup>, and <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\"><code>\n          collection</code></a><sup><small>FO</small></sup>, and\n          documents returned by extension functions or extension\n          instructions. In the context of a particular XSLT\n          instruction, the term <b>source tree</b> means any tree\n          provided as input to that instruction; this may be a\n          source tree of the transformation as a whole, or it may\n          be a <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> produced during\n          the course of the transformation.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stable\">stable</a></dt>\n\n        <dd>\n          <p>A <a title = \"sort key specification\" href = \"#dt-sort-key-specification\">sort key specification</a>\n          is said to be <b>stable</b> if its first <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element has no\n          <code>stable</code> attribute, or has a\n          <code>stable</code> attribute whose <a title = \"effective value\" href = \"#dt-effective-value\">effective\n          value</a> is <code>yes</code>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-standalone-stylesheet-module\">standalone\n        stylesheet module</a></dt>\n\n        <dd>\n          <p>A <b>standalone stylesheet module</b> is a stylesheet\n          module that comprises the whole of an XML document.</p>\n        </dd>\n\n        <dt><a href = \"#dt-standard-attributes\">standard\n        attributes</a></dt>\n\n        <dd>\n          <p>There are a number of <b>standard attributes</b> that\n          may appear on any <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>: specifically\n          <code>version</code>,\n          <code>exclude-result-prefixes</code>,\n          <code>extension-element-prefixes</code>,\n          <code>xpath-default-namespace</code><span>,\n          <code>default-collation</code>, and\n          <code>use-when</code>.</span></p>\n        </dd>\n\n        <dt><a href = \"#dt-standard-function-namespace\">standard\n        function namespace</a></dt>\n\n        <dd>\n          <p>The <b>standard function namespace</b>\n          <code>http://www.w3.org/2005/xpath-functions</code> is\n          used for functions in the function library defined in\n          <a href = \"#xpath-functions\">[Functions and Operators]</a>\n          and standard functions defined in this specification.</p>\n        </dd>\n\n        <dt><a href = \"#dt-standard-stylesheet-module\">standard\n        stylesheet module</a></dt>\n\n        <dd>\n          <p>A <b>standard stylesheet module</b> is a tree, or part\n          of a tree, consisting of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a> or\n          <a href = \"#XSLT_element-transform\"><code>xsl:transform</code></a>\n          element (see <a href = \"#stylesheet-element\"><i>3.6\n          Stylesheet Element</i></a>) together with its descendant\n          nodes and associated attributes and namespaces.</p>\n        </dd>\n\n        <dt><a href = \"#dt-static-error\">static error</a></dt>\n\n        <dd>\n          <p>An error that is detected by examining a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> before\n          execution starts (that is, before the source document and\n          values of stylesheet parameters are available) is\n          referred to as a <b>static error</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-string-value\">string value</a></dt>\n\n        <dd>\n          <p>The term <b>string value</b> is defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-string-value\">Section\n          5.13 string-value\n          Accessor</a><sup><small>DM</small></sup>. Every node has\n          a <a title = \"string value\" href = \"#dt-string-value\">string\n          value</a>. For example, the <a title = \"string value\" href = \"#dt-string-value\">string value</a> of an element is the\n          concatenation of the <a title = \"string value\" href = \"#dt-string-value\">string values</a> of all its\n          descendant text nodes.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stylesheet\">stylesheet</a></dt>\n\n        <dd>\n          <p>A transformation in the XSLT language is expressed in\n          the form of a <b>stylesheet</b>, whose syntax is\n          well-formed XML <a href = \"#REC-xml\">[XML 1.0]</a>\n          conforming to the Namespaces in XML Recommendation\n          <a href = \"#REC-xml-names\">[Namespaces in XML 1.0]</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stylesheet-function\">stylesheet\n        function</a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-function\"><code>xsl:function</code></a>\n          declaration declares the name, parameters, and\n          implementation of a <b>stylesheet function</b> that can\n          be called from any XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> within the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stylesheet-level\">stylesheet\n        level</a></dt>\n\n        <dd>\n          <p>A <b>stylesheet level</b> is a collection of <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet modules</a> connected\n          using <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declarations: specifically, two stylesheet modules\n          <var>A</var> and <var>B</var> are part of the same\n          stylesheet level if one of them includes the other by\n          means of an <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          declaration, or if there is a third stylesheet module\n          <var>C</var> that is in the same stylesheet level as both\n          <var>A</var> and <var>B</var>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stylesheet-module\">stylesheet\n        module</a></dt>\n\n        <dd>\n          <p>A <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> consists of one or more\n          <b>stylesheet modules</b>, each one forming all or part\n          of an XML document.</p>\n        </dd>\n\n        <dt><a href = \"#dt-stylesheet-parameter\">stylesheet\n        parameter</a></dt>\n\n        <dd>\n          <p>A top-level <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> element\n          declares a <b>stylesheet parameter</b>. A stylesheet\n          parameter is a global variable with the additional\n          property that its value can be supplied by the caller\n          when a transformation is initiated.</p>\n        </dd>\n\n        <dt><a href = \"#dt-supplied-value\">supplied value</a></dt>\n\n        <dd>\n          <p>The value of the variable is computed using the\n          <a title = \"expression\" href = \"#dt-expression\">expression</a> given in the\n          <code>select</code> attribute or the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, as\n          described in <a href = \"#variable-values\"><i>9.3 Values of\n          Variables and Parameters</i></a>. This value is referred\n          to as the <b>supplied value</b> of the variable.</p>\n        </dd>\n\n        <dt><a href = \"#dt-target-namespace-uri\">target namespace\n        URI</a></dt>\n\n        <dd>\n          <p>The namespace URI that is to be used in the <a title = \"result tree\" href = \"#dt-result-tree\">result tree</a> as a\n          substitute for a <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> is\n          called the <b>target namespace URI</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-template\">template</a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n          declaration defines a <b>template</b>, which contains a\n          <span><a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence\n          constructor</a></span> for creating nodes and/or atomic\n          values. A template can serve either as a <a title = \"template rule\" href = \"#dt-template-rule\">template\n          rule</a>, invoked by matching nodes against a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, or as a\n          <a title = \"named template\" href = \"#dt-named-template\">named\n          template</a>, invoked explicitly by name. It is also\n          possible for the same template to serve in both\n          capacities.</p>\n        </dd>\n\n        <dt><a href = \"#dt-template-parameter\">template\n        parameter</a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n          element may appear as a child of an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n          element, before any non-<a href = \"#XSLT_element-param\"><code>xsl:param</code></a> children of\n          that element. Such a parameter is known as a <b>template\n          parameter</b>. A template parameter is a <a title = \"local variable\" href = \"#dt-local-variable\">local\n          variable</a> with the additional property that its value\n          can be set when the template is called, using any of the\n          instructions <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-template-rule\">template rule</a></dt>\n\n        <dd>\n          <p>A stylesheet contains a set of <b>template rules</b>\n          (see <a href = \"#rules\"><i>6 Template Rules</i></a>). A\n          template rule has three parts: a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a> that is matched against nodes,\n          a (possibly empty) set of <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameters</a>,\n          and a <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> that\n          is evaluated to produce a sequence of items.</p>\n        </dd>\n\n        <dt><a href = \"#dt-temporary-output-state\">temporary output\n        state</a></dt>\n\n        <dd>\n          <p>The second of the two <a title = \"output state\" href = \"#dt-output-state\">output states</a> is called\n          <b>temporary output</b> state. This state applies when\n          instructions are writing to a <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a> or any other\n          non-final destination.</p>\n        </dd>\n\n        <dt><a href = \"#dt-temporary-tree\">temporary tree</a></dt>\n\n        <dd>\n          <p>The term <b>temporary tree</b> means any tree that is\n          neither a <a title = \"source tree\" href = \"#dt-source-tree\">source tree</a> nor a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result tree</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-top-level\">top-level</a></dt>\n\n        <dd>\n          <p>An element occurring as a child of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element is called a <b>top-level</b> element.</p>\n        </dd>\n\n        <dt><a href = \"#dt-tunnel-parameter\">tunnel\n        parameter</a></dt>\n\n        <dd>\n          <p>A parameter passed to a template may be defined as a\n          <b>tunnel parameter</b>. Tunnel parameters have the\n          property that they are automatically passed on by the\n          called template to any further templates that it calls,\n          and so on recursively.</p>\n        </dd>\n\n        <dt><a href = \"#dt-annotation\">type annotation</a></dt>\n\n        <dd>\n          <p>The term <b>type annotation</b> is used in this\n          specification to refer to the value returned by the\n          <code>dm:type-name</code> accessor of a node: see\n          <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-type-name\">\n          Section 5.14 type-name\n          Accessor</a><sup><small>DM</small></sup>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-type-error\">type errors</a></dt>\n\n        <dd>\n          <p>Certain errors are classified as <b>type errors</b>. A\n          type error occurs when the value supplied as input to an\n          operation is of the wrong type for that operation, for\n          example when an integer is supplied to an operation that\n          expects a node.</p>\n        </dd>\n\n        <dt><a href = \"#dt-typed-value\">typed value</a></dt>\n\n        <dd>\n          <p>The term <b>typed value</b> is defined in <a href = \"http://www.w3.org/TR/xpath-datamodel/#dm-typed-value\">Section\n          5.15 typed-value\n          Accessor</a><sup><small>DM</small></sup>. Every node\n          except an element defined in the schema with element-only\n          content has a <a title = \"string value\" href = \"#dt-string-value\">typed value</a>. For example, the\n          <a title = \"typed value\" href = \"#dt-typed-value\">typed\n          value</a> of an attribute of type <code>xs:IDREFS</code>\n          is a sequence of zero or more <code>xs:IDREF</code>\n          values.</p>\n        </dd>\n\n        <dt><a href = \"#dt-data-element\">user-defined data\n        element</a></dt>\n\n        <dd>\n          <p>In addition to <a title = \"declaration\" href = \"#dt-declaration\">declarations</a>, the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element may contain any element not from the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, provided that the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of the element\n          has a non-null namespace URI. Such elements are referred\n          to as <b>user-defined data elements</b>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-value\">value</a></dt>\n\n        <dd>\n          <p>A variable is a binding between a name and a value.\n          The <b>value</b> of a variable is any sequence (of nodes\n          and/or atomic values), as defined in <a href = \"#xpath-datamodel\">[Data Model]</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-variable\">variable</a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> element\n          declares a <b>variable</b>, which may be a <a title = \"global variable\" href = \"#dt-global-variable\">global\n          variable</a> or a <a title = \"local variable\" href = \"#dt-local-variable\">local variable</a>.</p>\n        </dd>\n\n        <dt><a href = \"#dt-variable-binding-element\">variable-binding\n        element</a></dt>\n\n        <dd>\n          <p>The two elements <a href = \"#XSLT_element-variable\"><code>xsl:variable</code></a> and\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a> are\n          referred to as <b>variable-binding elements</b></p>\n        </dd>\n\n        <dt><a href = \"#dt-whitespace-text-node\">whitespace text\n        node</a></dt>\n\n        <dd>\n          <p>A <b>whitespace text node</b> is a text node whose\n          content consists entirely of whitespace characters (that\n          is, #x09, #x0A, #x0D, or #x20).</p>\n        </dd>\n      </dl>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"element-syntax-summary\" id = \"element-syntax-summary\"></a>D Element Syntax Summary\n      (Non-Normative)</h2>\n\n      <p>The syntax of each XSLT element is summarized below,\n      together with the context in the stylesheet where the element\n      may appear. Some elements (specifically, instructions) are\n      allowed as a child of any element that is allowed to contain\n      a sequence constructor. These elements are:</p>\n\n      <ul>\n        <li>Literal result elements</li>\n\n        <li>Extension instructions, if so defined</li>\n      </ul>\n\n      <p><b><a href = \"#XSLT_element-analyze-string\">xsl:analyze-string</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:analyze-string<br/>\n            &#160;&#160;<b>select</b> = <var>expression</var><br/>\n            &#160;&#160;<b>regex</b> = { <var>string</var> }<br/>\n            &#160;&#160;flags? = { <var>string</var> }&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-matching-substring\">xsl:matching-substring</a>?,\n            <a href = \"#XSLT_element-non-matching-substring\">xsl:non-matching-substring</a>?,\n            <a href = \"#XSLT_element-fallback\">xsl:fallback</a>*)\n            --&gt;<br/>\n            &lt;/xsl:analyze-string&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-apply-imports\">xsl:apply-imports</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:apply-imports&gt;<br/>\n            &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-with-param\">xsl:with-param</a>* --&gt;<br/>\n            &lt;/xsl:apply-imports&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-apply-templates\">xsl:apply-templates</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:apply-templates<br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;mode? = <var>token</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a> | <a href = \"#XSLT_element-with-param\">xsl:with-param</a>)* --&gt;<br/>\n            &lt;/xsl:apply-templates&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-attribute\">xsl:attribute</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:attribute<br/>\n            &#160;&#160;<b>name</b> = { <var>qname</var> }<br/>\n            &#160;&#160;namespace? = { <var>uri-reference</var>\n            }<br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;separator? = { <var>string</var> }<br/>\n            &#160;&#160;type? = <var>qname</var><br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:attribute&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:attribute-set</code></li>\n\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-attribute-set\">xsl:attribute-set</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:attribute-set<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;use-attribute-sets? =\n            <var>qnames</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-attribute\">xsl:attribute</a>* --&gt;<br/>\n            &lt;/xsl:attribute-set&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-call-template\">xsl:call-template</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:call-template<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-with-param\">xsl:with-param</a>* --&gt;<br/>\n            &lt;/xsl:call-template&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-character-map\">xsl:character-map</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:character-map<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;use-character-maps? =\n            <var>qnames</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-output-character\">xsl:output-character</a>*)\n            --&gt;<br/>\n            &lt;/xsl:character-map&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-choose\">xsl:choose</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:choose&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-when\">xsl:when</a>+, <a href = \"#XSLT_element-otherwise\">xsl:otherwise</a>?) --&gt;<br/>\n            &lt;/xsl:choose&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-comment\">xsl:comment</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:comment<br/>\n            &#160;&#160;select? = <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:comment&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-copy\">xsl:copy</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:copy<br/>\n            &#160;&#160;copy-namespaces? = \"yes\" | \"no\"<br/>\n            &#160;&#160;inherit-namespaces? = \"yes\" | \"no\"<br/>\n            &#160;&#160;use-attribute-sets? =\n            <var>qnames</var><br/>\n            &#160;&#160;type? = <var>qname</var><br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:copy&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-copy-of\">xsl:copy-of</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:copy-of<br/>\n            &#160;&#160;<b>select</b> = <var>expression</var><br/>\n            &#160;&#160;copy-namespaces? = \"yes\" | \"no\"<br/>\n            &#160;&#160;type? = <var>qname</var><br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-decimal-format\">xsl:decimal-format</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:decimal-format<br/>\n            &#160;&#160;name? = <var>qname</var><br/>\n            &#160;&#160;decimal-separator? = <var>char</var><br/>\n            &#160;&#160;grouping-separator? = <var>char</var><br/>\n            &#160;&#160;infinity? = <var>string</var><br/>\n            &#160;&#160;minus-sign? = <var>char</var><br/>\n            &#160;&#160;NaN? = <var>string</var><br/>\n            &#160;&#160;percent? = <var>char</var><br/>\n            &#160;&#160;per-mille? = <var>char</var><br/>\n            &#160;&#160;zero-digit? = <var>char</var><br/>\n            &#160;&#160;digit? = <var>char</var><br/>\n            &#160;&#160;pattern-separator? =\n            <var>char</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-document\">xsl:document</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:document<br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"<br/>\n            &#160;&#160;type? = <var>qname</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:document&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-element\">xsl:element</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:element<br/>\n            &#160;&#160;<b>name</b> = { <var>qname</var> }<br/>\n            &#160;&#160;namespace? = { <var>uri-reference</var>\n            }<br/>\n            &#160;&#160;inherit-namespaces? = \"yes\" | \"no\"<br/>\n            &#160;&#160;use-attribute-sets? =\n            <var>qnames</var><br/>\n            &#160;&#160;type? = <var>qname</var><br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:element&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-fallback\">xsl:fallback</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:fallback&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:fallback&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-for-each\">xsl:for-each</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:for-each<br/>\n            &#160;&#160;<b>select</b> =\n            <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>*,\n            <var>sequence-constructor</var>) --&gt;<br/>\n            &lt;/xsl:for-each&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-for-each-group\">xsl:for-each-group</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:for-each-group<br/>\n            &#160;&#160;<b>select</b> = <var>expression</var><br/>\n            &#160;&#160;group-by? = <var>expression</var><br/>\n            &#160;&#160;group-adjacent? =\n            <var>expression</var><br/>\n            &#160;&#160;group-starting-with? =\n            <var>pattern</var><br/>\n            &#160;&#160;group-ending-with? =\n            <var>pattern</var><br/>\n            &#160;&#160;collation? = { <var>uri</var> }&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>*,\n            <var>sequence-constructor</var>) --&gt;<br/>\n            &lt;/xsl:for-each-group&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-function\">xsl:function</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:function<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;as? = <var>sequence-type</var><br/>\n            &#160;&#160;override? = \"yes\" | \"no\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-param\">xsl:param</a>*,\n            <var>sequence-constructor</var>) --&gt;<br/>\n            &lt;/xsl:function&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-if\">xsl:if</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:if<br/>\n            &#160;&#160;<b>test</b> =\n            <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:if&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-import\">xsl:import</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:import<br/>\n            &#160;&#160;<b>href</b> =\n            <var>uri-reference</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-import-schema\">xsl:import-schema</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:import-schema<br/>\n            &#160;&#160;namespace? = <var>uri-reference</var><br/>\n            &#160;&#160;schema-location? =\n            <var>uri-reference</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: xs:schema? --&gt;<br/>\n            &lt;/xsl:import-schema&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-include\">xsl:include</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:include<br/>\n            &#160;&#160;<b>href</b> =\n            <var>uri-reference</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-key\">xsl:key</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:key<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;<b>match</b> = <var>pattern</var><br/>\n            &#160;&#160;use? = <var>expression</var><br/>\n            &#160;&#160;collation? = <var>uri</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:key&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-matching-substring\">xsl:matching-substring</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:matching-substring&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:matching-substring&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:analyze-string</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-message\">xsl:message</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:message<br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;terminate? = { \"yes\" | \"no\" }&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:message&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n\n              <li><code>xsl:function</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-namespace\">xsl:namespace</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:namespace<br/>\n            &#160;&#160;<b>name</b> = { <var>ncname</var> }<br/>\n            &#160;&#160;select? = <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:namespace&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-namespace-alias\">xsl:namespace-alias</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:namespace-alias<br/>\n            &#160;&#160;<b>stylesheet-prefix</b> =\n            <var>prefix</var> | \"#default\"<br/>\n            &#160;&#160;<b>result-prefix</b> = <var>prefix</var> |\n            \"#default\"&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-next-match\">xsl:next-match</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:next-match&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-with-param\">xsl:with-param</a> | <a href = \"#XSLT_element-fallback\">xsl:fallback</a>)* --&gt;<br/>\n            &lt;/xsl:next-match&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-non-matching-substring\">xsl:non-matching-substring</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:non-matching-substring&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:non-matching-substring&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:analyze-string</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-number\">xsl:number</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:number<br/>\n            &#160;&#160;value? = <var>expression</var><br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;level? = \"single\" | \"multiple\" |\n            \"any\"<br/>\n            &#160;&#160;count? = <var>pattern</var><br/>\n            &#160;&#160;from? = <var>pattern</var><br/>\n            &#160;&#160;format? = { <var>string</var> }<br/>\n            &#160;&#160;lang? = { <var>nmtoken</var> }<br/>\n            &#160;&#160;letter-value? = { \"alphabetic\" |\n            \"traditional\" }<br/>\n            &#160;&#160;ordinal? = { <var>string</var> }<br/>\n            &#160;&#160;grouping-separator? = { <var>char</var>\n            }<br/>\n            &#160;&#160;grouping-size? = { <var>number</var>\n            }&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-otherwise\">xsl:otherwise</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:otherwise&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:otherwise&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:choose</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-output\">xsl:output</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:output<br/>\n            &#160;&#160;name? = <var>qname</var><br/>\n            &#160;&#160;method? = \"xml\" | \"html\" | \"xhtml\" | \"text\"\n            | <var>qname-but-not-ncname</var><br/>\n            &#160;&#160;byte-order-mark? = \"yes\" | \"no\"<br/>\n            &#160;&#160;cdata-section-elements? =\n            <var>qnames</var><br/>\n            &#160;&#160;doctype-public? = <var>string</var><br/>\n            &#160;&#160;doctype-system? = <var>string</var><br/>\n            &#160;&#160;encoding? = <var>string</var><br/>\n            &#160;&#160;escape-uri-attributes? = \"yes\" | \"no\"<br/>\n            &#160;&#160;include-content-type? = \"yes\" | \"no\"<br/>\n            &#160;&#160;indent? = \"yes\" | \"no\"<br/>\n            &#160;&#160;media-type? = <var>string</var><br/>\n            &#160;&#160;normalization-form? = \"NFC\" | \"NFD\" |\n            \"NFKC\" | \"NFKD\" | \"fully-normalized\" | \"none\" |\n            <var>nmtoken</var><br/>\n            &#160;&#160;omit-xml-declaration? = \"yes\" | \"no\"<br/>\n            &#160;&#160;standalone? = \"yes\" | \"no\" | \"omit\"<br/>\n            &#160;&#160;undeclare-prefixes? = \"yes\" | \"no\"<br/>\n            &#160;&#160;use-character-maps? =\n            <var>qnames</var><br/>\n            &#160;&#160;version? =\n            <var>nmtoken</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-output-character\">xsl:output-character</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:output-character<br/>\n            &#160;&#160;<b>character</b> = <var>char</var><br/>\n            &#160;&#160;<b>string</b> =\n            <var>string</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:character-map</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-param\">xsl:param</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:param<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;as? = <var>sequence-type</var><br/>\n            &#160;&#160;required? = \"yes\" | \"no\"<br/>\n            &#160;&#160;tunnel? = \"yes\" | \"no\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:param&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n\n              <li><code>xsl:function</code></li>\n\n              <li><code>xsl:template</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-perform-sort\">xsl:perform-sort</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:perform-sort<br/>\n            &#160;&#160;select? = <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-sort\">xsl:sort</a>+,\n            <var>sequence-constructor</var>) --&gt;<br/>\n            &lt;/xsl:perform-sort&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-preserve-space\">xsl:preserve-space</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:preserve-space<br/>\n            &#160;&#160;<b>elements</b> =\n            <var>tokens</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-processing-instruction\">xsl:processing-instruction</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:processing-instruction<br/>\n            &#160;&#160;<b>name</b> = { <var>ncname</var> }<br/>\n            &#160;&#160;select? = <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:processing-instruction&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-result-document\">xsl:result-document</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:result-document<br/>\n            &#160;&#160;format? = { <var>qname</var> }<br/>\n            &#160;&#160;href? = { <var>uri-reference</var> }<br/>\n            &#160;&#160;validation? = \"strict\" | \"lax\" | \"preserve\"\n            | \"strip\"<br/>\n            &#160;&#160;type? = <var>qname</var><br/>\n            &#160;&#160;method? = { \"xml\" | \"html\" | \"xhtml\" |\n            \"text\" | <var>qname-but-not-ncname</var> }<br/>\n            &#160;&#160;byte-order-mark? = { \"yes\" | \"no\" }<br/>\n            &#160;&#160;cdata-section-elements? = {\n            <var>qnames</var> }<br/>\n            &#160;&#160;doctype-public? = { <var>string</var>\n            }<br/>\n            &#160;&#160;doctype-system? = { <var>string</var>\n            }<br/>\n            &#160;&#160;encoding? = { <var>string</var> }<br/>\n            &#160;&#160;escape-uri-attributes? = { \"yes\" | \"no\"\n            }<br/>\n            &#160;&#160;include-content-type? = { \"yes\" | \"no\"\n            }<br/>\n            &#160;&#160;indent? = { \"yes\" | \"no\" }<br/>\n            &#160;&#160;media-type? = { <var>string</var> }<br/>\n            &#160;&#160;normalization-form? = { \"NFC\" | \"NFD\" |\n            \"NFKC\" | \"NFKD\" | \"fully-normalized\" | \"none\" |\n            <var>nmtoken</var> }<br/>\n            &#160;&#160;omit-xml-declaration? = { \"yes\" | \"no\"\n            }<br/>\n            &#160;&#160;standalone? = { \"yes\" | \"no\" | \"omit\"\n            }<br/>\n            &#160;&#160;undeclare-prefixes? = { \"yes\" | \"no\"\n            }<br/>\n            &#160;&#160;use-character-maps? =\n            <var>qnames</var><br/>\n            &#160;&#160;output-version? = { <var>nmtoken</var>\n            }&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:result-document&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-sequence\">xsl:sequence</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:sequence<br/>\n            &#160;&#160;<b>select</b> =\n            <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: <a href = \"#XSLT_element-fallback\">xsl:fallback</a>* --&gt;<br/>\n            &lt;/xsl:sequence&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-sort\">xsl:sort</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:sort<br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;lang? = { <var>nmtoken</var> }<br/>\n            &#160;&#160;order? = { \"ascending\" | \"descending\"\n            }<br/>\n            &#160;&#160;collation? = { <var>uri</var> }<br/>\n            &#160;&#160;stable? = { \"yes\" | \"no\" }<br/>\n            &#160;&#160;case-order? = { \"upper-first\" |\n            \"lower-first\" }<br/>\n            &#160;&#160;data-type? = { \"text\" | \"number\" |\n            <var>qname-but-not-ncname</var> }&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:sort&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:apply-templates</code></li>\n\n              <li><code>xsl:for-each</code></li>\n\n              <li><code>xsl:for-each-group</code></li>\n\n              <li><code>xsl:perform-sort</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-strip-space\">xsl:strip-space</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:strip-space<br/>\n            &#160;&#160;<b>elements</b> =\n            <var>tokens</var>&#160;/&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-stylesheet\">xsl:stylesheet</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:stylesheet<br/>\n            &#160;&#160;id? = <var>id</var><br/>\n            &#160;&#160;extension-element-prefixes? =\n            <var>tokens</var><br/>\n            &#160;&#160;exclude-result-prefixes? =\n            <var>tokens</var><br/>\n            &#160;&#160;<b>version</b> = <var>number</var><br/>\n            &#160;&#160;xpath-default-namespace? =\n            <var>uri</var><br/>\n            &#160;&#160;default-validation? = \"preserve\" |\n            \"strip\"<br/>\n            &#160;&#160;default-collation? =\n            <var>uri-list</var><br/>\n            &#160;&#160;input-type-annotations? = \"preserve\" |\n            \"strip\" | \"unspecified\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-import\">xsl:import</a>*,\n            <var>other-declarations</var>) --&gt;<br/>\n            &lt;/xsl:stylesheet&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>None</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-template\">xsl:template</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:template<br/>\n            &#160;&#160;match? = <var>pattern</var><br/>\n            &#160;&#160;name? = <var>qname</var><br/>\n            &#160;&#160;priority? = <var>number</var><br/>\n            &#160;&#160;mode? = <var>tokens</var><br/>\n            &#160;&#160;as? = <var>sequence-type</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-param\">xsl:param</a>*,\n            <var>sequence-constructor</var>) --&gt;<br/>\n            &lt;/xsl:template&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-text\">xsl:text</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:text<br/>\n            &#160;&#160;<span class = \"grayed\">[disable-output-escaping]?</span> = \"yes\" |\n            \"no\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content: #PCDATA --&gt;<br/>\n            &lt;/xsl:text&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-transform\">xsl:transform</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:transform<br/>\n            &#160;&#160;id? = <var>id</var><br/>\n            &#160;&#160;extension-element-prefixes? =\n            <var>tokens</var><br/>\n            &#160;&#160;exclude-result-prefixes? =\n            <var>tokens</var><br/>\n            &#160;&#160;<b>version</b> = <var>number</var><br/>\n            &#160;&#160;xpath-default-namespace? =\n            <var>uri</var><br/>\n            &#160;&#160;default-validation? = \"preserve\" |\n            \"strip\"<br/>\n            &#160;&#160;default-collation? =\n            <var>uri-list</var><br/>\n            &#160;&#160;input-type-annotations? = \"preserve\" |\n            \"strip\" | \"unspecified\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content: (<a href = \"#XSLT_element-import\">xsl:import</a>*,\n            <var>other-declarations</var>) --&gt;<br/>\n            &lt;/xsl:transform&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>None</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-value-of\">xsl:value-of</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:value-of<br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;separator? = { <var>string</var> }<br/>\n            &#160;&#160;<span class = \"grayed\">[disable-output-escaping]?</span> = \"yes\" |\n            \"no\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:value-of&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-variable\">xsl:variable</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Category:</i> declaration instruction</p>\n\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:variable<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;as? = <var>sequence-type</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:variable&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:stylesheet</code></li>\n\n              <li><code>xsl:transform</code></li>\n\n              <li><code>xsl:function</code></li>\n\n              <li>any XSLT element whose content model is\n              <i>sequence constructor</i></li>\n\n              <li>any literal result element</li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-when\">xsl:when</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:when<br/>\n            &#160;&#160;<b>test</b> =\n            <var>expression</var>&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:when&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:choose</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n\n      <p><b><a href = \"#XSLT_element-with-param\">xsl:with-param</a></b></p>\n\n      <table width = \"100%\">\n        <tr>\n          <td width = \"10%\">&#160;</td>\n\n          <td>\n            <p><i>Model:</i></p>\n\n            <p class = \"element-syntax-summary\">\n            <code>&lt;xsl:with-param<br/>\n            &#160;&#160;<b>name</b> = <var>qname</var><br/>\n            &#160;&#160;select? = <var>expression</var><br/>\n            &#160;&#160;as? = <var>sequence-type</var><br/>\n            &#160;&#160;tunnel? = \"yes\" | \"no\"&gt;<br/>\n            &#160;&#160;&lt;!-- Content:\n            <var>sequence-constructor</var> --&gt;<br/>\n            &lt;/xsl:with-param&gt;</code></p>\n\n            <p><i>Permitted parent elements:</i></p>\n\n            <ul>\n              <li><code>xsl:apply-templates</code></li>\n\n              <li><code>xsl:apply-imports</code></li>\n\n              <li><code>xsl:call-template</code></li>\n\n              <li><code>xsl:next-match</code></li>\n            </ul>\n          </td>\n        </tr>\n      </table>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"error-summary\" id = \"error-summary\"></a>E Summary\n      of Error Conditions (Non-Normative)</h2>\n\n      <p>This appendix provides a summary of error conditions that\n      a processor may signal. This list is not exhaustive or\n      definitive. The errors are numbered for ease of reference,\n      but there is no implication that an implementation\n      <span class = \"verb\">must</span> signal errors using these\n      error codes, or that applications can test for these codes.\n      Moreover, implementations are not <span class = \"verb\">required</span> to signal errors using the descriptive\n      text used here.</p>\n\n      <p><b>Static errors</b></p>\n\n      <dl>\n        <dt><a href = \"#err-XTSE0010\"><span class = \"error\">ERR\n        XTSE0010</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"static error\" href = \"#dt-static-error\">static error</a> is signaled if an\n          XSLT-defined element is used in a context where it is not\n          permitted, if a <span class = \"verb\">required</span>\n          attribute is omitted, or if the content of the element\n          does not correspond to the content that is allowed for\n          the element.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0020\"><span class = \"error\">ERR\n        XTSE0020</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an attribute\n          (other than an attribute written using curly brackets in\n          a position where an <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a> is permitted) contains a value that is not\n          one of the permitted values for that attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0080\"><span class = \"error\">ERR\n        XTSE0080</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> to use a <a title = \"reserved namespace\" href = \"#dt-reserved-namespace\">reserved namespace</a> in the\n          name of a <a title = \"named template\" href = \"#dt-named-template\">named template</a>, a <a title = \"mode\" href = \"#dt-mode\">mode</a>, an <a title = \"attribute set\" href = \"#dt-attribute-set\">attribute\n          set</a>, a <a title = \"key\" href = \"#dt-key\">key</a>, a\n          <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal-format</a>, a <a title = \"variable\" href = \"#dt-variable\">variable</a> or <a title = \"parameter\" href = \"#dt-parameter\">parameter</a>, a\n          <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>, a\n          named <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a>, or a\n          <a title = \"character map\" href = \"#dt-character-map\">character map</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0090\"><span class = \"error\">ERR\n        XTSE0090</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> for an element from\n          the XSLT namespace to have an attribute whose namespace\n          is either null (that is, an attribute with an unprefixed\n          name) or the XSLT namespace, other than attributes\n          defined for the element in this document.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0110\"><span class = \"error\">ERR\n        XTSE0110</span></a></dt>\n\n        <dd>\n          <p>The value of the <code>version</code> attribute\n          <span class = \"verb\">must</span> be a number: specifically,\n          it <span class = \"verb\">must</span> be a <span>a valid\n          instance of the type <code>xs:decimal</code> as defined\n          in <a href = \"#xmlschema-2\">[XML Schema Part\n          2]</a></span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0120\"><span class = \"error\">ERR\n        XTSE0120</span></a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element <span class = \"verb\">must not</span> have any text\n          node children.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0125\"><span class = \"error\">ERR\n        XTSE0125</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of an\n          <code>[xsl:]default-collation</code> attribute<span>,\n          after resolving against the base URI,</span> contains no\n          URI that the implementation recognizes as a collation\n          URI.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0130\"><span class = \"error\">ERR\n        XTSE0130</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element has a child element whose name has a null\n          namespace URI.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0150\"><span class = \"error\">ERR\n        XTSE0150</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>\n          that is used as the outermost element of a simplified\n          stylesheet module <span class = \"verb\">must</span> have an\n          <code>xsl:version</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0165\"><span class = \"error\">ERR\n        XTSE0165</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the processor is\n          not able to retrieve the resource identified by the URI\n          reference [ in the <code>href</code> attribute of\n          <a href = \"#XSLT_element-include\"><code>xsl:include</code></a>\n          or <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>]\n          , or if the resource that is retrieved does not contain a\n          stylesheet module conforming to this specification.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0170\"><span class = \"error\">ERR\n        XTSE0170</span></a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          <span class = \"verb\">must</span> be a <a title = \"top-level\" href = \"#dt-top-level\">top-level</a> element.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0180\"><span class = \"error\">ERR\n        XTSE0180</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a stylesheet\n          module directly or indirectly includes itself.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0190\"><span class = \"error\">ERR\n        XTSE0190</span></a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> element\n          <span class = \"verb\">must</span> be a <a title = \"top-level\" href = \"#dt-top-level\">top-level</a> element.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0200\"><span class = \"error\">ERR\n        XTSE0200</span></a></dt>\n\n        <dd>\n          <p>The <a href = \"#XSLT_element-import\"><code>xsl:import</code></a> element\n          children <span class = \"verb\">must</span> precede all other\n          element children of an <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n          element, including any <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> element\n          children and any <a title = \"user-defined data element\" href = \"#dt-data-element\">user-defined data\n          elements</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0210\"><span class = \"error\">ERR\n        XTSE0210</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a stylesheet\n          module directly or indirectly imports itself.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0215\"><span class = \"error\">ERR\n        XTSE0215</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          element that contains an <code>xs:schema</code> element\n          has a <code>schema-location</code> attribute, or if it\n          has a <code>namespace</code> attribute that conflicts\n          with the target namespace of the contained schema.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0220\"><span class = \"error\">ERR\n        XTSE0220</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the synthetic\n          schema document does not satisfy the constraints\n          described in <a href = \"#xmlschema-1\">[XML Schema Part\n          1]</a> (section 5.1, <em>Errors in Schema Construction\n          and Structure</em>). This includes, without loss of\n          generality, conflicts such as multiple definitions of the\n          same name.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0260\"><span class = \"error\">ERR\n        XTSE0260</span></a></dt>\n\n        <dd>\n          <p>Within an <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a> that is <span class = \"verb\">required</span> to be empty, any content other\n          than comments or processing instructions, including any\n          <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text node</a>\n          preserved using the <code>xml:space=\"preserve\"</code>\n          attribute, is a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0265\"><span class = \"error\">ERR\n        XTSE0265</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if there is a\n          <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> in the\n          <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> that specifies\n          <code>input-type-annotations=\"strip\"</code> and another\n          <a title = \"stylesheet module\" href = \"#dt-stylesheet-module\">stylesheet module</a> that\n          specifies\n          <code>input-type-annotations=\"preserve\"</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0280\"><span class = \"error\">ERR\n        XTSE0280</span></a></dt>\n\n        <dd>\n          <p>In the case of a <span>prefixed</span> <a title = \"QName\" href = \"#dt-qname\">QName</a> used as the value of\n          an attribute in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>, or appearing within an\n          XPath <a title = \"expression\" href = \"#dt-expression\">expression</a> in the stylesheet, it is\n          a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a> if the <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a> has no\n          namespace node whose name matches the prefix of the\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0340\"><span class = \"error\">ERR\n        XTSE0340</span></a></dt>\n\n        <dd>\n          <p>Where an attribute is defined to contain a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>, it is a\n          <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a> if the pattern does not match the production\n          <a href = \"#NT-Pattern\">Pattern</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0350\"><span class = \"error\">ERR\n        XTSE0350</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an unescaped left\n          curly bracket appears in a fixed part of an attribute\n          value template without a matching right curly\n          bracket.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0370\"><span class = \"error\">ERR\n        XTSE0370</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an unescaped right\n          curly bracket occurs in a fixed part of an attribute\n          value template.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0500\"><span class = \"error\">ERR\n        XTSE0500</span></a></dt>\n\n        <dd>\n          <p>An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n          <span class = \"verb\">must</span> have either a\n          <code>match</code> attribute or a <code>name</code>\n          attribute, or both. An <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> element\n          that has no <code>match</code> attribute <span class = \"verb\">must</span> have no <code>mode</code> attribute\n          and no <code>priority</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0530\"><span class = \"error\">ERR\n        XTSE0530</span></a></dt>\n\n        <dd>\n          <p>The value of this attribute [the <code>priority</code>\n          attribute of the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n          element] <span class = \"verb\">must</span> <span>conform to\n          the rules for the <code>xs:decimal</code> type defined in\n          <a href = \"#xmlschema-2\">[XML Schema Part 2]</a>. Negative\n          values are permitted.</span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0550\"><span class = \"error\">ERR\n        XTSE0550</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the list [of modes\n          in the <code>mode</code> attribute of <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>] is\n          empty, if the same token is included more than once in\n          the list, if the list contains an invalid token, or if\n          the token <code>#all</code> appears together with any\n          other value.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0580\"><span class = \"error\">ERR\n        XTSE0580</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if two parameters of\n          a template or of a stylesheet function have the same\n          name.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0620\"><span class = \"error\">ERR\n        XTSE0620</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">variable-binding\n          element</a> has a <code>select</code> attribute and has\n          non-empty content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0630\"><span class = \"error\">ERR\n        XTSE0630</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n          contains more than one binding of a global variable with\n          the same name and same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a><span>,\n          unless it also contains another binding with the same\n          name and higher import precedence</span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0650\"><span class = \"error\">ERR\n        XTSE0650</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n          contains an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          instruction whose <code>name</code> attribute does not\n          match the <code>name</code> attribute of any <a href = \"#XSLT_element-template\"><code>xsl:template</code></a> in the\n          <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0660\"><span class = \"error\">ERR\n        XTSE0660</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n          contains more than one <a title = \"template\" href = \"#dt-template\">template</a> with the same name and the\n          same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a><span>,\n          unless it also contains a <a title = \"template\" href = \"#dt-template\">template</a> with the same name and higher\n          <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a></span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0670\"><span class = \"error\">ERR\n        XTSE0670</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a single <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n          element contains two or more <a href = \"#XSLT_element-with-param\"><code>xsl:with-param</code></a>\n          elements with <span>matching <code>name</code>\n          attributes</span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0680\"><span class = \"error\">ERR\n        XTSE0680</span></a></dt>\n\n        <dd>\n          <p>In the case of <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>,\n          it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> to pass a\n          <span>non-tunnel</span> parameter named <var>x</var> to a\n          template that does not have a <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> named\n          <var>x</var><span>, unless <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled for the <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          instruction</span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0690\"><span class = \"error\">ERR\n        XTSE0690</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a template that is\n          invoked using <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          declares a <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a>\n          specifying <code>required=\"yes\"</code> <span>and not\n          specifying <code>tunnel=\"yes\"</code></span>, if no value\n          for this parameter is supplied by the calling\n          instruction.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0710\"><span class = \"error\">ERR\n        XTSE0710</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of the\n          <code>use-attribute-sets</code> attribute of an <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>, <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, or\n          <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n          element, or the <code>xsl:use-attribute-sets</code>\n          attribute of a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result element</a>,\n          is not a <span>whitespace-separated</span> sequence of\n          <a title = \"QName\" href = \"#dt-qname\">QNames</a>, or if it\n          contains a QName that does not match the\n          <code>name</code> attribute of any <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n          declaration in the stylesheet.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0720\"><span class = \"error\">ERR\n        XTSE0720</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-attribute-set\"><code>xsl:attribute-set</code></a>\n          element directly or indirectly references itself via the\n          names contained in the <code>use-attribute-sets</code>\n          attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0740\"><span class = \"error\">ERR\n        XTSE0740</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a>\n          <span class = \"verb\">must</span> have a prefixed name, to\n          remove any risk of a clash with a function in the default\n          function namespace. It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the name has no\n          prefix.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0760\"><span class = \"error\">ERR\n        XTSE0760</span></a></dt>\n\n        <dd>\n          <p>Because arguments to a stylesheet function call\n          <span class = \"verb\">must</span> all be specified, the\n          <a href = \"#XSLT_element-param\"><code>xsl:param</code></a>\n          elements within an <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> element\n          <span class = \"verb\">must not</span> specify a default\n          value: this means they <span class = \"verb\">must</span> be\n          empty, and <span class = \"verb\">must not</span> have a\n          <code>select</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0770\"><span class = \"error\">ERR\n        XTSE0770</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> for a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to\n          contain two or more functions with the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>, the same\n          <a title = \"arity\" href = \"#dt-arity\">arity</a>, and the same\n          <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>, unless\n          there is another function with the same <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> and arity, and a\n          higher import precedence.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0805\"><span class = \"error\">ERR\n        XTSE0805</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an attribute on a\n          literal result element is in the <a title = \"XSLT namespace\" href = \"#dt-xslt-namespace\">XSLT\n          namespace</a>, unless it is one of the attributes\n          explicitly defined in this specification.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0808\"><span class = \"error\">ERR\n        XTSE0808</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a namespace prefix\n          is used within the\n          <code>[xsl:]exclude-result-prefixes</code> attribute and\n          there is no namespace binding in scope for that\n          prefix.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0809\"><span class = \"error\">ERR\n        XTSE0809</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value\n          <code>#default</code> is used within the\n          <code>[xsl:]exclude-result-prefixes</code> attribute and\n          the parent element of the\n          <code>[xsl:]exclude-result-prefixes</code> attribute has\n          no default namespace.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0810\"><span class = \"error\">ERR\n        XTSE0810</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if there is more than\n          one such declaration [more than one <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          declaration] with the same <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> and\n          the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a> and\n          different values for the <a title = \"target namespace URI\" href = \"#dt-target-namespace-uri\">target namespace URI</a>,\n          unless there is also an <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          declaration with the same <a title = \"literal namespace URI\" href = \"#dt-literal-namespace-uri\">literal namespace URI</a> and\n          a higher import precedence.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0812\"><span class = \"error\">ERR\n        XTSE0812</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a value other than\n          <code>#default</code> is specified for either the\n          <code>stylesheet-prefix</code> or the\n          <code>result-prefix</code> attributes of the <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n          element when there is no in-scope binding for that\n          namespace prefix.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0840\"><span class = \"error\">ERR\n        XTSE0840</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>select</code> attribute of the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          element is present unless the element has empty\n          content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0870\"><span class = \"error\">ERR\n        XTSE0870</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>select</code> attribute of the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> element\n          is present when the content of the element is non-empty,\n          or if the <code>select</code> attribute is absent when\n          the content is empty.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0880\"><span class = \"error\">ERR\n        XTSE0880</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>select</code> attribute of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n          element is present unless the element has empty\n          content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0910\"><span class = \"error\">ERR\n        XTSE0910</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>select</code> attribute of the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          element is present when the element has content other\n          than one or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          instructions, or if the <code>select</code> attribute is\n          absent when the element has empty content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0940\"><span class = \"error\">ERR\n        XTSE0940</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>select</code> attribute of the <a href = \"#XSLT_element-comment\"><code>xsl:comment</code></a> element\n          is present unless the element has empty content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0950\"><span class = \"error\">ERR\n        XTTE0950</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> to use the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> or <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>\n          instruction to copy a node that has namespace-sensitive\n          content if the <code>copy-namespaces</code> attribute has\n          the value <code>no</code> and its explicit or implicit\n          <code>validation</code> attribute has the value\n          <code>preserve</code>. It is also a type error if either\n          of these instructions (with\n          <code>validation=\"preserve\"</code>) is used to copy an\n          attribute having namespace-sensitive content, unless the\n          parent element is also copied. A node has\n          namespace-sensitive content if its typed value contains\n          an item of type <code>xs:QName</code> or\n          <code>xs:NOTATION</code> or a type derived therefrom. The\n          reason this is an error is because the validity of the\n          content depends on the namespace context being\n          preserved.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE0975\"><span class = \"error\">ERR\n        XTSE0975</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the\n          <code>value</code> attribute of <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> is present\n          unless the <code>select</code>, <code>level</code>,\n          <code>count</code>, and <code>from</code> attributes are\n          all absent.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1015\"><span class = \"error\">ERR\n        XTSE1015</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element with a\n          <code>select</code> attribute has non-empty content.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1017\"><span class = \"error\">ERR\n        XTSE1017</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element other\n          than the first in a sequence of sibling <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> elements has a\n          <code>stable</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1040\"><span class = \"error\">ERR\n        XTSE1040</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>\n          instruction with a <code>select</code> attribute has any\n          content other than <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> and <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          instructions.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1060\"><span class = \"error\">ERR\n        XTSE1060</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the <a href = \"#function-current-group\"><code>current-group</code></a>\n          function is used within a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1070\"><span class = \"error\">ERR\n        XTSE1070</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the <a href = \"#function-current-grouping-key\"><code>current-grouping-key</code></a>\n          function is used within a <a title = \"pattern\" href = \"#dt-pattern\">pattern</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1080\"><span class = \"error\">ERR\n        XTSE1080</span></a></dt>\n\n        <dd>\n          <p>These four attributes [the <code>group-by</code>,\n          <code>group-adjacent</code>,\n          <code>group-starting-with</code>, and\n          <code>group-ending-with</code> attributes of <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          ] are mutually exclusive: it is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if none of these\n          four attributes is present, or if more than one of them\n          is present.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1090\"><span class = \"error\">ERR\n        XTSE1090</span></a></dt>\n\n        <dd>\n          <p>It is an error to specify the <code>collation</code>\n          attribute if neither the <code>group-by</code> attribute\n          nor <code>group-adjacent</code> attribute is\n          specified.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1130\"><span class = \"error\">ERR\n        XTSE1130</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          instruction contains neither an <a href = \"#XSLT_element-matching-substring\"><code>xsl:matching-substring</code></a>\n          nor an <a href = \"#XSLT_element-non-matching-substring\"><code>xsl:non-matching-substring</code></a>\n          element.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1205\"><span class = \"error\">ERR\n        XTSE1205</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration has a\n          <code>use</code> attribute and has non-empty content, or\n          if it has empty content and no <code>use</code>\n          attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1210\"><span class = \"error\">ERR\n        XTSE1210</span></a></dt>\n\n        <dd>\n          <p>It is a static error if the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration has a\n          <code>collation</code> attribute whose value <span>(after\n          resolving against the base URI)</span> is not a URI\n          recognized by the implementation as referring to a\n          collation.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1220\"><span class = \"error\">ERR\n        XTSE1220</span></a></dt>\n\n        <dd>\n          <p>It is a static error if there are several <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declarations in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> with the same key name\n          and different effective collations. Two collations are\n          the same if their URIs are equal under the rules for\n          comparing <code>xs:anyURI</code> values, or if the\n          implementation can determine that they are different URIs\n          referring to the same collation.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1290\"><span class = \"error\">ERR\n        XTSE1290</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a named or unnamed\n          <a title = \"decimal format\" href = \"#dt-decimal-format\">decimal format</a> contains two\n          conflicting values for the same attribute in different\n          <a href = \"#XSLT_element-decimal-format\"><code>xsl:decimal-format</code></a>\n          declarations having the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>,\n          unless there is another definition of the same attribute\n          with higher import precedence.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1295\"><span class = \"error\">ERR\n        XTSE1295</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the character\n          specified in the <code>zero-digit</code> attribute is not\n          a digit or is a digit that does not have the numeric\n          value zero.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1300\"><span class = \"error\">ERR\n        XTSE1300</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if, for any named or\n          unnamed decimal format, the variables representing\n          characters used in a <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a> do not each have\n          distinct values. These variables are\n          <var>decimal-separator-sign</var>,\n          <var>grouping-sign</var>, <var>percent-sign</var>,\n          <var>per-mille-sign</var>, <var>digit-zero-sign</var>,\n          <var>digit-sign</var>, and\n          <var>pattern-separator-sign</var>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1430\"><span class = \"error\">ERR\n        XTSE1430</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if there is no\n          namespace bound to the prefix on the element bearing the\n          <code>[xsl:]extension-element-prefixes</code> attribute\n          <span>or, when <code>#default</code> is specified, if\n          there is no default namespace</span>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1505\"><span class = \"error\">ERR\n        XTSE1505</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if both the\n          <code>[xsl:]type</code> and <code>[xsl:]validation</code>\n          attributes are present on the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a></span>,\n          or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instructions, or on a <a title = \"literal result element\" href = \"#dt-literal-result-element\">literal result\n          element</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1520\"><span class = \"error\">ERR\n        XTSE1520</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of the\n          <code>type</code> attribute of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>, <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          <span><a href = \"#XSLT_element-document\"><code>xsl:document</code></a>,</span>\n          or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction, or the <code>xsl:type</code> attribute of a\n          literal result element, is not a valid\n          <code>QName</code>, or if it uses a prefix that is not\n          defined in an in-scope namespace declaration, or if the\n          QName is not the name of a type definition included in\n          the <a title = \"in-scope schema component\" href = \"#dt-in-scope-schema-component\">in-scope schema\n          components</a> for the stylesheet.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1530\"><span class = \"error\">ERR\n        XTSE1530</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of the\n          <code>type</code> attribute of an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction refers to a complex type definition</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1560\"><span class = \"error\">ERR\n        XTSE1560</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if two <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          declarations within an <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> specify\n          explicit values for the same attribute (other than\n          <code>cdata-section-elements</code> and\n          <code>use-character-maps</code>), with the values of the\n          attributes being not equal, unless there is another\n          <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          declaration within the same <a title = \"output definition\" href = \"#dt-output-definition\">output definition</a> that\n          has higher import precedence and that specifies an\n          explicit value for the same attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1570\"><span class = \"error\">ERR\n        XTSE1570</span></a></dt>\n\n        <dd>\n          <p>The value [of the <code>method</code> attribute on\n          <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> ]\n          <span class = \"verb\">must</span> <span>(if present)</span>\n          be a valid <a title = \"QName\" href = \"#dt-qname\">QName</a>.\n          If the <a title = \"QName\" href = \"#dt-qname\">QName</a> does\n          not have a prefix, then it identifies a method specified\n          in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n          Serialization]</a> and <span class = \"verb\">must</span> be\n          one of <code>xml</code>, <code>html</code>,\n          <code>xhtml</code>, or <code>text</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1580\"><span class = \"error\">ERR\n        XTSE1580</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>\n          contains two or more character maps with the same name\n          and the same <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a><span>,\n          unless it also contains another character map with the\n          same name and higher import precedence.</span></p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1590\"><span class = \"error\">ERR\n        XTSE1590</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a name in the\n          <code>use-character-maps</code> attribute <span>of the\n          <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> or\n          <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n          elements</span> does not match the <code>name</code>\n          attribute of any <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n          in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1600\"><span class = \"error\">ERR\n        XTSE1600</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if a character map\n          references itself, directly or indirectly, via a name in\n          the <code>use-character-maps</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1650\"><span class = \"error\">ERR\n        XTSE1650</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n          <span class = \"verb\">must</span> signal a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> includes an <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          declaration.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTSE1660\"><span class = \"error\">ERR\n        XTSE1660</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n          <span class = \"verb\">must</span> signal a <a title = \"static error\" href = \"#dt-static-error\">static error</a>\n          if the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> includes an\n          <code>[xsl:]type</code> attribute, or an\n          <code>[xsl:]validation</code> or\n          <code>default-validation</code> attribute with a value\n          other than <code>strip</code>.</p>\n        </dd>\n      </dl>\n\n      <p><b>Type errors</b></p>\n\n      <dl>\n        <dt><a href = \"#err-XTTE0505\"><span class = \"error\">ERR\n        XTTE0505</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the result of\n          evaluating the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>\n          cannot be converted to the required type.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0510\"><span class = \"error\">ERR\n        XTTE0510</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n          instruction with no <code>select</code> attribute is\n          evaluated when the <a title = \"context item\" href = \"#dt-context-item\">context item</a> is not a node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0520\"><span class = \"error\">ERR\n        XTTE0520</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the sequence returned\n          by the <code>select</code> expression [of <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>]\n          contains an item that is not a node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0570\"><span class = \"error\">ERR\n        XTTE0570</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied\n          value</a> of a variable cannot be converted to the\n          required type.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0590\"><span class = \"error\">ERR\n        XTTE0590</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the conversion of the\n          <a title = \"supplied value\" href = \"#dt-supplied-value\">supplied value</a> of a parameter to\n          its required type fails.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0600\"><span class = \"error\">ERR\n        XTTE0600</span></a></dt>\n\n        <dd>\n          <p>If a default value is given explicitly, that is, if\n          there is either a <code>select</code> attribute or a\n          non-empty <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, then\n          it is a <a title = \"type errors\" href = \"#dt-type-error\">type\n          error</a> if the default value cannot be converted to the\n          required type, using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n          rules</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0780\"><span class = \"error\">ERR\n        XTTE0780</span></a></dt>\n\n        <dd>\n          <p>If the <code>as</code> attribute [of <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> ] is\n          specified, then the result evaluated by the <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> (see\n          <a href = \"#sequence-constructors\"><i>5.7 Sequence\n          Constructors</i></a>) is converted to the required type,\n          using the <a title = \"function conversion rules\" href = \"#dt-function-conversion-rules\">function conversion\n          rules</a>. It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if this conversion\n          fails.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0790\"><span class = \"error\">ERR\n        XTTE0790</span></a></dt>\n\n        <dd>\n          <p>If the value of a parameter to a <a title = \"stylesheet function\" href = \"#dt-stylesheet-function\">stylesheet function</a> cannot\n          be converted to the required type, a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> is\n          signaled.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE0990\"><span class = \"error\">ERR\n        XTTE0990</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> instruction\n          is evaluated, with no <code>value</code> or\n          <code>select</code> attribute, when the <a title = \"context item\" href = \"#dt-context-item\">context item</a>\n          is not a node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1000\"><span class = \"error\">ERR\n        XTTE1000</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the result of\n          evaluating the <code>select</code> attribute of the\n          <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n          instruction is anything other than a single node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1020\"><span class = \"error\">ERR\n        XTTE1020</span></a></dt>\n\n        <dd>\n          <p>If any <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key value</a>, after <a title = \"atomize\" href = \"#dt-atomization\">atomization</a> and any\n          type conversion <span class = \"verb\">required</span> by the\n          <code>data-type</code> attribute, is a sequence\n          containing more than one item, then the effect depends on\n          whether the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element is\n          evaluated with <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards\n          compatible behavior</a>. With backwards compatible\n          behavior, the effective sort key value is the first item\n          in the sequence. In other cases, this is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1100\"><span class = \"error\">ERR\n        XTTE1100</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the <span>grouping key\n          evaluated using</span> the <code>group-adjacent</code>\n          attribute is an empty sequence, or a sequence containing\n          more than one item.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1120\"><span class = \"error\">ERR\n        XTTE1120</span></a></dt>\n\n        <dd>\n          <p>When the <code>group-starting-with</code> or\n          <code>group-ending-with</code> attribute [of the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          instruction] is used, it is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if the result of\n          evaluating the <code>select</code> expression contains an\n          item that is not a node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1510\"><span class = \"error\">ERR\n        XTTE1510</span></a></dt>\n\n        <dd>\n          <p>If the <code>validation</code> attribute of an\n          <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n          <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction, or the <code>xsl:validation</code> attribute\n          of a literal result element, has the effective value\n          <code>strict</code>, and schema validity assessment\n          concludes that the validity of the element or attribute\n          is invalid or unknown, a type error occurs. As with other\n          type errors, the error <span class = \"verb\">may</span> be\n          signaled statically if it can be detected statically.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1512\"><span class = \"error\">ERR\n        XTTE1512</span></a></dt>\n\n        <dd>\n          <p>If the <code>validation</code> attribute of an\n          <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n          <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction, or the <code>xsl:validation</code> attribute\n          of a literal result element, has the effective value\n          <code>strict</code>, and there is no matching top-level\n          declaration in the schema, then a type error occurs. As\n          with other type errors, the error <span class = \"verb\">may</span> be signaled statically if it can be\n          detected statically.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1515\"><span class = \"error\">ERR\n        XTTE1515</span></a></dt>\n\n        <dd>\n          <p>If the <code>validation</code> attribute of an\n          <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>,\n          <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>,\n          <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n          <a href = \"#XSLT_element-copy-of\"><code>xsl:copy-of</code></a>,\n          or <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction, or the <code>xsl:validation</code> attribute\n          of a literal result element, has the effective value\n          <code>lax</code>, and schema validity assessment\n          concludes that the element or attribute is invalid, a\n          type error occurs. As with other type errors, the error\n          <span class = \"verb\">may</span> be signaled statically if\n          it can be detected statically.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1540\"><span class = \"error\">ERR\n        XTTE1540</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if an\n          <code>[xsl:]type</code> attribute is defined for a\n          constructed element or attribute, and the outcome of\n          schema validity assessment against that type is that the\n          <code>validity</code> property of that element or\n          attribute information item is other than\n          <code>valid</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1545\"><span class = \"error\">ERR\n        XTTE1545</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"type errors\" href = \"#dt-type-error\">type\n          error</a> occurs if a <code>type</code> or\n          <code>validation</code> attribute is defined (explicitly\n          or implicitly) for an instruction that constructs a new\n          attribute node, if the effect of this is to cause the\n          attribute value to be validated against a type that is\n          derived from, or constructed by list or union from, the\n          primitive types <code>xs:QName</code> or\n          <code>xs:NOTATION</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1550\"><span class = \"error\">ERR\n        XTTE1550</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"type errors\" href = \"#dt-type-error\">type\n          error</a> occurs [when a document node is validated]\n          unless the children of the document node comprise exactly\n          one element node, no text nodes, and zero or more comment\n          and processing instruction nodes, in any order.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTTE1555\"><span class = \"error\">ERR\n        XTTE1555</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"type errors\" href = \"#dt-type-error\">type error</a> if, when validating a\n          document node, document-level constraints are not\n          satisfied. These constraints include identity constraints\n          (<code>xs:unique</code>, <code>xs:key</code>, and\n          <code>xs:keyref</code>) and ID/IDREF constraints.</p>\n        </dd>\n      </dl>\n\n      <p><b>Dynamic errors</b></p>\n\n      <dl>\n        <dt><a href = \"#err-XTDE0030\"><span class = \"error\">ERR\n        XTDE0030</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of an attribute\n          written using curly brackets, in a position where an\n          <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n          template</a> is permitted, is a value that is not one of\n          the permitted values for that attribute. If the processor\n          is able to detect the error statically (for example, when\n          any XPath expressions within the curly brackets can be\n          evaluated statically), then the processor may optionally\n          signal this as a static error.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0040\"><span class = \"error\">ERR\n        XTDE0040</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies a template\n          name that does not match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of a named\n          template defined in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0045\"><span class = \"error\">ERR\n        XTDE0045</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies an initial\n          <a title = \"mode\" href = \"#dt-mode\">mode</a> (other than the\n          default mode) that does not match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> in the\n          <code>mode</code> attribute of any template defined in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0047\"><span class = \"error\">ERR\n        XTDE0047</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the invocation of the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> specifies both an\n          initial <a title = \"mode\" href = \"#dt-mode\">mode</a> and an\n          initial template.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0050\"><span class = \"error\">ERR\n        XTDE0050</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the stylesheet that is invoked declares a\n          visible <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameter</a> with\n          <code>required=\"yes\"</code> and no value for this\n          parameter is supplied during the invocation of the\n          stylesheet. A stylesheet parameter is visible if it is\n          not masked by another global variable or parameter with\n          the same name and higher <a title = \"import precedence\" href = \"#dt-import-precedence\">import precedence</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0060\"><span class = \"error\">ERR\n        XTDE0060</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"initial template\" href = \"#dt-initial-template\">initial template</a> defines a\n          <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> that\n          specifies <code>required=\"yes\"</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0160\"><span class = \"error\">ERR\n        XTDE0160</span></a></dt>\n\n        <dd>\n          <p>If an implementation does not support\n          backwards-compatible behavior, then it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if any element is evaluated that enables\n          backwards-compatible behavior.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE0270\"><span class = \"error\">ERR\n        XTRE0270</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          this [the process of finding an <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n          or <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>\n          declaration to match an element in the source document]\n          leaves more than one match<span>, unless all the matched\n          declarations are equivalent (that is, they are all\n          <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n          or they are all <a href = \"#XSLT_element-preserve-space\"><code>xsl:preserve-space</code></a>)</span>.<br/>\n\n          <i>&#160;&#160;&#160;&#160;Action:</i> <span>The\n          <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to select, from the matches that are left,\n          the one that occurs last in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration\n          order</a>.</span></p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0290\"><span class = \"error\">ERR\n        XTDE0290</span></a></dt>\n\n        <dd>\n          <p>Where the result of evaluating an XPath expression (or\n          an attribute value template) is required to be a\n          <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a>, <span>then unless otherwise specified</span>\n          it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"defining element\" href = \"#dt-defining-element\">defining element</a> has no\n          namespace node whose name matches the prefix of the\n          <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical\n          QName</a>. <span>This error <span class = \"verb\">may</span>\n          be signaled as a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if the value of the\n          expression can be determined statically.</span></p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0410\"><span class = \"error\">ERR\n        XTDE0410</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the result sequence used to construct the\n          content of an element node contains a namespace node or\n          attribute node that is preceded in the sequence by a node\n          that is neither a namespace node nor an attribute\n          node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0420\"><span class = \"error\">ERR\n        XTDE0420</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the result sequence used to construct the\n          content of a document node contains a namespace node or\n          attribute node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0430\"><span class = \"error\">ERR\n        XTDE0430</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the result sequence contains two or more\n          namespace nodes having the same name but different\n          <a title = \"string value\" href = \"#dt-string-value\">string\n          values</a> (that is, namespace nodes that map the same\n          prefix to different namespace URIs).</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0440\"><span class = \"error\">ERR\n        XTDE0440</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the result sequence contains a namespace\n          node with no name and the element node being constructed\n          has a null namespace URI (that is, it is an error to\n          define a default namespace when the element is in no\n          namespace).</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0485\"><span class = \"error\">ERR\n        XTDE0485</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if namespace fixup is performed on an element\n          that contains among the typed values of the element and\n          its attributes two values of type <code>xs:QName</code>\n          or <code>xs:NOTATION</code> containing conflicting\n          namespace prefixes, that is, two values that use the same\n          prefix to refer to different namespace URIs.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE0540\"><span class = \"error\">ERR\n        XTRE0540</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          the conflict resolution algorithm for template rules\n          leaves more than one matching template rule.<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to select, from the matching template rules\n          that are left, the one that occurs last in <a title = \"declaration order\" href = \"#dt-declaration-order\">declaration order</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0560\"><span class = \"error\">ERR\n        XTDE0560</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n          <span>or <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a></span>\n          is evaluated when the <a title = \"current template rule\" href = \"#dt-current-template-rule\">current template\n          rule</a> is null.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0610\"><span class = \"error\">ERR\n        XTDE0610</span></a></dt>\n\n        <dd>\n          <p>If an optional parameter has no <code>select</code>\n          attribute and has an empty <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a>, and\n          if there is an <code>as</code> attribute, then the\n          default value of the parameter is an empty sequence. If\n          the empty sequence is not a valid instance of the\n          required type defined in the <code>as</code> attribute,\n          then the parameter is treated as a required parameter,\n          which means that it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the caller supplies no value for the\n          parameter.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0640\"><span class = \"error\">ERR\n        XTDE0640</span></a></dt>\n\n        <dd>\n          <p>In general, a <a title = \"circularity\" href = \"#dt-circularity\">circularity</a> in a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> is a\n          <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0700\"><span class = \"error\">ERR\n        XTDE0700</span></a></dt>\n\n        <dd>\n          <p>In other cases, [with <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>,\n          <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>,\n          and <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>, or\n          <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n          with <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameters</a>] it is a\n          <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the template that is invoked declares a\n          <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> with\n          <code>required=\"yes\"</code> and no value for this\n          parameter is supplied by the calling instruction.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE0795\"><span class = \"error\">ERR\n        XTRE0795</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          the name of a constructed attribute is\n          <code>xml:space</code> and the value is not either\n          <code>default</code> or <code>preserve</code>.<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to construct the attribute with the value\n          as requested.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0820\"><span class = \"error\">ERR\n        XTDE0820</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute [of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction] is not a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0830\"><span class = \"error\">ERR\n        XTDE0830</span></a></dt>\n\n        <dd>\n          <p>In the case of an <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction with no <code>namespace</code> attribute, it\n          is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute is a <a title = \"QName\" href = \"#dt-qname\">QName</a> whose prefix is not declared in an\n          in-scope namespace declaration for the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0835\"><span class = \"error\">ERR\n        XTDE0835</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>namespace</code> attribute [of the <a href = \"#XSLT_element-element\"><code>xsl:element</code></a>\n          instruction] is not in the lexical space of the\n          <code>xs:anyURI</code> data type.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0850\"><span class = \"error\">ERR\n        XTDE0850</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute [of an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction] is not a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0855\"><span class = \"error\">ERR\n        XTDE0855</span></a></dt>\n\n        <dd>\n          <p>In the case of an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction with no <code>namespace</code> attribute, it\n          is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute is the string\n          <code>xmlns</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0860\"><span class = \"error\">ERR\n        XTDE0860</span></a></dt>\n\n        <dd>\n          <p>In the case of an <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction with no <code>namespace</code> attribute, it\n          is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute is a <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a> whose prefix\n          is not declared in an in-scope namespace declaration for\n          the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0865\"><span class = \"error\">ERR\n        XTDE0865</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>namespace</code> attribute [of the <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n          instruction] is not in the lexical space of the\n          <code>xs:anyURI</code> data type.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0890\"><span class = \"error\">ERR\n        XTDE0890</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute [of the <a href = \"#XSLT_element-processing-instruction\"><code>xsl:processing-instruction</code></a>\n          instruction] is not both an <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n          <small>Names</small></sup> and a <a href = \"http://www.w3.org/TR/2000/REC-xml-20001006#NT-PITarget\">PITarget</a><sup>\n          <small>XML</small></sup>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0905\"><span class = \"error\">ERR\n        XTDE0905</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the string value of the new namespace node\n          [created using <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>] is\n          not valid in the lexical space of the data type\n          <code>xs:anyURI</code>. <span class = \"error\">[see <a href = \"#err-XTDE0835\">ERR XTDE0835</a>]</span></p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0920\"><span class = \"error\">ERR\n        XTDE0920</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>name</code> attribute [of the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction] is neither a zero-length string nor an\n          <a href = \"http://www.w3.org/TR/REC-xml-names/#NT-NCName\">NCName</a><sup>\n          <small>Names</small></sup>, or if it is\n          <code>xmlns</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0925\"><span class = \"error\">ERR\n        XTDE0925</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction generates a namespace node whose name is\n          <code>xml</code> and whose string value is not\n          <code>http://www.w3.org/XML/1998/namespace</code>, or a\n          namespace node whose string value is\n          <code>http://www.w3.org/XML/1998/namespace</code> and\n          whose name is not <code>xml</code>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0930\"><span class = \"error\">ERR\n        XTDE0930</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if evaluating the <span><code>select</code>\n          attribute or the contained <a title = \"sequence constructor\" href = \"#dt-sequence-constructor\">sequence constructor</a> of an\n          <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n          instruction</span> results in a zero-length string.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE0980\"><span class = \"error\">ERR\n        XTDE0980</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if any undiscarded item in the atomized\n          sequence supplied as the value of the <code>value</code>\n          attribute of <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> cannot be\n          converted to an integer, or if the resulting integer is\n          less than 0 (zero).</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1030\"><span class = \"error\">ERR\n        XTDE1030</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if, for any <a title = \"sort key component\" href = \"#dt-sort-key-component\">sort key component</a>, the set\n          of <a title = \"sort key value\" href = \"#dt-sort-key-value\">sort key values</a> evaluated for\n          all the items in the <a title = \"initial sequence\" href = \"#dt-initial-sequence\">initial sequence</a>, after any\n          type conversion requested, contains a pair of ordinary\n          values for which the result of the XPath <code>lt</code>\n          operator is an error.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1035\"><span class = \"error\">ERR\n        XTDE1035</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <code>collation</code> attribute of\n          <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> (after\n          resolving against the base URI) is not a URI that is\n          recognized by the implementation as referring to a\n          collation.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1110\"><span class = \"error\">ERR\n        XTDE1110</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the collation URI specified to <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n          <span>(after resolving against the base URI)</span> is a\n          collation that is not recognized by the implementation.\n          (For notes, <span class = \"error\">[see <a href = \"#err-XTDE1035\">ERR XTDE1035</a>]</span>.)</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1140\"><span class = \"error\">ERR\n        XTDE1140</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>regex</code> attribute [of the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          instruction] does not conform to the <span class = \"verb\">required</span> syntax for regular expressions, as\n          specified in <a href = \"#xpath-functions\">[Functions and\n          Operators]</a>. If the regular expression is known\n          statically (for example, if the attribute does not\n          contain any <a title = \"expression\" href = \"#dt-expression\">expressions</a> enclosed in curly\n          brackets) then the processor <span class = \"verb\">may</span> signal the error as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1145\"><span class = \"error\">ERR\n        XTDE1145</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>flags</code> attribute [of the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          instruction] has a value other than the values defined in\n          <a href = \"#xpath-functions\">[Functions and Operators]</a>.\n          If the value of the attribute is known statically (for\n          example, if the attribute does not contain any <a title = \"expression\" href = \"#dt-expression\">expressions</a>\n          enclosed in curly brackets) then the processor\n          <span class = \"verb\">may</span> signal the error as a\n          <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1150\"><span class = \"error\">ERR\n        XTDE1150</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>regex</code> attribute [of the <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n          instruction] is a regular expression that matches a\n          zero-length string: or more specifically, if the regular\n          expression <code>$r</code> and flags <code>$f</code> are\n          such that <code>matches(\"\", $r, $f)</code> returns true.\n          If the regular expression is known statically (for\n          example, if the attribute does not contain any <a title = \"expression\" href = \"#dt-expression\">expressions</a>\n          enclosed in curly brackets) then the processor\n          <span class = \"verb\">may</span> signal the error as a\n          <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE1160\"><span class = \"error\">ERR\n        XTRE1160</span></a></dt>\n\n        <dd>\n          <p>When a URI reference [supplied to the <a href = \"#function-document\"><code>document</code></a> function]\n          contains a fragment identifier, it is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          the media type is not one that is recognized by the\n          processor, or if the fragment identifier does not conform\n          to the rules for fragment identifiers for that media\n          type, or if the fragment identifier selects something\n          other than a sequence of nodes (for example, if it\n          selects a range of characters within a text node).<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to ignore the fragment identifier and\n          return the document node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1170\"><span class = \"error\">ERR\n        XTDE1170</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if a URI [supplied in the first argument to the\n          <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function] <span>contains a fragment identifier,</span> or\n          if it cannot be used to retrieve a resource containing\n          text.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1190\"><span class = \"error\">ERR\n        XTDE1190</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if a resource [retrieved using the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function] contains octets that cannot be decoded into\n          Unicode characters using the specified encoding, or if\n          the resulting characters are not permitted XML\n          characters. This includes the case where the <a title = \"processor\" href = \"#dt-processor\">processor</a> does not\n          support the requested encoding.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1200\"><span class = \"error\">ERR\n        XTDE1200</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the second argument of the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function is omitted and the <a title = \"processor\" href = \"#dt-processor\">processor</a> cannot infer the encoding\n          using external information and the encoding is not\n          UTF-8.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1260\"><span class = \"error\">ERR\n        XTDE1260</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the value [of the first argument to the\n          <a href = \"#function-key\"><code>key</code></a> function] is\n          not a valid QName, or if there is no namespace\n          declaration in scope for the prefix of the QName, or if\n          the name obtained by expanding the QName is not the same\n          as the expanded name of any <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> declaration in\n          the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. If the processor is able\n          to detect the error statically (for example, when the\n          argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1270\"><span class = \"error\">ERR\n        XTDE1270</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> to call the <a href = \"#function-key\"><code>key</code></a> function with two\n          arguments if there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>, <span>or if the root\n          of the tree containing the context node is not a document\n          node</span>; or to call the function with three arguments\n          if the root of the tree containing the node supplied in\n          the third argument is not a document node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1280\"><span class = \"error\">ERR\n        XTDE1280</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the name specified as the\n          <code>$decimal-format-name</code> argument [ to the\n          <a href = \"#function-format-number\"><code>format-number</code></a>\n          function] <span>is not a valid <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if its prefix has not been\n          declared in an in-scope namespace declaration</span>, or\n          if the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> does not contain a\n          declaration of a decimal-format with a matching <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>. If the processor\n          is able to detect the error statically (for example, when\n          the argument is supplied as a string literal), then the\n          processor <span class = \"verb\">may</span> optionally signal\n          this as a <a title = \"static error\" href = \"#dt-static-error\">static error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1310\"><span class = \"error\">ERR\n        XTDE1310</span></a></dt>\n\n        <dd>\n          <p>The <a title = \"picture string\" href = \"#dt-picture-string\">picture string</a> [supplied to the\n          <a href = \"#function-format-number\"><code>format-number</code></a>\n          function] <span class = \"verb\">must</span> conform to the\n          following rules. [ See full specification.] It is a\n          <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the picture string does not satisfy these\n          rules.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1340\"><span class = \"error\">ERR\n        XTDE1340</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the syntax of the picture [used for\n          date/time formatting] is incorrect.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1350\"><span class = \"error\">ERR\n        XTDE1350</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if a component specifier within the picture\n          [used for date/time formatting] refers to components that\n          are not available in the given type of\n          <code>$value</code>, for example if the picture supplied\n          to the <a href = \"#function-format-time\"><code>format-time</code></a>\n          refers to the year, month, or day component.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1360\"><span class = \"error\">ERR\n        XTDE1360</span></a></dt>\n\n        <dd>\n          <p>If the <a href = \"#function-current\"><code>current</code></a> function is\n          evaluated within an expression that is evaluated when the\n          context item is undefined, a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> occurs.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1370\"><span class = \"error\">ERR\n        XTDE1370</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a href = \"#function-unparsed-entity-uri\"><code>unparsed-entity-uri</code></a>\n          function is called when there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>,\n          or when the root of the tree containing the context node\n          is not a document node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1380\"><span class = \"error\">ERR\n        XTDE1380</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a href = \"#function-unparsed-entity-public-id\"><code>unparsed-entity-public-id</code></a>\n          function is called when there is no <a title = \"context node\" href = \"#dt-context-node\">context node</a>,\n          or when the root of the tree containing the context node\n          is not a document node.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1390\"><span class = \"error\">ERR\n        XTDE1390</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the value [supplied as the\n          <code>$property-name</code> argument to the <a href = \"#function-system-property\"><code>system-property</code></a>\n          function] is not a valid QName, or if there is no\n          namespace declaration in scope for the prefix of the\n          QName. If the processor is able to detect the error\n          statically (for example, when the argument is supplied as\n          a string literal), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTMM9000\"><span class = \"error\">ERR\n        XTMM9000</span></a></dt>\n\n        <dd>\n          <p>When a transformation is terminated by use of\n          <code>xsl:message terminate=\"yes\"</code>, the effect is\n          the same as when a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> occurs during the transformation.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1400\"><span class = \"error\">ERR\n        XTDE1400</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument [passed to the <a href = \"#function-function-available\"><code>function-available</code></a>\n          function] does not evaluate to a string that is a valid\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there\n          is no namespace declaration in scope for the prefix of\n          the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the\n          processor is able to detect the error statically (for\n          example, when the argument is supplied as a string\n          literal), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1420\"><span class = \"error\">ERR\n        XTDE1420</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the arguments supplied to a call on an\n          extension function do not satisfy the rules defined for\n          that particular extension function, or if the extension\n          function reports an error, or if the result of the\n          extension function cannot be converted to an XPath\n          value.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1425\"><span class = \"error\">ERR\n        XTDE1425</span></a></dt>\n\n        <dd>\n          <p>When <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled, it is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> to evaluate an extension function call if no\n          implementation of the extension function is\n          available.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1428\"><span class = \"error\">ERR\n        XTDE1428</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument [passed to the <a href = \"#function-type-available\"><code>type-available</code></a>\n          function] does not evaluate to a string that is a valid\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there\n          is no namespace declaration in scope for the prefix of\n          the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the\n          processor is able to detect the error statically (for\n          example, when the argument is supplied as a string\n          literal), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1440\"><span class = \"error\">ERR\n        XTDE1440</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the argument [passed to the <a href = \"#function-element-available\"><code>element-available</code></a>\n          function] does not evaluate to a string that is a valid\n          <a title = \"QName\" href = \"#dt-qname\">QName</a>, or if there\n          is no namespace declaration in scope for the prefix of\n          the <a title = \"QName\" href = \"#dt-qname\">QName</a>. If the\n          processor is able to detect the error statically (for\n          example, when the argument is supplied as a string\n          literal), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1450\"><span class = \"error\">ERR\n        XTDE1450</span></a></dt>\n\n        <dd>\n          <p>When a <a title = \"processor\" href = \"#dt-processor\">processor</a> performs fallback for an\n          <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instruction</a>\n          that is not recognized, if the instruction element has\n          one or more <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children, then the content of each of the <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children <span class = \"verb\">must</span> be evaluated; it\n          is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if it has no <a href = \"#XSLT_element-fallback\"><code>xsl:fallback</code></a>\n          children.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1460\"><span class = \"error\">ERR\n        XTDE1460</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of the\n          <code>format</code> attribute [of an <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          element] is not a valid <a title = \"lexical QName\" href = \"#dt-lexical-qname\">lexical QName</a>, or if it does not\n          match the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> of an <a title = \"output definition\" href = \"#dt-output-definition\">output\n          definition</a> in the <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a>. If the processor is able\n          to detect the error statically (for example, when the\n          <code>format</code> attribute contains no curly\n          brackets), then the processor <span class = \"verb\">may</span> optionally signal this as a <a title = \"static error\" href = \"#dt-static-error\">static\n          error</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1480\"><span class = \"error\">ERR\n        XTDE1480</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> to evaluate the <a href = \"#XSLT_element-result-document\"><code>xsl:result-document</code></a>\n          instruction in <a title = \"temporary output state\" href = \"#dt-temporary-output-state\">temporary output\n          state</a>.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1490\"><span class = \"error\">ERR\n        XTDE1490</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> for a transformation to generate two or more\n          <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> with the\n          same URI.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE1495\"><span class = \"error\">ERR\n        XTRE1495</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> for\n          a transformation to generate two or more <a title = \"final result tree\" href = \"#dt-final-result-tree\">final\n          result trees</a> with URIs that identify the same\n          physical resource. The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>,\n          since it may be impossible for the processor to detect\n          the error.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE1500\"><span class = \"error\">ERR\n        XTRE1500</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> for\n          a <a title = \"stylesheet\" href = \"#dt-stylesheet\">stylesheet</a> to write to an external\n          resource and read from the same resource during a single\n          transformation, whether or not the same URI is used to\n          access the resource in both cases.<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>:\n          implementations are not <span class = \"verb\">required</span> to detect the error condition.\n          <span>Note that if the error is not detected, it is\n          undefined whether the document that is read from the\n          resource reflects its state before or after the result\n          tree is written.</span></p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE1620\"><span class = \"error\">ERR\n        XTRE1620</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          an <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> or\n          <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n          instruction specifies that output escaping is to be\n          disabled and the implementation does not support\n          this.<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to ignore the\n          <code>disable-output-escaping</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTRE1630\"><span class = \"error\">ERR\n        XTRE1630</span></a></dt>\n\n        <dd>\n          <p>It is a <a title = \"recoverable error\" href = \"#dt-recoverable-error\">recoverable dynamic error</a> if\n          an <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a> or\n          <a href = \"#XSLT_element-text\"><code>xsl:text</code></a>\n          instruction specifies that output escaping is to be\n          disabled when writing to a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> that\n          is not being serialized.<br/>\n          <i>&#160;&#160;&#160;&#160;Action:</i> The <a title = \"optional recovery action\" href = \"#dt-optional-recovery-action\">optional recovery\n          action</a> is to ignore the\n          <code>disable-output-escaping</code> attribute.</p>\n        </dd>\n\n        <dt><a href = \"#err-XTDE1665\"><span class = \"error\">ERR\n        XTDE1665</span></a></dt>\n\n        <dd>\n          <p>A <a title = \"basic XSLT processor\" href = \"#dt-basic-xslt-processor\">basic XSLT processor</a>\n          <span class = \"verb\">must</span> raise a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable dynamic\n          error</a> if the input to the processor includes a node\n          with a <a title = \"type annotation\" href = \"#dt-annotation\">type annotation</a> other than\n          <span><code>xs:untyped</code></span> or\n          <span><code>xs:untypedAtomic</code></span>, or an atomic\n          value of a type other than those which a basic XSLT\n          processor supports.</p>\n        </dd>\n      </dl>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"implementation-defined-features\" id = \"implementation-defined-features\"></a>F Checklist of\n      Implementation-Defined Features (Non-Normative)</h2>\n\n      <p>This appendix provides a summary of XSLT language features\n      whose effect is explicitly <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n      The conformance rules (see <a href = \"#conformance\"><i>21\n      Conformance</i></a>) require vendors to provide documentation\n      that explains how these choices have been exercised.</p>\n\n      <ol>\n        <li>\n          <p>The way in which an XSLT processor is invoked, and the\n          way in which values are supplied for the source document,\n          starting node, <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet parameters</a>, and\n          <a title = \"base output URI\" href = \"#dt-base-output-uri\">base output URI</a>, are\n          implementation-defined. (See <a href = \"#initiating\"><i>2.3\n          Initiating a Transformation</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The mechanisms for creating new extension instructions\n          and extension functions are implementation-defined. (See\n          <a href = \"#extensibility\"><i>2.7\n          Extensibility</i></a>)</p>\n        </li>\n\n        <li>\n          <p>Where the specification provides a choice between\n          signaling a dynamic error or recovering, the decision\n          that is made (but not the recovery action itself) is\n          implementation-defined. (See <a href = \"#errors\"><i>2.9\n          Error Handling</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined whether type errors are\n          signaled statically. (See <a href = \"#errors\"><i>2.9 Error\n          Handling</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The set of namespaces that are specially recognized by\n          the implementation (for example, for user-defined data\n          elements, and <a title = \"extension attribute\" href = \"#dt-extension-attribute\">extension attributes</a>) is\n          implementation-defined. (See <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined Data\n          Elements</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The effect of user-defined data elements whose name is\n          in a namespace recognized by the implementation is\n          implementation-defined. (See <a href = \"#user-defined-top-level\"><i>3.6.2 User-defined Data\n          Elements</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined whether an XSLT 2.0\n          processor supports backwards-compatible behavior. (See\n          <a href = \"#backwards\"><i>3.8 Backwards-Compatible\n          Processing</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined what forms of URI\n          reference are acceptable in the <code>href</code>\n          attribute of the <a href = \"#XSLT_element-include\"><code>xsl:include</code></a> and\n          <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n          elements, for example, the URI schemes that may be used,\n          the forms of fragment identifier that may be used, and\n          the media types that are supported. (See <a href = \"#locating-modules\"><i>3.10.1 Locating Stylesheet\n          Modules</i></a>)</p>\n        </li>\n\n        <li>\n          <p>An implementation may define mechanisms, above and\n          beyond <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n          that allow <a title = \"schema component\" href = \"#dt-schema-component\">schema components</a> such as type\n          definitions to be made available within a stylesheet.\n          (See <a href = \"#built-in-types\"><i>3.13 Built-in\n          Types</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined which versions of XML and\n          XML Namespaces (1.0 and/or 1.1) are supported. (See\n          <a href = \"#xml-versions\"><i>4.1 XML Versions</i></a>)</p>\n        </li>\n\n        <li>\n          <p>Limits on the value space of primitive data types,\n          where not fixed by <a href = \"#xmlschema-2\">[XML Schema\n          Part 2]</a>, are implementation-defined. (See <a href = \"#limits\"><i>4.6 Limits</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The implicit timezone for a transformation is\n          implementation-defined. (See <a href = \"#evaluation-context\"><i>5.4.3.2 Other components of the\n          XPath Dynamic Context</i></a>)</p>\n        </li>\n\n        <li>\n          <p>If an <code>xml:id</code> attribute that has not been\n          subjected to attribute value normalization is copied from\n          a source tree to a result tree, it is\n          implementation-defined whether attribute value\n          normalization will be applied during the copy process.\n          (See <a href = \"#shallow-copy\"><i>11.9.1 Shallow\n          Copy</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The numbering sequences supported by the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n          instructions, beyond those defined in this specification,\n          are implementation-defined. (See <a href = \"#convert\"><i>12.3 Number to String Conversion\n          Attributes</i></a>)</p>\n        </li>\n\n        <li>\n          <p>There <span class = \"verb\">may</span> be\n          implementation-defined upper bounds on the numbers that\n          can be formatted by <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> using any\n          particular numbering sequence. (See <a href = \"#convert\"><i>12.3 Number to String Conversion\n          Attributes</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The set of languages for which numbering is supported\n          by <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>,\n          and the method of choosing a default language, are\n          implementation-defined. (See <a href = \"#convert\"><i>12.3\n          Number to String Conversion Attributes</i></a>)</p>\n        </li>\n\n        <li>\n          <p>If the <code>data-type</code> attribute of the\n          <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element\n          has a value other than <code>text</code> or\n          <code>number</code>, the effect is\n          implementation-defined. (See <a href = \"#comparing-sort-keys\"><i>13.1.2 Comparing Sort Key\n          Values</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The facilities for defining collations and allocating\n          URIs to identify them are implementation-defined. (See\n          <a href = \"#collating-sequences\"><i>13.1.3 Sorting Using\n          Collations</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The algorithm used by <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> to locate a\n          collation, given the values of the <code>lang</code> and\n          <code>case-order</code> attributes, is\n          implementation-defined. (See <a href = \"#collating-sequences\"><i>13.1.3 Sorting Using\n          Collations</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The set of media types recognized by the processor,\n          for the purpose of interpreting fragment identifiers in\n          URI references passed to the <a href = \"#function-document\"><code>document</code></a> function,\n          is implementation-defined. (See <a href = \"#document\"><i>16.1 Multiple Source\n          Documents</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The set of encodings recognized by the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function, other than <code>utf-8</code> and\n          <code>utf-16</code>, is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          (See <a href = \"#unparsed-text\"><i>16.2 Reading Text\n          Files</i></a>)</p>\n        </li>\n\n        <li>\n          <p>If no encoding is specified on a call to the <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n          function, the processor <span class = \"verb\">may</span> use\n          <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n          heuristics to determine the likely encoding. (See\n          <a href = \"#unparsed-text\"><i>16.2 Reading Text\n          Files</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The set of languages, calendars, and countries that\n          are supported in the <a title = \"date formatting function\" href = \"#dt-date-formatting-function\">date formatting\n          functions</a> is implementation-defined. If any of these\n          arguments is omitted or set to an empty sequence, the\n          default is implementation-defined. (See <a href = \"#lang-cal-country\"><i>16.5.2 The Language, Calendar, and\n          Country Arguments</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The choice of the names and abbreviations used in any\n          given language for calendar units such as days of the\n          week and months of the year is <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>.\n          (See <a href = \"#lang-cal-country\"><i>16.5.2 The Language,\n          Calendar, and Country Arguments</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The values returned by the <a href = \"#function-system-property\"><code>system-property</code></a>\n          function, and the names of the additional properties that\n          are recognized, are implementation-defined. (See <a href = \"#system-property\"><i>16.6.5 system-property</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The destination and formatting of messages written\n          using the <a href = \"#XSLT_element-message\"><code>xsl:message</code></a>\n          instruction are implementation-defined. (See <a href = \"#message\"><i>17 Messages</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The effect of an extension function returning a string\n          containing characters that are not legal in XML is\n          implementation-defined. (See <a href = \"#calling-extension-functions\"><i>18.1.2 Calling\n          Extension Functions</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The way in which external objects are represented in\n          the type system is implementation-defined. (See <a href = \"#external-objects\"><i>18.1.3 External\n          Objects</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The way in which a final result tree is delivered to\n          an application is implementation-defined. (See <a href = \"#result-trees\"><i>19 Final Result Trees</i></a>)</p>\n        </li>\n\n        <li>\n          <p>Implementations <span class = \"verb\">may</span> provide\n          additional mechanisms allowing users to define the way in\n          which <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result trees</a> are\n          processed. (See <a href = \"#creating-result-trees\"><i>19.1\n          Creating Final Result Trees</i></a>)</p>\n        </li>\n\n        <li>\n          <p>If serialization is supported, then the location to\n          which a <a title = \"final result tree\" href = \"#dt-final-result-tree\">final result tree</a> is\n          serialized is implementation-defined, subject to the\n          constraint that relative URIs used to reference one tree\n          from another remain valid. (See <a href = \"#serialization\"><i>20 Serialization</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The default value of the <code>encoding</code>\n          attribute of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> element is\n          implementation-defined. (See <a href = \"#serialization\"><i>20 Serialization</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined which versions of XML,\n          HTML, and XHTML are supported in the <code>version</code>\n          attribute of the <a href = \"#XSLT_element-output\"><code>xsl:output</code></a>\n          declaration. (See <a href = \"#serialization\"><i>20\n          Serialization</i></a>)</p>\n        </li>\n\n        <li>\n          <p>The default value of the <code>byte-order-mark</code>\n          serialization parameter is implementation-defined in the\n          case of UTF-8 encoding. (See <a href = \"#serialization\"><i>20 Serialization</i></a>)</p>\n        </li>\n\n        <li>\n          <p>It is implementation-defined whether, and under what\n          circumstances, disabling output escaping is supported.\n          (See <a href = \"#disable-output-escaping\"><i>20.2 Disabling\n          Output Escaping</i></a>)</p>\n        </li>\n      </ol>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"schema-for-xslt\" id = \"schema-for-xslt\"></a>G\n      Schema for XSLT Stylesheets (Non-Normative)</h2>\n\n      <p>The following schema describes the structure of an XSLT\n      stylesheet module. It does not define all the constraints\n      that apply to a stylesheet (for example, it does not attempt\n      to define a data type that precisely represents attributes\n      containing XPath <a title = \"expression\" href = \"#dt-expression\">expressions</a>). <span>However, every valid\n      stylesheet module conforms to this schema, unless it contains\n      elements that invoke <a title = \"forwards-compatible behavior\" href = \"#dt-forwards-compatible-behavior\">forwards-compatible-behavior</a>.</span></p>\n\n      <p>A copy of this schema is available at <a href = \"http://www.w3.org/2007/schema-for-xslt20.xsd\">http://www.w3.org/2007/schema-for-xslt20.xsd</a></p>\n      <pre>\n&lt;?xml version=\"1.0\"?&gt;\n&lt;xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" targetNamespace=\"http://www.w3.org/1999/XSL/Transform\" elementFormDefault=\"qualified\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"&gt;\n\n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n&lt;xs:annotation&gt;\n  &lt;xs:documentation&gt;\n  \n    This is a schema for XSLT 2.0 stylesheets.\n    \n    It defines all the elements that appear in the XSLT namespace; it also\n    provides hooks that allow the inclusion of user-defined literal result elements,\n    extension instructions, and top-level data elements.\n    \n    The schema is derived (with kind permission) from a schema for XSLT 1.0 stylesheets\n    produced by Asir S Vedamuthu of WebMethods Inc.\n    \n    This schema is available for use under the conditions of the W3C Software License\n    published at http://www.w3.org/Consortium/Legal/copyright-software-19980720\n    \n    The schema is organized as follows:\n    \n    PART A: definitions of complex types and model groups used as the basis \n            for element definitions\n    PART B: definitions of individual XSLT elements\n    PART C: definitions for literal result elements\n    PART D: definitions of simple types used in attribute definitions\n    \n    This schema does not attempt to define all the constraints that apply to a valid\n    XSLT 2.0 stylesheet module. It is the intention that all valid stylesheet modules \n    should conform to this schema; however, the schema is non-normative and in the event \n    of any conflict, the text of the Recommendation takes precedence.\n\n    This schema does not implement the special rules that apply when a stylesheet\n    has sections that use forwards-compatible-mode. In this mode, setting version=\"3.0\"\n    allows elements from the XSLT namespace to be used that are not defined in XSLT 2.0.\n\n    Simplified stylesheets (those with a literal result element as the outermost element)\n    will validate against this schema only if validation starts in lax mode.\n    \n    This version is dated 2005-02-11\n    Authors: Michael H Kay, Saxonica Limited\n             Jeni Tennison, Jeni Tennison Consulting Ltd.\n    \n  &lt;/xs:documentation&gt;\n&lt;/xs:annotation&gt;   \n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n \n&lt;!--\nThe declaration of xml:space and xml:lang may need to be commented out because\nof problems processing the schema using various tools\n--&gt;\n      \n&lt;xs:import namespace=\"http://www.w3.org/XML/1998/namespace\" \n  schemaLocation=\"http://www.w3.org/2001/xml.xsd\"/&gt;\n\n&lt;!-- \n    An XSLT stylesheet may contain an in-line schema within an xsl:import-schema element,\n    so the Schema for schemas needs to be imported\n--&gt;\n  \n&lt;xs:import namespace=\"http://www.w3.org/2001/XMLSchema\"\n                  schemaLocation=\"http://www.w3.org/2001/XMLSchema.xsd\"/&gt;\n\n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n&lt;xs:annotation&gt;\n  &lt;xs:documentation&gt;\n    PART A: definitions of complex types and model groups used as the basis \n            for element definitions\n  &lt;/xs:documentation&gt;\n&lt;/xs:annotation&gt;   \n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n\n&lt;xs:complexType name=\"generic-element-type\" mixed=\"true\"&gt;\n  &lt;xs:attribute name=\"default-collation\" type=\"xsl:uri-list\"/&gt;\n  &lt;xs:attribute name=\"exclude-result-prefixes\" type=\"xsl:prefix-list-or-all\"/&gt;\n  &lt;xs:attribute name=\"extension-element-prefixes\" type=\"xsl:prefix-list\"/&gt;\n  &lt;xs:attribute name=\"use-when\" type=\"xsl:expression\"/&gt;\n  &lt;xs:attribute name=\"xpath-default-namespace\" type=\"xs:anyURI\"/&gt;\n  &lt;xs:anyAttribute namespace=\"##other\" processContents=\"lax\"/&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:complexType name=\"versioned-element-type\" mixed=\"true\"&gt;\n  &lt;xs:complexContent&gt;\n    &lt;xs:extension base=\"xsl:generic-element-type\"&gt;    \n      &lt;xs:attribute name=\"version\" type=\"xs:decimal\" use=\"optional\"/&gt;\n    &lt;/xs:extension&gt;\n  &lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:complexType name=\"element-only-versioned-element-type\" mixed=\"false\"&gt;\n  &lt;xs:complexContent&gt;\n    &lt;xs:restriction base=\"xsl:versioned-element-type\"&gt;\n      &lt;xs:anyAttribute namespace=\"##other\" processContents=\"lax\"/&gt;\n    &lt;/xs:restriction&gt;\n  &lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:complexType name=\"sequence-constructor\"&gt;\n  &lt;xs:complexContent mixed=\"true\"&gt;\n    &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;    \n      &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n    &lt;/xs:extension&gt;\n  &lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:group name=\"sequence-constructor-group\"&gt;\n  &lt;xs:choice&gt;\n    &lt;xs:element ref=\"xsl:variable\"/&gt;\n    &lt;xs:element ref=\"xsl:instruction\"/&gt;\n    &lt;xs:group ref=\"xsl:result-elements\"/&gt;\n  &lt;/xs:choice&gt;\n&lt;/xs:group&gt;\n\n&lt;xs:element name=\"declaration\" type=\"xsl:generic-element-type\" abstract=\"true\"/&gt;\n\n&lt;xs:element name=\"instruction\" type=\"xsl:versioned-element-type\" abstract=\"true\"/&gt;\n\n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n&lt;xs:annotation&gt;\n  &lt;xs:documentation&gt;\n    PART B: definitions of individual XSLT elements    \n    Elements are listed in alphabetical order.    \n  &lt;/xs:documentation&gt;\n&lt;/xs:annotation&gt;   \n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n\n&lt;xs:element name=\"analyze-string\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:matching-substring\" minOccurs=\"0\"/&gt;\n          &lt;xs:element ref=\"xsl:non-matching-substring\" minOccurs=\"0\"/&gt;\n          &lt;xs:element ref=\"xsl:fallback\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"regex\" type=\"xsl:avt\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"flags\" type=\"xsl:avt\" default=\"\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"apply-imports\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:with-param\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"apply-templates\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n          &lt;xs:element ref=\"xsl:sort\"/&gt;\n          &lt;xs:element ref=\"xsl:with-param\"/&gt;\n        &lt;/xs:choice&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" default=\"child::node()\"/&gt;\n        &lt;xs:attribute name=\"mode\" type=\"xsl:mode\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"attribute\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:avt\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"namespace\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"separator\" type=\"xsl:avt\"/&gt;   \n        &lt;xs:attribute name=\"type\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"validation\" type=\"xsl:validation-type\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;        \n\n&lt;xs:element name=\"attribute-set\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n          &lt;xs:element ref=\"xsl:attribute\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"use-attribute-sets\" type=\"xsl:QNames\" default=\"\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"call-template\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:with-param\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"character-map\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:output-character\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"use-character-maps\" type=\"xsl:QNames\" default=\"\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"choose\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:when\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:element ref=\"xsl:otherwise\" minOccurs=\"0\"/&gt;\n        &lt;/xs:sequence&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"comment\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"copy\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"copy-namespaces\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n        &lt;xs:attribute name=\"inherit-namespaces\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n        &lt;xs:attribute name=\"use-attribute-sets\" type=\"xsl:QNames\" default=\"\"/&gt;\n        &lt;xs:attribute name=\"type\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"validation\" type=\"xsl:validation-type\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"copy-of\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"copy-namespaces\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n        &lt;xs:attribute name=\"type\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"validation\" type=\"xsl:validation-type\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"decimal-format\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"decimal-separator\" type=\"xsl:char\" default=\".\"/&gt;\n        &lt;xs:attribute name=\"grouping-separator\" type=\"xsl:char\" default=\",\"/&gt;\n        &lt;xs:attribute name=\"infinity\" type=\"xs:string\" default=\"Infinity\"/&gt;\n        &lt;xs:attribute name=\"minus-sign\" type=\"xsl:char\" default=\"-\"/&gt;\n        &lt;xs:attribute name=\"NaN\" type=\"xs:string\" default=\"NaN\"/&gt;\n        &lt;xs:attribute name=\"percent\" type=\"xsl:char\" default=\"%\"/&gt;\n        &lt;xs:attribute name=\"per-mille\" type=\"xsl:char\" default=\"&amp;#x2030;\"/&gt;\n        &lt;xs:attribute name=\"zero-digit\" type=\"xsl:char\" default=\"0\"/&gt;\n        &lt;xs:attribute name=\"digit\" type=\"xsl:char\" default=\"#\"/&gt;\n        &lt;xs:attribute name=\"pattern-separator\" type=\"xsl:char\" default=\";\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"element\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType mixed=\"true\"&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:avt\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"namespace\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"inherit-namespaces\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n        &lt;xs:attribute name=\"use-attribute-sets\" type=\"xsl:QNames\" default=\"\"/&gt;\n        &lt;xs:attribute name=\"type\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"validation\" type=\"xsl:validation-type\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"fallback\" substitutionGroup=\"xsl:instruction\" type=\"xsl:sequence-constructor\"/&gt;\n\n&lt;xs:element name=\"for-each\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:sort\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"for-each-group\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:sort\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"group-by\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"group-adjacent\" type=\"xsl:expression\"/&gt;            \n        &lt;xs:attribute name=\"group-starting-with\" type=\"xsl:pattern\"/&gt;            \n        &lt;xs:attribute name=\"group-ending-with\" type=\"xsl:pattern\"/&gt;            \n        &lt;xs:attribute name=\"collation\" type=\"xs:anyURI\"/&gt;            \n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"function\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:param\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"override\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\" default=\"item()*\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"if\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"test\" type=\"xsl:expression\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"import\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"href\" type=\"xs:anyURI\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"import-schema\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xs:schema\" minOccurs=\"0\" maxOccurs=\"1\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"namespace\" type=\"xs:anyURI\"/&gt;\n        &lt;xs:attribute name=\"schema-location\" type=\"xs:anyURI\"/&gt;                  \n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"include\" substitutionGroup=\"xsl:declaration\"&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:complexContent&gt;\n        &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n          &lt;xs:attribute name=\"href\" type=\"xs:anyURI\" use=\"required\"/&gt;\n        &lt;/xs:extension&gt;\n      &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"key\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"match\" type=\"xsl:pattern\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"use\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"collation\" type=\"xs:anyURI\"/&gt;               \n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"matching-substring\" type=\"xsl:sequence-constructor\"/&gt;\n\n&lt;xs:element name=\"message\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"terminate\" type=\"xsl:avt\" default=\"no\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"namespace\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:avt\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"namespace-alias\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"stylesheet-prefix\" type=\"xsl:prefix-or-default\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"result-prefix\" type=\"xsl:prefix-or-default\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"next-match\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n          &lt;xs:element ref=\"xsl:with-param\"/&gt;\n          &lt;xs:element ref=\"xsl:fallback\"/&gt;\n        &lt;/xs:choice&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"non-matching-substring\" type=\"xsl:sequence-constructor\"/&gt;\n\n&lt;xs:element name=\"number\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"value\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"level\" type=\"xsl:level\" default=\"single\"/&gt;\n        &lt;xs:attribute name=\"count\" type=\"xsl:pattern\"/&gt;\n        &lt;xs:attribute name=\"from\" type=\"xsl:pattern\"/&gt;\n        &lt;xs:attribute name=\"format\" type=\"xsl:avt\" default=\"1\"/&gt;\n        &lt;xs:attribute name=\"lang\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"letter-value\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"ordinal\" type=\"xsl:avt\"/&gt;        \n        &lt;xs:attribute name=\"grouping-separator\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"grouping-size\" type=\"xsl:avt\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"otherwise\" type=\"xsl:sequence-constructor\"/&gt;\n\n&lt;xs:element name=\"output\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:generic-element-type\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"method\" type=\"xsl:method\"/&gt;\n        &lt;xs:attribute name=\"byte-order-mark\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"cdata-section-elements\" type=\"xsl:QNames\"/&gt;\n        &lt;xs:attribute name=\"doctype-public\" type=\"xs:string\"/&gt;\n        &lt;xs:attribute name=\"doctype-system\" type=\"xs:string\"/&gt;\n        &lt;xs:attribute name=\"encoding\" type=\"xs:string\"/&gt;\n        &lt;xs:attribute name=\"escape-uri-attributes\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"include-content-type\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"indent\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"media-type\" type=\"xs:string\"/&gt;\n        &lt;xs:attribute name=\"normalization-form\" type=\"xs:NMTOKEN\"/&gt;\n        &lt;xs:attribute name=\"omit-xml-declaration\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"standalone\" type=\"xsl:yes-or-no-or-omit\"/&gt;\n        &lt;xs:attribute name=\"undeclare-prefixes\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"use-character-maps\" type=\"xsl:QNames\"/&gt;\n        &lt;xs:attribute name=\"version\" type=\"xs:NMTOKEN\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"output-character\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"character\" type=\"xsl:char\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"string\" type=\"xs:string\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"param\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\"/&gt;\n        &lt;xs:attribute name=\"required\" type=\"xsl:yes-or-no\"/&gt;\n        &lt;xs:attribute name=\"tunnel\" type=\"xsl:yes-or-no\"/&gt;        \n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"perform-sort\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:sort\" minOccurs=\"1\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"preserve-space\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"elements\" type=\"xsl:nametests\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"processing-instruction\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:avt\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"result-document\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"format\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"href\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"type\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"validation\" type=\"xsl:validation-type\"/&gt;\n        &lt;xs:attribute name=\"method\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"byte-order-mark\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"cdata-section-elements\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"doctype-public\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"doctype-system\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"encoding\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"escape-uri-attributes\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"include-content-type\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"indent\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"media-type\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"normalization-form\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"omit-xml-declaration\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"standalone\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"undeclare-prefixes\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"use-character-maps\" type=\"xsl:QNames\"/&gt;\n        &lt;xs:attribute name=\"output-version\" type=\"xsl:avt\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"sequence\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"sort\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;  \n        &lt;xs:attribute name=\"lang\" type=\"xsl:avt\"/&gt;        \n        &lt;xs:attribute name=\"data-type\" type=\"xsl:avt\" default=\"text\"/&gt;        \n        &lt;xs:attribute name=\"order\" type=\"xsl:avt\" default=\"ascending\"/&gt;        \n        &lt;xs:attribute name=\"case-order\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"collation\" type=\"xsl:avt\"/&gt;\n        &lt;xs:attribute name=\"stable\" type=\"xsl:yes-or-no\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"strip-space\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:element-only-versioned-element-type\"&gt;\n        &lt;xs:attribute name=\"elements\" type=\"xsl:nametests\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"stylesheet\" substitutionGroup=\"xsl:transform\"/&gt;\n\n&lt;xs:element name=\"template\" substitutionGroup=\"xsl:declaration\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:versioned-element-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:param\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:group ref=\"xsl:sequence-constructor-group\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"match\" type=\"xsl:pattern\"/&gt;\n        &lt;xs:attribute name=\"priority\" type=\"xs:decimal\"/&gt;\n        &lt;xs:attribute name=\"mode\" type=\"xsl:modes\"/&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\" default=\"item()*\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:complexType name=\"text-element-base-type\"&gt;\n  &lt;xs:simpleContent&gt;\n    &lt;xs:restriction base=\"xsl:versioned-element-type\"&gt;\n      &lt;xs:simpleType&gt;\n        &lt;xs:restriction base=\"xs:string\"/&gt;\n      &lt;/xs:simpleType&gt;\n      &lt;xs:anyAttribute namespace=\"##other\" processContents=\"lax\"/&gt;\n    &lt;/xs:restriction&gt;\n  &lt;/xs:simpleContent&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:element name=\"text\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:simpleContent&gt;\n      &lt;xs:extension base=\"xsl:text-element-base-type\"&gt;\n        &lt;xs:attribute name=\"disable-output-escaping\" type=\"xsl:yes-or-no\" default=\"no\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:simpleContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:complexType name=\"transform-element-base-type\"&gt;\n  &lt;xs:complexContent&gt;\n    &lt;xs:restriction base=\"xsl:element-only-versioned-element-type\"&gt;\n      &lt;xs:attribute name=\"version\" type=\"xs:decimal\" use=\"required\"/&gt;\n      &lt;xs:anyAttribute namespace=\"##other\" processContents=\"lax\"/&gt;\n    &lt;/xs:restriction&gt;\n  &lt;/xs:complexContent&gt;\n&lt;/xs:complexType&gt;\n\n&lt;xs:element name=\"transform\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent&gt;\n      &lt;xs:extension base=\"xsl:transform-element-base-type\"&gt;\n        &lt;xs:sequence&gt;\n          &lt;xs:element ref=\"xsl:import\" minOccurs=\"0\" maxOccurs=\"unbounded\"/&gt;\n          &lt;xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\"&gt;\n            &lt;xs:element ref=\"xsl:declaration\"/&gt;\n            &lt;xs:element ref=\"xsl:variable\"/&gt;\n            &lt;xs:element ref=\"xsl:param\"/&gt;              \n            &lt;xs:any namespace=\"##other\" processContents=\"lax\"/&gt; &lt;!-- weaker than XSLT 1.0 --&gt;\n          &lt;/xs:choice&gt;\n        &lt;/xs:sequence&gt;\n        &lt;xs:attribute name=\"id\" type=\"xs:ID\"/&gt;\n        &lt;xs:attribute name=\"default-validation\" type=\"xsl:validation-strip-or-preserve\" default=\"strip\"/&gt;\n        &lt;xs:attribute name=\"input-type-annotations\" type=\"xsl:input-type-annotations-type\" default=\"unspecified\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"value-of\" substitutionGroup=\"xsl:instruction\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"separator\" type=\"xsl:avt\"/&gt;            \n        &lt;xs:attribute name=\"disable-output-escaping\" type=\"xsl:yes-or-no\" default=\"no\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"variable\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\" use=\"optional\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\" use=\"optional\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"when\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"test\" type=\"xsl:expression\" use=\"required\"/&gt;\n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;xs:element name=\"with-param\"&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:complexContent mixed=\"true\"&gt;\n      &lt;xs:extension base=\"xsl:sequence-constructor\"&gt;\n        &lt;xs:attribute name=\"name\" type=\"xsl:QName\" use=\"required\"/&gt;\n        &lt;xs:attribute name=\"select\" type=\"xsl:expression\"/&gt;\n        &lt;xs:attribute name=\"as\" type=\"xsl:sequence-type\"/&gt;\n        &lt;xs:attribute name=\"tunnel\" type=\"xsl:yes-or-no\"/&gt;   \n      &lt;/xs:extension&gt;\n    &lt;/xs:complexContent&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n&lt;xs:annotation&gt;\n  &lt;xs:documentation&gt;\n    PART C: definition of literal result elements\n    \n    There are three ways to define the literal result elements\n    permissible in a stylesheet.\n    \n    (a) do nothing. This allows any element to be used as a literal\n        result element, provided it is not in the XSLT namespace\n    \n    (b) declare all permitted literal result elements as members\n        of the xsl:literal-result-element substitution group\n        \n    (c) redefine the model group xsl:result-elements to accommodate\n        all permitted literal result elements.\n        \n    Literal result elements are allowed to take certain attributes\n    in the XSLT namespace. These are defined in the attribute group\n    literal-result-element-attributes, which can be included in the\n    definition of any literal result element.\n    \n  &lt;/xs:documentation&gt;\n&lt;/xs:annotation&gt;   \n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n\n&lt;xs:element name=\"literal-result-element\" abstract=\"true\" type=\"xs:anyType\"/&gt;\n\n&lt;xs:attributeGroup name=\"literal-result-element-attributes\"&gt;\n  &lt;xs:attribute name=\"default-collation\" form=\"qualified\" type=\"xsl:uri-list\"/&gt;\n  &lt;xs:attribute name=\"extension-element-prefixes\" form=\"qualified\" type=\"xsl:prefixes\"/&gt;\n  &lt;xs:attribute name=\"exclude-result-prefixes\" form=\"qualified\" type=\"xsl:prefixes\"/&gt;\n  &lt;xs:attribute name=\"xpath-default-namespace\" form=\"qualified\" type=\"xs:anyURI\"/&gt;    \n  &lt;xs:attribute name=\"inherit-namespaces\" form=\"qualified\" type=\"xsl:yes-or-no\" default=\"yes\"/&gt;\n  &lt;xs:attribute name=\"use-attribute-sets\" form=\"qualified\" type=\"xsl:QNames\" default=\"\"/&gt;\n  &lt;xs:attribute name=\"use-when\" form=\"qualified\" type=\"xsl:expression\"/&gt;\n  &lt;xs:attribute name=\"version\" form=\"qualified\" type=\"xs:decimal\"/&gt;\n  &lt;xs:attribute name=\"type\" form=\"qualified\" type=\"xsl:QName\"/&gt;\n  &lt;xs:attribute name=\"validation\" form=\"qualified\" type=\"xsl:validation-type\"/&gt;\n&lt;/xs:attributeGroup&gt;\n\n&lt;xs:group name=\"result-elements\"&gt;\n  &lt;xs:choice&gt;\n    &lt;xs:element ref=\"xsl:literal-result-element\"/&gt;\n    &lt;xs:any namespace=\"##other\" processContents=\"lax\"/&gt;\n    &lt;xs:any namespace=\"##local\" processContents=\"lax\"/&gt;\n  &lt;/xs:choice&gt;\n&lt;/xs:group&gt;\n\n\n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n&lt;xs:annotation&gt;\n  &lt;xs:documentation&gt;\n    PART D: definitions of simple types used in stylesheet attributes \n  &lt;/xs:documentation&gt;\n&lt;/xs:annotation&gt;   \n&lt;!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ --&gt;\n\n&lt;xs:simpleType name=\"avt\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      This type is used for all attributes that allow an attribute value template.\n      The general rules for the syntax of attribute value templates, and the specific\n      rules for each such attribute, are described in the XSLT 2.0 Recommendation.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:string\"/&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"char\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      A string containing exactly one character.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:string\"&gt;\n    &lt;xs:length value=\"1\"/&gt;\n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"expression\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      An XPath 2.0 expression.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:pattern value=\".+\"/&gt;\n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"input-type-annotations-type\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      Describes how type annotations in source documents are handled.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:enumeration value=\"preserve\"/&gt;\n    &lt;xs:enumeration value=\"strip\"/&gt;   \n    &lt;xs:enumeration value=\"unspecified\"/&gt;        \n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"level\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      The level attribute of xsl:number: \n      one of single, multiple, or any.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:NCName\"&gt;\n    &lt;xs:enumeration value=\"single\"/&gt;\n    &lt;xs:enumeration value=\"multiple\"/&gt;\n    &lt;xs:enumeration value=\"any\"/&gt;\n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"mode\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      The mode attribute of xsl:apply-templates: \n      either a QName, or #current, or #default.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:union memberTypes=\"xsl:QName\"&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xs:token\"&gt;\n        &lt;xs:enumeration value=\"#default\"/&gt;\n        &lt;xs:enumeration value=\"#current\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:union&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"modes\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      The mode attribute of xsl:template: \n      either a list, each member being either a QName or #default;\n      or the value #all\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:union&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:list&gt;\n        &lt;xs:simpleType&gt;\n          &lt;xs:union memberTypes=\"xsl:QName\"&gt;\n            &lt;xs:simpleType&gt;\n              &lt;xs:restriction base=\"xs:token\"&gt;\n                &lt;xs:enumeration value=\"#default\"/&gt;\n              &lt;/xs:restriction&gt;\n            &lt;/xs:simpleType&gt;\n          &lt;/xs:union&gt;\n        &lt;/xs:simpleType&gt;\n      &lt;/xs:list&gt;\n    &lt;/xs:simpleType&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xs:token\"&gt;\n        &lt;xs:enumeration value=\"#all\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:union&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"nametests\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      A list of NameTests, as defined in the XPath 2.0 Recommendation.\n      Each NameTest is either a QName, or \"*\", or \"prefix:*\", or \"*:localname\"\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:list&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:union memberTypes=\"xsl:QName\"&gt;\n        &lt;xs:simpleType&gt;\n          &lt;xs:restriction base=\"xs:token\"&gt;\n            &lt;xs:enumeration value=\"*\"/&gt;\n          &lt;/xs:restriction&gt;\n        &lt;/xs:simpleType&gt;\n        &lt;xs:simpleType&gt;\n          &lt;xs:restriction base=\"xs:token\"&gt;\n            &lt;xs:pattern value=\"\\i\\c*:\\*\"/&gt;\n            &lt;xs:pattern value=\"\\*:\\i\\c*\"/&gt;            \n          &lt;/xs:restriction&gt;\n        &lt;/xs:simpleType&gt;\n      &lt;/xs:union&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:list&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"prefixes\"&gt;\n  &lt;xs:list itemType=\"xs:NCName\"/&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"prefix-list-or-all\"&gt;\n  &lt;xs:union memberTypes=\"xsl:prefix-list\"&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xs:token\"&gt;\n        &lt;xs:enumeration value=\"#all\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:union&gt;\n&lt;/xs:simpleType&gt;\n      \n&lt;xs:simpleType name=\"prefix-list\"&gt;\n  &lt;xs:list itemType=\"xsl:prefix-or-default\"/&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"method\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      The method attribute of xsl:output:\n      Either one of the recognized names \"xml\", \"xhtml\", \"html\", \"text\",\n      or a QName that must include a prefix.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:union&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xs:NCName\"&gt;\n        &lt;xs:enumeration value=\"xml\"/&gt;\n        &lt;xs:enumeration value=\"xhtml\"/&gt;\n        &lt;xs:enumeration value=\"html\"/&gt;\n        &lt;xs:enumeration value=\"text\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xsl:QName\"&gt;\n        &lt;xs:pattern value=\"\\c*:\\c*\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:union&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"pattern\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      A match pattern as defined in the XSLT 2.0 Recommendation.\n      The syntax for patterns is a restricted form of the syntax for\n      XPath 2.0 expressions.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xsl:expression\"/&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"prefix-or-default\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      Either a namespace prefix, or #default.\n      Used in the xsl:namespace-alias element.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:union memberTypes=\"xs:NCName\"&gt;\n    &lt;xs:simpleType&gt;\n      &lt;xs:restriction base=\"xs:token\"&gt;\n        &lt;xs:enumeration value=\"#default\"/&gt;\n      &lt;/xs:restriction&gt;\n    &lt;/xs:simpleType&gt;\n  &lt;/xs:union&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"QNames\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      A list of QNames.\n      Used in the [xsl:]use-attribute-sets attribute of various elements,\n      and in the cdata-section-elements attribute of xsl:output\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:list itemType=\"xsl:QName\"/&gt;          \n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"QName\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      A QName.\n      This schema does not use the built-in type xs:QName, but rather defines its own\n      QName type. Although xs:QName would define the correct validation on these attributes,\n      a schema processor would expand unprefixed QNames incorrectly when constructing the PSVI,\n      because (as defined in XML Schema errata) an unprefixed xs:QName is assumed to be in\n      the default namespace, which is not the correct assumption for XSLT.\n      The data type is defined as a restriction of the built-in type Name, restricted\n      so that it can only contain one colon which must not be the first or last character.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:Name\"&gt;\n    &lt;xs:pattern value=\"([^:]+:)?[^:]+\"/&gt;      \n  &lt;/xs:restriction&gt;        \n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"sequence-type\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      The description of a data type, conforming to the\n      SequenceType production defined in the XPath 2.0 Recommendation\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:pattern value=\".+\"/&gt;      \n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"uri-list\"&gt;\n  &lt;xs:list itemType=\"xs:anyURI\"/&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"validation-strip-or-preserve\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      Describes different ways of type-annotating an element or attribute.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xsl:validation-type\"&gt;\n    &lt;xs:enumeration value=\"preserve\"/&gt;\n    &lt;xs:enumeration value=\"strip\"/&gt;    \n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"validation-type\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      Describes different ways of type-annotating an element or attribute.\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:enumeration value=\"strict\"/&gt;\n    &lt;xs:enumeration value=\"lax\"/&gt;\n    &lt;xs:enumeration value=\"preserve\"/&gt;\n    &lt;xs:enumeration value=\"strip\"/&gt;    \n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"yes-or-no\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      One of the values \"yes\" or \"no\".\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:enumeration value=\"yes\"/&gt;\n    &lt;xs:enumeration value=\"no\"/&gt;\n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;xs:simpleType name=\"yes-or-no-or-omit\"&gt;\n  &lt;xs:annotation&gt;\n    &lt;xs:documentation&gt;\n      One of the values \"yes\" or \"no\" or \"omit\".\n    &lt;/xs:documentation&gt;\n  &lt;/xs:annotation&gt;\n  &lt;xs:restriction base=\"xs:token\"&gt;\n    &lt;xs:enumeration value=\"yes\"/&gt;\n    &lt;xs:enumeration value=\"no\"/&gt;\n    &lt;xs:enumeration value=\"omit\"/&gt;\n  &lt;/xs:restriction&gt;\n&lt;/xs:simpleType&gt;\n\n&lt;/xs:schema&gt;\n</pre>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"acknowledgements\" id = \"acknowledgements\"></a>H\n      Acknowledgements (Non-Normative)</h2>\n\n      <p>This specification was developed and approved for\n      publication by the W3C XSL Working Group (WG). WG approval of\n      this specification does not necessarily imply that all WG\n      members voted for its approval.</p>\n\n      <p>The chair of the XSL WG is Sharon Adler, IBM. The XSL\n      Working Group includes two overlapping teams working on XSLT\n      and XSL Formatting Objects. The members of the XSL WG\n      currently engaged in XSLT activities are:</p>\n\n      <table border = \"1\" cellpadding = \"5\">\n        <thead>\n          <tr>\n            <th>Participant</th>\n\n            <th>Affiliation</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          <tr>\n            <td>Colin Paul Adams</td>\n\n            <td>Invited Expert</td>\n          </tr>\n\n          <tr>\n            <td>Anders Berglund</td>\n\n            <td>IBM</td>\n          </tr>\n\n          <tr>\n            <td>Scott Boag</td>\n\n            <td>IBM</td>\n          </tr>\n\n          <tr>\n            <td>Michael Kay</td>\n\n            <td>Invited Expert</td>\n          </tr>\n\n          <tr>\n            <td>Alex Milowski</td>\n\n            <td>Invited Expert</td>\n          </tr>\n\n          <tr>\n            <td>William Peterson</td>\n\n            <td>Novell, Inc</td>\n          </tr>\n\n          <tr>\n            <td>Michael Sperberg-McQueen</td>\n\n            <td>W3C</td>\n          </tr>\n\n          <tr>\n            <td>Zarella Rendon</td>\n\n            <td>Invited Expert</td>\n          </tr>\n\n          <tr>\n            <td>Jeni Tennison</td>\n\n            <td>Invited Expert</td>\n          </tr>\n\n          <tr>\n            <td>Joanne Tong</td>\n\n            <td>IBM</td>\n          </tr>\n\n          <tr>\n            <td>Norm Walsh</td>\n\n            <td>Sun Microsystems Inc.</td>\n          </tr>\n\n          <tr>\n            <td>Mohamed Zergaoui</td>\n\n            <td>Innovimax SARL</td>\n          </tr>\n\n          <tr>\n            <td>(vacancy)</td>\n\n            <td>Oracle</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>Alternates are listed only where they have taken an active\n      part in working group discussions. However, the group\n      acknowledges the support that many members receive from\n      colleagues in their organizations, whether or not they are\n      officially appointed as alternates.</p>\n\n      <p>The W3C representative on the XSL Working Group is Michael\n      Sperberg-McQueen.</p>\n\n      <p>The following individuals made significant contributions\n      to XSLT 2.0 while they were members of the Working Group, and\n      in some cases afterwards:</p>\n\n      <blockquote>\n        <p>James Clark, Invited Expert<br/>\n        Jonathan Marsh, Microsoft<br/>\n        Steve Muench, Oracle<br/>\n        Steve Zilles, Adobe<br/>\n        Evan Lenz, XYZFind<br/>\n        Mark Scardina, Oracle<br/>\n        Kristoffer Rose, IBM<br/>\n        Henry Zongaro, IBM<br/>\n        Henry Thompson, University of Edinburgh<br/>\n        K Karun, Oracle</p>\n      </blockquote>\n\n      <p>The working group wishes to acknowledge the contribution\n      made by David Marston of IBM especially to the new\n      specification of the <a href = \"#function-format-number\"><code>format-number</code></a>\n      function.</p>\n\n      <p>This specification builds on the success of the XSLT 1.0\n      Recommendation. For a list of contributors to XSLT 1.0, see\n      <a href = \"#xslt\">[XSLT 1.0]</a>.</p>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"requirements-checklist\" id = \"requirements-checklist\"></a>I Checklist of Requirements\n      (Non-Normative)</h2>\n\n      <p>This section provides a checklist of progress against the\n      published XSLT 2.0 Requirements document (see <a href = \"#xslt20req\">[XSLT 2.0 Requirements]</a>).</p>\n\n      <p><b><i>Requirement 1</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Maintain Backwards\n      Compatibility with XSLT 1.1 [Read this as \"with XSLT\n      1.0\"]</p>\n\n      <p>Any stylesheet whose behavior is fully defined in XSLT 1.0\n      and which generates no errors will produce the same result\n      tree under XSLT 2.0</p>\n\n      <p><i>Response</i></p>\n\n      <p>See <a href = \"#incompatibilities\"><i>J.1 Incompatible\n      Changes</i></a></p>\n\n      <p><b><i>Requirement 2</i></b></p>\n\n      <p><span class = \"verb\">must</span> Match Elements with Null\n      Values</p>\n\n      <p>A stylesheet should be able to match elements and\n      attributes whose value is explicitly null.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This has been handled as an XPath 2.0 requirement. <span>A\n      new function <a href = \"http://www.w3.org/TR/xpath-functions/#func-nilled\"><code>nilled</code></a><sup>\n      <small>FO</small></sup> is available to test whether an\n      element has been marked as nil after schema\n      validation.</span></p>\n\n      <p><b><i>Requirement 3</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Allow Included\n      Documents to \"Encapsulate\" Local Stylesheets</p>\n\n      <p>XSLT 2.0 <span class = \"verb\">should</span> define a\n      mechanism to allow the templates in a stylesheet associated\n      with a secondary source document, to be imported and used to\n      format the included fragment, taking precedence over any\n      applicable templates in the current stylesheet.</p>\n\n      <p><i>Response</i></p>\n\n      <p>The facility to define modes has been generalized, making\n      it easier to define a distinct set of template rules for\n      processing a particular document.</p>\n\n      <p><b><i>Requirement 4</i></b></p>\n\n      <p>Could&#160;Support Accessing Infoset Items for XML\n      Declaration</p>\n\n      <p>A stylesheet COULD be able to access information like the\n      version and encoding from the XML declaration of a\n      document.</p>\n\n      <p><i>Response</i></p>\n\n      <p>No new facilities have been provided in this area, because\n      this information is not available in the data model.</p>\n\n      <p><b><i>Requirement 5</i></b></p>\n\n      <p>Could&#160;Provide QName Aware String Functions</p>\n\n      <p>Users manipulating documents (for example stylesheets,\n      schemas) that have QName-valued element or attribute content\n      need functions that take a string containing a QName as their\n      argument, convert it to an <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a> using either the\n      namespace declarations in scope at that point in the\n      stylesheet, or the namespace declarations in scope for a\n      specific source node, and return properties of the <a title = \"expanded-QName\" href = \"#dt-expanded-qname\">expanded-QName</a>\n      such as its namespace URI and local name.</p>\n\n      <p><i>Response</i></p>\n\n      <p>Functions operating on QNames are included in the XPath\n      2.0 Functions and Operators document: see <a href = \"#xpath-functions\">[Functions and Operators]</a>.</p>\n\n      <p><b><i>Requirement 6</i></b></p>\n\n      <p>Could&#160;Enable Constructing a Namespace with Computed\n      Name</p>\n\n      <p>Provide an <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a> analog to\n      <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> for\n      constructing a namespace node with a computed prefix and\n      URI.</p>\n\n      <p><i>Response</i></p>\n\n      <p>An <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n      instruction has been added: see <a href = \"#creating-namespace-nodes\"><i>11.7 Creating Namespace\n      Nodes</i></a>.</p>\n\n      <p><b><i>Requirement 7</i></b></p>\n\n      <p>Could&#160;Simplify Resolving Prefix Conflicts in\n      QName-Valued Attributes</p>\n\n      <p>XSLT 2.0 could simplify the renaming of conflicting\n      namespace prefixes in result tree fragments, particularly for\n      attributes declared in a schema as being QNames. Once the\n      processor knows an attribute value is a QName, an XSLT\n      processor <span class = \"verb\">should</span> be able to rename\n      prefixes and generate namespace declarations to preserve the\n      semantics of that attribute value, just as it does for\n      attribute names.</p>\n\n      <p><i>Response</i></p>\n\n      <p>If an attribute is typed as a QName in the schema, the new\n      XPath 2.0 functions can be used to manipulate it as required\n      at application level. This <span>is considered</span>\n      sufficient to meet the requirement.</p>\n\n      <p><b><i>Requirement 8</i></b></p>\n\n      <p>Could&#160;Support XHTML Output Method</p>\n\n      <p>Complementing the existing output methods for html, xml,\n      and text, an xhtml output method could be provided to\n      simplify transformations which target XHTML output.</p>\n\n      <p><i>Response</i></p>\n\n      <p>An XHTML output method is now provided: see <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n      Serialization]</a></p>\n\n      <p><b><i>Requirement 9</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Allow Matching on\n      Default Namespace Without Explicit Prefix</p>\n\n      <p>Many users stumble trying to match an element with a\n      default namespace.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A new <code>[xsl:]xpath-default-namespace</code> attribute\n      is provided for this purpose: see <a href = \"#unprefixed-qnames\"><i>5.2 Unprefixed QNames in Expressions\n      and Patterns</i></a></p>\n\n      <p><b><i>Requirement 10</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Add Date Formatting\n      Functions</p>\n\n      <p>One of the more frequent requests from XSLT 1.0 users is\n      the ability to format date information with similar control\n      to XSLT's format-number. XML Schema introduces several kinds\n      of date and time datatypes which will further increase the\n      demand for date formatting during transformations.\n      Functionality similar to that provided by\n      java.text.SimpleDateFormat. A date analog of XSLT's named\n      xsl:decimal-format may be required to handle locale-specific\n      date formatting issues.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A set of date formatting functions has been specified: see\n      <a href = \"#format-date\"><i>16.5 Formatting Dates and\n      Times</i></a></p>\n\n      <p><b><i>Requirement 11</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Simplify Accessing\n      Id's and Key's in Other Documents</p>\n\n      <p>Currently it is cumbersome to lookup nodes by id() or\n      key() in documents other than the source document. Users\n      <span class = \"verb\">must</span> first use an xsl:for-each\n      instruction, selecting the desired document() to make it the\n      current node, then relative XPath expressions within the\n      scope of the xsl:for-each can refer to id() or key() as\n      desired.</p>\n\n      <p><i>Response</i></p>\n\n      <p>The requirement is met by the generalization of path\n      syntax in XPath 2.0. It is now possible to use a path\n      expression such as\n      <code>document('a.xml')/id('A001')</code>.</p>\n\n      <p><b><i>Requirement 12</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Provide Function to\n      Absolutize Relative URIs</p>\n\n      <p>There <span class = \"verb\">should</span> be a way in XSLT\n      2.0 to create an absolute URI. The functionality <span class = \"verb\">should</span> allow passing a node-set and return a\n      <a title = \"string value\" href = \"#dt-string-value\">string\n      value</a> representing the absolute URI resolved with respect\n      to the base URI of the current node.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A function <a href = \"http://www.w3.org/TR/xpath-functions/#func-resolve-uri\"><code>\n      resolve-uri</code></a><sup><small>FO</small></sup> is now\n      defined in <a href = \"#xpath-functions\">[Functions and\n      Operators]</a>.</p>\n\n      <p><b><i>Requirement 13</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Include Unparsed\n      Text from an External Resource</p>\n\n      <p>Frequently stylesheets <span class = \"verb\">must</span>\n      import text from external resources. Today users have to\n      resort to <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a> to\n      accomplish this because XSLT 1.0 only provides the document()\n      function which, while useful, can only read external\n      resources that are well-formed XML documents.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A function <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a> has\n      been added: see <a href = \"#unparsed-text\"><i>16.2 Reading Text\n      Files</i></a></p>\n\n      <p><b><i>Requirement 14</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Allow Authoring\n      Extension Functions in XSLT</p>\n\n      <p>As part of the XSLT 1.1 work done on <a title = \"extension function\" href = \"#dt-extension-function\">extension\n      functions</a>, a proposal to author XSLT extension functions\n      in XSLT itself was deferred for reconsideration in XSLT 2.0.\n      This would allow the functions in an extension namespace to\n      be implemented in \"pure\" XSLT, without resulting to external\n      programming languages.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A solution to this requirement, the <a href = \"#XSLT_element-function\"><code>xsl:function</code></a> element, is\n      included in this specification. See <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n      Functions</i></a>.</p>\n\n      <p><b><i>Requirement 15</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Output Character\n      Entity References Instead of Numeric Character Entities</p>\n\n      <p>Users have frequently requested the ability to have the\n      output of their transformation use (named) character\n      references instead of the numeric character entity. The\n      ability to control this preference as the level of the whole\n      document is sufficient. For example, rather than seeing\n      &amp;#160; in the output, the user could request to see the\n      equivalent &amp;nbsp; instead.</p>\n\n      <p><i>Response</i></p>\n\n      <p>The serialization specification gives the implementation\n      discretion on how special characters are output. A user who\n      wishes to force the use of named character references can\n      achieve this using the new <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n      declaration.</p>\n\n      <p><b><i>Requirement 16</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Construct Entity\n      Reference by Name</p>\n\n      <p>Analogous to the ability to create elements and\n      attributes, users have expressed a desire to construct named\n      entity references.</p>\n\n      <p><i>Response</i></p>\n\n      <p>No solution has been provided to this requirement; it is\n      difficult, because entity references are not defined in the\n      data model.</p>\n\n      <p><b><i>Requirement 17</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Support for Unicode\n      String Normalization</p>\n\n      <p>For reliable string comparison of Unicode strings, users\n      need the ability to apply Unicode normalization before\n      comparing the strings.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This requirement has been addressed by the provision of\n      the <a href = \"http://www.w3.org/TR/xpath-functions/#func-normalize-unicode\">\n      <code>normalize-unicode</code></a><sup><small>FO</small></sup>\n      function described in <a href = \"#xpath-functions\">[Functions\n      and Operators]</a>. In addition, a serialization parameter\n      <code>normalization-form</code> has been added.</p>\n\n      <p><b><i>Requirement 18</i></b></p>\n\n      <p><span class = \"verb\">should</span>&#160;Standardize\n      Extension Element Language Bindings</p>\n\n      <p>XSLT 1.1 undertook the standardization of language\n      bindings for XSLT <a title = \"extension function\" href = \"#dt-extension-function\">extension functions</a>. For XSLT\n      2.0, analogous bindings <span class = \"verb\">should</span> be\n      provided for extension elements [now renamed <a title = \"extension instruction\" href = \"#dt-extension-instruction\">extension instructions</a>].</p>\n\n      <p><i>Response</i></p>\n\n      <p>The XSL Working Group has decided not to pursue this\n      requirement, and the attempt to standardize language bindings\n      for extension functions that appeared in the XSLT 1.1 Working\n      Draft has now been withdrawn. The Working Group decided that\n      language bindings would be better published separately from\n      the core XSLT specification.</p>\n\n      <p><b><i>Requirement 19</i></b></p>\n\n      <p>Could&#160;Improve Efficiency of Transformations on Large\n      Documents</p>\n\n      <p>Many useful transformations take place on large documents\n      consisting of thousands of repeating \"sub-documents\". Today\n      transformations over these documents are impractical due to\n      the need to have the entire source tree in memory. Enabling\n      \"progressive\" transformations, where the processor is able to\n      produce progressively more output as more input is received,\n      is tantamount to avoiding the need for XSLT processors to\n      have random access to the entire source document. This might\n      be accomplished by:</p>\n\n      <p>Identifying a core subset of XPath that does not require\n      random access to the source tree, or</p>\n\n      <p>Consider a \"transform all subtrees\" mode where the\n      stylesheet says, \"Apply the transformation implied by this\n      stylesheet to each node that matches XXX, considered as the\n      root of a separate tree, and copy all the results of these\n      mini-transformations as separate subtrees on to the final\n      result tree.\"</p>\n\n      <p><i>Response</i></p>\n\n      <p>The Working Group observes that implementation techniques\n      for XSLT processing have advanced considerably since this\n      requirement was written, and that further research developing\n      new approaches continues both in industry and academia. In\n      the light of these developments, the Working Group has\n      decided that it would be inappropriate at this stage to\n      identify language features or subsets designed specifically\n      to enable progressive transformations.</p>\n\n      <p><b><i>Requirement 20</i></b></p>\n\n      <p>Could&#160;Support Reverse IDREF attributes</p>\n\n      <p>Given a particular value of an ID, produce a list of all\n      elements that have an IDREF or IDREFS attribute which refers\n      to this ID.</p>\n\n      <p>This functionality can be accomplished using the current\n      &lt;xsl:key&gt; and key() mechanism.</p>\n\n      <p><i>Response</i></p>\n\n      <p>The <a href = \"http://www.w3.org/TR/xpath-functions/#func-idref\"><code>idref</code></a><sup>\n      <small>FO</small></sup> function defined in <a href = \"#xpath-functions\">[Functions and Operators]</a> has been\n      introduced in response to this requirement.</p>\n\n      <p><b><i>Requirement 21</i></b></p>\n\n      <p>Could&#160;Support Case-Insensitive Comparisons</p>\n\n      <p>XSLT 2.0 could expand its comparison functionality to\n      include support for case-insensitive string comparison.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This is an XPath 2.0 requirement. XPath 2.0 includes\n      functions to convert strings to uppercase or lowercase, it\n      also includes functions to compare strings using a named\n      collating sequence, which provides the option of using a\n      collating sequence that treats uppercase and lowercase as\n      equal.</p>\n\n      <p><b><i>Requirement 22</i></b></p>\n\n      <p>Could&#160;Support Lexigraphic String Comparisons</p>\n\n      <p>We don't let users compare strings like $x &gt; 'a'.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This requirement has been addressed in XPath 2.0.</p>\n\n      <p><b><i>Requirement 23</i></b></p>\n\n      <p>Could&#160;Allow Comparing Nodes Based on Document\n      Order</p>\n\n      <p>Support the ability to test whether one node comes before\n      another in document order.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This requirement has been addressed in XPath 2.0, using\n      the operators <code>&lt;&lt;</code> and\n      <code>&gt;&gt;</code>.</p>\n\n      <p><b><i>Requirement 24</i></b></p>\n\n      <p>Could&#160;Improve Support for Unparsed Entities</p>\n\n      <p>In XSLT 1.0 there is an asymmetry in support for unparsed\n      entities. They can be handled on input but not on output. In\n      particular, there is no way to do an identity transformation\n      that preserves them. At a minimum we need the ability to\n      retrieve the Public ID of an unparsed entity.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A function to retrieve the public identifier of an\n      unparsed entity has been added. However, no facilities have\n      been provided to include unparsed entities in a result\n      document.</p>\n\n      <p><b><i>Requirement 25</i></b></p>\n\n      <p>Could&#160;Allow Processing a Node with the \"Next Best\n      Matching\" Template</p>\n\n      <p>In the construction of large stylesheets for complex\n      documents, it is often necessary to construct templates that\n      implement special behavior for a particular instance of an\n      element, and then apply the normal styling for that element.\n      Currently this is not possible because <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n      specifies that for any given node only a single template will\n      be selected and instantiated.</p>\n\n      <p>Currently the processor determines a list of matching\n      templates and then discards all but the one with the highest\n      priority. In order to support this requirement, the processor\n      would retain the list of matching templates sorted in\n      priority order. A new instruction, for example <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>, in a\n      template would simply trigger the next template in the list\n      of matching templates. This \"next best match\" recursion\n      naturally bottoms out at the builtin template which can be\n      seen as the lowest priority matching template for every match\n      pattern.</p>\n\n      <p><i>Response</i></p>\n\n      <p>An <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n      instruction has been added.</p>\n\n      <p><b><i>Requirement 26</i></b></p>\n\n      <p>Could&#160;Make Coercions Symmetric By Allowing Scalar to\n      Nodeset Conversion</p>\n\n      <p>Presently, no datatype can be coerced or cast to a\n      node-set. By allowing a <a title = \"string value\" href = \"#dt-string-value\">string value</a> to convert to a node-set,\n      some user \"gotchas\" could be avoided.</p>\n\n      <p><i>Response</i></p>\n\n      <p>The availability of sequences of strings or numbers\n      probably meets most of the use-cases envisaged by this\n      requirement.</p>\n\n      <p><b><i>Requirement 27</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Simplify Constructing\n      and Copying Typed Content</p>\n\n      <p>It <span class = \"verb\">must</span> be possible to construct\n      XML Schema-typed elements and attributes. In addition, when\n      copying an element or an attribute to the result, it\n      <span class = \"verb\">should</span> be possible to preserve the\n      type during the process.</p>\n\n      <p><i>Response</i></p>\n\n      <p>Facilities to validate constructed and copied element and\n      attribute nodes are defined in this specification; these\n      elements and attributes will carry a type annotation\n      indicating their XML Schema type. In addition, it is possible\n      to specify when copying nodes whether type annotations should\n      be preserved or removed.</p>\n\n      <p><b><i>Requirement 28</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Support Sorting Nodes\n      Based on XML Schema Type</p>\n\n      <p>XSLT 1.0 supports sorting based on string-valued and\n      number-valued expressions. XML Schema: Datatypes introduces\n      new scalar types (for example, date) with well-known sort\n      orders. It <span class = \"verb\">must</span> be possible to sort\n      based on these extended set of scalar data types. Since XML\n      Schema: Datatypes does not define an ordering for complex\n      types, this sorting support <span class = \"verb\">should</span>\n      only be considered for simple types.</p>\n\n      <p><span class = \"verb\">should</span> be consistent with\n      whatever we define for the matrix of conversion and\n      comparisons.</p>\n\n      <p><i>Response</i></p>\n\n      <p>Sorting based on any schema-defined primitive data type\n      with a total ordering is included in this specification.</p>\n\n      <p><b><i>Requirement 29</i></b></p>\n\n      <p>Could&#160;Support Scientific Notation in Number\n      Formatting</p>\n\n      <p>Several users have requested the ability to have the\n      existing format-number() function extended to format numbers\n      using Scientific Notation.</p>\n\n      <p><i>Response</i></p>\n\n      <p>Simple scientific formatting is now available through\n      support for the schema-defined <code>xs:float</code> and\n      <code>xs:double</code> data types; casting a large or small\n      value of these types to a string produces a representation of\n      the value in scientific notation. The Working Group believes\n      that this will meet the requirement in most cases, and has\n      therefore decided not to enhance the <a href = \"#function-format-number\"><code>format-number</code></a>\n      further to introduce scientific notation. Users with more\n      specialized requirements can write their own functions.</p>\n\n      <p><b><i>Requirement 30</i></b></p>\n\n      <p>Could&#160;Provide Ability to Detect Whether \"Rich\" Schema\n      Information is Available</p>\n\n      <p>A stylesheet that requires XML Schema type-related\n      functionality could be able to test whether a \"rich\"\n      Post-Schema-Validated Infoset is available from the XML\n      Schema processor, so that the stylesheet can provide fallback\n      behavior or choose to exit with <code>xsl:message\n      abort=\"yes\"</code>.</p>\n\n      <p><i>Response</i></p>\n\n      <p>This requirement is satisified through the <code>instance\n      of</code> operator in XPath 2.0, which allows expressions to\n      determine the type of element and attribute nodes, using\n      information from the schema. The details of how these\n      expressions behave when there is no schema are defined in the\n      XPath specifications.</p>\n\n      <p><b><i>Requirement 31</i></b></p>\n\n      <p><span class = \"verb\">must</span>&#160;Simplify Grouping</p>\n\n      <p>Grouping is complicated in XSLT 1.0. It <span class = \"verb\">must</span> be possible for users to group nodes in a\n      document based on common string-values, common names, or\n      common values for any other expression</p>\n\n      <p>In addition XSLT <span class = \"verb\">must</span> allow\n      grouping based on sequential position, for example selecting\n      groups of adjacent &lt;P&gt; elements. Ideally it\n      <span class = \"verb\">should</span> also make it easier to do\n      fixed-size grouping as well, for example groups of three\n      adjacent nodes, for laying out data in multiple columns. For\n      each group of nodes identified, it <span class = \"verb\">must</span> be possible to instantiate a template for\n      the group. Grouping <span class = \"verb\">must</span> be\n      \"nestable\" to multiple levels so that groups of distinct\n      nodes can be identified, then from among the distinct groups\n      selected, further sub-grouping of distinct node in the\n      current group can be done.</p>\n\n      <p><i>Response</i></p>\n\n      <p>A new <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n      instruction is provided: see <a href = \"#grouping\"><i>14\n      Grouping</i></a>. In addition, many of the new functions and\n      operators provided in XPath 2.0 make these algorithms easier\n      to write.</p>\n    </div>\n\n    <div class = \"div1\">\n      <h2><a name = \"changes\" id = \"changes\"></a>J Changes from XSLT\n      1.0 (Non-Normative)</h2>\n\n      <div class = \"div2\">\n        <h3><a name = \"incompatibilities\" id = \"incompatibilities\"></a>J.1 Incompatible Changes</h3>\n\n        <p>This section lists all known cases where a stylesheet\n        that was valid (produced no errors) under XSLT 1.0, and\n        whose behavior was fully specified by XSLT 1.0, will\n        produce different results under XSLT 2.0.</p>\n\n        <p>Most of the discussion is concerned with compatibility\n        in the absence of a schema: that is, it is assumed that the\n        source document being transformed has no schema when\n        processed using XSLT 1.0, and that no schema is added when\n        moving to XSLT 2.0. Some additional factors that come into\n        play when a schema is added are noted at the end of the\n        section.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"incompatibility-stripping\" id = \"incompatibility-stripping\"></a>J.1.1 Tree construction:\n          whitespace stripping</h4>\n\n          <p>Both in XSLT 1.0 and in XSLT 2.0, the XSLT\n          specification places no constraints on the way in which\n          source trees are constructed. For XSLT 2.0, however, the\n          <a href = \"#xpath-datamodel\">[Data Model]</a> specification\n          describes explicit processes for constructing a tree from\n          an Infoset or a PSVI, while also permitting other\n          processes to be used. The process described in <a href = \"#xpath-datamodel\">[Data Model]</a> has the effect of\n          stripping <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text nodes</a> from\n          elements declared to have element-only content. Although\n          the XSLT 1.0 specification did not preclude such\n          behavior, it differs from the way that most existing XSLT\n          1.0 implementations work. It is <span class = \"verb\">recommended</span> that an XSLT 2.0 implementation\n          wishing to provide maximum interoperability and backwards\n          compatibility should offer the user the option either to\n          construct source trees using the processes described in\n          <a href = \"#xpath-datamodel\">[Data Model]</a>, or\n          alternatively to retain or remove whitespace according to\n          the common practice of previous XSLT 1.0\n          implementations.</p>\n\n          <p>To write transformations that give the same result\n          regardless of the whitespace stripping applied during\n          tree construction, stylesheet authors can:</p>\n\n          <ul>\n            <li>\n              <p>use the <a href = \"#XSLT_element-strip-space\"><code>xsl:strip-space</code></a>\n              declaration to remove <a title = \"whitespace text node\" href = \"#dt-whitespace-text-node\">whitespace text\n              nodes</a> from elements having element-only content\n              (this has no effect if the whitespace has already\n              been stripped)</p>\n            </li>\n\n            <li>\n              <p>use instructions such as\n              <code>&lt;xsl:apply-templates select=\"*\"/&gt;</code>\n              that cause only the element children of the context\n              node to be processed, and not its text nodes.</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"incompatibility-serialization\" id = \"incompatibility-serialization\"></a>J.1.2 Changes in\n          Serialization Behavior</h4>\n\n          <p>The specification of the output of <a title = \"serialization\" href = \"#dt-serialization\">serialization</a> is more\n          prescriptive than in XSLT 1.0. For example, the\n          <code>html</code> output method is <span class = \"verb\">required</span> to detect invalid HTML characters.\n          Also, certain combinations of serialization parameters\n          are now defined to be errors. Furthermore, XSLT 1.0\n          implementations were allowed to add additional <a href = \"#XSLT_element-output\"><code>xsl:output</code></a> attributes\n          that modified the behavior of the serializer. Some such\n          extensions might be non-conformant under the stricter\n          rules of XSLT 2.0. For example, some XSLT 1.0 processors\n          provided an extension attribute to switch off the\n          creation of <code>meta</code> elements by the\n          <code>html</code> output method (a facility that is now\n          provided as standard). A conformant XSLT 2.0 processor is\n          not allowed to provide such extensions.</p>\n\n          <p>Where necessary, implementations <span class = \"verb\">may</span> provide additional serialization\n          methods designed to mimic more closely the behavior of\n          specific XSLT 1.0 serializers.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"backwards-compatibility-behavior\" id = \"backwards-compatibility-behavior\"></a>J.1.3 Backwards\n          Compatibility Behavior</h4>\n\n          <p>Some XSLT constructs behave differently under XSLT 2.0\n          depending on whether <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled. In these cases, the behavior may\n          be made compatible with XSLT 1.0 by ensuring that\n          <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled (which is done using the\n          <code>[xsl:]version</code> attribute).</p>\n\n          <p>These constructs are as follows:</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>If the <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>\n              instruction has no <code>separator</code> attribute,\n              and the value of the <code>select</code> expression\n              is a sequence of more than one item, then under XSLT\n              2.0 all items in the sequence will be output, space\n              separated, while in XSLT 1.0, all items after the\n              first will be discarded.</p>\n            </li>\n\n            <li>\n              <p>If the <a title = \"effective value\" href = \"#dt-effective-value\">effective value</a> of an\n              <a title = \"attribute value template\" href = \"#dt-attribute-value-template\">attribute value\n              template</a> is a sequence of more than one item,\n              then under XSLT 2.0 all items in the sequence will be\n              output, space separated, while in XSLT 1.0, all items\n              after the first will be discarded.</p>\n            </li>\n\n            <li>\n              <p>If the expression in the <code>value</code>\n              attribute of the <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n              instruction returns a sequence of more than one item,\n              then under XSLT 2.0 all items in the sequence will be\n              output, as defined by the <code>format</code>\n              attribute, but under XSLT 1.0, all items after the\n              first will be discarded. If the sequence is empty,\n              then under XSLT 2.0 nothing will be output (other\n              than a prefix and suffix if requested), but under\n              XSLT 1.0, the output is \"NaN\". If the first item in\n              the sequence cannot be converted to a number, then\n              XSLT 2.0 signals a non-recoverable error, while XSLT\n              1.0 outputs \"NaN\".</p>\n\n              <p>If the expression in the <code>value</code>\n              attribute of <a href = \"#XSLT_element-number\"><code>xsl:number</code></a> returns\n              an empty sequence or a sequence including non-numeric\n              values, an XSLT 2.0 processor may signal a\n              recoverable error; but with backwards compatibility\n              enabled, it outputs <code>NaN</code>.</p>\n            </li>\n\n            <li>\n              <p>If the <a title = \"atomize\" href = \"#dt-atomization\">atomized</a> value of the\n              <code>select</code> attribute of the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element is\n              a sequence of more than one item, then under XSLT 2.0\n              an error will be signaled, while in XSLT 1.0, all\n              items after the first will be discarded.</p>\n            </li>\n\n            <li>\n              <p>If an <a href = \"#XSLT_element-call-template\"><code>xsl:call-template</code></a>\n              instruction supplies a parameter that does not\n              correspond to any <a title = \"template parameter\" href = \"#dt-template-parameter\">template parameter</a> in\n              the template being called, then under XSLT 2.0 a\n              <a title = \"static error\" href = \"#dt-static-error\">static error</a> is signaled, but\n              under XSLT 1.0 the extra parameter is ignored.</p>\n            </li>\n\n            <li>\n              <p>It is normally a <a title = \"static error\" href = \"#dt-static-error\">static error</a> if an XPath\n              expression contains a call to an unknown function.\n              But when backwards compatible behavior is enabled,\n              this is a <a title = \"non-recoverable dynamic error\" href = \"#dt-nonrec-dynamic-error\">non-recoverable\n              dynamic error</a>, which occurs only if the function\n              call is actually evaluated.</p>\n            </li>\n\n            <li>\n              <p>An XSLT 1.0 processor compared the value of the\n              expression in the <code>use</code> attribute of\n              <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> to\n              the value supplied in the second argument of the\n              <a href = \"#function-key\"><code>key</code></a> function\n              by converting both to strings. An XSLT 2.0 processor\n              normally compares the values as supplied. The XSLT\n              1.0 behavior is retained if any of the <a href = \"#XSLT_element-key\"><code>xsl:key</code></a> elements\n              making up the <a title = \"key\" href = \"#dt-key\">key</a>\n              definition enables backwards-compatible behavior.</p>\n            </li>\n\n            <li>\n              <p>If no output method is explicitly requested, and\n              the first element node output appears to be an XHTML\n              document element, then under XSLT 2.0 the output\n              method defaults to XHTML; with backwards\n              compatibility enabled, the XML output method will be\n              used.</p>\n            </li>\n          </ol>\n\n          <p>Backwards compatible behavior also affects the results\n          of certain XPath expressions, as defined in <a href = \"#xpath20\">[XPath 2.0]</a>.</p>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"incompatibility-without-schema\" id = \"incompatibility-without-schema\"></a>J.1.4\n          Incompatibility in the Absence of a Schema</h4>\n\n          <p>If the source documents supplied as input to a\n          transformation contain no type information generated from\n          a schema then the known areas of incompatibility are as\n          follows. These apply whether or not <a title = \"backwards compatible behavior\" href = \"#dt-backwards-compatible-behavior\">backwards compatible\n          behavior</a> is enabled.</p>\n\n          <ol class = \"enumar\">\n            <li>\n              <p>A stylesheet that specifies a version number other\n              than 1.0 was defined in XSLT 1.0 to execute in\n              forwards-compatible mode; if such a stylesheet uses\n              features that are not defined in XSLT 2.0 then errors\n              may be signaled by an XSLT 2.0 processor that would\n              not be signaled by an XSLT 1.0 processor.</p>\n            </li>\n\n            <li>\n              <p>At XSLT 1.0 the <a href = \"#function-system-property\"><code>system-property</code></a>\n              function, when called with a first argument of\n              <code>\"xsl:version\"</code>, returned 1.0 as a number.\n              At XSLT 2.0 it returns \"2.0\" as a string. The\n              <span class = \"verb\">recommended</span> way of testing\n              this property is, for example, <code>&lt;xsl:if\n              test=\"number(system-property('xsl:version')) &amp;lt;\n              2.0\"&gt;</code>, which will work with either an XSLT\n              1.0 or an XSLT 2.0 processor.</p>\n            </li>\n\n            <li>\n              <p>At XSLT 2.0 it is an error to specify the\n              <code>mode</code> or <code>priority</code> attribute\n              on an <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n              element having no <code>match</code> attribute. At\n              XSLT 1.0 the attributes were silently ignored in this\n              situation.</p>\n            </li>\n\n            <li>\n              <p>When an <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n              or <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n              instruction causes a built-in template rule to be\n              invoked, then any parameters that are supplied are\n              automatically passed on to any further template\n              rules. This did not happen in XSLT 1.0.</p>\n            </li>\n\n            <li>\n              <p>In XSLT 1.0 it was a recoverable error to create\n              any node other than a text node while constructing\n              the value of an attribute, comment, or\n              processing-instruction; the recovery action was to\n              ignore the offending node and its content. In XSLT\n              2.0 this is no longer an error, and the specified\n              action is to atomize the node. An XSLT 2.0 processor\n              will therefore not produce the same results as an\n              XSLT 1.0 processor that took the error recovery\n              action.</p>\n            </li>\n\n            <li>\n              <p>XSLT 1.0 defined a number of recoverable error\n              conditions which in XSLT 2.0 have become\n              non-recoverable errors. Under XSLT 1.0, a stylesheet\n              that triggered such errors would fail under some XSLT\n              processors and succeed (or at any rate, continue to\n              completion) under others. Under XSLT 2.0 such a\n              stylesheet will fail under all processors. Notable\n              examples of such errors are constructing an element\n              or attribute with an invalid name, generating\n              attributes as children of a document node, and\n              generating an attribute of an element after\n              generating one or more children for the element. This\n              change has been made in the interests of\n              interoperability. In classifying such errors as\n              non-recoverable, the Working Group used the criterion\n              that no stylesheet author would be likely to write\n              code that deliberately triggered the error and relied\n              on the recovery action.</p>\n            </li>\n\n            <li>\n              <p>In XSLT 1.0, the semantics of tree construction\n              were described as being top-down, in XSLT 2.0 they\n              are described bottom up. In nearly all cases the end\n              result is the same. One difference arises in the case\n              of a tree that is constructed to contain an attribute\n              node within a document node within an element node,\n              using an instruction such as the following:</p>\n\n              <div class = \"example\">\n                <div class = \"exampleHeader\">\n                  <a name = \"d5e31247\" id = \"d5e31247\"></a>Example:\n                  Attribute within Document within Element\n                </div>\n\n                <div class = \"exampleInner\">\n                  <pre>\n&lt;xsl:template match=\"/\"&gt;\n  &lt;e&gt;\n    &lt;xsl:copy&gt;\n      &lt;xsl:attribute name=\"a\"&gt;5&lt;/xsl:attribute&gt;\n    &lt;/xsl:copy&gt;\n  &lt;/e&gt;\n&lt;/xsl:template&gt;\n</pre>\n                </div>\n              </div>\n\n              <p>In XSLT 1.0, the <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a> did\n              nothing, and the attribute <code>a</code> was then\n              attached to the element <code>e</code>. In XSLT 2.0,\n              an error occurs when attaching the attribute\n              <code>a</code> to the document node constructed by\n              <a href = \"#XSLT_element-copy\"><code>xsl:copy</code></a>,\n              because this happens before the resulting document\n              node is copied to the content of the constructed\n              element.</p>\n            </li>\n\n            <li>\n              <p>In XSLT 1.0 it was not an error for the\n              <code>namespace</code> attribute of <a href = \"#XSLT_element-element\"><code>xsl:element</code></a> or\n              <a href = \"#XSLT_element-attribute\"><code>xsl:attribute</code></a>\n              to evaluate to an invalid URI. Since many XML parsers\n              accept any string as a namespace name, this rarely\n              caused problems. The <a href = \"#xpath-datamodel\">[Data\n              Model]</a>, however, requires the name of a node to\n              be an <code>xs:QName</code>, and the namespace part\n              of an <code>xs:QName</code> is always an\n              <code>xs:anyURI</code>. It is therefore now defined\n              to be an error to create an element or attribute node\n              in a namespace whose name is not a valid instance of\n              <code>xs:anyURI</code>. <span>In practice, however,\n              implementations have some flexibility in how\n              rigorously they validate namespace URIs.</span></p>\n            </li>\n\n            <li>\n              <p>It is now a static error for the stylesheet to\n              contain two conflicting <a href = \"#XSLT_element-namespace-alias\"><code>xsl:namespace-alias</code></a>\n              declarations with the same import precedence.</p>\n            </li>\n\n            <li>\n              <p>It is now a static error for an <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>\n              instruction to contain both a <code>value</code>\n              attribute and a <code>level</code>,\n              <code>from</code>, or <code>count</code> attribute.\n              In XSLT 1.0 the <code>value</code> attribute took\n              precedence and the other attributes were silently\n              ignored.</p>\n            </li>\n\n            <li>\n              <p>When the <code>data-type</code> attribute of\n              <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> has\n              the value <code>number</code>, an XSLT 1.0 processor\n              would evaluate the sort key as a string, and convert\n              the result to a number. An XSLT 2.0 processor\n              evaluates the sort key as a number directly. This\n              only affects the outcome in cases where <span>in XSLT\n              1.0,</span> conversion of a number to a string and\n              then back to a number does not produce the original\n              number, as is the case for example with the number\n              <span>positive infinity</span>.</p>\n            </li>\n\n            <li>\n              <p>When the <code>data-type</code> attribute of\n              <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> is\n              omitted, an XSLT 1.0 processor would convert the sort\n              key values to strings, and sort them as strings. An\n              XSLT 2.0 processor will sort them according to their\n              actual dynamic type. This means, for example, that if\n              the sort key component specifies <code>&lt;xsl:sort\n              select=\"string-length(.)\"/&gt;</code>, an XSLT 2.0\n              processor will do a numeric sort where an XSLT 1.0\n              processor would have done an alphabetic sort.</p>\n            </li>\n\n            <li>\n              <p>When the <code>data-type</code> attribute of\n              <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> is\n              omitted or has the value \"text\", an XSLT 1.0\n              processor treats a sort key whose value is an empty\n              node-set as being equal to a sort key whose value is\n              a zero-length string. XSLT 2.0 sorts the empty\n              sequence before the zero-length string. This means\n              that if there are two sort keys, say\n              <code>&lt;xsl:sort select=\"@a\"/&gt;</code> and\n              <code>&lt;xsl:sort select=\"@b\"/&gt;</code>, then an\n              XSLT 1.0 processor will sort the element <code>&lt;x\n              b=\"2\"/&gt;</code> after <code>&lt;x a=\"\"\n              b=\"1\"/&gt;</code>, while an XSLT 2.0 processor will\n              produce the opposite ordering.</p>\n            </li>\n\n            <li>\n              <p>The specification of the <a href = \"#function-format-number\"><code>format-number</code></a>\n              function has been rewritten to remove the normative\n              dependency on the Java JDK 1.1 specification. The JDK\n              1.1 specification left aspects of the behavior\n              undefined; it is therefore likely that some cases\n              will give different results.</p>\n\n              <p>The ability to include literal text in the format\n              picture enclosed in single quotes has been removed;\n              any stylesheet that uses this feature will need to be\n              modified, for example to display the literal text\n              using the <a href = \"http://www.w3.org/TR/xpath-functions/#func-concat\"><code>\n              concat</code></a><sup><small>FO</small></sup>\n              function instead.</p>\n\n              <p>One specific difference between the XSLT 2.0\n              specification and a JDK-based implementation is in\n              the handling of the negative sub-picture. JDK\n              releases subsequent to JDK 1.1 have added the\n              provision: <em>If there is an explicit negative\n              subpattern [sub-picture], it serves only to specify\n              the negative prefix and suffix; the number of digits,\n              minimal digits, and other characteristics are all the\n              same as the positive pattern [sub-picture].</em> This\n              statement was not present in the JDK 1.1\n              specification, and therefore it is not necessarily\n              how every XSLT 1.0 implementation will behave, but it\n              does describe the behavior of some XSLT 1.0\n              implementations that use the JDK directly. This\n              behavior is not correct in XSLT 2.0: the negative\n              sub-picture <span class = \"verb\">must</span> be used as\n              written when the number is negative.</p>\n            </li>\n\n            <li>\n              <p>The recovery action has changed for the error\n              condition where the processor cannot handle the\n              fragment identifier in a URI passed as an argument to\n              the <a href = \"#function-document\"><code>document</code></a>\n              function. XSLT 1.0 specified that the entire URI\n              reference should be ignored. XSLT 2.0 specifies that\n              the fragment identifier should be ignored.</p>\n            </li>\n\n            <li>\n              <p>XSLT 1.0 allowed the URI returned by the <a href = \"#function-unparsed-entity-uri\"><code>unparsed-entity-uri</code></a>\n              function to be derived from some combination of the\n              system identifier and the public identifier in the\n              source XML. XSLT 2.0 returns the system identifier as\n              defined in the Infoset, resolved using the base URI\n              of the source document. A new function is provided to\n              return the public identifier.</p>\n            </li>\n\n            <li>\n              <p>The default priority of the pattern\n              <code>match=\"/\"</code> has changed from +0.5 to -0.5.\n              The effect of this is that if there are any template\n              rules that specify <code>match=\"/\"</code> with an\n              explicit user-specified priority between -0.5 and\n              +0.5, these will now be chosen in preference to a\n              template rule that specifies <code>match=\"/\"</code>\n              with no explicit priority; previously such rules\n              would never have been invoked.</p>\n            </li>\n\n            <li>\n              <p>In XSLT 1.0 it was possible to create a processing\n              instruction in the result tree whose string value\n              contained a leading space. However, such leading\n              spaces would be lost after serialization and parsing.\n              In XSLT 2.0, any leading spaces in the string value\n              of the processing instruction are removed at the time\n              the node is created.</p>\n            </li>\n\n            <li>\n              <p>At XSLT 1.0 there were no restrictions on the\n              namespaces that could be used for the names of\n              user-defined stylesheet objects such as keys,\n              variables, and named templates. In XSLT 2.0, certain\n              namespaces (for example the XSLT namespace and the\n              XML Schema namespace) are reserved.</p>\n            </li>\n\n            <li>\n              <p>An erratum to XSLT 1.0 specified what has become\n              known as \"sticky disable-output-escaping\":\n              specifically, that it should be possible to use\n              <code>disable-output-escaping</code> when writing a\n              node to a temporary tree, and that this information\n              would be retained for use when the same node was\n              later copied to a final result tree and serialized.\n              XSLT 2.0 no longer specifies this behavior (though it\n              permits it, at the discretion of the implementation).\n              The use cases for this facility have been satisfied\n              by a completely different mechanism, the concept of\n              character maps (see <a href = \"#character-maps\"><i>20.1\n              Character Maps</i></a>).</p>\n            </li>\n          </ol>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"compatibility-with-schema\" id = \"compatibility-with-schema\"></a>J.1.5 Compatibility in\n          the Presence of a Schema</h4>\n\n          <p>An XSLT 1.0 processor ignored all information about\n          data types that might be obtained from a schema\n          associated with a source document. An XSLT 2.0 processor\n          will take account of such information, <span>unless the\n          <code>input-type-annotations</code> attribute is set to\n          <code>strip</code></span>. This may lead to a number of\n          differences in behavior. This section attempts only to\n          give some examples of the kind of differences that might\n          be expected when schema information is made\n          available:</p>\n\n          <ul>\n            <li>\n              <p>Operations such as sorting will be sensitive to\n              the data type of the items being sorted. For example,\n              if the data type of a sort key component is defined\n              in the schema as a date, then in the absence of a\n              <code>data-type</code> attribute on the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element,\n              the sequence will be sorted in date order. With XSLT\n              1.0, the dates would be compared and sorted as\n              strings.</p>\n            </li>\n\n            <li>\n              <p>Certain operations that are permitted on untyped\n              data are not permitted on typed data, if the type of\n              the data is inappropriate for the operation.\n              <span>For example, the <a href = \"http://www.w3.org/TR/xpath-functions/#func-substring\">\n              <code>substring</code></a><sup><small>FO</small></sup>\n              function expects its first argument to be a\n              string</span>. It is acceptable to supply an untyped\n              value, which will be automatically converted to a\n              string, but it is not acceptable to supply a value\n              which has been annotated (as a result of schema\n              processing) as an integer or a date.</p>\n            </li>\n\n            <li>\n              <p>When an attribute value such as <code>colors=\"red\n              green blue\"</code> is processed without a schema, the\n              value is considered to be a single string. When\n              schema validation is applied, assuming the type is a\n              list type like <code>xs:NMTOKENS</code>, the value\n              will be treated as a sequence of three strings. This\n              affects the results of many operations, for example\n              comparison of the value with another string.\n              <span>With this attribute value, the expression\n              <code>contains(@colors, \"green\")</code> returns true\n              in XPath 1.0 and also in XPath 2.0 if\n              <code>input-type-annotations</code> is set to\n              <code>strip</code>. In XPath 2.0, with a schema-aware\n              processor and with\n              <code>input-type-annotations</code> set to\n              <code>preserve</code>, the same expression returns\n              false with backwards-compatibility enabled, and\n              raises an error with backwards compatibility\n              disabled.</span></p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"xpath-compatibility\" id = \"xpath-compatibility\"></a>J.1.6 XPath 2.0 Backwards\n          Compatibility</h4>\n\n          <p>Information about incompatibilities between XPath 2.0\n          and XPath 1.0 is included in <a href = \"#xpath20\">[XPath\n          2.0]</a></p>\n\n          <p>Incompatibilities in the specification of individual\n          functions in the <a title = \"core function\" href = \"#dt-core-function\">core function</a> library are listed\n          in <a href = \"#xpath-functions\">[Functions and\n          Operators]</a></p>\n        </div>\n      </div>\n\n      <div class = \"div2\">\n        <h3><a name = \"changes-since-1.0\" id = \"changes-since-1.0\"></a>J.2 New Functionality</h3>\n\n        <p>This section summarizes the new functionality offered in\n        XSLT 2.0, compared with XSLT 1.0. These are arranged in\n        three groups. Firstly, the changes that pervade the entire\n        text. Secondly, the major new features introduced. And\n        thirdly, a catalog of minor technical changes.</p>\n\n        <p>Changes since the <span>November 2006 Proposed\n        Recommendation</span> are listed separately: see <a href = \"#changes-2007-01\"><i>J.2.4 Changes since Proposed\n        Recommendation</i></a>.</p>\n\n        <p>In addition to these changes, reported <a href = \"http://www.w3.org/1999/11/REC-xslt-19991116-errata/\">errors</a>\n        in XSLT 1.0 have been fixed.</p>\n\n        <div class = \"div3\">\n          <h4><a name = \"pervasive-changes\" id = \"pervasive-changes\"></a>J.2.1 Pervasive changes</h4>\n\n          <ul>\n            <li>\n              <p>There has been significant re-arrangement of the\n              text. More terminology definitions have been\n              hyperlinked, and a glossary (see <a href = \"#glossary\"><i>C Glossary</i></a>) has been added.\n              Additional appendices summarize the error conditions\n              and implementation-defined features of the\n              specification.</p>\n            </li>\n\n            <li>\n              <p>The specifications of many features (for example\n              keys, <a href = \"#XSLT_element-number\"><code>xsl:number</code></a>, the\n              <a href = \"#function-format-number\"><code>format-number</code></a>\n              function, the <a href = \"#XSLT_element-import\"><code>xsl:import</code></a>\n              mechanism, and the description of attribute sets)\n              have been rewritten to make them clearer and more\n              precise.</p>\n            </li>\n\n            <li>\n              <p>Many changes have been made to support the\n              <span>XDM</span> data model, notably the support for\n              sequences as a replacement for the node-sets of XPath\n              1.0. This has affected the specification of elements\n              such as <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>,\n              <a href = \"#XSLT_element-value-of\"><code>xsl:value-of</code></a>,\n              and <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a>, and has\n              led to the introduction of new instructions such as\n              <a href = \"#XSLT_element-sequence\"><code>xsl:sequence</code></a>.</p>\n            </li>\n\n            <li>\n              <p>The processing model is described differently:\n              instead of instructions \"writing to the result tree\",\n              they now return sequences of values. This change is\n              largely one of terminology, but it also means that it\n              is now possible for XSLT stylesheets to manipulate\n              arbitrary sequences, including sequences containing\n              parentless element or attribute nodes.</p>\n            </li>\n\n            <li>\n              <p>The description of the evaluation context has been\n              changed. The concepts of current node and current\n              node list have been replaced by the XPath concepts of\n              context item, context position, and context size.</p>\n            </li>\n\n            <li>\n              <p>With the introduction of support for XML Schema\n              within XPath 2.0, XSLT now supports stronger data\n              typing, while retaining backwards compatibility. In\n              particular, the types of variables and parameters can\n              now be specified explicitly, and schema validation\n              can be invoked for result trees and for elements and\n              attributes in temporary trees.</p>\n            </li>\n\n            <li>\n              <p>The description of error handling has been\n              improved (see <a href = \"#errors\"><i>2.9 Error\n              Handling</i></a>). This formalizes the difference\n              between static and dynamic errors, and tightens the\n              rules that define which errors must be signaled under\n              which conditions.</p>\n            </li>\n\n            <li>\n              <p>The terms <a title = \"implementation-defined\" href = \"#dt-implementation-defined\">implementation-defined</a>\n              and <a title = \"implementation-dependent\" href = \"#dt-implementation-dependent\">implementation-dependent</a>\n              are now defined and used consistently, and a\n              checklist of implementation-defined features is\n              provided (see <a href = \"#implementation-defined-features\"><i>F Checklist of\n              Implementation-Defined Features</i></a>).</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"major-features\" id = \"major-features\"></a>J.2.2 Major Features</h4>\n\n          <ul>\n            <li>\n              <p>XSLT 2.0 is designed to work with XPath 2.0 rather\n              than XPath 1.0. This brings an enhanced data model\n              with a type system based on sequences of nodes or\n              atomic values, support for all the built-in types\n              defined in XML Schema, and a wide range of new\n              functions and operators.</p>\n            </li>\n\n            <li>\n              <p>The result tree fragment data-type is eliminated.\n              <a title = \"variable-binding element\" href = \"#dt-variable-binding-element\">A variable-binding\n              element</a> with content (and no <code>as</code>\n              attribute) now constructs a <a title = \"temporary tree\" href = \"#dt-temporary-tree\">temporary tree</a>, and the\n              value of the variable is the root node of this tree\n              (see <a href = \"#variable-values\"><i>9.3 Values of\n              Variables and Parameters</i></a>). With an\n              <code>as</code> attribute, a variable-binding element\n              may be used to construct an arbitrary sequence. These\n              features eliminate the need for the\n              <code>xx:node-set</code> extension function provided\n              by many XSLT 1.0 implementations.</p>\n            </li>\n\n            <li>\n              <p>Facilities are introduced for grouping of nodes\n              (the <a href = \"#XSLT_element-for-each-group\"><code>xsl:for-each-group</code></a>\n              instruction, and the <code>current-group()</code> and\n              <code>current-grouping-key()</code> functions). See\n              <a href = \"#grouping\"><i>14 Grouping</i></a></p>\n            </li>\n\n            <li>\n              <p>It is now possible to create user-defined\n              functions within the stylesheet, that can be called\n              from XPath expressions. See <a href = \"#stylesheet-functions\"><i>10.3 Stylesheet\n              Functions</i></a>.</p>\n            </li>\n\n            <li>\n              <p>A transformation is allowed to produce multiple\n              result trees. See <a href = \"#creating-result-trees\"><i>19.1 Creating Final\n              Result Trees</i></a>.</p>\n            </li>\n\n            <li>\n              <p>A new instruction <a href = \"#XSLT_element-analyze-string\"><code>xsl:analyze-string</code></a>\n              is provided to process text by matching it against a\n              regular expression.</p>\n            </li>\n\n            <li>\n              <p>It is possible to declare the types of variables\n              and parameters, and the result types of templates and\n              functions. The types may either be built-in types, or\n              user-defined types imported from a schema using a new\n              <a href = \"#XSLT_element-import-schema\"><code>xsl:import-schema</code></a>\n              declaration.</p>\n            </li>\n\n            <li>\n              <p>A stylesheet is able to attach type annotations to\n              elements and attributes in a result tree, and also in\n              temporary trees, and to make use of any type\n              annotations that exist in a source tree. Result trees\n              and temporary trees can be validated against a\n              schema.</p>\n            </li>\n\n            <li>\n              <p>A transformation may now be invoked by calling a\n              named template. This creates the potential for a\n              transformation to process large collections of input\n              documents. <span>The input to such a transformation\n              may be obtained using the <a href = \"http://www.w3.org/TR/xpath-functions/#func-collection\">\n              <code>collection</code></a><sup><small>FO</small></sup>\n              function defined in <a href = \"#xpath-functions\">[Functions and Operators]</a>, or\n              it may be supplied as a <a title = \"stylesheet parameter\" href = \"#dt-stylesheet-parameter\">stylesheet\n              parameter</a>.</span></p>\n            </li>\n\n            <li>\n              <p>Comparisons between values used for grouping, for\n              sorting, and for keys can be performed using the\n              rules for any supported data type, including the\n              ability to select named collations for performing\n              string comparison. These complement the new\n              facilities in XPath 2.0, which are also invoked\n              automatically when matching template rules.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"#XSLT_element-for-each\"><code>xsl:for-each</code></a>\n              instruction is able to process any sequence, not only\n              a sequence of nodes.</p>\n            </li>\n\n            <li>\n              <p>An XHTML output method has been added. The details\n              are described in <a href = \"#xslt-xquery-serialization\">[XSLT and XQuery\n              Serialization]</a>.</p>\n            </li>\n\n            <li>\n              <p>A <code>collation</code> attribute has been added\n              to the <a href = \"#XSLT_element-sort\"><code>xsl:sort</code></a> element to\n              allow sorting using a user-defined collation.</p>\n            </li>\n\n            <li>\n              <p>A new <a href = \"#XSLT_element-next-match\"><code>xsl:next-match</code></a>\n              is provided to allow multiple template rules to be\n              applied to the same source node.</p>\n            </li>\n\n            <li>\n              <p>A new <a href = \"#XSLT_element-character-map\"><code>xsl:character-map</code></a>\n              declaration is available to control the serialization\n              of individual characters. This is intended as a\n              replacement for some use-cases where\n              <code>disable-output-escaping</code> was previously\n              necessary.</p>\n            </li>\n\n            <li>\n              <p>Functions have been added for formatting dates and\n              times. See <a href = \"#format-date\"><i>16.5 Formatting\n              Dates and Times</i></a></p>\n            </li>\n\n            <li>\n              <p>The new facility of <a title = \"tunnel parameter\" href = \"#dt-tunnel-parameter\">tunnel parameters</a>\n              allows parameters to be set that affect an entire\n              phase of the transformation, without requiring them\n              to be passed explicitly in every template call.</p>\n            </li>\n\n            <li>\n              <p>Many instructions that previously constructed a\n              value using child instructions can now alternatively\n              construct the value using a <code>select</code>\n              attribute; and conversely, instructions that\n              previously required a <code>select</code> attribute\n              can now use child instructions.</p>\n            </li>\n\n            <li>\n              <p>The <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n              declaration can now declare a template rule that\n              applies to several different modes; and the <a href = \"#XSLT_element-apply-templates\"><code>xsl:apply-templates</code></a>\n              instruction can cause processing to continue in the\n              current mode.</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"minor-changes\" id = \"minor-changes\"></a>J.2.3\n          Minor Changes</h4>\n\n          <ul>\n            <li>\n              <p>Instead of allowing the output method complete\n              freedom to add namespace nodes, a process of\n              namespace fixup is applied to the result tree before\n              it is output; this same namespace fixup process is\n              also applied to documents constructed using\n              variable-binding elements with content (see <a href = \"#namespace-fixup\"><i>5.7.3 Namespace\n              Fixup</i></a>).</p>\n            </li>\n\n            <li>\n              <p>Support for XML Base has been added.</p>\n            </li>\n\n            <li>\n              <p>An <a href = \"#XSLT_element-apply-imports\"><code>xsl:apply-imports</code></a>\n              element is allowed to have parameters (see <a href = \"#apply-imports\"><i>6.7 Overriding Template\n              Rules</i></a> and <a href = \"#with-param\"><i>10.1.1\n              Passing Parameters to Templates</i></a>).</p>\n            </li>\n\n            <li>\n              <p><a title = \"extension function\" href = \"#dt-extension-function\">Extension functions</a> are\n              allowed to return external objects, which do not have\n              any of the builtin XPath types.</p>\n            </li>\n\n            <li>\n              <p>The specification for patterns (<a href = \"#patterns\"><i>5.5 Patterns</i></a>) has been revised\n              to align it with the new XPath grammar. The formal\n              semantics of patterns has been simplified: this\n              became possible because of the extra compositionality\n              now available in the expression grammar. The syntax\n              and semantics of patterns remains essentially\n              unchanged, except that XPath 2.0 expressions can be\n              used within predicates.</p>\n            </li>\n\n            <li>\n              <p>A backwards-compatible processing mode is\n              introduced. See <a href = \"#backwards\"><i>3.8\n              Backwards-Compatible Processing</i></a></p>\n            </li>\n\n            <li>\n              <p>The <a href = \"#function-system-property\"><code>system-property</code></a>\n              function now always returns a string. Several new\n              system properties have been defined. See <a href = \"#system-property\"><i>16.6.5\n              system-property</i></a>.</p>\n            </li>\n\n            <li>\n              <p>With <code>&lt;xsl:message\n              terminate=\"yes\"&gt;</code>, the processor now\n              <em><span class = \"verb\">must</span></em> terminate\n              processing. Previously the word <em><span class = \"verb\">should</span></em> was used. See <a href = \"#message\"><i>17 Messages</i></a>.</p>\n            </li>\n\n            <li>\n              <p>A number of new serialization parameters have been\n              introduced.</p>\n            </li>\n\n            <li>\n              <p>A new instruction <a href = \"#XSLT_element-namespace\"><code>xsl:namespace</code></a>\n              is available, for creating namespace nodes: see\n              <a href = \"#creating-namespace-nodes\"><i>11.7 Creating\n              Namespace Nodes</i></a>.</p>\n            </li>\n\n            <li>\n              <p>A new instruction <a href = \"#XSLT_element-perform-sort\"><code>xsl:perform-sort</code></a>\n              is available, for returning a sorted sequence.</p>\n            </li>\n\n            <li>\n              <p>A new <code>[xsl:]xpath-default-namespace</code>\n              attribute is available to define the default\n              namespace for unqualified names in an XPath\n              expression or XSLT pattern.</p>\n            </li>\n\n            <li>\n              <p>The attributes <code>[xsl:]version</code>,\n              <code>[xsl:]exclude-result-prefixes</code>, and\n              <code>[xsl:]extension-element-prefixes</code>, as\n              well as the new\n              <code>[xsl:]xpath-default-namespace</code> and\n              <code>[xsl:]default-collation</code>, can be used on\n              any <a title = \"XSLT element\" href = \"#dt-xslt-element\">XSLT element</a>, not only on\n              <a href = \"#XSLT_element-stylesheet\"><code>xsl:stylesheet</code></a>\n              and on literal result elements as before. In\n              particular, they can now be used on the <a href = \"#XSLT_element-template\"><code>xsl:template</code></a>\n              element.</p>\n            </li>\n\n            <li>\n              <p>A new <a href = \"#function-unparsed-text\"><code>unparsed-text</code></a>\n              function is introduced. It allows the contents of an\n              external text file to be read as a string.</p>\n            </li>\n\n            <li>\n              <p>Restrictions on the use of variables within\n              patterns and key definitions have been removed; in\n              their place a more general statement of the\n              restrictions preventing circularity has been\n              formulated. The <a href = \"#function-current\"><code>current</code></a> function\n              may also now be used within patterns.</p>\n            </li>\n\n            <li>\n              <p>The built-in templates for element and document\n              nodes now pass any supplied parameter values on to\n              the templates that they call.</p>\n            </li>\n\n            <li>\n              <p>A detailed specification of the <a href = \"#function-format-number\"><code>format-number</code></a>\n              function is now provided, removing the reliance on\n              specifications in Java JDK 1.1.</p>\n            </li>\n          </ul>\n        </div>\n\n        <div class = \"div3\">\n          <h4><a name = \"changes-2007-01\" id = \"changes-2007-01\"></a>J.2.4 Changes since Proposed\n          Recommendation</h4>\n\n          <p>The following changes have been made since publication\n          of the <a href = \"http://www.w3.org/TR/2006/PR-xslt20-20061121/\">Proposed\n          Recommendation</a>. Each change contains a reference to\n          its discussion and rationale, for example the relevant\n          issue number in the <a href = \"http://www.w3.org/Bugs/Public/\">W3C public Bugzilla\n          database</a>.</p>\n\n          <ul>\n            <li>\n              <p>In <a href = \"#analyze-string\"><i>15.1 The\n              xsl:analyze-string instruction</i></a>, the paragraph\n              describing the permitted contents of the instruction\n              has been clarified. (The sentence \"Both elements are\n              optional, and neither may appear more than once.\" was\n              considered awkward). This editorial change was made\n              in response to a <a href = \"http://lists.w3.org/Archives/Public/public-qt-comments/2006Jan/0083\">\n              public comment</a> made during the Candidate\n              Recommendation phase.</p>\n            </li>\n\n            <li>\n              <p>In <a href = \"#result-trees\"><i>19 Final Result\n              Trees</i></a> it was stated that the result of a\n              transformation consisted of zero or more result\n              trees; while <a href = \"#executing-a-transformation\"><i>2.4 Executing a\n              Transformation</i></a> stated (correctly) that it\n              consisted of one or more. The former statement has\n              been revised. A cross-reference between the two\n              sections has been added for clarification. (Bugzilla\n              4031)</p>\n            </li>\n\n            <li>\n              <p>Some trivial syntax errors in examples have been\n              fixed. (Bugzilla 4149)</p>\n            </li>\n          </ul>\n\n          <p>The <a href = \"http://www.w3.org/TR/2006/PR-xslt20-20061121/\">Proposed\n          Recommendation</a> contains a complete list of published\n          working drafts prepared during the development of this\n          specification, and a detailed history of changes may be\n          assembled by viewing the change log present in each\n          draft. For most of the drafts, a version is available in\n          which changes are visually highlighted.</p>\n        </div>\n      </div>\n    </div>\n  </div>",
		"searchableItems": [
			{
				"name": "xsl:analyze-string",
				"domId": "XSLT_element-analyze-string"
			},
			{
				"name": "xsl:apply-imports",
				"domId": "XSLT_element-apply-imports"
			},
			{
				"name": "xsl:apply-templates",
				"domId": "XSLT_element-apply-templates"
			},
			{
				"name": "xsl:attribute",
				"domId": "XSLT_element-attribute"
			},
			{
				"name": "xsl:attribute-set",
				"domId": "XSLT_element-attribute-set"
			},
			{
				"name": "xsl:call-template",
				"domId": "XSLT_element-call-template"
			},
			{
				"name": "xsl:character-map",
				"domId": "XSLT_element-character-map"
			},
			{
				"name": "xsl:choose",
				"domId": "XSLT_element-choose"
			},
			{
				"name": "xsl:comment",
				"domId": "XSLT_element-comment"
			},
			{
				"name": "xsl:copy",
				"domId": "XSLT_element-copy"
			},
			{
				"name": "xsl:copy-of",
				"domId": "XSLT_element-copy-of"
			},
			{
				"name": "xsl:decimal-format",
				"domId": "XSLT_element-decimal-format"
			},
			{
				"name": "xsl:document",
				"domId": "XSLT_element-document"
			},
			{
				"name": "xsl:element",
				"domId": "XSLT_element-element"
			},
			{
				"name": "xsl:fallback",
				"domId": "XSLT_element-fallback"
			},
			{
				"name": "xsl:for-each",
				"domId": "XSLT_element-for-each"
			},
			{
				"name": "xsl:for-each-group",
				"domId": "XSLT_element-for-each-group"
			},
			{
				"name": "xsl:function",
				"domId": "XSLT_element-function"
			},
			{
				"name": "xsl:if",
				"domId": "XSLT_element-if"
			},
			{
				"name": "xsl:import",
				"domId": "XSLT_element-import"
			},
			{
				"name": "xsl:import-schema",
				"domId": "XSLT_element-import-schema"
			},
			{
				"name": "xsl:include",
				"domId": "XSLT_element-include"
			},
			{
				"name": "xsl:key",
				"domId": "XSLT_element-key"
			},
			{
				"name": "xsl:matching-substring",
				"domId": "XSLT_element-matching-substring"
			},
			{
				"name": "xsl:message",
				"domId": "XSLT_element-message"
			},
			{
				"name": "xsl:namespace",
				"domId": "XSLT_element-namespace"
			},
			{
				"name": "xsl:namespace-alias",
				"domId": "XSLT_element-namespace-alias"
			},
			{
				"name": "xsl:next-match",
				"domId": "XSLT_element-next-match"
			},
			{
				"name": "xsl:non-matching-substring",
				"domId": "XSLT_element-non-matching-substring"
			},
			{
				"name": "xsl:number",
				"domId": "XSLT_element-number"
			},
			{
				"name": "xsl:otherwise",
				"domId": "XSLT_element-otherwise"
			},
			{
				"name": "xsl:output",
				"domId": "XSLT_element-output"
			},
			{
				"name": "xsl:output-character",
				"domId": "XSLT_element-output-character"
			},
			{
				"name": "xsl:param",
				"domId": "XSLT_element-param"
			},
			{
				"name": "xsl:perform-sort",
				"domId": "XSLT_element-perform-sort"
			},
			{
				"name": "xsl:preserve-space",
				"domId": "XSLT_element-preserve-space"
			},
			{
				"name": "xsl:processing-instruction",
				"domId": "XSLT_element-processing-instruction"
			},
			{
				"name": "xsl:result-document",
				"domId": "XSLT_element-result-document"
			},
			{
				"name": "xsl:sequence",
				"domId": "XSLT_element-sequence"
			},
			{
				"name": "xsl:sort",
				"domId": "XSLT_element-sort"
			},
			{
				"name": "xsl:strip-space",
				"domId": "XSLT_element-strip-space"
			},
			{
				"name": "xsl:stylesheet",
				"domId": "XSLT_element-stylesheet"
			},
			{
				"name": "xsl:template",
				"domId": "XSLT_element-template"
			},
			{
				"name": "xsl:text",
				"domId": "XSLT_element-text"
			},
			{
				"name": "xsl:transform",
				"domId": "XSLT_element-transform"
			},
			{
				"name": "xsl:value-of",
				"domId": "XSLT_element-value-of"
			},
			{
				"name": "xsl:variable",
				"domId": "XSLT_element-variable"
			},
			{
				"name": "xsl:when",
				"domId": "XSLT_element-when"
			},
			{
				"name": "xsl:with-param",
				"domId": "XSLT_element-with-param"
			}
		]
	}
]